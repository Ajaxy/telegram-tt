{"version":3,"file":"6930.a9a496915a407674cc15.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftManageButtons.module.scss?f41d","webpack://telegram-t/./src/components/modals/gift/UniqueGiftManageButtons.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModalResaleScreen.tsx","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.module.scss?8276","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.tsx","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.module.scss?c5a8","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.module.scss?3884","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.tsx","webpack://telegram-t/./src/components/modals/gift/locked/GiftLockedModal.tsx","webpack://telegram-t/./src/components/modals/gift/locked/GiftLockedModal.module.scss?1055","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferConfirmModal.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.tsx"],"sourcesContent":["import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/GoldStar.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): Complete<StateProps> => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"lastSection\":\"f749AI4g\",\"sectionTitle\":\"FF8gm7MP\",\"hint\":\"Rs8WXoOz\",\"tos\":\"Vu6blJk9\",\"topUpButton\":\"dc_DZoVF\",\"tonBalanceContainer\":\"lorbW9II\",\"tonBalance\":\"h2Fs3tOv\",\"tonIconBalance\":\"Ut6GidJP\",\"tonInUsd\":\"FdcdsB4l\",\"tonIconLogo\":\"_hCjjyEv\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiTypeCurrencyAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  const renderStarsAmount = () => {\n    return (\n      <>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined && balance.currency === STARS_CURRENCY_CODE\n          ? formatStarsAmount(lang, balance) : '…'}\n        {withAddButton && (\n          <BadgeButton\n            className={styles.addStarsButton}\n            onClick={() => openStarsBalanceModal({})}\n          >\n            <Icon\n              className={styles.addStarsIcon}\n              name=\"add\"\n            />\n          </BadgeButton>\n        )}\n      </>\n    );\n  };\n\n  const renderTonAmount = () => {\n    return (\n      <>\n        <Icon name=\"toncoin\" />\n        {balance !== undefined ? convertCurrencyFromBaseUnit(balance.amount, balance.currency) : '…'}\n      </>\n    );\n  };\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          {balance?.currency === TON_CURRENCY_CODE ? renderTonAmount() : renderStarsAmount()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction, ApiTypeCurrencyAmount } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer, shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeAmount(transaction.amount)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n  if (transaction.isPostsSearch) {\n    return lang('PostsSearchTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) {\n    if (transaction.amount.currency === TON_CURRENCY_CODE) {\n      return lang('TonGiftReceived');\n    }\n    return oldLang('StarsGiftReceived');\n  }\n  if (transaction.starGift) {\n    return isNegativeAmount(transaction.amount) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n    && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n\nexport function isNegativeAmount(currencyAmount: ApiTypeCurrencyAmount) {\n  if (currencyAmount.currency === STARS_CURRENCY_CODE) {\n    return isNegativeStarsAmount(currencyAmount);\n  }\n  return currencyAmount.amount < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    amount,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (!shouldUseCustomPeer(transaction)) {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isPostsSearch) {\n      title = getTransactionTitle(oldLang, lang, transaction);\n      description = undefined;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, amountColorClass)}\n        >\n          {formatStarsTransactionAmount(lang, amount)}\n        </span>\n        {amount.currency === STARS_CURRENCY_CODE && <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />}\n        {amount.currency === TON_CURRENCY_CODE && <Icon name=\"toncoin\" className={amountColorClass} />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  PAID_MESSAGES_PURPOSE,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit, convertTonToUsd, formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ParticlesHeader from '../common/ParticlesHeader.tsx';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  tonBalanceState?: GlobalState['ton'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n  tonUsdRate?: number;\n  tonTopupUrl: string;\n  animationLevel: AnimationLevel;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, tonBalanceState, canBuyPremium, shouldForceHeight, tonUsdRate, tonTopupUrl, animationLevel,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n    openUrl,\n  } = getActions();\n\n  const currency = modal?.currency || STARS_CURRENCY_CODE;\n  const currentState = currency === TON_CURRENCY_CODE ? tonBalanceState : starsBalanceState;\n  const { balance, history } = currentState || {};\n  const { subscriptions } = (currency === STARS_CURRENCY_CODE && starsBalanceState) || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && (starsBalanceState || tonBalanceState));\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const modalHeight = useMemo(() => {\n    const transactionCount = history?.all?.transactions.length || 0;\n    if (transactionCount === 1) {\n      return '35.5rem';\n    }\n    if (transactionCount === 2) {\n      return '39.25rem';\n    }\n    if (transactionCount === 3) {\n      return '43rem';\n    }\n    return '45rem';\n  }, [history?.all?.transactions.length]);\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  const renderStarsHeaderSection = () => {\n    return (\n      <>\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"gold\"\n          title={starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          description={renderText(\n            starsNeededText || oldLang('TelegramStarsInfo'),\n            ['simple_markdown', 'emoji'],\n          )}\n          isDisabled={!isOpen}\n        />\n        {canBuyPremium && !areBuyOptionsShown && (\n          <Button\n            className={styles.starButton}\n            onClick={showBuyOptions}\n            fluid\n          >\n            {oldLang('Star.List.BuyMoreStars')}\n          </Button>\n        )}\n        {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n          <Button\n            isText\n            noForcedUpperCase\n            className={styles.starButton}\n            fluid\n            onClick={openStarsGiftingPickerModalHandler}\n          >\n            {oldLang('TelegramStarsGift')}\n          </Button>\n        )}\n        {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n          <StarTopupOptionList\n            starsNeeded={starsNeeded}\n            options={starsBalanceState.topupOptions}\n            onClick={handleBuyStars}\n          />\n        )}\n      </>\n    );\n  };\n\n  const renderTonHeaderSection = () => {\n    const tonAmount = convertCurrencyFromBaseUnit(balance?.amount || 0, TON_CURRENCY_CODE);\n    return (\n      <>\n        <ParticlesHeader\n          model=\"speeding-diamond\"\n          color=\"blue\"\n          title={lang('CurrencyTon')}\n          description={lang('DescriptionAboutTon')}\n          isDisabled={!isOpen}\n        />\n        <div className={styles.tonBalanceContainer}>\n          <div className={styles.tonBalance}>\n            <Icon name=\"toncoin\" className={styles.tonIconBalance} />\n            {tonAmount}\n          </div>\n          {Boolean(tonUsdRate) && (\n            <span className={styles.tonInUsd}>\n              {`≈ ${formatCurrencyAsString(\n                convertTonToUsd(balance?.amount || 0, tonUsdRate, true),\n                'USD',\n                lang.code,\n              )}`}\n            </span>\n          )}\n        </div>\n        <Button\n          className={styles.topUpButton}\n          onClick={handleTonTopUp}\n          fluid\n        >\n          {lang('ButtonTopUpViaFragment')}\n        </Button>\n      </>\n    );\n  };\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n      isTon: currency === TON_CURRENCY_CODE,\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  const handleTonTopUp = useLastCallback(() => {\n    openUrl({ url: tonTopupUrl });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n      dialogStyle={`--modal-height: ${modalHeight}`}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {currency !== TON_CURRENCY_CODE && <BalanceBlock balance={balance} className={styles.modalBalance} />}\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          {currency === TON_CURRENCY_CODE ? renderTonHeaderSection() : renderStarsHeaderSection()}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {currency === TON_CURRENCY_CODE && (\n          <div className={styles.hint}>\n            {lang('TonModalHint')}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.lastSection}>\n              <Transition\n                name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const shouldForceHeight = modal?.currency === TON_CURRENCY_CODE\n      ? Boolean(global.ton?.history?.all?.transactions.length)\n      : Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      tonBalanceState: global.ton,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      tonUsdRate: global.appConfig.tonUsdRate,\n      tonTopupUrl: global.appConfig.tonTopupUrl,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarsBalanceModal));\n","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => Boolean(media.duration));\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {Boolean(disclaimerText) && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"manageButtons\":\"feHNN0j8\",\"manageButton\":\"biAUzmLA\",\"text\":\"hsDNs5hG\",\"icon\":\"APNjRx1K\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible,\n  ApiEmojiStatusType,\n  ApiSavedStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID } from '../../../config';\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './UniqueGiftManageButtons.module.scss';\n\ntype OwnProps = {\n  savedGift?: ApiSavedStarGift;\n};\n\ntype StateProps = {\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst UniqueGiftManageButtons = ({\n  savedGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps & StateProps) => {\n  const {\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    updateStarGiftPrice,\n    showNotification,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const gift = savedGift?.gift;\n  const isGiftUnique = gift?.type === 'starGiftUnique';\n  const giftResalePrice = isGiftUnique ? gift.resellPrice : undefined;\n\n  const global = getGlobal();\n  const modal = selectTabState(global).giftInfoModal;\n  const peerId = modal?.peerId;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((status) =>\n      status.type === 'collectible' && status.slug === starGiftUniqueSlug,\n    ) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currentUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n  const canTakeOff = starGiftUniqueSlug !== undefined && currentUniqueEmojiStatusSlug === starGiftUniqueSlug;\n  const canWear = Boolean(userCollectibleStatus) && !canTakeOff;\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    } else if (userCollectibleStatus) {\n      openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n    }\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift || !peerId) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnlist = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: {\n      currency: STARS_CURRENCY_CODE, amount: 0, nanos: 0,\n    } });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  return (\n    <div className={styles.manageButtons}>\n      <Button\n        color=\"transparentBlured\"\n        iconName=\"gift-transfer-inline\"\n        iconAlignment=\"top\"\n        iconClassName={styles.icon}\n        onClick={handleTransfer}\n        ariaLabel={lang('GiftInfoTransfer')}\n        noForcedUpperCase\n        fluid\n        className={styles.manageButton}\n      >\n        <span className={styles.text}>\n          {lang('GiftInfoTransfer')}\n        </span>\n      </Button>\n      {(canWear || !canTakeOff) && (\n        <Button\n          color=\"transparentBlured\"\n          iconName={canTakeOff ? 'crown-take-off' : 'crown-wear'}\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={canWear || canTakeOff ? handleWear : undefined}\n          disabled={!canWear && !canTakeOff}\n          ariaLabel={lang(canTakeOff ? 'GiftInfoTakeOff' : 'GiftInfoWear')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang(canTakeOff ? 'GiftInfoTakeOff' : 'GiftInfoWear')}\n          </span>\n        </Button>\n      )}\n      {!giftResalePrice && (\n        <Button\n          color=\"transparentBlured\"\n          iconName=\"sell\"\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={handleSell}\n          ariaLabel={lang('Sell')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang('Sell')}\n          </span>\n        </Button>\n      )}\n      {Boolean(giftResalePrice) && (\n        <Button\n          color=\"transparentBlured\"\n          iconName=\"unlist\"\n          iconAlignment=\"top\"\n          iconClassName={styles.icon}\n          onClick={handleUnlist}\n          ariaLabel={lang('GiftInfoUnlist')}\n          noForcedUpperCase\n          fluid\n          className={styles.manageButton}\n        >\n          <span className={styles.text}>\n            {lang('GiftInfoUnlist')}\n          </span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(UniqueGiftManageButtons));\n","import type { TeactNode } from '@teact';\nimport { memo, useMemo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiSavedStarGift,\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\nimport UniqueGiftManageButtons from './UniqueGiftManageButtons';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: TeactNode;\n  subtitlePeer?: ApiPeer;\n  className?: string;\n  resellPrice?: ApiTypeCurrencyAmount;\n  showManageButtons?: boolean;\n  savedGift?: ApiSavedStarGift;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  subtitlePeer,\n  className,\n  resellPrice,\n  showManageButtons,\n  savedGift,\n}: OwnProps) => {\n  const {\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const [isGiftHover, markGiftHover, unmarkGiftHover] = useFlag(false);\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root,\n      isGiftHover && 'interactive-gift',\n      showManageButtons && styles.withManageButtons,\n      className)}\n    >\n      <Transition\n        className={styles.transition}\n        slideClassName={buildClassName(styles.transitionSlide)}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n          noLoop={!isGiftHover}\n          onMouseEnter={!IS_TOUCH_ENV ? markGiftHover : undefined}\n          onMouseLeave={!IS_TOUCH_ENV ? unmarkGiftHover : undefined}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {Boolean(subtitle) && (\n        <div\n          className={buildClassName(styles.subtitle, subtitlePeer && styles.subtitleBadge)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n          onClick={() => {\n            if (subtitlePeer) {\n              openChat({ id: subtitlePeer.id });\n            }\n          }}\n        >\n          {subtitle}\n        </div>\n      )}\n      {savedGift && showManageButtons && (\n        <UniqueGiftManageButtons\n          savedGift={savedGift}\n        />\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          {resellPrice.currency === 'XTR' && <StarIcon type=\"gold\" size=\"middle\" />}\n          {resellPrice.currency === 'TON' && <Icon name=\"toncoin\" />}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"withManageButtons\":\"QcTw5OSp\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"subtitleBadge\":\"V7kDVPLm\",\"amount\":\"zTVWZg63\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\",\"avatar\":\"hcrszlpT\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../../config';\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, amount, isGiftUpgrade, starGift, isGiftResale,\n      starRefCommision,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n      && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId ? getMessageLink(peer, undefined, giveawayPostId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker && !transaction.isPostsSearch;\n    const avatarPeer = !photo ? ((!shouldUseCustomPeer(transaction) && peer) || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.amount}\n        />\n      </div>\n    );\n\n    const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar\n            className={styles.avatar}\n            peer={avatarPeer}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n        )}\n        {!sticker && !transaction.isPostsSearch && (\n          <InteractiveSparkles\n            className={buildClassName(styles.starsBackground)}\n            color=\"gold\"\n            onRequestAnimation={handleRequestAnimation}\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n          />\n        )}\n        {Boolean(title) && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, amountColorClass)}\n          >\n            {formatStarsTransactionAmount(lang, amount)}\n          </span>\n          {amount.currency === STARS_CURRENCY_CODE && <StarIcon type=\"gold\" size=\"middle\" />}\n          {amount.currency === 'TON' && <Icon name=\"toncoin\" className={amountColorClass} />}\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {Boolean(transaction.paidMessages && transaction.starRefCommision && paidMessageCommission) && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission! / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeAmount(transaction.amount)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeAmount(amount) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    if (!transaction.isPostsSearch) {\n      tableData.push([\n        peerLabel,\n        peerId ? { chatId: peerId } : toName || '',\n      ]);\n    }\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.amount.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink && transaction.amount.currency === STARS_CURRENCY_CODE) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.amount, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker,\n    paidMessageCommission, handleRequestAnimation]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig.starsPaidMessageCommissionPermille;\n\n    const currencyAmount = modal?.transaction.amount;\n    const starsGiftSticker = modal?.transaction.isGift\n      ? (currencyAmount?.currency === STARS_CURRENCY_CODE ? selectGiftStickerForStars(global, currencyAmount?.amount)\n        : selectGiftStickerForTon(global, currencyAmount?.amount)) : undefined;\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\",\"avatarWrapper\":\"wuTMXDP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar\n            peer={!photo ? peer : undefined}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <InteractiveSparkles\n          className={buildClassName(styles.starsBackground)}\n          color=\"gold\"\n          onRequestAnimation={handleRequestAnimation}\n          centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  const floatingBadgeRef = useRef<HTMLDivElement>();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />)}\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift && gift.type === 'starGift';\n  const isPremiumGift = 'months' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (isPremiumGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    if (isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName || undefined,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n    return undefined;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars, isPremiumGift]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    if (isPremiumGift) {\n      openInvoice({\n        type: 'giftcode',\n        userIds: [peerId],\n        currency: gift.currency,\n        amount: gift.amount,\n        option: gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n    }\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : isPremiumGift ? formatCurrency(lang, gift.amount, gift.currency) : undefined;\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && Boolean(gift.availabilityRemains) && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  if ((!isStarGift && !isPremiumGift) || !localMessage) return;\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : isPremiumGift ? gift.months : undefined}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"transferBadge\":\"nqN62arv\",\"star\":\"DvJLTVFU\",\"premiumRequired\":\"NBYIITte\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\",\"radialPattern\":\"Nkotr8Q4\",\"stickerWrapper\":\"rUSoeQXb\",\"lockIcon\":\"kwuipwV7\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): Complete<StateProps> => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import { memo, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGift, ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\n\nimport Icon from '../../common/icons/Icon'; ;\nimport { getGiftAttributes, getStickerFromGift } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGift, target: 'original' | 'resell') => void;\n  isResale?: boolean;\n  withTransferBadge?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({\n  gift, observeIntersection, onClick, isResale, isCurrentUserPremium, withTransferBadge,\n}: OwnProps & StateProps) {\n  const { openGiftInfoModal, openPremiumModal, showNotification, checkCanSendGift } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  function getPriceAmount(amounts?: ApiTypeCurrencyAmount[]) {\n    if (!amounts) return { amount: 0, currency: STARS_CURRENCY_CODE };\n\n    if (gift.type === 'starGiftUnique' && gift.resaleTonOnly) {\n      const tonAmount = amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n      if (tonAmount) return tonAmount;\n    }\n\n    const starsAmount = amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n    return starsAmount;\n  }\n\n  const lang = useLang();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const sticker = getStickerFromGift(gift);\n  const isGiftUnique = gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n  const regularGift = !isGiftUnique ? gift : undefined;\n\n  const priceInfo = !isGiftUnique\n    ? { amount: regularGift?.stars || 0, currency: STARS_CURRENCY_CODE }\n    : getPriceAmount(uniqueGift?.resellPrice);\n  const priceCurrency = priceInfo?.currency || STARS_CURRENCY_CODE;\n  const resellMinStars = regularGift?.resellMinStars;\n  const formattedPrice = !isGiftUnique && isResale && resellMinStars\n    ? lang.number(resellMinStars) + '+' : priceInfo?.amount || 0;\n  const isLimited = !isGiftUnique && Boolean(regularGift?.isLimited);\n  const isSoldOut = !isGiftUnique && Boolean(regularGift?.isSoldOut);\n  const isPremiumRequired = Boolean(gift?.requirePremium);\n  const isUserLimitReached = Boolean(regularGift?.limitedPerUser && !regularGift?.perUserRemains);\n  const perUserTotal = regularGift?.perUserTotal;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut && !isResale) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    if (isUserLimitReached) {\n      showNotification({\n        message: lang('NotificationGiftsLimit2', {\n          count: perUserTotal,\n        }, {\n          pluralValue: perUserTotal!,\n          withMarkdown: true,\n          withNodes: true,\n        }),\n      });\n      return;\n    }\n\n    if (isPremiumRequired && !isCurrentUserPremium) {\n      openPremiumModal({\n        gift,\n      });\n      return;\n    }\n\n    if (isLocked) {\n      checkCanSendGift({\n        gift,\n        onSuccess: () => onClick(gift, isResale ? 'resell' : 'original'),\n      });\n      return;\n    }\n\n    onClick(gift, isResale ? 'resell' : 'original');\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternIcon={pattern.sticker}\n        ringsCount={1}\n        ovalFactor={1}\n      />\n    );\n  }, [gift]);\n\n  const giftNumber = isGiftUnique ? gift.number : 0;\n  const isLocked = Boolean(gift.type === 'starGift' && gift.lockedUntilDate);\n\n  const giftRibbon = useMemo(() => {\n    if (isGiftUnique) {\n      const { backdrop } = getGiftAttributes(gift) || {};\n      if (!backdrop) {\n        return undefined;\n      }\n      return (\n        <GiftRibbon\n          color={[backdrop.centerColor, backdrop.edgeColor]}\n          text={\n            lang('GiftSavedNumber', { number: giftNumber })\n          }\n        />\n      );\n    }\n    if (isResale) {\n      return <GiftRibbon color=\"green\" text={lang('GiftRibbonResale')} />;\n    }\n    if (isSoldOut) {\n      return <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />;\n    }\n    if (isPremiumRequired) {\n      return <GiftRibbon color=\"orange\" text={lang('LimitPremium')} />;\n    }\n    if (isLimited) {\n      return <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />;\n    }\n    return undefined;\n  }, [isGiftUnique, isResale, gift, isSoldOut, isLimited, lang, giftNumber, isPremiumRequired]);\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    const visible = entry.isIntersecting;\n    setIsVisible(visible);\n  });\n\n  const badgeContent = useMemo(() => {\n    if (withTransferBadge) {\n      return lang('GiftTransferTitle');\n    }\n\n    if (priceCurrency === TON_CURRENCY_CODE) {\n      return formatTonAsIcon(lang, formattedPrice || 0, {\n        shouldConvertFromNanos: true,\n        className: styles.star,\n      });\n    }\n\n    return formatStarsAsIcon(lang, formattedPrice || 0, {\n      asFont: true,\n      className: styles.star,\n    });\n  }, [withTransferBadge, priceCurrency, formattedPrice, lang]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'interactive-gift',\n        styles.container,\n        styles.starGift,\n        'starGiftItem',\n        isPremiumRequired && styles.premiumRequired,\n      )}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      <Button\n        className={buildClassName(\n          styles.buy,\n          withTransferBadge && styles.transferBadge,\n        )}\n        nonInteractive\n        size=\"tiny\"\n        color={isGiftUnique ? 'bluredStarsBadge' : 'stars'}\n        withSparkleEffect={isVisible && !withTransferBadge}\n        pill\n        fluid\n      >\n        {badgeContent}\n      </Button>\n      {giftRibbon}\n      {isLocked && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n    };\n  })(GiftItemStar),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"resaleScreenRoot\":\"Vce_TsJO\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"resaleStarGiftsContainer\":\"RSFcSNGL\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"resaleHeader\":\"cJRBgg9B\",\"resaleHeaderContentContainer\":\"OXYQmfGK\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"resaleHeaderText\":\"bp_KPx8I\",\"commonHeaderText\":\"ybZo03if\",\"resaleHeaderDescription\":\"XefHUFm1\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"avatar\":\"_3hY4vIep\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\",\"notFoundGiftsRoot\":\"UqnRlJ1n\",\"notFoundGiftsDescription\":\"g0VbwIG_\",\"notFoundGiftsLink\":\"j2zPEQr8\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Transition from '../../ui/Transition';\nimport GiftItemStar from './GiftItemStar';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  onGiftClick: (gift: ApiStarGift) => void;\n};\n\ntype StateProps = {\n  gift?: ApiStarGift;\n  resellGifts?: ApiStarGift[];\n  filter: ResaleGiftsFilterOptions;\n  areGiftsAllLoaded?: boolean;\n  areGiftsLoading?: boolean;\n  updateIteration: number;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst GiftModalResaleScreen: FC<OwnProps & StateProps> = ({\n  resellGifts,\n  gift,\n  filter,\n  areGiftsAllLoaded,\n  areGiftsLoading,\n  updateIteration,\n  onGiftClick,\n}) => {\n  const {\n    loadResaleGifts,\n    updateResaleGiftsFilter,\n  } = getActions();\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const resellGiftsIds = useMemo(() => {\n    return resellGifts?.map((g) => g.id);\n  }, [resellGifts]);\n\n  const hasFilter = Boolean(filter?.modelAttributes?.length\n    || filter?.patternAttributes?.length || filter?.backdropAttributes?.length);\n\n  const handleLoadMoreResellGifts = useLastCallback(() => {\n    if (gift) {\n      const giftId = 'regularGiftId' in gift\n        ? gift.regularGiftId\n        : gift.id;\n      loadResaleGifts({ giftId });\n    }\n  });\n\n  const isGiftsEmpty = Boolean(!resellGifts || resellGifts.length === 0);\n\n  const [viewportIds, onLoadMore] = useInfiniteScroll(\n    handleLoadMoreResellGifts,\n    resellGiftsIds,\n    !gift,\n    RESALE_GIFTS_LIMIT,\n  );\n\n  const { observe } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n      backdropAttributes: [],\n      patternAttributes: [],\n    } });\n  });\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className={styles.notFoundGiftsRoot}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className={styles.notFoundGiftsDescription}>\n          {lang('ResellGiftsNoFound')}\n        </div>\n        {hasFilter && (\n          <Link\n            className={styles.notFoundGiftsLink}\n            onClick={handleResetGiftsFilter}\n          >\n            {lang('ResellGiftsClearFilters')}\n          </Link>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div ref={scrollerRef} className={buildClassName(styles.resaleScreenRoot, 'custom-scroll')}>\n      <Transition\n        name=\"zoomFade\"\n        activeKey={updateIteration}\n      >\n        {isGiftsEmpty && areGiftsAllLoaded && renderNothingFoundGiftsWithFilter()}\n        <InfiniteScroll\n          className={buildClassName(styles.resaleStarGiftsContainer)}\n          items={viewportIds}\n          onLoadMore={onLoadMore}\n          itemSelector=\".starGiftItem\"\n          noFastList\n          preloadBackwards={RESALE_GIFTS_LIMIT}\n          scrollContainerClosest={`.${styles.resaleScreenRoot}`}\n        >\n          {resellGifts?.map((g) => (\n            <GiftItemStar\n              key={g.id}\n              gift={g}\n              observeIntersection={observe}\n              isResale\n              onClick={onGiftClick}\n            />\n          ))}\n        </InfiniteScroll>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    starGifts,\n  } = global;\n\n  const { resaleGifts } = selectTabState(global);\n  const gift = resaleGifts?.giftId ? starGifts?.byId[resaleGifts.giftId] : undefined;\n  const filter = resaleGifts.filter;\n  const areGiftsAllLoaded = resaleGifts.isAllLoaded;\n  const areGiftsLoading = resaleGifts.isLoading;\n  const updateIteration = resaleGifts.updateIteration;\n\n  return {\n    resellGifts: resaleGifts.gifts,\n    gift,\n    filter,\n    areGiftsAllLoaded,\n    areGiftsLoading,\n    updateIteration,\n  };\n})(GiftModalResaleScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KLFLR9ji\",\"thumb\":\"fCL5rY2D\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport StickerView from '../../common/StickerView';\n\nimport styles from './ResaleGiftMenuAttributeSticker.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  type: 'model' | 'pattern';\n  sticker: ApiSticker;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst ATTRIBUTE_STICKER_SIZE = 1.5 * REM;\n\nconst ResaleGiftMenuAttributeSticker: FC<StateProps & OwnProps> = ({\n  className,\n  type,\n  sticker,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  theme,\n}) => {\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const customColor = useDynamicColorListener(stickerRef, undefined, type !== 'pattern');\n\n  return (\n    <div\n      ref={stickerRef}\n      className={buildClassName(styles.root, className)}\n      style={`width: ${ATTRIBUTE_STICKER_SIZE}px; height: ${ATTRIBUTE_STICKER_SIZE}px`}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={sticker}\n        size={ATTRIBUTE_STICKER_SIZE}\n        shouldPreloadPreview\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        thumbClassName={styles.thumb}\n        customColor={customColor}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    theme: selectTheme(global),\n  };\n})(ResaleGiftMenuAttributeSticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_VgmQnUg\",\"buttonsContainer\":\"IDlp6U6g\",\"itemIcon\":\"yuctLnuR\",\"sticker\":\"VT562JS0\",\"backdropAttributeMenuItemText\":\"D50wFfRL\",\"menuItemStickerText\":\"THcGWXSA\",\"menuItemText\":\"L6EVE2Ux\",\"backdrop\":\"A29QNxKb\",\"menuItemIcon\":\"GL4rVsev\",\"item\":\"qiYcBOYc\",\"menuContentContainer\":\"EDsBn29z\",\"menu\":\"ISaNdBwd\",\"left\":\"e4Kkh_MR\",\"right\":\"Kz_nCGC3\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeCounter,\n  ApiStarGiftAttributeIdBackdrop,\n  ApiStarGiftAttributeIdPattern,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  StarGiftAttributeIdModel,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions, ResaleGiftsSortType } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ResaleGiftMenuAttributeSticker from './ResaleGiftMenuAttributeSticker';\n\nimport styles from './GiftResaleFilters.module.scss';\n\ntype OwnProps = {\n  dialogRef: ElementRef<HTMLDivElement>;\n};\ntype StateProps = {\n  filter: ResaleGiftsFilterOptions;\n  attributes?: ApiStarGiftAttribute[];\n  counters?: ApiStarGiftAttributeCounter[];\n};\n\nconst GiftResaleFilters: FC<StateProps & OwnProps> = ({\n  attributes,\n  counters,\n  filter,\n  dialogRef,\n}) => {\n  const lang = useLang();\n  const {\n    updateResaleGiftsFilter,\n  } = getActions();\n\n  const [searchModelQuery, setSearchModelQuery] = useState('');\n  const [searchBackdropQuery, setSearchBackdropQuery] = useState('');\n  const [searchPatternQuery, setSearchPatternQuery] = useState('');\n  const filteredAttributes = useMemo(() => {\n    const map: {\n      model: ApiStarGiftAttributeModel[];\n      pattern: ApiStarGiftAttributePattern[];\n      backdrop: ApiStarGiftAttributeBackdrop[];\n    } = {\n      model: [],\n      pattern: [],\n      backdrop: [],\n    };\n\n    for (const counter of counters ?? []) {\n      const { attribute } = counter;\n\n      if (!counter.count) {\n        continue;\n      }\n\n      const found = attributes?.find((attr) => {\n        if (attr.type === 'backdrop' && attribute.type === 'backdrop') {\n          return attr.backdropId === attribute.backdropId;\n        }\n\n        if (attr.type === 'model' && attribute.type === 'model') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        if (attr.type === 'pattern' && attribute.type === 'pattern') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        return false;\n      });\n\n      if (found?.type === 'backdrop') {\n        map.backdrop.push(found);\n      }\n      if (found?.type === 'model') {\n        map.model.push(found);\n      }\n      if (found?.type === 'pattern') {\n        map.pattern.push(found);\n      }\n    }\n\n    return map;\n  }, [attributes, counters]);\n\n  const filteredAndSearchedAttributes = useMemo(() => {\n    const filterBySearch = <T extends { name?: string }>(items: T[], query: string): T[] => {\n      if (!query.trim()) return items;\n\n      return items.filter(\n        (item): item is T => Boolean(item.name?.toLowerCase().includes(query.toLowerCase())),\n      );\n    };\n\n    return {\n      model: filterBySearch(filteredAttributes.model, searchModelQuery),\n      pattern: filterBySearch(filteredAttributes.pattern, searchPatternQuery),\n      backdrop: filterBySearch(filteredAttributes.backdrop, searchBackdropQuery),\n    };\n  }, [filteredAttributes, searchModelQuery, searchBackdropQuery, searchPatternQuery]);\n\n  // Sort Menu\n  const sortMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isSortContextMenuOpen,\n    contextMenuAnchor: sortContextMenuAnchor,\n    handleContextMenu: handleSortContextMenu,\n    handleContextMenuClose: handleSortContextMenuClose,\n    handleContextMenuHide: handleSortContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getSortMenuElement = useLastCallback(() => sortMenuRef.current!);\n\n  // Model Menu\n  const modelMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isModelContextMenuOpen,\n    contextMenuAnchor: modelContextMenuAnchor,\n    handleContextMenu: handleModelContextMenu,\n    handleContextMenuClose: handleModelContextMenuClose,\n    handleContextMenuHide: handleModelContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getModelMenuElement = useLastCallback(\n    () => modelMenuRef.current!,\n  );\n\n  // Backdrop Menu\n  const backdropMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isBackdropContextMenuOpen,\n    contextMenuAnchor: backdropContextMenuAnchor,\n    handleContextMenu: handleBackdropContextMenu,\n    handleContextMenuClose: handleBackdropContextMenuClose,\n    handleContextMenuHide: handleBackdropContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getBackdropMenuElement = useLastCallback(() => backdropMenuRef.current!);\n\n  // Pattern Menu\n  const patternMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isPatternContextMenuOpen,\n    contextMenuAnchor: patternContextMenuAnchor,\n    handleContextMenu: handlePatternContextMenu,\n    handleContextMenuClose: handlePatternContextMenuClose,\n    handleContextMenuHide: handlePatternContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getPatternMenuElement = useLastCallback(() => patternMenuRef.current!);\n\n  const SortMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n    = useMemo(() => {\n      const sortType = filter.sortType;\n      return ({ onTrigger, isOpen: isMenuOpen }) => (\n        <div\n          className={styles.item}\n          onClick={onTrigger}\n        >\n          {sortType === 'byDate' && lang('ValueGiftSortByDate')}\n          {sortType === 'byNumber' && lang('ValueGiftSortByNumber')}\n          {sortType === 'byPrice' && lang('ValueGiftSortByPrice')}\n          <Icon\n            name=\"dropdown-arrows\"\n            className={styles.itemIcon}\n          />\n        </div>\n      );\n    }, [lang, filter]);\n\n  const ModelMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n    = useMemo(() => {\n      const attributesCount = filter?.modelAttributes?.length || 0;\n      return ({ onTrigger, isOpen: isMenuOpen }) => (\n        <div\n          className={styles.item}\n          onClick={onTrigger}\n        >\n          {attributesCount === 0 && lang('GiftAttributeModel')}\n          {attributesCount > 0\n            && lang('GiftAttributeModelPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n          <Icon\n            name=\"dropdown-arrows\"\n            className={styles.itemIcon}\n          />\n        </div>\n      );\n    }, [lang, filter]);\n  const BackdropMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n    = useMemo(() => {\n      const attributesCount = filter?.backdropAttributes?.length || 0;\n      return ({ onTrigger, isOpen: isMenuOpen }) => (\n        <div\n          className={styles.item}\n          onClick={onTrigger}\n        >\n          {attributesCount === 0 && lang('GiftAttributeBackdrop')}\n          {attributesCount > 0\n            && lang('GiftAttributeBackdropPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n          <Icon\n            name=\"dropdown-arrows\"\n            className={styles.itemIcon}\n          />\n        </div>\n      );\n    }, [lang, filter]);\n  const PatternMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n    = useMemo(() => {\n      const attributesCount = filter?.patternAttributes?.length || 0;\n      return ({ onTrigger, isOpen: isMenuOpen }) => (\n        <div\n          className={styles.item}\n          onClick={onTrigger}\n        >\n          {attributesCount === 0 && lang('GiftAttributeSymbol')}\n          {attributesCount > 0\n            && lang('GiftAttributeSymbolPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n          <Icon\n            name=\"dropdown-arrows\"\n            className={styles.itemIcon}\n          />\n        </div>\n      );\n    }, [lang, filter]);\n\n  const handleSortMenuItemClick = useLastCallback((type: ResaleGiftsSortType) => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      sortType: type,\n    } });\n  });\n\n  const handleSelectedAllModelsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n    } });\n  });\n  const handleSelectedAllPatternsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: [],\n    } });\n  });\n  const handleSelectedAllBackdropsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: [],\n    } });\n  });\n\n  const handleModelMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeModel) => {\n    if (!counters) return;\n    const modelAttributes = filter.modelAttributes || [];\n    const modelAttribute\n      = counters.find((counter): counter is ApiStarGiftAttributeCounter<StarGiftAttributeIdModel> =>\n        counter.attribute.type === 'model' && counter.attribute.documentId === attribute.sticker.id,\n      )?.attribute;\n\n    if (!modelAttribute) return;\n\n    const isActive = modelAttributes.some((item) => item.documentId === modelAttribute.documentId);\n    const updatedAttributes = isActive\n      ? modelAttributes.filter((item) => item.documentId !== modelAttribute.documentId)\n      : [...modelAttributes, modelAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: updatedAttributes,\n    } });\n  });\n\n  const handlePatternMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributePattern) => {\n    if (!counters) return;\n    const patternAttributes = filter.patternAttributes || [];\n    const patternAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdPattern> =>\n        counter.attribute.type === 'pattern' && counter.attribute.documentId === attribute.sticker.id,\n    )?.attribute;\n\n    if (!patternAttribute) return;\n\n    const isActive = patternAttributes.some((item) => item.documentId === patternAttribute.documentId);\n    const updatedAttributes = isActive\n      ? patternAttributes.filter((item) => item.documentId !== patternAttribute.documentId)\n      : [...patternAttributes, patternAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: updatedAttributes,\n    } });\n  });\n\n  const handleBackdropMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeBackdrop) => {\n    if (!counters) return;\n    const backdropAttributes = filter.backdropAttributes || [];\n    const backdropAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdBackdrop> =>\n        counter.attribute.type === 'backdrop' && counter.attribute.backdropId === attribute.backdropId,\n    )?.attribute;\n\n    if (!backdropAttribute) return;\n\n    const isActive = backdropAttributes.some((item) => item.backdropId === backdropAttribute.backdropId);\n    const updatedAttributes = isActive\n      ? backdropAttributes.filter((item) => item.backdropId !== backdropAttribute.backdropId)\n      : [...backdropAttributes, backdropAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: updatedAttributes,\n    } });\n  });\n\n  function renderSortMenuItems() {\n    return (\n      <>\n        <MenuItem icon=\"sort-by-price\" onClick={() => { handleSortMenuItemClick('byPrice'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByPrice')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byPrice' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n        <MenuItem icon=\"sort-by-date\" onClick={() => { handleSortMenuItemClick('byDate'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByDate')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byDate' ? 'check' : 'placeholder'}\n          />\n\n        </MenuItem>\n        <MenuItem icon=\"sort-by-number\"onClick={() => { handleSortMenuItemClick('byNumber'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByNumber')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byNumber' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n      </>\n    );\n  }\n\n  function renderSortMenu() {\n    return (\n      <Menu\n        isOpen={isSortContextMenuOpen}\n        anchor={sortContextMenuAnchor}\n        ref={sortMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getSortMenuElement}\n        autoClose\n        onClose={handleSortContextMenuClose}\n        onCloseAnimationEnd={handleSortContextMenuHide}\n        positionX=\"left\"\n      >\n        {renderSortMenuItems()}\n      </Menu>\n    );\n  }\n\n  const handleSearchModelInputReset = useCallback(() => {\n    setSearchModelQuery('');\n  }, []);\n  const handleSearchBackdropInputReset = useCallback(() => {\n    setSearchBackdropQuery('');\n  }, []);\n  const handleSearchPatternInputReset = useCallback(() => {\n    setSearchPatternQuery('');\n  }, []);\n  const handleSearchInputClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  });\n\n  const modelMenuItemsContainerRef = useRef<HTMLDivElement>();\n  const { observe } = useIntersectionObserver({\n    rootRef: modelMenuItemsContainerRef,\n    isDisabled: !modelContextMenuAnchor,\n  });\n\n  function renderModelMenuItems() {\n    const models = filteredAndSearchedAttributes.model;\n    const selectedAttributes = filter.modelAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n    return (\n      <div className={styles.menuContentContainer} ref={modelMenuItemsContainerRef}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchModelQuery}\n          onChange={setSearchModelQuery}\n          onReset={handleSearchModelInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllModelsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {models.map((model) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === model.sticker.id);\n          return (\n            <MenuItem\n              key={model.name}\n              onClick={() => {\n                handleModelMenuItemClick(model);\n              }}\n            >\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={model.sticker}\n                type=\"model\"\n                observeIntersectionForLoading={observe}\n                observeIntersectionForPlaying={observe}\n              />\n              <div className={styles.menuItemStickerText}>\n                {model.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderModelMenu() {\n    return (\n      <Menu\n        isOpen={isModelContextMenuOpen}\n        anchor={modelContextMenuAnchor}\n        ref={modelMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getModelMenuElement}\n        autoClose\n        onClose={handleModelContextMenuClose}\n        onCloseAnimationEnd={handleModelContextMenuHide}\n      >\n        {renderModelMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderBackdropMenuItems() {\n    const backdrops = filteredAndSearchedAttributes.backdrop;\n    const selectedAttributes = filter.backdropAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchBackdropQuery}\n          onChange={setSearchBackdropQuery}\n          onReset={handleSearchBackdropInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllBackdropsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {backdrops.map((backdrop) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.backdropId === backdrop.backdropId);\n\n          return (\n            <MenuItem\n              key={backdrop.name}\n              onClick={() => {\n                handleBackdropMenuItemClick(backdrop);\n              }}\n            >\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[backdrop.centerColor, backdrop.edgeColor]}\n              />\n              <div className={styles.backdropAttributeMenuItemText}>\n                {backdrop.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderBackdropMenu() {\n    return (\n      <Menu\n        isOpen={isBackdropContextMenuOpen}\n        anchor={backdropContextMenuAnchor}\n        ref={backdropMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getBackdropMenuElement}\n        autoClose\n        onClose={handleBackdropContextMenuClose}\n        onCloseAnimationEnd={handleBackdropContextMenuHide}\n        positionX=\"right\"\n      >\n        {renderBackdropMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderPatternMenuItems() {\n    const patterns = filteredAndSearchedAttributes.pattern;\n    const selectedAttributes = filter.patternAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchPatternQuery}\n          onChange={setSearchPatternQuery}\n          onReset={handleSearchPatternInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllPatternsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {patterns.map((pattern) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === pattern.sticker.id);\n\n          return (\n            <MenuItem\n              key={pattern.name}\n              onClick={() => {\n                handlePatternMenuItemClick(pattern);\n              }}\n            >\n\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={pattern.sticker}\n                type=\"pattern\"\n              />\n\n              <div className={styles.menuItemStickerText}>\n                {pattern.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPatternMenu() {\n    return (\n      <Menu\n        isOpen={isPatternContextMenuOpen}\n        anchor={patternContextMenuAnchor}\n        ref={patternMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getPatternMenuElement}\n        autoClose\n        onClose={handlePatternContextMenuClose}\n        onCloseAnimationEnd={handlePatternContextMenuHide}\n      >\n        {renderPatternMenuItems()}\n      </Menu>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      {Boolean(sortContextMenuAnchor) && renderSortMenu()}\n      {Boolean(modelContextMenuAnchor) && renderModelMenu()}\n      {Boolean(backdropContextMenuAnchor) && renderBackdropMenu()}\n      {Boolean(patternContextMenuAnchor) && renderPatternMenu()}\n      <div className={styles.buttonsContainer}>\n        <SortMenuButton\n          onTrigger={handleSortContextMenu}\n          isOpen={isSortContextMenuOpen}\n        />\n        <ModelMenuButton\n          onTrigger={handleModelContextMenu}\n          isOpen={isModelContextMenuOpen}\n        />\n        <BackdropMenuButton\n          onTrigger={handleBackdropContextMenu}\n          isOpen={isBackdropContextMenuOpen}\n        />\n        <PatternMenuButton\n          onTrigger={handlePatternContextMenu}\n          isOpen={isPatternContextMenuOpen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { resaleGifts } = selectTabState(global);\n\n  const attributes = resaleGifts.attributes;\n  const counters = resaleGifts.counters;\n  const filter = resaleGifts.filter;\n\n  return {\n    attributes,\n    counters,\n    filter,\n  };\n})(GiftResaleFilters));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import {\n  memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  areCollectibleStarGiftsDisallowed?: boolean;\n  isSelf?: boolean;\n  hasCollectible?: boolean;\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areCollectibleStarGiftsDisallowed,\n  isSelf,\n  hasCollectible,\n}: StateProps & OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const hasResale = idsByCategory && idsByCategory['resale'].length > 0;\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'myCollectibles') return lang('GiftCategoryMyGifts');\n    if (category === 'resale') return lang('GiftCategoryCollectibles');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areCollectibleStarGiftsDisallowed && !isSelf && hasCollectible && renderCategoryItem('myCollectibles')}\n      {!areCollectibleStarGiftsDisallowed && hasResale && renderCategoryItem('resale')}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '@teact';\nimport type React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiSavedStarGift,\n  ApiStarGift,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport InteractiveSparkles from '../../common/InteractiveSparkles';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport GiftModalResaleScreen from './GiftModalResaleScreen';\nimport GiftResaleFilters from './GiftResaleFilters';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  myCollectibleGiftsById?: Record<string, ApiSavedStarGift>;\n  myCollectibleGiftIds?: string[];\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n  resaleGiftsCount?: number;\n  areResaleGiftsLoading?: boolean;\n  selectedResaleGift?: ApiStarGift;\n  tabId: number;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  myCollectibleGiftsById,\n  myCollectibleGiftIds,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n  resaleGiftsCount,\n  areResaleGiftsLoading,\n  selectedResaleGift,\n  tabId,\n}) => {\n  const {\n    closeGiftModal,\n    openGiftInfoModal,\n    resetResaleGifts,\n    loadResaleGifts,\n    openGiftInMarket,\n    closeResaleGiftsMarket,\n    loadMyCollectibleGifts,\n    openGiftTransferConfirmModal,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n  const giftHeaderRef = useRef<HTMLHeadingElement>();\n\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n  const areUniqueStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUniqueStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== STARS_CURRENCY_CODE);\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n          && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isResaleScreen = Boolean(selectedResaleGift) && !selectedGift;\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isResaleScreen || isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (selectedResaleGift) {\n      const giftId = 'regularGiftId' in selectedResaleGift\n        ? selectedResaleGift.regularGiftId\n        : selectedResaleGift.id;\n      loadResaleGifts({ giftId });\n    }\n  }, [selectedResaleGift]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen, tabId, closeResaleGiftsMarket]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = useMemo(() => {\n    if (chat) {\n      return lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    if (isSelf) {\n      return lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      });\n    }\n\n    if (selectedCategory === 'resale') {\n      return lang('StarGiftDescriptionCollectibles');\n    }\n\n    return lang('StarGiftDescription', {\n      user: getUserFullName(user)!,\n    }, { withNodes: true, withMarkdown: true });\n  }, [chat, isSelf, selectedCategory, user, lang]);\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption, target?: 'resell' | 'original') => {\n    if (target === 'resell') {\n      if (!('id' in gift)) {\n        return;\n      }\n      if (isResaleScreen) {\n        openGiftInfoModal({ gift, recipientId: renderingModal?.forPeerId });\n        return;\n      }\n      openGiftInMarket({ gift, tabId });\n      return;\n    }\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  const handleMyGiftClick = useLastCallback((gift: ApiStarGift) => {\n    if (gift.type === 'starGift' || !myCollectibleGiftsById || !peer?.id) return;\n    const savedGift = myCollectibleGiftsById[gift.id];\n\n    openGiftTransferConfirmModal({\n      gift: savedGift,\n      recipientId: peer.id,\n    });\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    if (selectedCategory === 'myCollectibles') {\n      loadMyCollectibleGifts();\n    }\n  });\n\n  function renderStarGifts() {\n    if (selectedCategory === 'myCollectibles') {\n      return (\n        <InfiniteScroll\n          className={styles.starGiftsContainer}\n          items={myCollectibleGiftIds}\n          onLoadMore={handleLoadMore}\n          scrollContainerClosest={`.${styles.main}`}\n          itemSelector=\".starGiftItem\"\n        >\n          {myCollectibleGiftsById && myCollectibleGiftIds?.map((giftId) => {\n            const savedGift = myCollectibleGiftsById[giftId];\n            if (!savedGift) return undefined;\n\n            return (\n              <GiftItemStar\n                key={giftId}\n                gift={savedGift.gift}\n                observeIntersection={observeIntersection}\n                onClick={handleMyGiftClick}\n                withTransferBadge\n              />\n            );\n          })}\n        </InfiniteScroll>\n      );\n    }\n\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, availabilityResale } = gift;\n\n      if (areLimitedStarGiftsDisallowed && isLimited) {\n        return !areUniqueStarGiftsDisallowed ? availabilityResale : false;\n      }\n\n      if (areUnlimitedStarGiftsDisallowed && !isLimited) return false;\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.flatMap((giftId) => {\n          const gift = starGiftsById[giftId];\n          const shouldShowResale = Boolean(gift.availabilityResale) && !areUniqueStarGiftsDisallowed;\n          const shouldDuplicateAsResale = selectedCategory !== 'resale'\n            && shouldShowResale && !gift.isSoldOut && !areLimitedStarGiftsDisallowed;\n\n          const elements = [\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              isResale={shouldShowResale && !shouldDuplicateAsResale}\n              onClick={handleGiftClick}\n            />,\n          ];\n\n          if (shouldDuplicateAsResale) {\n            elements.push(\n              <GiftItemStar\n                key={`resale_${giftId}`}\n                isResale\n                gift={gift}\n                observeIntersection={observeIntersection}\n                onClick={handleGiftClick}\n              />,\n            );\n          }\n\n          return elements;\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseModal = useLastCallback(() => {\n    setSelectedGift(undefined);\n    resetResaleGifts();\n    closeGiftModal();\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isResaleScreen) {\n      closeResaleGiftsMarket({ tabId });\n      return;\n    }\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    handleCloseModal();\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            className={styles.avatar}\n            size={AVATAR_SIZE}\n            peer={peer}\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <InteractiveSparkles\n            className={styles.logoBackground}\n            color=\"gold\"\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n            onRequestAnimation={handleRequestAnimation}\n          />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areCollectibleStarGiftsDisallowed={areUniqueStarGiftsDisallowed}\n              isSelf={isSelf}\n              hasCollectible={Boolean(myCollectibleGiftIds?.length)}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen || isResaleScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  function renderHeader() {\n    if (!shouldShowHeader) return undefined;\n    if (isResaleScreen) {\n      const isFirstLoading = areResaleGiftsLoading && !resaleGiftsCount;\n      return (\n        <div className={styles.resaleHeaderContentContainer}>\n          <h2 className={styles.resaleHeaderText}>\n            {selectedResaleGift.title}\n          </h2>\n          {isFirstLoading\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('Loading')}\n              </div>\n            )}\n          {!isFirstLoading && resaleGiftsCount !== undefined\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('HeaderDescriptionResaleGifts', {\n                  count: resaleGiftsCount,\n                }, { withNodes: true, withMarkdown: true, pluralValue: resaleGiftsCount })}\n              </div>\n            )}\n          <GiftResaleFilters dialogRef={dialogRef} />\n        </div>\n      );\n    }\n    return (\n      <h2 className={styles.commonHeaderText}>\n        {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={handleCloseModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(\n        styles.header,\n        isResaleScreen && styles.resaleHeader,\n        !shouldShowHeader && styles.hiddenHeader)}\n      >\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={!shouldShowHeader ? 0 : isResaleScreen ? 1 : isHeaderForStarGifts ? 2 : 3}\n          slideClassName={styles.headerSlide}\n        >\n          {renderHeader()}\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : isResaleScreen ? 2 : 0}\n      >\n        {!isGiftScreen && !isResaleScreen && renderMainScreen()}\n        {isResaleScreen && selectedResaleGift\n          && (\n            <GiftModalResaleScreen\n              onGiftClick={handleGiftClick}\n            />\n          )}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): Complete<StateProps> => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  const { resaleGifts } = selectTabState(global);\n  const resaleGiftsCount = resaleGifts.count;\n  const areResaleGiftsLoading = resaleGifts.isLoading !== false;\n  const selectedResaleGift = modal?.selectedResaleGift;\n\n  return {\n    boostPerSentGift: global.appConfig.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    myCollectibleGiftsById: global.myCollectibleGifts?.byId,\n    myCollectibleGiftIds: global.myCollectibleGifts?.ids,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n    resaleGiftsCount,\n    areResaleGiftsLoading,\n    selectedResaleGift,\n    tabId: selectTabState(global).id,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return 0;\n  if (category === 'myCollectibles') return 1;\n  return 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","import { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"checkBox\":\"fjE0wGvw\",\"checkBoxDescription\":\"tepUTe4z\",\"upgradeIcon\":\"lgyInH5K\",\"descriptionConfirm\":\"BJh2Tufh\",\"titleConfirm\":\"gA102W1G\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"modalContent\":\"o9rFZ6By\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"starAmountIcon\":\"_5guecUe\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueValue\":\"uAjIRJva\",\"uniqueAttribute\":\"OJQnkf17\",\"attributeName\":\"dq7wCHJb\",\"uniqueGift\":\"I6o_pGAm\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { TeactNode } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../../global/helpers/peers';\nimport { getMainUsername } from '../../../../global/helpers/users';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon, formatStarsAsText, formatTonAsIcon, formatTonAsText,\n} from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport Link from '../../../ui/Link';\nimport Menu from '../../../ui/Menu';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  releasedByPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n  recipientPeer?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  releasedByPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n  recipientPeer,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n    closeGiftModal,\n    openGiftInfoValueModal,\n    updateResaleGiftsFilter,\n    openGiftInMarket,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n  const [shouldPayInTon, setShouldPayInTon] = useState<boolean>(false);\n\n  const splitButtonRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const uniqueGiftHeaderRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(splitButtonRef);\n\n  const handleSymbolClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.pattern) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [],\n        backdropAttributes: [],\n        patternAttributes: [{\n          type: 'pattern',\n          documentId: giftAttributes.pattern.sticker.id,\n        }],\n      },\n    });\n  });\n\n  const handleBackdropClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.backdrop) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [],\n        backdropAttributes: [{\n          type: 'backdrop',\n          backdropId: giftAttributes.backdrop.backdropId,\n        }],\n        patternAttributes: [],\n      },\n    });\n  });\n\n  const handleModelClick = useLastCallback(() => {\n    if (!gift || !giftAttributes?.model) return;\n\n    openGiftInMarket({ gift });\n    updateResaleGiftsFilter({\n      filter: {\n        sortType: 'byDate',\n        modelAttributes: [{\n          type: 'model',\n          documentId: giftAttributes.model.sticker.id,\n        }],\n        backdropAttributes: [],\n        patternAttributes: [],\n      },\n    });\n  });\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const giftSubtitle = useMemo(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return undefined;\n\n    if (releasedByPeer) {\n      const releasedByUsername = `@${getMainUsername(releasedByPeer)}`;\n      const ownerTitle = releasedByUsername || getPeerTitle(lang, releasedByPeer);\n      const fallbackText = isApiPeerUser(releasedByPeer)\n        ? lang('ActionFallbackUser')\n        : lang('ActionFallbackChannel');\n\n      return lang('GiftInfoCollectibleBy', {\n        number: gift.number, owner: ownerTitle || fallbackText }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('GiftInfoCollectible', { number: gift.number });\n  }, [gift, releasedByPeer, lang]);\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n\n  const selfCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((status) =>\n      status.type === 'collectible' && status.slug === starGiftUniqueSlug);\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const isSelfUnique = Boolean(selfCollectibleStatus);\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights\n      : gift?.type === 'starGift'\n        ? renderingTargetPeer?.id === currentUserId\n        : gift?.ownerId === currentUserId || isSelfUnique\n  );\n\n  function getResalePrice(isInTon?: boolean) {\n    if (!isGiftUnique) return undefined;\n    const amounts = gift.resellPrice;\n    if (!amounts) return undefined;\n\n    if (gift?.resaleTonOnly || isInTon) {\n      return amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }\n\n  const resellPrice = getResalePrice();\n  const confirmPrice = getResalePrice(shouldPayInTon);\n  const canBuyGift = !isSelfUnique && gift?.type === 'starGiftUnique'\n    && gift.ownerId !== currentUserId && Boolean(resellPrice);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !getResalePrice()) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    const peer = recipientPeer || currentUser;\n    const price = getResalePrice(shouldPayInTon);\n    if (!peer || !price || gift?.type !== 'starGiftUnique') return;\n    closeConfirmModal();\n    closeGiftModal();\n    buyStarGift({ peerId: peer.id, slug: gift.slug, price });\n  });\n\n  const handleOpenValueModal = useLastCallback(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return;\n\n    openGiftInfoValueModal({\n      gift,\n    });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton = useMemo(() => {\n    return (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onContextMenu={handleContextMenu}\n        onClick={handleContextMenu}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang, handleContextMenu]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: resellPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, resellPrice?.amount, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.canUpgrade && !savedGift.upgradeMsgId) {\n      return (\n        <Button isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgrade')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    return (\n      <Button onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (canManage && savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n        return lang('GiftInfoDescriptionUpgrade2');\n      }\n      if (savedGift.canUpgrade && canManage) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {Boolean(resellPrice?.amount) && (\n          <div className={styles.giftResalePriceContainer}>\n            {resellPrice.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, {\n                className: styles.giftResalePriceStar,\n                shouldConvertFromNanos: true,\n              })\n              : formatStarsAsIcon(lang, resellPrice.amount, {\n                asFont: true,\n                className: styles.giftResalePriceStar,\n              })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton} ref={splitButtonRef}>\n          {SettingsMenuButton}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div ref={uniqueGiftHeaderRef} className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={giftSubtitle}\n          subtitlePeer={releasedByPeer}\n          showManageButtons={canManage}\n          savedGift={savedGift}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {Boolean(description) && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const ownerPeer = ownerId ? selectPeer(getGlobal(), ownerId) : undefined;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else if (ownerPeer || ownerName) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleModelClick}\n            >\n              {model.name}\n            </span>\n            <BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleBackdropClick}\n            >\n              {backdrop.name}\n            </span>\n            <BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            <span\n              className={styles.attributeName}\n              onClick={handleSymbolClick}\n            >\n              {pattern.name}\n            </span>\n            <BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (gift.valueAmount && gift.valueCurrency) {\n        tableData.push([\n          lang('GiftInfoValue'),\n          <span className={styles.uniqueValue}>\n            ~\n            {' '}\n            {formatCurrencyAsString(\n              gift.valueAmount,\n              gift.valueCurrency,\n              lang.code,\n            )}\n            <BadgeButton onClick={handleOpenValueModal}>\n              {lang('GiftInfoValueLinkMore')}\n            </BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, saleDateInfo,\n    canBuyGift, giftOwnerTitle, resellPrice, giftSubtitle,\n    releasedByPeer, handleSymbolClick, handleBackdropClick, handleModelClick,\n  ]);\n\n  const getRootElement = useLastCallback(() => uniqueGiftHeaderRef.current);\n  const getTriggerElement = useLastCallback(() => splitButtonRef.current);\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const uniqueGiftContextMenu = contextMenuAnchor && typeGift && (\n    <Menu\n      ref={menuRef}\n      isOpen={isContextMenuOpen}\n      anchor={contextMenuAnchor}\n      className=\"gift-context-menu with-menu-transitions\"\n      autoClose\n      withPortal\n      onClose={handleContextMenuClose}\n      onCloseAnimationEnd={handleContextMenuHide}\n      positionX=\"right\"\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n    >\n      <GiftMenuItems\n        peerId={renderingModal!.peerId!}\n        gift={typeGift}\n        canManage={canManage}\n        collectibleEmojiStatuses={collectibleEmojiStatuses}\n        currentUserEmojiStatus={currentUserEmojiStatus}\n      />\n    </Menu>\n  );\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        contentClassName={styles.modalContent}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        currencyInBalanceBar={confirmPrice?.currency}\n        isLowStackPriority\n      />\n      {uniqueGiftContextMenu}\n      {uniqueGift && currentUser && Boolean(confirmPrice) && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: confirmPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, confirmPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, confirmPrice.amount, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          {uniqueGift.resaleTonOnly\n            && (\n              <div className={styles.descriptionConfirm}>\n                {lang('ConfirmBuyGiftForTonDescription')}\n              </div>\n            )}\n          <GiftTransferPreview\n            peer={recipientPeer || currentUser}\n            gift={uniqueGift}\n          />\n          <div className={styles.titleConfirm}>\n            {lang('TitleConfirmPayment')}\n          </div>\n          {!recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyForPeerConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                  peer: getPeerTitle(lang, recipientPeer),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {!uniqueGift.resaleTonOnly && (\n            <>\n              <Checkbox\n                className={styles.checkBox}\n                label={lang('LabelPayInTON')}\n                checked={shouldPayInTon}\n                onCheck={setShouldPayInTon}\n              />\n\n              <div className={styles.checkBoxDescription}>\n                {lang('DescriptionPayInTON')}\n              </div>\n            </>\n          )}\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const recipientPeer = modal?.recipientId && currentUserId !== modal.recipientId\n      ? selectPeer(global, modal.recipientId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    const gift = isSavedGift ? typeGift.gift : typeGift;\n    const releasedByPeerId = gift?.type === 'starGiftUnique' && gift.releasedByPeerId;\n    const releasedByPeer = releasedByPeerId ? selectPeer(global, releasedByPeerId) : undefined;\n\n    return {\n      fromPeer,\n      targetPeer,\n      releasedByPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n      recipientPeer,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"v4GJBsdC\",\"sticker\":\"lJodRD0R\",\"description\":\"VjWaO8un\",\"initialPrice\":\"K7zsAhVt\",\"starIcon\":\"Xw91xwpe\",\"footer\":\"OJDo2xUd\",\"footerSticker\":\"hspYTy7V\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './GiftInfoValueModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoValueModal'];\n};\n\nconst HEADER_STICKER_SIZE = 120;\nconst FOOTER_STICKER_SIZE = 24;\n\nconst GiftInfoValueModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { closeGiftInfoValueModal, openUrl, openGiftInMarket } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const handleOpenFragment = useLastCallback(() => {\n    if (modal?.valueInfo.fragmentListedUrl) {\n      openUrl({ url: modal.valueInfo.fragmentListedUrl });\n    }\n  });\n\n  const handleOpenTelegramMarket = useLastCallback(() => {\n    if (modal?.gift) {\n      openGiftInMarket({ gift: modal.gift });\n    }\n  });\n\n  const modalData = useMemo(() => {\n    if (!renderingModal) return undefined;\n\n    const { gift, valueInfo } = renderingModal;\n    const giftAttributes = getGiftAttributes(gift);\n\n    if (!giftAttributes) return undefined;\n\n    const header = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={giftAttributes.model!.sticker}\n          size={HEADER_STICKER_SIZE}\n        />\n        <Button\n          pill\n          size=\"tiny\"\n          fluid\n          nonInteractive\n        >\n          {formatCurrencyAsString(valueInfo.value, valueInfo.currency, lang.code)}\n        </Button>\n        <div className={styles.description}>\n          {lang('GiftValueDescription', { giftName: gift.title }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n        </div>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      lang('GiftValueTitleInitialSale'),\n      formatDateToString(valueInfo.initialSaleDate * 1000, lang.code),\n    ]);\n\n    tableData.push([\n      lang('GiftValueTitleInitialPrice'),\n      <span className={styles.initialPrice}>\n        {formatStarsAsIcon(lang, valueInfo.initialSaleStars, { className: styles.starIcon })}\n        {' (~ '}\n        {formatCurrencyAsString(valueInfo.initialSalePrice, valueInfo.currency, lang.code)}\n        )\n      </span>,\n    ]);\n\n    if (valueInfo.lastSaleDate) {\n      tableData.push([\n        lang('GiftValueTitleLastSale'),\n        formatDateToString(valueInfo.lastSaleDate * 1000, lang.code),\n      ]);\n    }\n\n    if (valueInfo.lastSalePrice) {\n      tableData.push([\n        lang('GiftValueTitleLastPrice'),\n        formatCurrencyAsString(valueInfo.lastSalePrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    if (valueInfo.floorPrice) {\n      tableData.push([\n        lang('GiftValueTitleMinimumPrice'),\n        formatCurrencyAsString(valueInfo.floorPrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    if (valueInfo.averagePrice) {\n      tableData.push([\n        lang('GiftValueTitleAveragePrice'),\n        formatCurrencyAsString(valueInfo.averagePrice, valueInfo.currency, lang.code),\n      ]);\n    }\n\n    const canBuyOnFragment = Boolean(valueInfo.fragmentListedUrl && valueInfo.fragmentListedCount);\n    const canBuyOnTelegram = Boolean(valueInfo.listedCount && valueInfo.listedCount);\n    const hasFooter = canBuyOnFragment || canBuyOnTelegram;\n\n    const footer = hasFooter && (\n      <div className={styles.footer}>\n        {canBuyOnFragment && (\n          <Button\n            isText\n            onClick={handleOpenFragment}\n            noForcedUpperCase\n            size=\"tiny\"\n          >\n            {lang.number(valueInfo.fragmentListedCount!)}\n            <AnimatedIconFromSticker\n              className={styles.footerSticker}\n              sticker={giftAttributes.model!.sticker}\n              size={FOOTER_STICKER_SIZE}\n            />\n            {lang('GiftValueForSaleOnFragment')}\n          </Button>\n        )}\n\n        {canBuyOnTelegram && (\n          <Button\n            isText\n            noForcedUpperCase\n            size=\"tiny\"\n            onClick={handleOpenTelegramMarket}\n          >\n            {lang.number(valueInfo.listedCount!)}\n            <AnimatedIconFromSticker\n              className={styles.footerSticker}\n              sticker={giftAttributes.model!.sticker}\n              size={FOOTER_STICKER_SIZE}\n            />\n            {lang('GiftValueForSaleOnTelegram')}\n          </Button>\n        )}\n      </div>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, renderingModal, handleOpenFragment, handleOpenTelegramMarket]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      onClose={closeGiftInfoValueModal}\n      header={modalData.header}\n      tableData={modalData.tableData}\n      footer={modalData.footer}\n    />\n  );\n};\n\nexport default memo(GiftInfoValueModal);\n","import { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { formatShortDuration } from '../../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftLockedModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['lockedGiftModal'];\n};\n\nconst GiftLockedModal = ({\n  modal,\n}: OwnProps) => {\n  const { closeLockedGiftModal } = getActions();\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => {\n    closeLockedGiftModal();\n  });\n\n  const getMessageText = useCallback(() => {\n    if (!modal) return '';\n\n    if (modal.untilDate) {\n      const timeRemaining = modal.untilDate ? modal.untilDate - getServerTime() : 0;\n      return lang('GiftLockedMessage', {\n        relativeDate: formatShortDuration(lang, timeRemaining),\n      },\n      {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    if (modal.reason) {\n      return renderTextWithEntities(modal.reason);\n    }\n\n    return lang('TitleGiftLocked');\n  }, [modal, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      className=\"narrow\"\n      onClose={handleClose}\n      title={lang('TitleGiftLocked')}\n      headerClassName={styles.header}\n    >\n      <p className={styles.message}>\n        {getMessageText()}\n      </p>\n      <Button\n        onClick={handleClose}\n      >\n        {lang('OK')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(GiftLockedModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"AqB1qB8W\",\"message\":\"pA8Bz4TW\"};","// extracted by mini-css-extract-plugin\nexport default {\"checkBoxDescription\":\"pWjQiY4m\",\"inputPriceDescription\":\"SGFmA4kL\",\"checkBox\":\"yt_nODdj\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { convertTonFromNanos, convertTonToNanos } from '../../../../util/formatCurrency';\nimport { convertTonToUsd, formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText, formatTonAsIcon,\n  formatTonAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n  tonStargiftResaleCommissionPermille?: number;\n  tonStargiftResaleAmountMin: number;\n  tonStargiftResaleAmountMax?: number;\n  tonUsdRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n  tonStargiftResaleCommissionPermille, tonStargiftResaleAmountMin, tonStargiftResaleAmountMax, tonUsdRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [isPriceInTon, setIsPriceInTon] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const maxAmount = isPriceInTon ? tonStargiftResaleAmountMax : starsStargiftResaleAmountMax;\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : maxAmount ? Math.min(number, maxAmount) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice(\n      {\n        gift: savedGift.inputGift,\n        price: {\n          currency: isPriceInTon ? 'TON' : 'XTR',\n          amount: isPriceInTon ? convertTonToNanos(price) : price,\n          nanos: 0,\n        },\n      });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = isPriceInTon ? tonStargiftResaleCommissionPermille : starsStargiftResaleCommissionPermille;\n  const minAmount = isPriceInTon ? tonStargiftResaleAmountMin : starsStargiftResaleAmountMin;\n  const isPriceCorrect = hasPrice && price >= minAmount;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={isPriceInTon ? lang('PriceInTON') : lang('PriceInStars')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={isPriceInTon ? lang('EnterPriceInTon') : lang('EnterPriceInStars')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled={!isPriceInTon}\n        />\n      </div>\n\n      <div className={styles.inputPriceDescription}>\n        <span>\n          {!isPriceCorrect && Boolean(commission) && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: isPriceInTon ? formatTonAsText(lang, minAmount) : formatStarsAsText(lang, minAmount),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && (() => {\n            const priceWithCommission = commission ? Number((price * commission).toFixed()) : price;\n            return lang('DescriptionComposerGiftResalePrice',\n              {\n                stars: isPriceInTon\n                  ? formatTonAsText(lang, priceWithCommission)\n                  : formatStarsAsText(lang, priceWithCommission),\n              },\n              {\n                withMarkdown: true,\n                withNodes: true,\n              });\n          })()}\n        </span>\n\n        {isPriceCorrect && Boolean(isPriceInTon ? tonUsdRate : starsUsdWithdrawRate) && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              isPriceInTon ? convertTonToUsd(price, tonUsdRate!) : price * starsUsdWithdrawRate!,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('OnlyAcceptTON')}\n        checked={isPriceInTon}\n        onCheck={setIsPriceInTon}\n      />\n\n      <div className={styles.checkBoxDescription}>\n        {lang('OnlyAcceptTONDescription')}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: isPriceInTon ? formatTonAsIcon(lang, price)\n            : formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const configPermille = global.appConfig.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    const tonConfigPermille = global.appConfig.tonStargiftResaleCommissionPermille;\n    const tonStargiftResaleCommissionPermille = tonConfigPermille ? (tonConfigPermille / 1000) : 0;\n    const tonStargiftResaleAmountMin = convertTonFromNanos(global.appConfig.tonStargiftResaleAmountMin || 0);\n    const maxTonFromConfig = global.appConfig.tonStargiftResaleAmountMax;\n    const tonStargiftResaleAmountMax = maxTonFromConfig && convertTonFromNanos(maxTonFromConfig);\n\n    const tonUsdRate = global.appConfig.tonUsdRate;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n      tonStargiftResaleCommissionPermille,\n      tonStargiftResaleAmountMin,\n      tonStargiftResaleAmountMax,\n      tonUsdRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>\n            {\n              lang('UniqueStatusWearTitle', {\n                gift: mockPeerWithStatus?.emojiStatus?.title,\n              })\n            }\n          </div>\n          <div className={styles.infoDescription}>\n            {\n              lang('UniqueStatusBenefitsDescription')\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          onClearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R, D extends unknown[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","import {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftTransferModal,\n    openGiftWithdrawModal,\n    openGiftTransferConfirmModal,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const handlePeerSelect = useLastCallback((peerId: string) => {\n    if (!renderingModal?.gift) return;\n\n    openGiftTransferConfirmModal({\n      gift: renderingModal.gift,\n      recipientId: peerId,\n    });\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={handlePeerSelect}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import { memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiPeer } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferConfirmModal'];\n};\n\ntype StateProps = {\n  selectedPeer?: ApiPeer;\n};\n\nconst GiftTransferConfirmModal = ({ modal, selectedPeer }: OwnProps & StateProps) => {\n  const {\n    closeGiftTransferConfirmModal, transferGift, openChat, closeGiftModal, closeGiftTransferModal,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingSelectedPeer = useCurrentOrPrev(selectedPeer);\n\n  const handleConfirm = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift || !renderingModal.recipientId) return;\n\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingModal.recipientId,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeGiftTransferConfirmModal();\n    openChat({ id: renderingModal.recipientId });\n\n    closeGiftModal();\n    closeGiftTransferModal();\n  });\n\n  if (!renderingModal) return undefined;\n\n  const { gift } = renderingModal;\n  const uniqueGift = gift.gift.type === 'starGiftUnique' ? gift.gift : undefined;\n\n  if (!uniqueGift) return undefined;\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      noDefaultTitle\n      onClose={closeGiftTransferConfirmModal}\n      confirmLabel={gift.transferStars\n        ? lang(\n          'GiftTransferConfirmButton',\n          { amount: formatStarsAsIcon(lang, gift.transferStars, { asFont: true }) },\n          { withNodes: true },\n        ) : lang('GiftTransferConfirmButtonFree')}\n      confirmHandler={handleConfirm}\n    >\n      {renderingSelectedPeer && (\n        <GiftTransferPreview\n          peer={renderingSelectedPeer}\n          gift={uniqueGift}\n        />\n      )}\n      <p>\n        {gift.transferStars\n          ? lang('GiftTransferConfirmDescription', {\n            gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n            amount: formatStarsAsText(lang, gift.transferStars),\n            peer: getPeerTitle(lang, renderingSelectedPeer!),\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftTransferConfirmDescriptionFree', {\n            gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n            peer: getPeerTitle(lang, renderingSelectedPeer!),\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n          })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global, { modal }): Complete<StateProps> => {\n    const selectedPeer = modal?.recipientId ? selectPeer(global, modal.recipientId) : undefined;\n\n    return {\n      selectedPeer,\n    };\n  })(GiftTransferConfirmModal),\n);\n","import { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, toggleNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n\n    toggleNoPaidMessagesException ({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): Complete<StateProps> => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n};\n\nconst PriceConfirmModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starBalance,\n  tonBalance,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    if (!modal?.directInfo) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    const { currency, newAmount } = modal;\n    const isTon = currency === 'TON';\n    const currentBalance = isTon ? tonBalance : starBalance?.amount;\n\n    if (currentBalance === undefined) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    if (currentBalance < newAmount!) {\n      actions.openStarsBalanceModal({\n        currency: isTon ? 'TON' : 'XTR',\n        tabId: getCurrentTabId(),\n      });\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    actions.sendStarPaymentForm({\n      directInfo: modal.directInfo,\n      tabId: getCurrentTabId(),\n    });\n    actions.closePriceConfirmModal();\n  }, [modal, starBalance, tonBalance, actions]);\n\n  const handleClose = useCallback(() => {\n    actions.closePriceConfirmModal();\n  }, [actions]);\n\n  if (!modal) {\n    return undefined;\n  }\n\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n  } = modal;\n\n  const isTon = currency === 'TON';\n\n  let originalAmountText: string;\n  let newAmountText: string;\n\n  if (isTon) {\n    originalAmountText = formatTonAsText(lang, convertTonFromNanos(originalAmount!));\n    newAmountText = formatTonAsText(lang, convertTonFromNanos(newAmount!));\n  } else {\n    originalAmountText = formatStarsAsText(lang, originalAmount!);\n    newAmountText = formatStarsAsText(lang, newAmount!);\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal)}\n      onClose={handleClose}\n      title={lang('PriceChanged')}\n      confirmHandler={handleConfirm}\n      confirmLabel={lang('PayNewPrice')}\n    >\n      <p>\n        {lang('PriceChangedText', {\n          originalAmount: originalAmountText,\n          newAmount: newAmountText,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const starBalance = global.stars?.balance;\n  const tonBalance = global.ton?.balance?.amount;\n\n  return {\n    starBalance,\n    tonBalance,\n  };\n},\n)(PriceConfirmModal));\n"],"names":["memo","GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","getActions","lang","useLang","oldLang","useOldLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPrice","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","canTransferAt","getServerTime","key","variables","date","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","currency","STARS_CURRENCY_CODE","amount","nanos","icon","title","number","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","_jsxs","_Fragment","children","_jsx","MenuItem","isPinned","onClick","Boolean","withGlobal","global","modal","user","forUserId","selectUser","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","dialogRef","useRef","isOpen","renderingModal","useCurrentOrPrev","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","userId","id","stars","handleClose","bottomText","parts","split","SafeLink","url","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","TON_CURRENCY_CODE","convertCurrencyFromBaseUnit","StarIcon","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","isGiftResale","isNegativeAmount","isPostsSearch","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","shouldUseCustomPeer","buildStarsTransactionCustomPeer","titleKey","currencyAmount","starsAmount","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","subtitleKey","CUSTOM_PEER_PREMIUM","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","amountColorClass","negative","positive","formatDateTimeToString","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","ton","history","all","transactions","starsBalanceState","tonBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","tonUsdRate","appConfig","tonTopupUrl","animationLevel","selectSharedSettings","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","openUrl","currentState","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","modalHeight","transactionCount","transactionTabs","tosText","handleLoadMoreTransactions","isTon","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","handleTonTopUp","minimal","dialogStyle","modalBalance","renderTonHeaderSection","tonAmount","ParticlesHeader","model","isDisabled","tonBalanceContainer","tonBalance","tonIconBalance","tonInUsd","convertTonToUsd","topUpButton","fluid","starButton","isText","noForcedUpperCase","topupOptions","tos","hint","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","lastSection","Transition","resolveTransitionName","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","currentUser","statuses","UniqueGiftManageButtons","selectTabState","giftInfoModal","currentUniqueEmojiStatusSlug","handleUnlist","iconName","iconAlignment","iconClassName","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","subtitlePeer","showManageButtons","openChat","isGiftHover","markGiftHover","unmarkGiftHover","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternIcon","slideClassName","direction","noLoop","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","style","buildStyle","AVATAR_SPARKLES_CENTER_SHIFT","paidMessageCommission","starsPaidMessageCommissionPermille","starsGiftSticker","selectGiftStickerForStars","selectGiftStickerForTon","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","openMediaViewer","closeStarsTransactionModal","triggerSparklesRef","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","handleAvatarMouseMove","handleRequestAnimation","animate","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","regularHeader","onMouseMove","InteractiveSparkles","onRequestAnimation","centerShift","percent","tableData","peerLabel","push","containerClassName","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","isPremiumGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","GiftRibbon","isCurrentUserPremium","selectIsCurrentUserPremium","observeIntersection","isResale","withTransferBadge","openGiftInfoModal","openPremiumModal","checkCanSendGift","stickerRef","setIsVisible","isHover","markHover","unmarkHover","uniqueGift","regularGift","priceInfo","amounts","resaleTonOnly","getPriceAmount","priceCurrency","resellMinStars","formattedPrice","isLimited","isSoldOut","isPremiumRequired","requirePremium","isUserLimitReached","limitedPerUser","perUserRemains","perUserTotal","onSuccess","ringsCount","ovalFactor","giftNumber","lockedUntilDate","giftRibbon","useOnIntersect","entry","visible","isIntersecting","badgeContent","formatTonAsIcon","shouldConvertFromNanos","StickerView","observeIntersectionForPlaying","observeIntersectionForLoading","containerRef","shouldLoop","shouldPreloadPreview","withSparkleEffect","starGifts","resaleGifts","areGiftsAllLoaded","isAllLoaded","areGiftsLoading","updateIteration","resellGifts","gifts","GiftModalResaleScreen","onGiftClick","loadResaleGifts","updateResaleGiftsFilter","scrollerRef","resellGiftsIds","g","hasFilter","modelAttributes","patternAttributes","backdropAttributes","handleLoadMoreResellGifts","regularGiftId","isGiftsEmpty","viewportIds","useInfiniteScroll","RESALE_GIFTS_LIMIT","observe","useIntersectionObserver","rootRef","throttleMs","handleResetGiftsFilter","resaleScreenRoot","notFoundGiftsRoot","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","notFoundGiftsDescription","notFoundGiftsLink","resaleStarGiftsContainer","preloadBackwards","GiftItemStar","ATTRIBUTE_STICKER_SIZE","REM","ResaleGiftMenuAttributeSticker","customColor","useDynamicColorListener","thumbClassName","attributes","counters","GiftResaleFilters","searchModelQuery","setSearchModelQuery","searchBackdropQuery","setSearchBackdropQuery","searchPatternQuery","setSearchPatternQuery","filteredAttributes","counter","attribute","found","attr","backdropId","filteredAndSearchedAttributes","filterBySearch","trim","toLowerCase","sortMenuRef","isContextMenuOpen","isSortContextMenuOpen","contextMenuAnchor","sortContextMenuAnchor","handleContextMenu","handleSortContextMenu","handleContextMenuClose","handleSortContextMenuClose","handleContextMenuHide","handleSortContextMenuHide","useContextMenuHandlers","getSortMenuElement","modelMenuRef","isModelContextMenuOpen","modelContextMenuAnchor","handleModelContextMenu","handleModelContextMenuClose","handleModelContextMenuHide","getModelMenuElement","backdropMenuRef","isBackdropContextMenuOpen","backdropContextMenuAnchor","handleBackdropContextMenu","handleBackdropContextMenuClose","handleBackdropContextMenuHide","getBackdropMenuElement","patternMenuRef","isPatternContextMenuOpen","patternContextMenuAnchor","handlePatternContextMenu","handlePatternContextMenuClose","handlePatternContextMenuHide","getPatternMenuElement","SortMenuButton","sortType","isMenuOpen","ModelMenuButton","attributesCount","BackdropMenuButton","PatternMenuButton","handleSortMenuItemClick","handleSelectedAllModelsClick","handleSelectedAllPatternsClick","handleSelectedAllBackdropsClick","handleModelMenuItemClick","updatedAttributes","some","handlePatternMenuItemClick","handleBackdropMenuItemClick","handleSearchModelInputReset","useCallback","handleSearchBackdropInputReset","handleSearchPatternInputReset","handleSearchInputClick","stopPropagation","preventDefault","modelMenuItemsContainerRef","Menu","anchor","menu","getMenuElement","onCloseAnimationEnd","menuItemText","menuItemIcon","models","selectedAttributes","isSelectedAll","menuContentContainer","SearchInput","search","onReset","placeholder","menuItemStickerText","renderModelMenuItems","right","backdrops","backdropAttributeMenuItemText","renderBackdropMenuItems","patterns","renderPatternMenuItems","buttonsContainer","idsByCategory","StarGiftCategoryList","onCategoryChanged","areCollectibleStarGiftsDisallowed","hasCollectible","hasResale","selectedCategory","setSelectedCategory","renderCategoryName","category","renderCategoryItem","handleItemClick","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","resaleGiftsCount","areResaleGiftsLoading","selectedResaleGift","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","myCollectibleGiftsById","myCollectibleGifts","myCollectibleGiftIds","tabId","GiftModal","closeGiftModal","resetResaleGifts","openGiftInMarket","closeResaleGiftsMarket","loadMyCollectibleGifts","openGiftTransferConfirmModal","transitionRef","giftHeaderRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","areLimitedStarGiftsDisallowed","allGifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","set","baseGift","reduce","prev","isResaleScreen","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","recipientId","handleMyGiftClick","handleLoadMore","handleCloseModal","handleCloseButtonClick","isBackButton","buttonClassName","resaleHeader","headerSlide","isFirstLoading","resaleHeaderContentContainer","resaleHeaderText","resaleHeaderDescription","commonHeaderText","renderHeader","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","starGiftsContainer","filteredGiftIds","availabilityResale","shouldShowResale","shouldDuplicateAsResale","elements","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","AVATAR_SIZE","GIFT_STICKER_SIZE","GiftTransferPreview","giftPreview","arrow","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","recipientPeer","releasedByPeerId","releasedByPeer","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","openGiftInfoValueModal","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","shouldPayInTon","setShouldPayInTon","splitButtonRef","menuRef","uniqueGiftHeaderRef","handleSymbolClick","handleBackdropClick","handleModelClick","renderingFromPeer","renderingTargetPeer","isTargetChat","isSender","canConvertDifference","conversionLeft","hasConvertOption","giftSubtitle","ownerTitle","getMainUsername","fallbackText","owner","selfCollectibleStatus","isSelfUnique","canFocusUpgrade","upgradeMsgId","ownerId","getResalePrice","isInTon","confirmPrice","canBuyGift","giftOwnerTitle","ownerName","handleFocusUpgraded","giftChat","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","closeConfirmModal","handleConfirmBuyGift","handleOpenValueModal","SettingsMenuButton","headerButton","onContextMenu","renderFooterButton","isShiny","upgradeIcon","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","ownerPeer","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","attributeName","rarityPercent","issued","issuedCount","totalCount","valueAmount","valueCurrency","uniqueValue","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","getRootElement","getTriggerElement","getLayout","withPortal","uniqueGiftContextMenu","modalContent","withBalanceBar","currencyInBalanceBar","ConfirmDialog","noDefaultTitle","confirmLabel","confirmHandler","descriptionConfirm","titleConfirm","formatTonAsText","formatStarsAsText","onCheck","checkBoxDescription","GiftInfoValueModal","closeGiftInfoValueModal","handleOpenFragment","valueInfo","fragmentListedUrl","handleOpenTelegramMarket","giftName","initialSaleDate","initialSaleStars","initialSalePrice","lastSalePrice","floorPrice","averagePrice","canBuyOnFragment","fragmentListedCount","canBuyOnTelegram","listedCount","GiftLockedModal","closeLockedGiftModal","getMessageText","untilDate","timeRemaining","relativeDate","formatShortDuration","reason","headerClassName","configPermille","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","tonConfigPermille","tonStargiftResaleCommissionPermille","tonStargiftResaleAmountMin","convertTonFromNanos","maxTonFromConfig","tonStargiftResaleAmountMax","GiftResalePriceComposerModal","closeGiftResalePriceComposerModal","setPrice","isPriceInTon","setIsPriceInTon","hasPrice","handleChangePrice","parseFloat","isNaN","handleSellGift","convertTonToNanos","commission","minAmount","isPriceCorrect","InputText","inputMode","teactExperimentControlled","priceWithCommission","toFixed","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","random","getRandomAttributes","useInterval","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","TableAboutModal","GiftStatusInfoModal","closeGiftStatusInfoModal","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","FRAGMENT_PEER","byKey","hasPassword","twoFaSettings","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","error","errorKey","withRegular","onClearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","handlePeerSelect","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","selectedPeer","GiftTransferConfirmModal","closeGiftTransferConfirmModal","transferGift","renderingSelectedPeer","handleConfirm","transferStars","ChatRefundModal","closeChatRefundModal","toggleNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","PriceConfirmModal","actions","directInfo","closePriceConfirmModal","newAmount","currentBalance","getCurrentTabId","originalAmount","originalAmountText","newAmountText"],"sourceRoot":""}