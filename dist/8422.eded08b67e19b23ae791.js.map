{"version":3,"file":"8422.eded08b67e19b23ae791.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteTopic,\n  leaveChat,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: number) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: number | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: number;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(threadInfo.threadId)))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: loadingThreadId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: loadingThreadId,\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (chatId === global.currentUserId) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('fetchChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  const similarChannels = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!similarChannels) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(similarChannels, 'id'));\n  global = addSimilarChannels(global, chatId, similarChannels.map((channel) => channel.id));\n\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessage","tabStates","visibleChats","flatMap","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","closeStoryViewer","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","threadInfo","selectThreadInfo","listedIds","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","addMessages","messages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","userId","leaveChat","createdChatId","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","Number","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","openBoostModal","webAppName","isWebApp","usernames","channelPostId","isCurrentChat","openThread","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","similarChannels","addSimilarChannels","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}