{"version":3,"file":"5769.8fa27eea52a86ed008e9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.showNotification({\n      message: translate('lng_filters_link_private_error'),\n      tabId,\n    });\n    return;\n  }\n\n  const link = await callApi('exportMessageLink', {\n    chat,\n    id: messageId,\n    shouldIncludeThread,\n    shouldIncludeGrouped,\n  });\n\n  if (!link) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: translate('LinkCopied'),\n    tabId,\n  });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users, botId,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = updatePayment(global, {\n    botName: selectUser(global, botId)?.firstName,\n  }, tabId);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSponsoredWebPage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiBotApp } from './bots';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended, sponsorInfo,\n    additionalInfo, showPeerPhoto, webpage, buttonText, app,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(webpage && { webPage: buildSponsoredWebPage(webpage) }),\n    ...(showPeerPhoto && { isAvatarShown: true }),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n    ...(sponsorInfo && { sponsorInfo }),\n    ...(additionalInfo && { additionalInfo }),\n    ...(buttonText && { buttonText }),\n    ...(app && { botApp: buildApiBotApp(app) }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId' | 'fromBoostsApplied'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: string;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nfunction buildSponsoredWebPage(webPage: GramJs.TypeSponsoredWebPage): ApiSponsoredWebPage {\n  let photo: ApiPhoto | undefined;\n  if (webPage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(webPage.photo);\n    photo = buildApiPhoto(webPage.photo);\n  }\n\n  return {\n    ...pick(webPage, [\n      'url',\n      'siteName',\n    ]),\n    photo,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.fetchChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"only-reactions\":\"dpkAoSjW\",\"onlyReactions\":\"dpkAoSjW\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectChatLastMessage, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  stickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (!stickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n    return stickers[randomIndex];\n  }, [stickers]);\n\n  useEffect(() => {\n    if (stickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, stickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"image\":\"y7ijMlDf\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\ntype OwnProps = {\n  peer?: ApiPeer;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n};\n\nfunction PeerColorWrapper({\n  peer, noUserColors, shoudReset, className, emojiIconClassName, children,\n}: OwnProps) {\n  return (\n    <div className={buildClassName(getPeerColorClass(peer, noUserColors, shoudReset), className)}>\n      {peer?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={peer.color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n}> = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onAudioPlay={handleAudioPlay}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {Boolean(senderBoosts) && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderText(inlineButton.text)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport OneTimeMediaModal from '../modals/oneTimeMedia/OneTimeMediaModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n  oneTimeMediaModal?: TabState['oneTimeMediaModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n  oneTimeMediaModal,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <OneTimeMediaModal info={oneTimeMediaModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","shouldIncludeThread","shouldIncludeGrouped","isChatSuperGroup","link","copyTextToClipboard","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","updatePayment","botName","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","premiumModal","promo","isOpen","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","forUserId","giftPremiumModal","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","duration","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","fetchChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","amount","currency","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","shoudReset","emojiIconClassName","children","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countries","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","Separator","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","REACTION_SIZE","ReactionButton","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","Reactions","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","Sticker","observeIntersectionForPlaying","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","onAudioPlay","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","ChatReportPanel","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","OneTimeMediaModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}