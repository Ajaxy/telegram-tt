{"version":3,"file":"7768.952cec14d632f4d418ef.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={handleSelectMyProfile}\n      >\n        {oldLang('My Profile')}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { debounce } from '../../util/schedulers';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  ContactGreeting,\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_SAFARI,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n    const isSpinner = noContent && !noSpinner;\n\n    return (\n      <Transition activeKey={isSpinner ? 0 : 1} name=\"fade\" shouldCleanup>\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </Transition>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active .${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","lang","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","location","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectMyProfile","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","Content","runDebouncedForScroll","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","AccountInfo","StarsRequired","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","renderSpinnerOrContent","noContent","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","noLoop","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","isSpinner","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}