{"version":3,"file":"2859.d1957b7ca12a6852860f.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n  ApiTopic,\n  LinkContext,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatMonoforum,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addNotifyExceptions,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceNotifyExceptions,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.markChatRead({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = selectIsCurrentUserFrozen(global) ? undefined\n    : await callApi('fetchDiscussionMessage', {\n      chat: selectChat(global, loadingChatId)!,\n      messageId: Number(loadingThreadId),\n    });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    const lastMessageId = threadInfo?.lastMessageId !== undefined ? threadInfo.lastMessageId\n      : threadInfo?.messagesCount === 0 ? result.threadId : undefined;\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      lastMessageId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastReadInboxMessageId', 'recentReplierIds'])\n      ),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadPinnedDialogs', async (global, actions, payload): Promise<void> => {\n  const {\n    listType,\n  } = payload;\n\n  const result = await callApi('fetchPinnedDialogs', { listType });\n  if (!result) return;\n\n  const { dialogIds, messages, chats, users } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceMessages(global, messages);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      orderedPinnedIds: {\n        ...global.chats.orderedPinnedIds,\n        [listType]: dialogIds.length ? dialogIds : undefined,\n      },\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('invalidateFullInfo', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const isUser = isUserId(peerId);\n\n  if (isUser) {\n    return {\n      ...global,\n      users: {\n        ...global.users,\n        fullInfoById: omit(global.users.fullInfoById, [peerId]),\n      },\n    };\n  }\n\n  return {\n    ...global,\n    chats: {\n      ...global.chats,\n      fullInfoById: omit(global.chats.fullInfoById, [peerId]),\n    },\n  };\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, mutedUntil } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { mutedUntil } });\n});\n\naddActionHandler('updateChatSilentPosting', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { isSilentPosting: isEnabled } });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, mutedUntil,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateTopicMutedState', {\n    chat, topicId, mutedUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, discussionChannelId, tabId = getCurrentTabId(),\n  } = payload;\n  const isChannel = 'isChannel' in payload ? payload.isChannel : undefined;\n  const isSuperGroup = 'isSuperGroup' in payload ? payload.isSuperGroup : undefined;\n\n  const users = memberIds?.map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', {\n      title,\n      about,\n      users,\n      isBroadcast: isChannel,\n      isMegagroup: isSuperGroup,\n    });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  if (discussionChannelId && channelId) {\n    actions.linkDiscussionGroup({\n      channelId: discussionChannelId,\n      chatId: channelId,\n      tabId,\n    });\n  }\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds)\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleDialogFilterTags', async (global, actions, payload): Promise<void> => {\n  const { isEnabled } = payload;\n\n  const result = await callApi('toggleDialogFilterTags', isEnabled);\n\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        areTagsEnabled: isEnabled,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id).includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach((id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach((id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextFoldersAction({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('markChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  void callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markChatMessagesRead', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  if (!chat.isForum) {\n    await callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    actions.readAllMentions({ chatId: id });\n    actions.readAllReactions({ chatId: id });\n    if (chat.hasUnreadMark) {\n      actions.markChatRead({ id });\n    }\n    return;\n  }\n\n  let hasMoreTopics = true;\n  let lastTopic: ApiTopic | undefined;\n  let processedCount = 0;\n\n  while (hasMoreTopics) {\n    const result = await callApi('fetchTopics', {\n      chat, offsetDate: lastTopic?.date, offsetTopicId: lastTopic?.id, offsetId: lastTopic?.lastMessageId, limit: 100,\n    });\n\n    if (!result?.topics?.length) return;\n\n    result.topics.forEach((topic) => {\n      if (!topic.unreadCount && !topic.unreadMentionsCount && !topic.unreadReactionsCount) return;\n      actions.markTopicRead({ chatId: id, topicId: topic.id });\n    });\n\n    lastTopic = result.topics[result.topics.length - 1];\n    processedCount += result.topics.length;\n    if (result.count <= processedCount) {\n      hasMoreTopics = false;\n    }\n  }\n});\n\naddActionHandler('markChatRead', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n\n  callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n  actions.readAllMentions({ chatId, threadId: topicId });\n  actions.readAllReactions({ chatId, threadId: topicId });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    linkContext,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url, linkContext);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts,\n    startApp, shouldStartMainApp, mode, isDirect,\n    text, onChatChanged, choose, ref, timestamp, linkContext,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if ((startApp !== undefined && !webAppName) || shouldStartMainApp) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat?.id || chatByUsername.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n          linkContext,\n          isDirect,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n    linkContext,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  const result = await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  if (isBanned) {\n    global = updateChat(global, chat.id, { membersCount: Math.max(0, (chat.membersCount || 0) - 1) });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) return;\n  const chat = selectChat(global, chatId);\n  if (!chat || isChatBasicGroup(chat) || isChatMonoforum(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatSuperGroup(chat) || isChatChannel(chat)) {\n    actions.updateChatMemberBannedRights({\n      chatId,\n      userId,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n        manageTopics: true,\n        sendPhotos: true,\n        sendVideos: true,\n        sendRoundvideos: true,\n        sendAudios: true,\n        sendVoices: true,\n        sendDocs: true,\n        sendPlain: true,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, force } = payload;\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig;\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.openSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePaidMessagesPrice', async (global, actions, payload): Promise<void> => {\n  const { chatId, paidMessagesStars, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('updatePaidMessagesPrice', {\n    chat,\n    paidMessagesStars,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = updateChat(global, chatId, { paidMessagesStars });\n  setGlobal(global);\n});\n\naddActionHandler('toggleAutoTranslation', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleAutoTranslation', { chat, isEnabled });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { hasAutoTranslation: isEnabled || undefined });\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n  const shouldReplaceStaleState = listType === 'active' && isFirstBatch;\n  const isAccountFreeze = selectIsCurrentUserFrozen(global);\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch && !isAccountFreeze,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch && !isAccountFreeze,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n  }\n\n  if (shouldReplaceStaleState) {\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceNotifyExceptions(global, result.notifyExceptionById);\n  } else {\n    global = addUserStatuses(global, result.userStatusesById);\n    global = addNotifyExceptions(global, result.notifyExceptionById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  if (listType === 'active' || listType === 'archived') {\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n  }\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n    linkContext?: LinkContext;\n    isDirect?: boolean;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n    linkContext, isDirect,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const localChat = selectChatByUsername(global, username);\n  const localDirectChat = isDirect && localChat?.linkedMonoforumId && !localChat.isMonoforum\n    ? selectChat(global, localChat.linkedMonoforumId) : undefined;\n\n  const isCurrentChat = !isDirect\n    ? currentChat?.usernames?.some((c) => c.username === username)\n    : localDirectChat?.id === currentChat?.id;\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  const monoforumChat = isDirect && !chat.isMonoforum && chat.linkedMonoforumId\n    ? selectChat(global, chat.linkedMonoforumId) : undefined;\n\n  const targetChat = (isDirect && monoforumChat) || chat;\n\n  openChatWithParams(global, actions, targetChat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n    linkContext,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n    linkContext?: LinkContext;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n    linkContext,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n        replyMessageId: linkContext?.messageId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","addActionHandler","global","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","async","chatId","chat","selectChat","result","callApi","peer","getGlobal","updateGroupCall","id","setGlobal","requestMasterAndJoinGroupCall","accessHash","groupCall","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","call","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","undefined","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectGroupCall","selectChatGroupCall","leaveGroupCall","rejoin","selectIsCurrentUserFrozen","existingGroupCall","omit","isLoaded","participantsCount","fetchGroupCall","nextOffset","offset","requestGroupCallParticipants","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","_len","arguments","length","_ref","Array","_key","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","forEach","track","stop","checkMicrophonePermission","catch","_len2","_ref2","_key2","audio","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","threadId","abortChatRequestsForCurrentChat","newChatId","newThreadId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","loadChats","listType","isFullDraftSync","shouldIgnorePagination","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","shouldReplaceStaleState","isAccountFreeze","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","addChatListIds","replaceUserStatuses","userStatusesById","replaceNotifyExceptions","notifyExceptionById","addUserStatuses","addNotifyExceptions","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","fullInfo","membersCount","isForumAsMessages","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","_len3","_ref0","_key3","isUserBot","bot","openChatWithParams","_len5","_ref10","_key5","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","linkContext","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","replyMessageId","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","_len6","_ref11","_key6","callAttachBot","ensureIsSuperGroup","_len7","_ref12","_key7","isChatBasicGroup","newChat","_ref9","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","currentChatIds","filter","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","markChatRead","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","loadingThread","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","lastMessageId","messagesCount","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","dialogIds","orderedPinnedIds","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","isUserId","fullInfoById","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","mutedUntil","openFrozenAccountModal","settings","isEnabled","isSilentPosting","title","about","photo","memberIds","discussionChannelId","isChannel","isSuperGroup","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","isBroadcast","isMegagroup","channel","missingUsers","Error","channelId","Complete","linkDiscussionGroup","updateMissingInvitedUsers","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","areTagsEnabled","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextFoldersAction","foldersAction","_ref6","folderIds","readAllMentions","readAllReactions","lastTopic","hasMoreTopics","processedCount","date","offsetTopicId","topics","unreadCount","unreadMentionsCount","unreadReactionsCount","markTopicRead","count","selectTopic","lastTopicMessageId","updateTopic","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","voicechat","livestream","substring","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","isChatChannel","isChatSuperGroup","openBoostModal","shouldStartMainApp","isDirect","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","_len4","_ref1","_key4","channelPostId","currentChat","localDirectChat","linkedMonoforumId","isMonoforum","starRefStartPrefixes","appConfig","prefix","p","slice","monoforumChat","usernameChat","requestAppWebView","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","isChatMonoforum","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","updateChatMemberBannedRights","sendMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","manageTopics","sendPhotos","sendVideos","sendRoundvideos","sendAudios","sendVoices","sendDocs","sendPlain","isProtected","enabledReactions","reactionsLimit","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","openSettingsScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","paidMessagesStars","hasAutoTranslation","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}