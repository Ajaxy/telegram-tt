{"version":3,"file":"9451.2ea416473529a5bee167.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.module.scss?d42b","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.module.scss?2307","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModalHeader.tsx","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.module.scss?525c","webpack://telegram-t/./src/components/modals/quickPreview/QuickPreviewModal.tsx"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia, MediaViewerOrigin } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(\n  global: GlobalState, origin?: MediaViewerOrigin, params?: MediaViewerItem,\n): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    const media = params.media[params.mediaIndex];\n    return {\n      media,\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport const PICTURE_IN_PICTURE_SIGNAL = signal;\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaSearchType,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const contentType = media && getMediaSearchType(media);\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize || FALLBACK_DIMENSIONS;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    contentType,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, origin, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMediaSearchType,\n  getMessageContentIds,\n  getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, PICTURE_IN_PICTURE_SIGNAL } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    contentType,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getMessageContentIds(chatMessages || {}, collectedMessageIds || [], contentType || 'media');\n  }, [chatMessages, collectedMessageIds, contentType, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = PICTURE_IN_PICTURE_SIGNAL;\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined || index === -1) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div\n        className=\"media-viewer-head\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n        chatId,\n        threadId,\n        messageId,\n        message: undefined,\n        collectedMessageIds: undefined,\n        chatMessages: undefined,\n        sponsoredMessage: undefined,\n        withDynamicLoading,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, origin, currentItem);\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const resultsByType = currentSearch?.resultsByType;\n        const contentType = viewableMedia && getMediaSearchType(viewableMedia?.media);\n        const { foundIds } = (contentType && resultsByType?.[contentType]) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n      canUpdateMedia: undefined,\n      avatar: undefined,\n      avatarOwner: undefined,\n      profilePhotos: undefined,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): Complete<StateProps> => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): Complete<StateProps> => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig.storyChangelogUserId,\n    viewersExpirePeriod: appConfig.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpireDate?: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpireDate,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(viewersExpireDate) && viewersExpireDate < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n  const storyExpireDate = story?.['@type'] === 'story' ? story.expireDate : undefined;\n\n  return {\n    views,\n    viewersExpireDate: storyExpireDate ? (storyExpireDate + appConfig.storyViewersExpirePeriod) : undefined,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      isLowStackPriority={isLowStackPriority}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(() => (\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1)\n  ));\n  const [selectedHours, setSelectedHours] = useState<string>(() => (\n    formatInputTime(passedSelectedDate.getHours())\n  ));\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(() => (\n    formatInputTime(passedSelectedDate.getMinutes())\n  ));\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst NBSP = '\\u00A0';\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      changeWebAppModalState({ state: 'minimized' });\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={lang('AriaMiniApp', { bot: bot?.firstName })}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n          hasAbsoluteCloseButton\n          onClose={handleAppPopupModalClose}\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        textParts={lang(\n          'AreYouSureShareMyContactInfoBot',\n          undefined,\n          { withNodes: true, withMarkdown: true, renderTextFilters: ['br', 'emoji'],\n          })}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma, hex2rgbaObj } from '../../../util/colors';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hex2rgbaObj(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hex2rgbaObj, lerpRgbaObj } from '../../../util/colors.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hex2rgbaObj);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgbaObj(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_COLORS = ['#A667FF', '#55A5FF'];\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_STROKE_WIDTH = 0.25 * REM;\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + CIRCLE_STROKE_WIDTH;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE,\n      strokeWidth: CIRCLE_STROKE_WIDTH,\n      segmentsCount: CIRCLE_SEGMENTS,\n      colorStops: STORY_COLORS,\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectCustomEmoji,\n  selectIsCurrentUserPremium,\n  selectStickerSet,\n  selectTabState,\n  selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift && gift.type !== 'starGiftUnique' && gift.perUserTotal) {\n      return lang('DescriptionGiftPremiumRequired2', { count: gift.perUserTotal }, {\n        pluralValue: gift.perUserTotal,\n      });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? selectCustomEmoji(global, fromUser.emojiStatus.documentId)\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig.limits,\n    premiumSlug: global.appConfig.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig.premiumBotUsername,\n    premiumPromoOrder: global.appConfig.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CountryPickerModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CountryPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CountryPickerModal = useModuleLoader(Bundles.Extra, 'CountryPickerModal', !isOpen);\n\n  return CountryPickerModal ? <CountryPickerModal {...props} /> : undefined;\n};\n\nexport default CountryPickerModalAsync;\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): Complete<StateProps> => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {\n      members: undefined,\n      adminMembersById: undefined,\n    };\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal.async';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(() => Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): Complete<StateProps> => {\n    const { limits } = global.appConfig;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport GiftEffectWrapper from './gift/GiftEffectWrapper';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(() => getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = stickerSet.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            const component = (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n              />\n            );\n\n            if (withSparkles) {\n              return (\n                <GiftEffectWrapper className=\"gift-effect-wrapper\" withSparkles>\n                  {component}\n                </GiftEffectWrapper>\n              );\n            }\n\n            return component;\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): Complete<StateProps> => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const minLevelToRestrictAds = global.appConfig.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            onClearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\n// Add 1 minute if time is less than server min, to allow user to send the message\nconst FUTURE_TIME_ADJUSTMENT = 1 * 60;\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate\n        ? Math.max(scheduleDate / 1000, getServerTime() + futureMin + FUTURE_TIME_ADJUSTMENT)\n        : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig.starsSuggestedPostAmountMax;\n    const minStarsAmount = appConfig.starsSuggestedPostAmountMin;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n\n    const tonMaxAmount = appConfig.tonSuggestedPostAmountMax;\n    const tonMinAmount = appConfig.tonSuggestedPostAmountMin;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n        = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig.starsSuggestedPostCommissionPermille;\n    const tonCommissionPermille = appConfig.tonSuggestedPostCommissionPermille;\n    const minAge = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('ChatPermissionNotAvailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('SendMediaPermissionPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('SendMediaPermissionVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('SendMediaPermissionStickersGifs')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('SendMediaPermissionAudios')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('SendMediaPermissionFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('SendMediaPermissionVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('SendMediaPermissionRoundVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('SendMediaPermissionWebPages')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('SendMediaPermissionPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('UserRestrictionsCreateTopics')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasIpRevealingMedia,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutFiles?: boolean;\n  hasIpRevealingMedia?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutFiles,\n  hasIpRevealingMedia,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutFiles && hasIpRevealingMedia) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasIpRevealingMedia = selectedMessageIds && chatId\n      ? selectHasIpRevealingMedia(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutFiles,\n      hasIpRevealingMedia,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {\n        seenByDates: undefined,\n      };\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): Complete<StateProps> => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutFiles?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutFiles,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback.ts';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, []);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '@teact';\nimport { memo, useCallback } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectIsChatPinned,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectUser,\n} from '../../../global/selectors';\nimport { onDragEnter, onDragLeave } from '../../../util/dragNDropHandlers.ts';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView, updateChatMutedState, openQuickPreview } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const handleUnmute = useLastCallback(() => {\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    if (e.altKey && chat && !chat.isForum) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId });\n      return;\n    }\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const handleDragEnter = useLastCallback((e) => {\n    e.preventDefault();\n\n    onDragEnter(() => {\n      onClick(chatId);\n    }, true);\n  });\n\n  const buttonRef = useSelectWithEnter(() => {\n    onClick(chatId);\n  });\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n      onClick={handleClick}\n      onDragEnter={handleDragEnter}\n      onDragLeave={onDragLeave}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(oldLang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const { openQuickPreview } = getActions();\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    if (e.altKey) {\n      e.preventDefault();\n      openQuickPreview({ id: chatId, threadId: topicId });\n      return;\n    }\n    onClick(topicId);\n  }, [chatId, topicId, onClick, openQuickPreview]);\n\n  const buttonRef = useSelectWithEnter(() => onClick(topicId));\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): Complete<StateProps> => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatListSearchNoResults')}\n            description={lang('ChatListSearchNoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchResultTopics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={lang('ChatListSearchNoResults')}\n          description={lang('ChatListSearchNoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchResultMyChannels' : 'DialogListSearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang('DialogListSearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchResultRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {lang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutFiles,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  useEffect(() => {\n    if (searchQuery && queryFromFlood !== searchQuery) {\n      runThrottled(() => {\n        checkSearchPostsFlood({ query: searchQuery });\n      });\n    }\n  }, [searchQuery, queryFromFlood]);\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={lang('ChatListSearchNoResults')}\n                description={lang('ChatListSearchNoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { FOLDER_TITLE_MAX_LENGTH, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n  isCurrentUserPremium: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst FOLDER_COLORS = [0, 1, 2, 3, 4, 5, 6];\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            maxLength={FOLDER_TITLE_MAX_LENGTH}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3 color-picker-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <span className=\"color-picker-title-text\">{lang('FilterColorTitle')}</span>\n            <div className={buildClassName(\n              'color-picker-title',\n              'color-picker-selected-color',\n              isCurrentUserPremium && state.folder.color !== undefined && state.folder.color !== -1\n                ? getApiPeerColorClass({ color: state.folder.color })\n                : 'color-picker-item-disabled',\n            )}\n            >\n              {renderTextWithEntities({\n                text: state.folder.title.text,\n                entities: state.folder.title.entities,\n                noCustomEmojiPlayback: state.folder.noTitleAnimations,\n              })}\n            </div>\n          </h4>\n          <div className=\"color-picker custom-scroll-x\">\n            {FOLDER_COLORS.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => {\n                  if (!isCurrentUserPremium) {\n                    openPremiumModal();\n                    return;\n                  }\n\n                  dispatch({ type: 'setColor', payload: color });\n                }}\n                className={buildClassName(\n                  'color-picker-item',\n                  getApiPeerColorClass({ color }),\n                  !isCurrentUserPremium && 'color-picker-item-hover-disabled',\n                  color === state.folder.color && isCurrentUserPremium && 'color-picker-item-active',\n                )}\n              />\n            ))}\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (!isCurrentUserPremium) {\n                  openPremiumModal();\n                  return;\n                }\n\n                dispatch({ type: 'setColor', payload: undefined });\n              }}\n              className={buildClassName(\n                'color-picker-item',\n                'color-picker-item-none',\n                (state.folder.color === undefined || state.folder.color === -1 || !isCurrentUserPremium)\n                && 'color-picker-item-active',\n              )}\n            >\n              {isCurrentUserPremium ? (\n                <Icon name=\"close\" className=\"color-picker-item-none-icon\" />\n              ) : (\n                <Icon name=\"lock-badge\" className=\"color-picker-item-none-icon\" />\n              )}\n            </button>\n          </div>\n          <p className=\"settings-item-description mb-0 mt-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorHint')}\n          </p>\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): Complete<StateProps> => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n      isCurrentUserPremium,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n  areTagsEnabled?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n  areTagsEnabled,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n    toggleDialogFilterTags,\n    openPremiumModal,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        color: folder.color,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleToggleTags = useCallback(() => {\n    if (!isPremium) {\n      return;\n    }\n\n    toggleDialogFilterTags({ isEnabled: !areTagsEnabled });\n  }, [areTagsEnabled, isPremium, toggleDialogFilterTags]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Move icon into button prop\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            const shouldRenderColor = folder?.color !== undefined && folder.color !== -1 && isPremium;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: ${shouldRenderColor ? '3.5rem' : '3rem'};`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n\n                  {\n                    shouldRenderColor && (\n                      <div className={buildClassName(\n                        'settings-folders-color-circle',\n                        getApiPeerColorClass({ color: folder.color }),\n                      )}\n                      />\n                    )\n                  }\n\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              {lang('SettingsFoldersEmpty')}\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n      <div className=\"settings-item pt-3\">\n        <div className=\"settings-item-relative\">\n          <Checkbox\n            label={lang('ShowFolderTags')}\n            subLabel={lang('ShowFolderTagsHint')}\n            checked={isPremium && areTagsEnabled}\n            onChange={handleToggleTags}\n            onClickLabel={(event) => {\n              if (!isPremium) {\n                event.preventDefault();\n                openPremiumModal();\n              }\n            }}\n          />\n          {!isPremium && <Icon name=\"lock-badge\" className=\"settings-folders-lock-icon\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n      areTagsEnabled,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      areTagsEnabled,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title: { text: title } } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  isActive?: boolean;\n  onSubmit: (password: string) => void;\n  onClearError?: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder,\n  hint,\n  submitLabel,\n  onSubmit,\n  onClearError,\n  onReset,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(lang('SettingsPasswordEqual'));\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword, lang]);\n\n  const handleClearError = useCallback(() => {\n    if (onClearError) {\n      onClearError();\n    }\n    setValidationError('');\n  }, [onClearError]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder || lang('CurrentPasswordPlaceholder')}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel}\n          onClearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onStart: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          {lang('SettingsPasscodeStart1', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SettingsPasscodeStart2', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.passcode } as Complete<StateProps>),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreviewTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreviewTerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettingsLastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreviewApp')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n        {renderingSession?.ip && (\n          <>\n            <dt>{lang('SessionPreviewIp')}</dt>\n            <dd>{renderingSession.ip}</dd>\n          </>\n        )}\n\n        <dt>{lang('SessionPreviewLocation')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreviewIpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessionsViewAcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptSecret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptCalls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['activeSessions'];\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', { count: 1 }, { pluralValue: 1 }),\n      value: '7',\n    }, {\n      label: lang('Months', { count: 1 }, { pluralValue: 1 }),\n      value: '30',\n    }, {\n      label: lang('Months', { count: 3 }, { pluralValue: 3 }),\n      value: '90',\n    }, {\n      label: lang('Months', { count: 6 }, { pluralValue: 6 }),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', { count: 1 }, { pluralValue: 1 }),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessionsCurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: lang('SessionTerminate'),\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(oldLang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => global.activeSessions as Complete<StateProps>,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): Complete<StateProps> => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser || {};\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = currentUser && getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental = ({\n  isActive,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n  onReset,\n}: OwnProps & StateProps) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const accounts = useMultiaccountInfo();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true, true);\n  }, [accounts]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          href={newAccountUrl}\n          icon=\"add-user\"\n        >\n          <div className=\"title\">Login on Test Server</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((averageColor) => {\n          setThemeSettings({\n            theme: themeRef.current!,\n            backgroundColor: rgb2hex(averageColor),\n            patternColor: getPatternColor(averageColor),\n          });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsv2rgb, rgb2hex, rgb2hsv,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSV = rgb2hsv(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsv, setHsv] = useState(() => getInitialHsv(backgroundColor));\n  // Cache for drag handlers\n  const hsvRef = useRef(hsv);\n  useEffect(() => {\n    hsvRef.current = hsv;\n  }, [hsv]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsv2positions(hsvRef.current, rectsRef.current!);\n\n      setHsv(positions2hsv({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsv2positions(hsvRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsv(positions2hsv({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsv2positions(hsv, rectsRef.current) : {};\n  const hex = rgb2hex(hsv2rgb(hsv));\n  const hue = hsv[0];\n  const hueHex = rgb2hex(hsv2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsv2rgb(hsv);\n    const color = rgb2hex(rgb);\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsv, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsv(rgb2hsv(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsv(rgb2hsv(hex2rgb(hexValue)));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsv(rgb2hsv(hex2rgb(e.currentTarget.dataset.color!)));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: ${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: ${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === hex ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsv(backgroundColor?: string) {\n  return backgroundColor?.startsWith('#')\n    ? rgb2hsv(hex2rgb(backgroundColor))\n    : DEFAULT_HSV;\n}\n\nfunction hsv2positions(hsv: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsv[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsv[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsv[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsv(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsv2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsv2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/profile/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            isForSettings\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const areChannelsMuted = Boolean(notifyDefaults?.channels?.mutedUntil);\n  const areGroupsMuted = Boolean(notifyDefaults?.groups?.mutedUntil);\n  const areUsersMuted = Boolean(notifyDefaults?.users?.mutedUntil);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(!areUsersMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areUsersMuted}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areUsersMuted}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(!areGroupsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areGroupsMuted}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areGroupsMuted}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(!areChannelsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areChannelsMuted}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areChannelsMuted}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n      notifyDefaults: global.settings.notifyDefaults,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">{lang('SettingsPerformanceGranularTitle')}</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: appConfig.canDisplayAutoarchiveSetting || isCurrentUserPremium,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      } as Complete<StateProps>;\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: ApiReaction;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction?.type === 'emoji' ? selectedReaction.emoticon : undefined}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  codeLength?: number;\n  recoveryEmail?: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.twoFaSettings } as Complete<StateProps>),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MUTE_INDEFINITE_TIMESTAMP } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MUTE_INDEFINITE_TIMESTAMP;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {} as Complete<StateProps>;\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const chatInfo = selectTabState(global).chatInfo;\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: chatInfo.isOpen && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport focusNoScroll from '../../../util/focusNoScroll';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig;\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig;\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type React from '../../../lib/teact/teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachment, ApiChatMember, ApiMessage, ApiSticker } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n  shouldSaveAttachmentsCompression?: boolean;\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSaveAttachmentsCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        ...(shouldSaveAttachmentsCompression && {\n          defaultAttachmentCompression: attachmentSettings.shouldCompress ? 'compress' : 'original',\n        }),\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const anyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, anyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(\n    lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    },\n  ) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      hasAbsoluteCloseButton={Boolean(renderingAttachments)}\n      noBackdropClose\n      isLowStackPriority\n      onClose={onClear}\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const { shouldSaveAttachmentsCompression } = selectTabState(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n      shouldSaveAttachmentsCompression,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount: number;\n  maxTitleLength: number;\n  maxItemLength: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount,\n  maxTitleLength,\n  maxItemLength,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>(() => [{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const modalTitle = isAddTaskMode ? 'TitleAppendToDoList'\n      : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(modalTitle)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  const moreTasksCount = maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount2', {\n          count: moreTasksCount,\n        }, {\n          pluralValue: moreTasksCount,\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig.todoItemsMax,\n      maxTitleLength: appConfig.todoTitleLengthMax,\n      maxItemLength: appConfig.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(SymbolMenuTabs.Stickers);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentCustomEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip no-scrollbar',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=\"${formattedLinkUrl}\" class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      if (!linkUrl.trim()) return;\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingSpoilerAria')}\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingBoldAria')}\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingItalicAria')}\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingUnderlineAria')}\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingStrikethroughAria')}\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingMonospaceAria')}\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('FormattingAddLinkAria')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder={lang('FormattingEnterUrl')}\n              autoComplete=\"off\"\n              spellCheck={IS_TAURI ? false : undefined}\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...emojis, ...customEmojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip no-scrollbar',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm || switchWebview)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): Complete<StateProps> => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang(\n            'ChannelStatsViewsCount',\n            { count: postStatistic.viewsCount },\n            { pluralValue: postStatistic.viewsCount },\n          )}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): Complete<StateProps> => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  currentBio,\n  isActive,\n  maxBioLength,\n  onClose,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): Complete<StateProps> => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                className=\"align-checkbox-with-list-buttons\"\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(() => Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions } = global.appConfig;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { MUTE_INDEFINITE_TIMESTAMP, SERVICE_NOTIFICATIONS_USER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n    updateChatMutedState,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, markProfileFieldsTouched, unmarkProfileFieldsTouched] = useFlag();\n  const [error, setError] = useState<string | undefined>();\n  const [isNotificationsTouched, markNotificationsTouched, unmarkNotificationsTouched] = useFlag();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    unmarkProfileFieldsTouched();\n    unmarkNotificationsTouched();\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileFieldsTouched();\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    markProfileFieldsTouched();\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    markNotificationsTouched();\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n\n    if (isNotificationsTouched) {\n      updateChatMutedState({\n        chatId: userId, mutedUntil: isNotificationsEnabled ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP,\n      });\n    }\n  }, [firstName, isNotificationsEnabled, isNotificationsTouched, lastName, userId]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index';\nimport type { ManagementScreens } from '../../../types/index';\nimport { ChatCreationProgress } from '../../../types/index';\n\nimport { getActions, withGlobal } from '../../../global/index';\nimport { selectChat, selectTabState } from '../../../global/selectors/index';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(() => lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        onClearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n  isActive?: boolean;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange, isActive }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!isActive || IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(cardNumberRef.current);\n    });\n  }, [isActive]);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n  isActive?: boolean;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n  isActive,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n          isActive={isActive}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport focusNoScroll from '../../util/focusNoScroll';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    requestMeasure(() => {\n      focusNoScroll(inputRef.current);\n    });\n  }, [inputRef]);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (form?.savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: form.savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, form?.savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep, isActive?: boolean) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={form!.savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n            isActive={isActive}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          {lang('PaymentsProvidesNotSupported', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          {(isActive) => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step, isActive)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const freezeUntilDate = global.appConfig.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ndqkeHwR\",\"header\":\"ChJT6ggP\",\"description\":\"ravQhVQQ\",\"descriptionPreview\":\"_K5HhOM0\",\"negative\":\"X6iX4F56\",\"previewLink\":\"yY4hj8r_\",\"backLink\":\"dcNVNCXo\",\"title\":\"IvsV0tkW\",\"ratingProgress\":\"XYpzs7CQ\",\"withPreview\":\"UgviXkNW\",\"subtitle\":\"OvdHupR0\",\"footer\":\"XtZPIDLP\",\"badge\":\"JdeFDQBI\",\"understoodIcon\":\"Lwz8rpdL\",\"badgeAdded\":\"Lr6JUU14\",\"badgeDeducted\":\"OxZxdqcn\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsRating, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress, { type AnimationDirection } from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './ProfileRatingModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['profileRatingModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  currentUserId?: string;\n  starsRating?: ApiStarsRating;\n  pendingRating?: ApiStarsRating;\n  pendingRatingDate?: number;\n};\n\nconst ProfileRatingModal = ({\n  modal,\n  user,\n  currentUserId,\n  starsRating,\n  pendingRating,\n  pendingRatingDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeProfileRatingModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const [showFutureRating, setShowFutureRating] = useState(false);\n\n  const handleClose = useLastCallback(() => {\n    closeProfileRatingModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShowFutureRating(false);\n    }\n  }, [isOpen]);\n\n  const handleShowFuture = useLastCallback(() => {\n    setShowFutureRating(true);\n  });\n\n  const handleShowCurrent = useLastCallback(() => {\n    setShowFutureRating(false);\n  });\n\n  const renderBadge = (type: 'added' | 'deducted') => {\n    const isAdded = type === 'added';\n    const badgeText = isAdded ? lang('RatingBadgeAdded') : lang('RatingBadgeDeducted');\n    const badgeClass = isAdded ? styles.badgeAdded : styles.badgeDeducted;\n\n    return (\n      <span className={buildClassName(styles.badge, badgeClass)}>\n        {badgeText}\n      </span>\n    );\n  };\n\n  const header = useMemo(() => {\n    if (!modal || !user || !starsRating || !isOpen) return undefined;\n\n    const rating = showFutureRating && pendingRating ? pendingRating : starsRating;\n    const currentStars = rating.stars;\n    const currentLevelStars = rating.currentLevelStars;\n    const nextLevelStars = rating.nextLevelStars;\n    const currentLevel = rating.level;\n    const nextLevel = currentLevel + 1;\n    const isNegative = currentLevel < 0;\n    const pendingLevel = !showFutureRating && pendingRating ? pendingRating.level : starsRating.level;\n\n    let levelProgress = 0;\n\n    if (!nextLevelStars) {\n      levelProgress = 1;\n    } else if (nextLevelStars > currentLevelStars) {\n      levelProgress = Math.max(0.03, (currentStars - currentLevelStars) / (nextLevelStars - currentLevelStars));\n    } else {\n      levelProgress = 1;\n    }\n\n    const progress = isNegative ? 0.5 : Math.max(0, Math.min(1, levelProgress));\n\n    const waitTime = pendingRatingDate ? pendingRatingDate - Math.floor(Date.now() / 1000) : 0;\n    const pendingPoints = pendingRating ? pendingRating.stars - starsRating.stars : 0;\n    const shouldShowPreview = pendingRating && pendingRatingDate;\n\n    const renderPreviewDescription = () => {\n      if (!shouldShowPreview) return undefined;\n\n      return (\n        <Transition\n          name=\"fade\"\n          className={buildClassName(styles.descriptionPreview, isNegative && styles.negative)}\n          activeKey={showFutureRating ? 1 : 0}\n          shouldCleanup\n          shouldRestoreHeight\n        >\n          {showFutureRating ? (\n            <p>\n              {lang('DescriptionFutureRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.backLink} onClick={handleShowCurrent}>\n                    {lang('LinkDescriptionRatingBack')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          ) : (\n            <p>\n              {lang('DescriptionPendingRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.previewLink} onClick={handleShowFuture}>\n                    {lang('LinkDescriptionRatingPreview')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          )}\n        </Transition>\n      );\n    };\n\n    let animationDirection: AnimationDirection = 'none';\n    if (currentLevel >= 0 && pendingLevel >= 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel > pendingLevel ? 'forward' : 'backward';\n    }\n\n    if (currentLevel < 0 && pendingLevel < 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel < pendingLevel ? 'backward' : 'forward';\n    }\n\n    const userFallbackText = lang('ActionFallbackUser');\n\n    return (\n      <div className={styles.header}>\n        <PremiumProgress\n          leftText={isNegative ? undefined : lang('RatingLevel', { level: currentLevel })}\n          rightText={isNegative ? lang('RatingNegativeLevel') : lang('RatingLevel', { level: nextLevel })}\n          floatingBadgeIcon={isNegative ? 'warning' : 'crown-wear'}\n          floatingBadgeText={isNegative ? currentLevel.toString()\n            : `${lang.number(currentStars)} / ${lang.number(nextLevelStars || currentStars)}`}\n          progress={progress}\n          isPrimary={currentLevel >= 0}\n          isNegative={currentLevel < 0}\n          animationDirection={animationDirection}\n          className={buildClassName(styles.ratingProgress, shouldShowPreview && styles.withPreview)}\n        />\n        {renderPreviewDescription()}\n        <div className={styles.title}>\n          {lang('TitleRating')}\n        </div>\n        <p className={styles.description}>\n          {user?.id === currentUserId\n            ? lang('RatingYourReflectsActivity')\n            : lang('RatingReflectsActivity', { name: getPeerTitle(lang, user) || userFallbackText },\n              { withMarkdown: true, withNodes: true })}\n        </p>\n      </div>\n    );\n  }, [modal, user, currentUserId, starsRating,\n    pendingRating, pendingRatingDate, showFutureRating,\n    lang, handleShowFuture, handleShowCurrent, isOpen]);\n\n  const listItemData = [\n    ['closed-gift', lang('RatingGiftsFromTelegram'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsFromTelegramDesc')}\n      </span>\n    )],\n    ['user-stars', lang('RatingGiftsAndPostsFromUsers'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsAndPostsFromUsersDesc')}\n      </span>\n    )],\n    ['stars-refund', lang('RatingRefundsAndConversions'), (\n      <span className={styles.subtitle}>\n        {renderBadge('deducted')}\n        {lang('RatingRefundsAndConversionsDesc')}\n      </span>\n    )],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          onClick={handleClose}\n        >\n          <Icon name=\"understood\" className={styles.understoodIcon} />\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen, handleClose]);\n\n  return (\n    <TableAboutModal\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId;\n    const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n    const userFullInfo = modal?.userId\n      ? selectUserFullInfo(global, modal.userId) : undefined;\n\n    const starsRating = userFullInfo?.starsRating;\n    const pendingRating = userFullInfo?.starsMyPendingRating;\n    const pendingRatingDate = userFullInfo?.starsMyPendingRatingDate;\n\n    return {\n      user,\n      currentUserId,\n      starsRating,\n      pendingRating,\n      pendingRatingDate,\n    };\n  },\n)(ProfileRatingModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LyrhszzE\",\"closeButton\":\"jHVcj192\",\"markAsReadButton\":\"Bp8eDIso\",\"chatInfoOverride\":\"FsTceiGs\"};","import type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiTypingStatus, ApiUpdateConnectionStateType } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getIsSavedDialog } from '../../../global/helpers';\nimport { selectChat, selectThreadParam, selectTopic } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\n\nimport styles from './QuickPreviewModalHeader.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  onClose: VoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSavedDialog?: boolean;\n  unreadCount?: number;\n  hasUnreadMark?: boolean;\n};\n\nconst EMOJI_STATUS_SIZE = 22;\n\nconst QuickPreviewModalHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  chat,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  typingStatus,\n  isSavedDialog,\n  unreadCount,\n  hasUnreadMark,\n  onClose,\n}) => {\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { markChatMessagesRead } = getActions();\n  const {\n    connectionStatusText,\n  } = useConnectionStatus(oldLang, connectionState, isSyncing || isFetchingDifference, true);\n\n  const handleMarkAsRead = useLastCallback(() => {\n    markChatMessagesRead({ id: chatId });\n  });\n\n  const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n  const realChatId = isSavedDialog ? String(MAIN_THREAD_ID) : chatId;\n  const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n\n  return (\n    <div className={styles.root}>\n      {Boolean(unreadCount || hasUnreadMark) && (\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('ChatListContextMaskAsRead')}\n          onClick={handleMarkAsRead}\n          className={styles.markAsReadButton}\n        >\n          <Icon name=\"readchats\" />\n        </Button>\n      )}\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n        className={styles.closeButton}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className=\"modal-title\">\n        <div className={styles.chatInfoOverride}>\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={false}\n              withMediaViewer={false}\n              withStory={false}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={false}\n              withFullInfo={false}\n              withUpdatingStatus\n              withStory={false}\n              isSavedDialog={isSavedDialog}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const typingStatus = selectThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'typingStatus');\n    const isSavedDialog = getIsSavedDialog(chatId, threadId || MAIN_THREAD_ID, global.currentUserId);\n    const unreadCount = chat?.isForum && threadId\n      ? selectTopic(global, chatId, threadId)?.unreadCount\n      : chat?.unreadCount;\n\n    return {\n      chat,\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      typingStatus,\n      isSavedDialog,\n      unreadCount,\n      hasUnreadMark: chat?.hasUnreadMark,\n    };\n  },\n)(QuickPreviewModalHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJTLQd8O\",\"content\":\"zUonvDbp\",\"column\":\"NYlix6SL\",\"messagesLayout\":\"IJ0EBwJk\"};","import type { FC } from '@teact';\nimport { memo, useEffect } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MessageList from '../../middle/MessageList';\nimport Modal from '../../ui/Modal';\nimport QuickPreviewModalHeader from './QuickPreviewModalHeader';\n\nimport backgroundStyles from '../../../styles/_patternBackground.module.scss';\nimport styles from './QuickPreviewModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['quickPreview'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isBackgroundBlurred?: boolean;\n};\n\nconst QuickPreviewModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  customBackground,\n  backgroundColor,\n  patternColor,\n  isBackgroundBlurred,\n}) => {\n  const { closeQuickPreview, openChat, openThread } = getActions();\n\n  const chatId = modal?.chatId;\n  const threadId = modal?.threadId;\n  const isOpen = Boolean(chatId);\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleClose = useLastCallback(() => {\n    closeQuickPreview();\n  });\n\n  const handleContentClick = useLastCallback(() => {\n    if (chatId) {\n      if (threadId) {\n        openThread({ chatId, threadId, shouldReplaceHistory: true });\n      } else {\n        openChat({ id: chatId, shouldReplaceHistory: true });\n      }\n      closeQuickPreview();\n    }\n  });\n\n  useEffect(() => isOpen ? captureEscKeyListener(handleClose) : undefined, [isOpen, handleClose]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: handleClose,\n  });\n\n  const { chatId: renderingChatId, threadId: renderingThreadId } = useCurrentOrPrev(modal, true) || {};\n\n  const bgClassName = buildClassName(\n    backgroundStyles.background,\n    customBackground && backgroundStyles.customBgImage,\n    backgroundColor && backgroundStyles.customBgColor,\n    customBackground && isBackgroundBlurred && backgroundStyles.blurred,\n  );\n\n  if (!renderingChatId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={<QuickPreviewModalHeader chatId={renderingChatId} threadId={renderingThreadId} onClose={handleClose} />}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={styles.column}\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n        onClick={handleContentClick}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <div className={styles.messagesLayout}>\n          <MessageList\n            chatId={renderingChatId}\n            threadId={renderingThreadId || MAIN_THREAD_ID}\n            type=\"thread\"\n            canPost={false}\n            isReady\n            withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n            isQuickPreview\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal: chatId }): Complete<StateProps> => {\n  const theme = selectTheme(global);\n  const {\n    isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n  } = selectThemeValues(global, theme) || {};\n\n  return {\n    theme,\n    customBackground,\n    backgroundColor,\n    patternColor,\n    isBackgroundBlurred,\n  };\n})(QuickPreviewModal));\n"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","origin","params","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","createGhost","source","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","PICTURE_IN_PICTURE_SIGNAL","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isGif","isFromSharedMedia","isFromSearch","contentType","getMediaSearchType","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","includes","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","collectedMessageIds","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getMessageContentIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","IS_TAURI","IS_MAC_OS","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","storyExpireDate","viewersExpireDate","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","withMarkdown","renderTextFilters","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasAbsoluteCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hex2rgbaObj","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgbaObj","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_COLORS","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_STROKE_WIDTH","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","strokeWidth","segmentsCount","colorStops","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","selectCustomEmoji","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","props","CountryPickerModal","useModuleLoader","Bundles","Extra","GiveawayChannelPickerModal","giveawayChatId","selectionLimit","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","concat","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","newSelectedIds","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","Set","sortUserIds","has","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountryIds","setSelectedCountryIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","setEmojiStatus","isFree","hasEffect","isCustomEmoji","isLocked","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","withSparkles","component","GiftEffectWrapper","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","onClearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemClassName","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","minStarsAmount","starsSuggestedPostAmountMin","ageMinSeconds","starsSuggestedPostAgeMin","futureMin","starsSuggestedPostFutureMin","futureMax","starsSuggestedPostFutureMax","tonMaxAmount","tonSuggestedPostAmountMax","tonMinAmount","tonSuggestedPostAmountMin","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","tonCommissionPermille","tonSuggestedPostCommissionPermille","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutFiles","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasIpRevealingMedia","selectHasIpRevealingMedia","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleFileIpConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","ItemPicker","notFoundText","noScrollRestore","isViewOnly","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","focusNoScroll","selectedValues","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","pickerSelector","pickerTitle","main","picker","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","updateChatMutedState","openQuickPreview","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","useChatContextActions","altKey","handleOpenApp","handleDragEnter","onDragEnter","useSelectWithEnter","onDragLeave","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","checkSearchPostsFlood","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","FOLDER_COLORS","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","FOLDER_TITLE_MAX_LENGTH","getApiPeerColorClass","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","areTagsEnabled","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","toggleDialogFilterTags","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleToggleTags","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","shouldRenderColor","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","accounts","useMultiaccountInfo","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","newAccountUrl","freeIndex","getAccountSlotUrl","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","GeneralChatBackground","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","averageColor","rgb2hex","getPatternColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSV","rgb2hsv","hex2rgb","PREDEFINED_COLORS","hsv2positions","hsv","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsv","colorPickerRef","huePickerRef","isFirstRunRef","setHsv","getInitialHsv","hsvRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsv2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","isForSettings","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","notifyDefaults","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","areChannelsMuted","areGroupsMuted","groups","areUsersMuted","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","clearError","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","MUTE_INDEFINITE_TIMESTAMP","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","chatInfo","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","shouldSaveAttachmentsCompression","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","defaultAttachmentCompression","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDrop","onDragOver","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","moreTasksCount","tasksToRender","stateIndex","renderItems","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","spellCheck","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","isGraphReady","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","markProfileFieldsTouched","unmarkProfileFieldsTouched","isNotificationsTouched","markNotificationsTouched","unmarkNotificationsTouched","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","renderModalContent","currentStep","isShippingAddressRequested","ConfirmPassword","isPasswordMissing","isEmailRequested","isEmailSentToProvider","isPhoneRequested","isPhoneSentToProvider","isNameRequested","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","shouldFillRequestedData","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop","starsRating","pendingRating","starsMyPendingRating","pendingRatingDate","starsMyPendingRatingDate","ProfileRatingModal","closeProfileRatingModal","showFutureRating","setShowFutureRating","handleShowFuture","handleShowCurrent","renderBadge","badgeClass","rating","currentStars","currentLevelStars","nextLevelStars","nextLevel","isNegative","pendingLevel","waitTime","pendingPoints","shouldShowPreview","animationDirection","userFallbackText","renderPreviewDescription","shouldRestoreHeight","typingStatus","selectThreadParam","unreadCount","connectionState","isSyncing","isFetchingDifference","hasUnreadMark","QuickPreviewModalHeader","markChatMessagesRead","connectionStatusText","useConnectionStatus","handleMarkAsRead","savedMessagesStatus","realChatId","displayChatId","withDots","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","withMonoforumStatus","QuickPreviewModal","closeQuickPreview","handleContentClick","renderingChatId","renderingThreadId","backgroundStyles","customBgImage","customBgColor","blurred","MessageList","withDefaultBg","isQuickPreview"],"sourceRoot":""}