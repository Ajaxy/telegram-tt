{"version":3,"file":"7768.61fe31828040ca529b23.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/UserGift.module.scss?7193","webpack://telegram-t/./src/components/common/gift/UserGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs, WebPageMediaSize,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMedia, isFullscreen } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    chat, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, peer, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const key = webApp && getWebAppKey(webApp);\n  const originalWebApp = key ? openedWebApps[key] : undefined;\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webApp,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...updatedWebAppKey === activeWebAppKey && {\n        activeWebApp: updatedValue,\n      },\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  const newActiveWebApp = openedWebApps[webAppKey];\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebApp: newActiveWebApp,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebApp: webApp },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  if (!currentTabState.webApps.activeWebApp) return global;\n\n  return removeWebAppFromOpenList(global, currentTabState.webApps.activeWebApp, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, { ...webApp, isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = currentTabState.webApps.openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((key) => key !== removingWebAppKey);\n  }\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n\n  const isRemovedAppActive = activeWebApp && (getWebAppKey(activeWebApp) === getWebAppKey(webApp));\n\n  const openedWebAppsValues = Object.values(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebApp: openedWebAppsCount\n          ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([url, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebApp: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = currentTabState.webApps.activeWebApp;\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  newActiveWebApp.isCloseModalOpen = true;\n\n  const key = getWebAppKey(newActiveWebApp);\n\n  if (key) webAppsNotAllowedToClose[key] = newActiveWebApp;\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k in webAppsNotAllowedToClose);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList, clearOpenedWebApps, hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps, removeActiveWebAppFromOpenList, removeWebAppFromOpenList,\n  replaceInlineBotSettings, replaceInlineBotsIsLoading,\n  replaceIsWebAppModalOpen, replaceWebAppModalState, updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (webApp) {\n    global = getGlobal();\n    global = addWebAppToOpenList(global, webApp, true, true, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    peerId,\n    botId,\n    appName,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, webApp, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebApp: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsValues = Object.values(openedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebApp: openedWebAppsCount ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { webApp, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, webApp, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const newModalState = tabState.webApps.modalState === 'maximized' ? 'minimized' : 'maximized';\n  return replaceWebAppModalState(global, newModalState, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  const activeWebApp = tabState.webApps.activeWebApp;\n  if (!activeWebApp?.url) return undefined;\n\n  const updatedApp = {\n    ...activeWebApp,\n    slug: payload.slug,\n  };\n\n  return updateWebApp(global, updatedApp, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStarGift, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, userId, message, shouldHideName, tabId = getCurrentTabId(),\n  } = payload;\n\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance < gift.stars) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    userId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n  };\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    starGift: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { starGift, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || starGift?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || starGift?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: starGift ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type {\n  StarGiftCategory,\n} from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  updateStarsBalance,\n} from '../../reducers';\nimport {\n  selectPeer,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const { gifts, stickers } = result;\n\n  const starGiftsById = buildCollectionByKey(gifts, 'id');\n\n  const starGiftCategoriesByName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(starGiftsById);\n  const allStarGifts = Object.values(starGiftsById);\n\n  const limitedStarGiftIds = allStarGifts.map(\n    (gift) => {\n      return gift.isLimited ? gift.id : undefined;\n    },\n  ).filter(Boolean) as string[];\n\n  starGiftCategoriesByName.all = allStarGiftIds;\n  starGiftCategoriesByName.limited = limitedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!starGiftCategoriesByName[starsCategory]) {\n      starGiftCategoriesByName[starsCategory] = [];\n    }\n    starGiftCategoriesByName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGiftsById,\n    starGiftCategoriesByName,\n    stickers: {\n      ...global.stickers,\n      starGifts: {\n        stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserGifts', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefresh } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const currentGifts = global.users.giftsById[userId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchUserStarGifts', {\n    user,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = {\n    ...global,\n    users: {\n      ...global.users,\n      giftsById: {\n        ...global.users.giftsById,\n        [userId]: {\n          gifts: newGifts,\n          nextOffset: result.nextOffset,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisilibity', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, shouldUnsave } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('saveStarGift', {\n    user,\n    messageId,\n    shouldUnsave,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('convertStarGift', {\n    user,\n    messageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { chat, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiUserStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift') return;\n  const starGift = action.starGift!;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n  } satisfies ApiUserStarGift;\n\n  actions.openGiftInfoModal({ userId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userId = 'userId' in payload ? payload.userId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      userId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { applyLangPackDifference, requestLangPackDifference } from '../../../util/localization';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApps.activeWebApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeActiveWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forUserId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n      const newIndex = pinnedIndexAboveFocused !== -1 ? pinnedIndexAboveFocused : 0;\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  availableStars?: number;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectAreStarsLoaded(global: GlobalState) {\n  return Boolean(global.stars);\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  availableStars,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const areStarsLoaded = useSelector(selectAreStarsLoaded);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && (!availableStars || amount > availableStars)) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, availableStars, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  availableStars?: number;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  availableStars,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n            availableStars={availableStars}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  availableStars?: number;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  availableStars,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (message.isDeleting && element) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        availableStars={availableStars}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            <span className=\"forward-title-container\">\n              {asForwarded && (\n                <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n              )}\n              {asForwarded && (\n                <span className=\"forward-title\">\n                  {lang('ForwardedFrom')}\n                </span>\n              )}\n            </span>\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            availableStars={availableStars}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const { balance: availableStars } = global.stars || {};\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      availableStars,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  avatarPeer,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n    openMediaViewer,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { Signal } from '../../util/signals';\n\nimport { getMessageIsSpoiler, getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  getLoadingPinnedId: Signal<number | undefined>;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  getLoadingPinnedId, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(messageId);\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          getLoadingPinnedId={getLoadingPinnedId}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Db6J462r\",\"avatar\":\"vDMy3ohp\",\"stars\":\"xtk5vN0o\",\"hiddenGift\":\"X8rK1aAQ\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiUser, ApiUserStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './UserGift.module.scss';\n\ntype OwnProps = {\n  userId: string;\n  gift: ApiUserStarGift;\n};\n\ntype StateProps = {\n  fromPeer?: ApiUser;\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst UserGift = ({\n  userId, gift, fromPeer, sticker,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      userId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  if (!sticker) return undefined;\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      <div className={styles.stars}>\n        {formatCurrency(gift.gift.stars, STARS_CURRENCY_CODE)}\n      </div>\n      {gift.gift.availabilityTotal && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(gift.gift.availabilityTotal))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.gift.stickerId];\n    const fromPeer = gift.fromId ? selectUser(global, gift.fromId) : undefined;\n\n    return {\n      sticker,\n      fromPeer,\n    };\n  },\n)(UserGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStarGift,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport UserGift from '../common/gift/UserGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiUserStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n    loadUserGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasGiftsTab ? [{ type: 'gifts' as const, title: 'ProfileGifts' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    hasGiftsTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadUserGifts({ userId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <UserGift userId={chatId} key={`${gift.date}-${gift.fromId}-${gift.gift.id}`} gift={gift} />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(userFullInfo?.starGiftCount) && !isSavedDialog;\n    const userGifts = global.users.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: userGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ConfettiStyle, TabState } from '../../../global/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition, SVG_NAMESPACE } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    const filter = document.createElementNS(SVG_NAMESPACE, 'filter');\n    filter.setAttribute('x', '0');\n    filter.setAttribute('y', '0');\n    filter.setAttribute('width', '1');\n    filter.setAttribute('height', '1');\n    filter.setAttribute('color-interpolation-filters', 'sRGB');\n    addSvgDefinition(filter, FILTER_ID);\n\n    const feImage = document.createElementNS(SVG_NAMESPACE, 'feImage');\n    feImage.setAttribute('href', waveRipple);\n    feImage.setAttribute('result', 'waveImage');\n    filter.appendChild(feImage);\n\n    const feDisplacementMap = document.createElementNS(SVG_NAMESPACE, 'feDisplacementMap');\n    feDisplacementMap.setAttribute('in', 'SourceGraphic');\n    feDisplacementMap.setAttribute('in2', 'waveImage');\n    feDisplacementMap.setAttribute('scale', FILTER_SCALE);\n    feDisplacementMap.setAttribute('xChannelSelector', 'R');\n    feDisplacementMap.setAttribute('yChannelSelector', 'B');\n    filter.appendChild(feDisplacementMap);\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'stargift') {\n    const {\n      userId, shouldHideName, giftId, message,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stargift',\n      user,\n      shouldHideName,\n      giftId,\n      message,\n    };\n  }\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option, message,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n        message,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    giveawayPostId: message.id,\n  };\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","title","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webApp","_len3","_key3","currentTabState","openedWebApps","webApps","key","getWebAppKey","originalWebApp","updatedValue","updatedWebAppKey","activeWebApp","activeWebAppKey","addWebAppToOpenList","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","isRemovedAppActive","openedWebAppsValues","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len12","_ref13","_key12","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","isWepAppOpened","webAppKey","_len4","_key4","newActiveWebApp","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","appName","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","_len6","_key6","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","_len10","_key10","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","k","clearOpenedWebApps","_len11","_key11","replaceWebAppModalState","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","isPaymentFormLoading","form","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","balance","stars","openStarsBalanceModal","giftId","sendStarPaymentForm","starGift","formId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","starGiftsById","starGiftCategoriesByName","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","starsCategory","starGifts","shouldRefresh","currentGifts","giftsById","localNextOffset","newGifts","isCancelled","subscriptionId","loadUserGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","actionText","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","giftReceiverId","starsToConvert","isNameHidden","isUnsaved","isSaved","fromId","isConverted","openGiftInfoModal","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectAreStarsLoaded","recentReactors","chosenClassName","availableStars","onPaidClick","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","areStarsLoaded","useSelector","handlePaidClick","prevReaction","left","top","offsetWidth","offsetHeight","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","Sparkles","preset","PaidReactionEmoji","animatedEmoji","paidCounter","ReactionAnimatedEmoji","counter","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","ReactionButton","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","renderMediaContent","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","getLoadingPinnedId","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndex","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","stickerId","fromPeer","CUSTOM_PEER_HIDDEN","availabilityTotal","GiftRibbon","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","userGifts","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","UserGift","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","createElementNS","SVG_NAMESPACE","addSvgDefinition","feImage","waveRipple","appendChild","feDisplacementMap","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","SnapEffectContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","purpose","boostChannelId","boostChannel","isOnlyForNewSubscribers","buildStarsTransactionCustomPeer","subtitleKey","customPeerAvatarColor","formatStarsTransactionAmount","transactionId","isMyGift","giveawayPostId"],"sourceRoot":""}