{"version":3,"file":"9451.0f4e37c7b9caf9cedd97.js","mappings":"oPACA,SAAgB,QAAU,WAAW,OAAS,WAAW,OAAS,WAAW,WAAa,WAAW,UAAY,WAAW,aAAe,WAAW,YAAc,WAAW,aAAe,WAAW,YAAc,WAAW,SAAW,Y,eCqB7O,MAoHA,GAAeA,EAAAA,EAAAA,KAxG2BC,EACxCC,WACAC,YACAC,UACAC,qBACAC,oBACAC,cACAC,cAEA,MAAMC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,MAENC,EAAoBC,EAAqBC,IAAyBC,EAAAA,EAAAA,MAEzEC,EAAAA,EAAAA,KAAU,KACHf,GACHa,MAED,CAACb,IAEJ,MAAOgB,EAAkBC,IAAaC,EAAAA,EAAAA,KAAQ,KAC5C,IAAKhB,EAAS,MAAO,MAACiB,GAAW,GAEjC,MAAMC,EAAYlB,EAAQmB,QAAO,CAACC,EAAKC,IACrCD,EAAIE,MAAQD,EAAOC,MAAQF,EAAMC,IAE7BE,EAAepB,GAAee,EAAUI,MAAQnB,EAEhDqB,EAAwG,GAC9G,IAAIC,EAA2B,EAC3BC,GAAmB,EAgBvB,OAfA1B,EAAQ2B,SAAQ,CAACN,EAAQO,KAClBP,EAAOQ,YAAYJ,IAEpBtB,IAAgBoB,GAAgBF,EAAOC,MAAQnB,IAC9CM,IAAsBY,EAAOQ,WAIlCL,EAAOM,KAAK,CACVT,SACAU,WAAYC,KAAKC,IAAIR,EArDL,GAsDhBS,OAAQN,IAAU5B,EAAQmC,OAAS,IANnCT,GAAmB,MAUhB,CAACF,EAAQE,KACf,CAACjB,EAAoBT,EAASG,IAEjC,OACEiC,EAAAA,EAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,EAAAA,GAAeC,EAAOtC,QAASD,GAAWwC,SAAA,CACvDzB,GAAkB0B,KAAI,EAAGnB,SAAQU,aAAYG,aAC5C,MAAMC,EAASrB,GAAkBqB,OAC3BM,EAAQN,EAAS,GAAM,EACvBO,EAAiBrB,IAAWpB,EAElC,IAAI0C,EACJ,GAAItB,GAAU,YAAaA,EAAQ,CACjC,MAAMuB,EAASvB,EAAOwB,QAAQC,MAAMC,GAAQA,EAAIC,QAAU9C,KACrDmB,EAAOwB,QAAQ1B,QAAO,CAACC,EAAK2B,IAASA,EAAIC,MAAQ5B,EAAI4B,MAAQD,EAAM3B,GAAMC,EAAOwB,QAAQ,IAC7FF,EAAmBC,GAAQK,YAC7B,CAEA,OACEb,EAAAA,EAAAA,IAAA,OACErC,WAAWsC,EAAAA,EAAAA,GACTC,EAAOjB,QAAUoB,GAASP,GAAWI,EAAOY,WAAYR,GAAkBJ,EAAOa,QAGnF/C,QAASA,IAAMA,IAAUiB,GAAQkB,SAAA,EAEjCH,EAAAA,EAAAA,IAAA,OAAKrC,UAAWuC,EAAOc,UAAUb,SAAA,CAAC,KAE/Bc,EAAAA,EAAAA,IAAchC,EAAOC,QACtBgC,EAAAA,EAAAA,GAAA,OAAKvD,UAAWuC,EAAOiB,aAAcC,IAAKjD,EAAKkD,MAAQ,MAAQ,MAAMlB,SAClEmB,MAAMC,KAAK,CAAExB,OAAQJ,IAAcS,KAAI,KACtCc,EAAAA,EAAAA,GAACM,EAAAA,EAAQ,CAAC7D,UAAWuC,EAAOuB,YAAaC,KAAK,OAAOC,KAAK,gBAIhET,EAAAA,EAAAA,GAAA,OAAKvD,UAAWuC,EAAO0B,aAAazB,UACjC0B,EAAAA,EAAAA,GAAe1D,EAAMc,EAAO6C,OAAQ7C,EAAO8C,aAE5CzB,GAAmBzC,GAAsB,YAAaA,IACnDmE,QAAQzB,KACXW,EAAAA,EAAAA,GAAA,OAAKvD,UAAWuC,EAAO0B,aAAazB,UAClCe,EAAAA,EAAAA,GAAA,OAAKvD,UAAWuC,EAAOW,aAAaV,UACjC8B,EAAAA,EAAAA,GAAWhE,EAAQ,2BAA2BgD,EAAAA,EAAAA,IAAcV,WAnB9DtB,EAAOC,WA0BhBb,GAAsBM,IACtBqB,EAAAA,EAAAA,IAACkC,EAAAA,EAAM,CAACvE,UAAWuC,EAAOiC,YAAaC,QAAM,EAACC,mBAAiB,EAACrE,QAASM,EAAoB6B,SAAA,CAC1FlC,EAAQ,4BACTiD,EAAAA,EAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,EAAOqC,SAAUC,KAAK,iB,8HChHjD,MACMC,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAoCjD,GAAenF,EAAAA,EAAAA,KAlCsBoF,EAAGC,oBAAmBC,YACzD,MAAOC,EAAqBC,IAAyBxE,EAAAA,EAAAA,IAAQ,IACtDyE,EAAaC,IAAiB1E,EAAAA,EAAAA,IAAQ,IACvC,SAAE2E,IAAaC,EAAAA,EAAAA,MAEfC,EAAaF,EAAWG,EAAAA,IAA2BC,EAAAA,KAEzDC,EAAAA,EAAAA,GAAWN,EAZkB,KAa7B,MAAMO,GAAwBC,EAAAA,EAAAA,IAAYV,EAAuB,CAACA,IAElE,OACEhD,EAAAA,EAAAA,IAAA,OAAK2D,GAAG,SAAShG,UAAWmF,EAAQ,MAAQ,GAAG3C,SAAA,EAC3C4C,IACA7B,EAAAA,EAAAA,GAAA,OAAKvD,UAAU,oBAEjBuD,EAAAA,EAAAA,GAAC0C,EAAAA,EAAe,CACdjC,KAAMmB,EAAQe,EAAAA,IAAsBR,EACpC1F,UAAWsF,EAAc,SAAW,QACpCa,OAAQC,EAAAA,EAAeC,YACvBC,YAAaxB,EACbyB,QAAM,EACNC,OAAQV,KAEVvC,EAAAA,EAAAA,GAAC0C,EAAAA,EAAe,CACdjC,KAAMmB,EAAQe,EAAAA,IAAsBR,EACpC1F,UAAWsF,EAAc,QAAU,SACnCa,OAAQC,EAAAA,EAAeK,WACvBH,YAAapB,EAAoBH,EAAsBC,EACvDuB,QAAM,S,kICtBd,MAgDA,GAAe1G,EAAAA,EAAAA,KAhDS6G,EACtBC,SACAC,eACAC,iBACAC,SACAC,SACAC,aACAC,cACAC,gBACAC,UACAC,gBACAC,uBAGEhF,EAAAA,EAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACR3G,WAAWsC,EAAAA,EAAAA,GC7CM,WD6CsB+E,GACvCA,iBC9CwJ,WD+CxJE,wBAAsB,EACtBC,yBAA0BP,EAAc,yBAAsB/F,EAC9DiG,QAASA,EAAQ3E,SAAA,CAEhBqE,IAAkBtD,EAAAA,EAAAA,GAAA,OAAKvD,UCnDiF,WDmDvDwC,UAACe,EAAAA,EAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMgC,MAC9DC,GACDvD,EAAAA,EAAAA,GAAA,OAAAf,SACGoE,GAAcnE,KAAI,EAAEgF,EAAMC,EAAOC,MAE9BtF,EAAAA,EAAAA,IAACuF,EAAAA,EAAQ,CACPC,UAAQ,EACRC,WAAS,EACTL,KAAMA,EACNM,cC5D2H,WD4DxFvF,SAAA,EAEnCe,EAAAA,EAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEkF,KACzBnE,EAAAA,EAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEmF,WAKnCT,IAAiB3D,EAAAA,EAAAA,GAACyE,EAAAA,EAAS,CAAChI,UCpEkJ,aDqE9K+G,EACAC,IACCzD,EAAAA,EAAAA,GAACgB,EAAAA,EAAM,CAACP,KAAK,UAAU3D,QAAS+G,GAAiBD,EAAQ3E,SAAEwE,Q,kBExEpD,SAASiB,EAAmBC,GACzC,MAAI,YAAaA,EACR,CACLC,EAAGD,EAAEE,QAAQ,GAAGC,QAChBC,EAAGJ,EAAEE,QAAQ,GAAGG,SAIb,CACLJ,EAAGD,EAAEG,QACLC,EAAGJ,EAAEK,QAET,C,6HCQA,MA2CA,GAAe1I,EAAAA,EAAAA,KA3CK2I,EAClBC,oBACAC,oBACAC,sBACAC,kBACAC,YACAC,yBACGC,MAEH,MAAMvI,GAAOD,EAAAA,EAAAA,KACPyI,EAAY3E,QAAQoE,GAAqBI,GAE/C,OACExG,EAAAA,EAAAA,IAACiF,EAAAA,EAAK,IAEAyB,EACJE,QAAM,EACNjJ,WAAWsC,EAAAA,EAAAA,GACTqG,GCrCmE,WDsCnEC,GCtC2C,WDuC3CG,EAAW/I,WAEbqH,kBAAkB/E,EAAAA,EAAAA,GCzCE,WDyC6ByG,EAAW1B,kBAC5D6B,iBAAiB5G,EAAAA,EAAAA,GC1CwE,WD0C1CyG,EAAWG,iBAAiB1G,SAAA,CAE1EuG,EAAWvG,SACXwG,IACCzF,EAAAA,EAAAA,GAAA,OAAKvD,UC9C6G,WD8C7EwC,UACnCe,EAAAA,EAAAA,GAACgB,EAAAA,EAAM,CACLuE,oBAAqBA,EACrBzI,QAASwI,GAAaE,EAAW5B,QACjCgC,MAAM,UACNnF,KAAK,UACLoF,SAAUV,EAAkBlG,SAE3BiG,GAAqBjI,EAAK,oB,+HEtDvC,QAA2H,W,eCqC3H,MA0EA,GAAeX,EAAAA,EAAAA,KA1EQwJ,EACrB1C,SACAe,QACA4B,YACAC,mBACAzC,SACA0C,cACAzC,SACAC,aACAhH,YACAiH,cACAE,UACAC,gBACAqC,iBACAC,yBAEA,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACfC,GAAiBC,EAAAA,EAAAA,IAAiBC,IACtCJ,EAAS,CAAE3D,GAAI+D,IACf5C,OAGF,OACE9E,EAAAA,EAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRqD,eAAgB3F,QAAQqD,GACxBH,wBAAyBG,EACzBF,yBAA0BP,EAAc,yBAAsB/F,EAC9D+H,QAAM,EACNnC,OAAQ0C,EACR9B,MAAOA,EACP1H,UAAWA,EACXqH,iBDrEoB,WCsEpBF,QAASA,EACTsC,eAAgBA,EAChBC,mBAAoBA,EAAmBlH,SAAA,CAEtC+G,IACChG,EAAAA,EAAAA,GAAC0G,EAAAA,EAAM,CAACC,KAAMX,EAAkBvF,KAAK,QAAQhE,UD3EiH,aC6E/J8G,GACDvD,EAAAA,EAAAA,GAAA,OAAKvD,UD9EwE,WC8EhDwC,SAC1B8G,GAAW7G,KAAI,EAAE0H,EAAOC,MACvB/H,EAAAA,EAAAA,IAAAgI,EAAAA,GAAA,CAAA7H,SAAA,CACG6B,QAAQ8F,KAAU5G,EAAAA,EAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,EAAAA,GAAeC,EDjFjB,YCiF4CC,SAAE2H,KAC/E5G,EAAAA,EAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,EAAAA,GAAeC,EDlFqB,YCkFO4H,GDlF2E,YCkFhD3H,SAClE,iBAAV4H,GAAsB,WAAYA,GACxC7G,EAAAA,EAAAA,GAAC+G,EAAAA,EAAQ,CACPP,OAAQK,EAAMG,OACdvK,UDtF0K,WCuF1KwK,eAAa,EACbC,gBAAiBL,EAAMK,gBACvBC,SAAUN,EAAMG,OAChBlK,QAASwJ,IAETO,WAKXrD,EACAC,IACCzD,EAAAA,EAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAY+G,OAA2B7F,EDpGwD,WCqG/F8C,KAAK,UACL3D,QAAS+G,GAAiBD,EAAQ3E,SAEjCwE,S,kxEC5BI,SAAS2D,EAAiBC,GACvC,IAAKA,EAAQ,OAEb,GAAoB,eAAhBA,EAAO7G,KACT,MAAO,CACL8G,MAAOD,EAAOC,MAAMD,EAAOE,YAC3BC,SAAkC,IAAxBH,EAAOC,MAAMzI,QAI3B,GAAoB,WAAhBwI,EAAO7G,KAAmB,CAC5B,MAAMiH,EAASJ,EAAOK,eAAeC,OAAON,EAAOE,YACnD,OAAIE,EACK,CACLH,MAAOG,QAGX,CACF,CAEA,MAAM,OACJG,EAAM,SAAEC,EAAQ,MAAEC,EAAK,MAAEC,EAAK,QAAEC,EAAO,UAAEC,IACvCC,EAAAA,EAAAA,IAAkBb,EAAOc,SAE7B,GAAqB,kBAAjBP,GAAQpH,MAA6C,wBAAjBoH,GAAQpH,KAC9C,MAAO,CACL8G,MAAOM,EAAOE,MACdN,UAAU,GAId,GAAIK,KAAaO,EAAAA,EAAAA,IAAgBP,KAAaQ,EAAAA,EAAAA,IAAgBR,IAC5D,MAAO,CACLP,MAAOO,GAIX,GAAIG,EAAS,CACX,MAAQF,MAAOQ,EAAcP,MAAOQ,EAAcV,SAAUW,GAAoBR,EAC1ES,EAAkBD,KAAoBJ,EAAAA,EAAAA,IAAgBI,KAAoBH,EAAAA,EAAAA,IAAgBG,IAE1FlB,EAAQiB,IADQE,EAAkBD,OAAkB7K,IACX2K,EAC/C,GAAIhB,EACF,MAAO,CACLA,QACAE,UAAU,EAGhB,CAEA,GAAIS,EAAW,CACb,MAAMS,EAAgBT,EAAUS,cAAcrB,EAAOE,YAAc,GACnE,KAAM,cAAemB,GAAgB,CACnC,MAAQZ,MAAOa,EAAeZ,MAAOa,GAAkBF,EACvD,MAAO,CACLpB,MAAQqB,GAAiBC,EAE7B,CACF,CAEA,MAAMtB,EAAQS,GAASD,EAEvB,OAAIR,EACK,CACLA,QACAE,SAAUO,GAAOc,YAHrB,CAQF,C,sECkEA,SAASC,EAAYC,EAAsDC,GACzE,MAAMC,EAAQpB,SAASqB,cAAc,OACrCD,EAAME,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXV,EACTM,EAAIK,IAAMX,EACDA,aAAkBY,iBAC3BN,EAAIK,IAAMX,EAAOa,OAEjBP,EAAIK,IAAMX,EAAOW,IAGnBT,EAAMY,YAAYR,GAEdL,IAAWc,EAAAA,GAAkBC,eAAiBf,IAAWc,EAAAA,GAAkBE,eAAgB,CAC7Ff,EAAME,UAAUC,IAAI,eAChBJ,IAAWc,EAAAA,GAAkBE,gBAC/Bf,EAAME,UAAUC,IAAI,QAEtB,MAAMa,EAAcpC,SAASqC,cAC3BlB,IAAWc,EAAAA,GAAkBC,cACzB,kCACA,gCAEFE,GACFhB,EAAMY,YAAYI,EAAYE,WAAU,GAE5C,CAEA,OAAOlB,CACT,CA2CA,SAASmB,EAASpB,EAA2Bb,EAAsB7J,GACjE,IAAI+L,EACAC,EAEJ,OAAQtB,GACN,KAAKc,EAAAA,GAAkBS,MACvB,KAAKT,EAAAA,GAAkBU,eAErBH,EAAoB,yDAAwDI,EAAAA,EAAAA,IAAiBtC,EAAS1F,GAAInE,KAC1GgM,EAAgB,cAChB,MAEF,KAAKR,EAAAA,GAAkBY,aACrBL,EAAoB,iBAAiB/L,IACrCgM,EAAgB,MAChB,MAEF,KAAKR,EAAAA,GAAkBa,YACrBN,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiBtC,EAAS1F,GAAInE,KAClEgM,EAAgB,MAChB,MAEF,KAAKR,EAAAA,GAAkBc,aACrBP,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiBtC,EAAS1F,GAAInE,KAClEgM,EAAgB,MAChB,MAEF,KAAKR,EAAAA,GAAkBe,mBACrBR,EAAoB,2DACpBC,EAAgB,gBAChB,MAEF,KAAKR,EAAAA,GAAkBE,eACrBK,EAAoB,gEACpBC,EAAgB,gBAChB,MAEF,KAAKR,EAAAA,GAAkBC,cACrBM,EAAoB,mEACpBC,EAAgB,gBAChB,MAEF,KAAKR,EAAAA,GAAkBgB,cACvB,KAAKhB,EAAAA,GAAkBiB,gBACrBV,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiBtC,EAAS1F,GAAInE,KAC9FgM,EAAgB,cAChB,MAEF,KAAKR,EAAAA,GAAkBkB,iBACrBX,EAAoB,6BACpBC,EAA0B,IAAVhM,EAAc,4BAA4BA,yBAA0BX,EACpF,MAEF,KAAKmM,EAAAA,GAAkBmB,iBACrBZ,EAAoB,mEACpBC,EAAgB,GAAGY,EAAAA,mBAAwCA,EAAAA,kCAC3D,MAEF,KAAKpB,EAAAA,GAAkBqB,gBACvB,KAAKrB,EAAAA,GAAkBsB,OACvB,QACEf,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiBtC,EAAS1F,GAAInE,KAC9FgM,EAAgB,GAAGY,EAAAA,mBAAwCA,EAAAA,kCAG/D,MAAMG,EAAYxD,SAASqC,cAA2BG,GAChDiB,EAAWhB,EACbe,GAAWE,iBAAsDjB,QAAiB3M,EAEtF,MAAO,CACL0N,YACAG,QAASF,IAAW,GAExB,CAEA,SAASG,EAAWxC,EAAuBD,GACzC,OAAQA,GACN,KAAKc,EAAAA,GAAkBS,MACvB,KAAKT,EAAAA,GAAkBU,eACvB,KAAKV,EAAAA,GAAkBsB,OACvB,KAAKtB,EAAAA,GAAkBqB,gBACvB,KAAKrB,EAAAA,GAAkBkB,iBACvB,KAAKlB,EAAAA,GAAkBY,aACvB,KAAKZ,EAAAA,GAAkBgB,cACrB7B,EAAME,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAkBa,YACvB,KAAKb,EAAAA,GAAkBE,eACvB,KAAKF,EAAAA,GAAkBC,cACvB,KAAKD,EAAAA,GAAkBc,aACpB3B,EAAMyC,WAA2BC,MAAMC,UAAY,QACpD,MAEF,KAAK9B,EAAAA,GAAkBe,mBACvB,KAAKf,EAAAA,GAAkBiB,gBACrB9B,EAAME,UAAUC,IAAI,UAChBJ,IAAWc,EAAAA,GAAkBiB,iBAC/B9B,EAAME,UAAUC,IAAI,qBAI5B,C,4FC7XA,MAAMyC,GAASC,EAAAA,EAAAA,KAAa,GACtBC,EAAwBF,EAAO,GA8ErC,SAASG,EAAuBjE,GAE9B,GAAIA,EAAMkE,gCAA6E,mBAApClE,EAAMmE,0BAEvD,OAAOnE,EAAMmE,0BAA0BC,KAAKpE,EAGhD,CAeO,SAASqE,IACd,GAAIvE,SAASwE,wBACX,IACExE,SAASyE,sBACX,CAAE,MAAOC,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,C,2DCrHA,MAIMI,EAAQ,IAAIC,I,yCCclB,MAAMC,EAAsBC,EAAAA,GASfC,EAAgBA,EAC3BzF,QACA0F,WACAhE,SACAiE,YAEA,MAAMC,EAAgBF,GAAiC,UAArB1F,GAAO6F,YAA0B7F,EAAM8F,QACnEC,EAAgBL,GAAiC,UAArB1F,GAAO6F,WAAyB7F,EAAM8F,QAClEE,EAAkC,aAArBhG,GAAO6F,UACpBC,EAAgC,UAArB9F,GAAO6F,YAA0B7F,EAAMiG,SAAaD,IAAcjF,EAAAA,EAAAA,IAAgBf,GAC7FkG,EAA+B,UAArBlG,GAAO6F,WAA0BG,IAAclF,EAAAA,EAAAA,IAAgBd,GACzEuB,EAA6B,UAArBvB,GAAO6F,WAAyB7F,EAAMuB,MAC9C4E,EAAoBzE,IAAWc,EAAAA,GAAkBa,YACjD+C,EAAe1E,IAAWc,EAAAA,GAAkBc,aAE5C+C,GAAuBjQ,EAAAA,EAAAA,KAAQ,IAAOkQ,IAC1C,GAAKtG,EAEL,OAAK4F,IAAiBG,GAAmBO,EAIrCP,GAAiBO,GACZC,EAAAA,EAAAA,IAA8BvG,IAGhCwG,EAAAA,EAAAA,IAAaxG,EAAOsG,EAAS,OAAS,YAPpCG,EAAAA,EAAAA,IAAyBzG,KAQjC,CAAC+F,EAAeH,EAAe5F,IAE5B0G,GAAmBC,EAAAA,EAAAA,GACvB3G,IAEImG,GAAqBC,GAAgBJ,KACtCQ,EAAAA,EAAAA,IAAaxG,EAAO,kBACvB3J,EACAuQ,EAAAA,GAAeC,QACflB,GAEImB,EAAmBT,IACnBU,GAAiBJ,EAAAA,EAAAA,GACrBG,OACAzQ,EACAuQ,EAAAA,GAAeC,QACflB,IAGAqB,UAAWC,EAAgB,aAC3BC,IACEC,EAAAA,EAAAA,GACFd,GAAqB,QACrBhQ,EACA2J,IAASoH,EAAAA,EAAAA,IAAepH,EAAO,QAC/B2F,GAGI0B,EAAerH,GAAS,YAAaA,EAAQA,EAAMsH,aAAUjR,EACnE,IAAIkR,GAAkBzB,IAAYuB,GAAgBJ,IAAsBF,GAAkBL,EAC1F,MAAMc,EChFO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,IAAc,KAMZ,GAJAD,GAAY,EAEZF,EAAWI,aAAUzR,GAEhBoR,EACH,OAGF,MAAM1F,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMqF,GACL1F,EAAIgG,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYlG,IAC3BmG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBlD,EACI,GA0BfV,EAAWI,QAAUE,EAAOK,cAC3B,CAACZ,IAIJ,MAAMa,EF3BO,SAAiBb,EAAkBc,GAAa,EAAO5C,GACpE,MAAM+B,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUpC,EAAMmD,IAAIf,QAAWpR,GACvEoS,GAAad,EAAAA,EAAAA,MACbe,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWX,SAAWS,IACxBK,aAAaH,EAAWX,SACxBW,EAAWX,aAAUzR,IAGvBJ,EAAAA,EAAAA,KAAU,KACR,IAAKwR,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAMxG,EAAM,IAAIC,MAEhBD,EAAI8G,OAAS,KACX,MAAMb,GAASC,EAAAA,EAAAA,IAAYlG,IAC3BmG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBpD,EACI,GAyBb,MAAMU,EAAiBd,EAAOK,YAE9BX,EAAWI,QAAUgB,EACrBJ,IAEIrD,EAAMlM,MA7BO,KA8BfkM,EAAM0D,QAER1D,EAAM2D,IAAIvB,EAASqB,IAGjBnD,EACF8C,EAAWX,QAAUmB,OAAOC,YAAW,KACrCnH,EAAIK,IAAMqF,IACT9B,GAEH5D,EAAIK,IAAMqF,IAEX,CAACA,EAAS9B,EAAO+C,EAAaH,IAE1Bb,EAAWI,OACpB,CEduBqB,CAAQ1B,QAAWpR,EAAWmD,QAAQkO,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAWpR,CAC1E,CDgDuB+S,EAAa7B,GAAiBvH,IAASqJ,EAAAA,EAAAA,IAAiBrJ,IACxEuH,GAAiB7F,IAAWc,EAAAA,GAAkBc,eACjDiE,EAAgBC,GAEdzB,GAAiBgB,IACnBQ,EAAgBR,GAElB,MAAMuC,EAAWjC,GAAgBJ,IAC7BlB,GAAkBD,OAAmEzP,EAAvD0Q,GAAkBL,GAAoBa,GAGlEgC,EAAYvJ,IAASwJ,EAAAA,EAAAA,IAAiBxJ,GAEtCyJ,EAAUjQ,QAAQ6N,GAElBqC,GAAatT,EAAAA,EAAAA,KAAQ,IACrBsP,EACKK,EAAgB4D,EAAAA,GAA+BnE,EAAAA,GAGpDQ,EACKhG,EAAMuJ,UAGXrD,GACK0D,EAAAA,EAAAA,IAAuB5J,GAG5B8F,GACK+D,EAAAA,EAAAA,IAAmB7J,GAGrBuF,GACN,CAACG,EAAUM,EAAYE,EAASJ,EAASC,EAAe/F,IAE3D,MAAO,CACLwG,aAAcH,EACdrG,QACA8F,UACAI,UACA3E,QACAyE,aACAuB,gBACA+B,WACAI,aACAvD,oBACAJ,gBACA0D,UACAvC,eACAqC,c,sEEpHJ,MA6EA,IAAevU,EAAAA,EAAAA,KA7EyB8U,EACtChO,SACAoD,SACAsB,QACAlE,UACAyN,0BAEA,MAAM,mBAAEC,IAAuBjL,EAAAA,EAAAA,OAExBkL,EAAgBC,IAAqBC,EAAAA,EAAAA,IAA0B,SAC/DC,EAAaC,IAAkBF,EAAAA,EAAAA,IAAS,IAEzCG,GAAerL,EAAAA,EAAAA,IAAgB,KACnC+K,EAAmB,CACjBtK,OAAQR,EAAQsB,QAAO+J,OAAQN,EAAgBG,gBAEjD9N,OAGIkO,GAAqBvL,EAAAA,EAAAA,IAAiBM,IAC1C2K,EAAkB3K,MAGdkL,GAA0BxL,EAAAA,EAAAA,IAAiB5B,IAC/CgN,EAAehN,EAAEqN,OAAOnL,UAGpB5J,GAAOD,EAAAA,EAAAA,KAEPiV,GAA8DvU,EAAAA,EAAAA,KAAQ,IAAM,CAChF,CAAEmJ,MAAO,OAAQD,MAAO3J,EAAK,2BAC7B,CAAE4J,MAAO,WAAYD,MAAO3J,EAAK,+BACjC,CAAE4J,MAAO,cAAeD,MAAO3J,EAAK,kCACpC,CAAE4J,MAAO,aAAcD,MAAO3J,EAAK,kCACnC,CAAE4J,MAAO,YAAaD,MAAO3J,EAAK,+BAClC,CAAE4J,MAAO,eAAgBD,MAAO,iBAChC,CAAEC,MAAO,kBAAmBD,MAAO,oBACnC,CAAEC,MAAO,QAASD,MAAO3J,EAAK,8BAC7B,CAACA,IAEJ,IAAKuJ,IAAWsB,EACd,OAGF,MAAM3D,EAAQlH,EAAK,qBAEnB,OACE6B,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTsO,QAAS9O,EAASwO,OAAejU,EACjC0T,oBAAqBA,EACrB5U,UAAU,SACV0H,MAAOA,EAAMlF,SAAA,EAEbe,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT1V,UAAU,wBACV6E,KAAK,iBACL5E,QAASuV,EACTG,SAAUN,EACVO,SAAUd,KAEZvR,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO3J,EAAK,iCACZ4J,MAAO6K,EACPU,SAAUL,KAEZjT,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,SAASnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8U,EAAa3S,SACnFhC,EAAK,wBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,qB,4BC1FjF,MAAOsV,GAAeC,KAAiB1G,EAAAA,EAAAA,IAAa,GAErC,SAAS2G,KAKtB,OAJAC,EAAAA,EAAAA,KAAkB,KAChBF,GAAc,MAGT,CAACD,GAAeC,GACzB,CCSA,MA6CA,IAAelW,EAAAA,EAAAA,KA7C+BqW,EAC5CvP,SACA0E,QACA8K,YACAhP,UACA0B,gBAEA,MAAM,mBACJuN,EAAkB,gBAClBC,IACEzM,EAAAA,EAAAA,MAEE0M,GAAoBvQ,EAAAA,EAAAA,KAAY,KACpC8C,OACI0N,EAAAA,EAAAA,IAASJ,GACXC,EAAmB,CAAE/K,UAErBgL,EAAgB,CACdhL,QACAd,OAAQ4L,IAGZhP,MACC,CAAC0B,EAAWsN,EAAWhP,EAASiP,EAAoB/K,EAAOgL,IAExD7V,GAAOD,EAAAA,EAAAA,KAEb,OACEgD,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTsO,QAASa,EACTtW,UAAU,+BACV0H,MAAOlH,EAAK,cAAcgC,UAE1BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sBAAqBwC,SAAA,EAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,SAASnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAASiW,EAAkB9T,SACxFhC,EAAK,0BAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,oB,wCCOjF,MAkUA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GACCC,OAAMC,qBAEN,MAAMC,GAAWC,EAAAA,EAAAA,KAAeJ,IAC1B,OAAElK,GAAWqK,EAASE,YAEtBpL,EAAyB,YAAfgL,GAAM3S,KAAqB2S,EAAKhL,aAAUxK,EACpD6V,EAA6B,WAAfL,GAAM3S,KAAoB2S,EAAKK,iBAAc7V,EAC3D8V,EAA6B,WAAfN,GAAM3S,MAAqB2S,EAAKzL,cAAcC,OAAOwL,EAAK5L,YAExEmM,GAAOC,EAAAA,EAAAA,KAAkBT,GACzBU,GAAqBC,EAAAA,EAAAA,KAAyBX,IAC9C,SAAEY,IAAaD,EAAAA,EAAAA,KAAyBX,IAAW,CAAC,EACpDa,GAAcC,EAAAA,EAAAA,KAAyBd,EAAQ/K,GAC/C8L,GAAkBC,EAAAA,EAAAA,KAAsBhB,GACxCiB,EAAkBhM,IAAWiM,EAAAA,EAAAA,KAAsBlB,EAAQ/K,GAASnB,SAClEqN,UAAWC,GAAsBR,GACpC3L,IAAWoM,EAAAA,EAAAA,KAAgCrB,EAAQ/K,EAAS2L,IAAc,CAAC,EAC1EU,EAAkBf,GAAgBA,EAAYhR,KAAO+Q,GAAaiB,cAClEC,EAAkBtB,GAAkBtS,QAAQ2S,GAC5CY,EAAYC,GAAoBI,EAChCC,EAAYvB,GAAkBtS,QAAQ2S,KAAiBe,EACvDI,EAAkBhB,GAAoBpT,KAE5C,MAAO,CACLyT,kBACAF,cACAL,OACAS,kBACAE,YACAM,YACAC,kBACA5L,YAjCciK,EAlUkC4B,EACpD1B,OACA7E,YACAlB,UACAsG,OACAS,kBACAJ,cACAe,kBACAT,YACAM,YACAC,kBACAX,kBACAjL,SACA+L,eAAgBC,EAChBC,qBACAC,iBACAC,gBAEA,MAAOC,EAAmBC,EAAiBC,IAAoBhY,EAAAA,EAAAA,IAAQ,IAChEiV,EAAeC,GAAiBC,MACjC,SAAExQ,IAAaC,EAAAA,EAAAA,OAEf,cACJqT,EAAa,oBACbC,EAAmB,mBACnBC,EAAkB,gBAClBC,EAAe,gBACfC,EAAe,uBACfC,IACEvP,EAAAA,EAAAA,MAEEwP,EAA2B,YAAf1C,GAAM3S,MAElB,MAAE8G,GAAUF,EAAiB+L,IAAS,CAAC,EACvC2C,EAAWxO,IAASyO,EAAAA,EAAAA,IAAiBzO,GACrC0O,EAAgB1O,IAAS2O,EAAAA,EAAAA,IAAiBhC,EAAiB3M,IAEzDkH,aAAc0H,IAAqBzH,EAAAA,EAAAA,GACzCnH,IAASwG,EAAAA,EAAAA,IAAaxG,EAAO,aAC5B0O,EACD1O,IAASoH,EAAAA,EAAAA,IAAepH,EAAO,aAG3B6O,GAAsB5P,EAAAA,EAAAA,IAAgB,KAC1C,GAAKe,EAEL,GAAI0O,EACFR,EAAoB,CAAElO,cACjB,CACL,MAAMa,EAAyB,YAAfgL,GAAM3S,KAAqB2S,EAAKhL,aAAUxK,EAC1D4X,EAAc,CAAEjO,QAAO8O,cAAejO,GACxC,KAGIkO,GAAgB9P,EAAAA,EAAAA,IAAgB,KACpC,MAAM+P,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,MAGnBC,GAAehQ,EAAAA,EAAAA,IAAgB,KACnC,MAAM+P,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,MAGnBE,GAAejQ,EAAAA,EAAAA,IAAgB,KACnC,GAAmB,WAAf4M,GAAM3S,KAAmB,OAC7B,MAAM,YAAEgT,EAAW,cAAE9L,EAAa,WAAEH,GAAe4L,EAC7CM,EAAc/L,GAAeC,OAAOJ,IACtCyL,EAAAA,EAAAA,IAASQ,EAAY/Q,IACvBgT,EAAmB,CAAE3N,MAAO2L,IAE5BiC,EAAgB,CAAE1O,OAAQwM,EAAY/Q,GAAIqF,MAAO2L,IAGnDkC,EAAgB,CACd3M,OAAQA,EACRhC,OAAQwM,EAAY/Q,GACpB8E,WAAY,EACZkP,cAAc,GACb,CACDC,uBAAuB,OAIrBzZ,GAAOD,EAAAA,EAAAA,KAEP2Z,GAA8DjZ,EAAAA,EAAAA,KAAQ,IACnE,EAAGkZ,YAAWxT,aACnBpD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACNnJ,UAAW2G,EAAS,cAAWzF,EAC/Bb,QAAS8Z,EACTE,UAAU,eAAc7X,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGd,IAEH,SAASyV,IACP,MAAuB,WAAf5D,GAAM3S,MACZR,EAAAA,GAAAA,GAAC2S,GAAuB,CACtBvP,OAAQgS,EACRxR,QAAS0R,EACThQ,UAAW4P,EACXtC,UAAWO,EAAKK,YAAY/Q,GAC5BqF,MAAOqL,EAAKzL,cAAcC,OAAOwL,EAAK5L,mBAEtC5J,CACN,CAmCA,MAAMqZ,GAAyBzQ,EAAAA,EAAAA,IAAgB,KAC1B,YAAf4M,GAAM3S,MAAsBkT,EAC9BkC,EAAuB,CACrB5O,OAAQ0M,GAAMjR,GACdwU,WAAY,CAAC9D,EAAKhL,QAAQ1F,IAC1ByU,WAAgC,cAApBtC,EACZtP,UAAW4P,IAGbG,OAIJ,GAAIpT,EAAU,CACZ,MAAMkV,EAA6B,GAkDnC,GAjDItB,GAAa1C,EAAKhL,QAAQiP,sBAAwBjE,EAAKhL,QAAQkP,QAAQzP,SAAWuM,GACpFgD,EAAU3Y,KAAK,CACb0F,KAAM,UACNpH,QAASqY,EACTlW,SAAUhC,EAAK,aAGd8W,IACC3G,EACF+J,EAAU3Y,KAAK,CACb0F,KAAM8R,EAAgB,QAAU,WAChClZ,QAASqZ,EACTlX,SAAU+W,EAAgB,GAAGtX,KAAKmY,MAAyB,IAAnBX,qBAA4C,aAGtFiB,EAAU3Y,KAAK,CACb0F,KAAM,WACNoT,KAAMhJ,EACNiJ,SAAUzB,EACV7W,SAAUhC,EAAK,wBAKjB6X,GACFqC,EAAU3Y,KAAK,CACb0F,KAAM,OACNpH,QAASkY,EACT/V,SAAUhC,EAAK,uBAIf0X,GACFwC,EAAU3Y,KAAK,CACb0F,KAAM,aACNpH,QAAS0Z,EACTvX,SAAUhC,EAAK,+BAIfoX,GACF8C,EAAU3Y,KAAK,CACb0F,KAAM,SACNpH,QAASka,EACT/X,SAAUhC,EAAK,UACfua,aAAa,IAIQ,IAArBL,EAAUtY,OACZ,OAGF,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,4BAA2BwC,SAAA,EACxCe,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXC,QAASf,EACTgB,UAAU,QAAO1Y,SAEhBkY,EAAUjY,KAAI,EACbgF,OAAMpH,UAASwa,OAAMC,WAAUtY,WAAUuY,kBAEzCxX,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAEP1T,KAAMA,EACNoT,KAAMA,EACNC,SAAUA,EACVza,QAASA,EACT0a,YAAaA,EAAYvY,SAExBA,GAPIiF,OAWV8R,IAAiBhW,EAAAA,GAAAA,GAAC6X,GAAAA,EAAe,CAACC,SAAU5B,EAAkBzV,KAAK,IAAIsX,SAAO,IAC9E1D,GAAa0C,MAGpB,CAEA,OACEjY,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,CAChC4W,GAAa1C,EAAKhL,QAAQiP,sBAAwBjD,IACjDnU,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,WAChBH,QAASqY,EAAUlW,UAEnBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cA1InB,WACE,IAAIyS,GAA8B,eAAfZ,GAAM3S,KAIzB,MAAsB,qBAAf2S,GAAM3S,OAAgC4M,GAC3CpN,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,qBAChBH,QAASqZ,EAAoBlX,SAE5B+W,GACChW,EAAAA,GAAAA,GAAC6X,GAAAA,EAAe,CAACC,SAAU5B,EAAkBzV,KAAK,IAAI3D,QAASqZ,KAE/DnW,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAIftB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLsW,KAAMhJ,EACNiJ,SAAUzB,EACVe,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,qBAAqBgC,UAErCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAGjB,CA8GK0W,IACDhY,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,gBAChBH,QAASuZ,EAAcpX,UAEvBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,eAChBH,QAASyZ,EAAatX,UAEtBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cAEZwT,IACC9U,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAKmQ,EAAU,8BAAgC,+BAC1DtQ,QAASkY,EAAS/V,UAElBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WAGdqT,IACC3U,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,6BAChBH,QAAS0Z,EAAavX,UAEtBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAGd+S,IACCrU,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,UAChBH,QAASka,EAAuB/X,UAEhCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cAGftB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,SAChBH,QAASmY,EAAmBhW,UAE5Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEZ+S,GAAa0C,W,gHCzXb,SAASkB,GAAgBC,GAC9B,MAAMC,GAAMlJ,EAAAA,EAAAA,IAAUiJ,KAQtB,OANAE,EAAAA,GAAAA,IAAc,IACLF,EAASG,WAAU,KACxBF,EAAI/I,QAAU8I,SAIXC,CACT,C,wCCbA,MAAOG,GAAoBC,KAAsBzM,EAAAA,EAAAA,KAAa,IACvD0M,GAAaC,KAAe3M,EAAAA,EAAAA,KAAa,GAEjC,SAAS4M,KAOtB,MAAO,EANYC,EAAAA,GAAAA,IACjB,IAAML,OAAyBE,MAE/B,CAACF,GAAoBE,KAGHD,GAAoBE,GAC1C,C,gBCXO,MAAOG,GAAgBC,KAAkB/M,EAAAA,EAAAA,IAAa,GAE9C,SAASgN,KAKtB,OAJApG,EAAAA,EAAAA,KAAkB,KAChBmG,GAAe,MAGV,CAACD,GAAgBC,GAC1B,C,qCCQA,MAmFA,GAvEwCE,EACtCC,OAAO,GAAIvV,aAAYwV,aAAYnc,UAASoc,uBAAsBnF,cAAaoF,2BAE/E,MAAOC,EAAaC,IAAkB5H,EAAAA,EAAAA,KAAS,IACzC,SAAExP,IAAaC,EAAAA,EAAAA,OACdoX,GAAgBZ,KACjBa,GAAWC,EAAAA,GAAAA,IAAgB,MAAOC,EAAAA,KAAgBH,KAAyB,CAACA,KAElF/b,EAAAA,EAAAA,KAAU,KACR,MAAMmc,EAAgB7R,SAASqC,cAAc,kCAEvCyP,EAAmBA,KACvB,MAAMjK,EAASgK,EAAgBA,EAAcE,aAAe,EAE5DP,EAAe3J,EAAe,EAANmK,EAAAA,IAI1BF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EAhCP,KAgC6C,GAIpE,OAFApJ,OAAOyJ,iBAAiB,SAAUF,GAAc,GAEzC,KACLvJ,OAAO0J,oBAAoB,SAAUH,GAAc,MAEpD,IAQH,MAAMjW,GAAgB0C,EAAAA,EAAAA,IAAgB,KACpC2S,OAGIgB,GAAanb,EAAAA,GAAAA,GACjB,oBACAka,GAAc,eACdM,GAAY,YACZxF,GAAe,eACfoF,GAAwB,UAG1B,OACEra,EAAAA,GAAAA,IAAA,OAAKrC,UAAWyd,EAAYpd,QAnB9B,SAAmB6H,GACbqU,GACFrU,EAAEwV,iBAEN,EAeiDlb,SAAA,CAC5C6B,QAAQkY,KACPhZ,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA8BK,QAAUmF,OAAqBtE,EAAVb,EAAoBmC,UACpFe,EAAAA,GAAAA,GAAA,KAAGvD,UAAW,6CAA4C2c,EAAc,YAAc,IAAMlZ,IAAI,OAAMjB,SACnG+Z,MAINlY,QAAQ2C,KACPzD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAe,8BAA+B,uBACzD0B,KAAK,UACLmF,MAAM,UACNwU,eAAa,EACbtd,QAAS+G,EAAc5E,SAEtBwE,Q,gEC5FJ,MAAO4W,GAAmBC,KAAqBxO,EAAAA,EAAAA,KAAa,GAEpD,SAASyO,KAKtB,OAJA7H,EAAAA,EAAAA,KAAkB,KAChB4H,IAAkB,MAGb,CAACD,GAAmBC,GAC7B,C,2ECLA,MAAME,GAAYC,EAAAA,IAAcC,EAAAA,GAC1BC,GAAsBF,EAAAA,IAAcC,EAAAA,GAAU,GAAM,IACpDE,GAAaJ,GAAY,GAAK,GAC9BK,GAAmB,IAEnBC,IAAcC,EAAAA,GAAAA,MAEpB,IAAIC,GAEG,MAAMC,GACXC,OAAS,IAAItO,IAEbuO,YAAc,EAIdC,WAAAA,CAAYC,EAAa/L,GACvBgM,KAAKhM,OAASA,EACdwL,GAAYzc,SAAQ,EAAGkd,aAAajd,KAC7Bid,EAAUC,QAAQ,CACrBla,KAAM,qBACNma,KAAM,CACJJ,EACAT,GACAtc,EACAod,GAAAA,GACAJ,KAAKK,QAAQxP,KAAKmP,WAI1B,CAEQK,OAAAA,CAAQC,EAAcC,GAC5BP,KAAKJ,OAAO5K,IAAIsL,EAAMC,GAClBD,IAASN,KAAKH,aAChBG,KAAKQ,OAAOF,EAEhB,CAEQG,UAAAA,GACNT,KAAKJ,OAAO7c,SAASwd,IACnBA,EAAMG,WAERV,KAAKJ,OAAO7K,OACd,CAEAyL,MAAAA,CAAOF,GACLN,KAAKH,YAAcS,EACnB,MAAMC,EAAQP,KAAKJ,OAAOpL,IAAI8L,GAC9B,QAAKC,KACLI,EAAAA,EAAAA,KAAgB,KACdX,KAAKhM,OAAOD,MAAQwM,EAAMxM,MAC1BiM,KAAKhM,OAAOI,OAASmM,EAAMnM,OACf4L,KAAKhM,OAAOG,WAAW,MAC/ByM,UAAUL,EAAO,EAAG,EAAGP,KAAKhM,OAAOD,MAAOiM,KAAKhM,OAAOI,YAErD,EACT,CAEAyM,OAAAA,GACEb,KAAKS,aACLjB,GAAYzc,SAAQ,EAAGkd,gBAChBA,EAAUC,QAAQ,CACrBla,KAAM,wBACNma,KAAM,OAGZ,EAkBFX,GAAYzc,SAAQ,EAAG+d,aACrBA,EAAOpC,iBAAiB,WAAWqC,UACjC,MAAM,KAAE7b,EAAI,UAAE8b,EAAS,OAAEjV,GAAW1C,EAAE4X,KAMtC,GAAa,gBAAT/b,EACF,OAGF,MAAMtC,QAAese,EAAAA,GAAAA,IAAQ,gBAAiB,CAAEC,YAAavO,EAAAA,GAAewO,eAAgBrV,IAC5F,IAAKnJ,EACH,OAGF,MAAM,YAAEye,GAAgBze,EAExBke,EAAOQ,YAAY,CACjBpc,KAAM,eACN8b,YACApe,OAAQye,GACP,CAACA,U,gBClHR,SAAqJ,WCyCrJ,IAAIE,GAEJ,MA+OA,IAAevgB,EAAAA,EAAAA,KA/OgBwgB,EAC7BC,WACAC,iBACAC,UACAC,aACAC,eACA9B,MACA7e,WACA4gB,YACAC,oBACAC,SACAC,kBAEA,MAAMC,GAAYvO,EAAAA,EAAAA,OACXwO,GAAwB3E,MACxB4E,GAAgBnD,KACjB3B,GAAiB+E,EAAAA,GAAAA,IAAmBF,EAnBvB,MAoBZG,EAAiBC,IAAmBC,EAAAA,EAAAA,IAAUlF,MAC9CmF,EAAkBC,IAAoBF,EAAAA,EAAAA,IAAU,IAChDG,EAAgBC,IAAkBJ,EAAAA,EAAAA,IAAU,GAC7CK,GAAclP,EAAAA,EAAAA,KAAgB,IAC7BmP,EAAkBC,IAAqB5M,EAAAA,EAAAA,KAAS,IAChD6M,EAAWC,IAAgB9M,EAAAA,EAAAA,KAAS,GACrC+M,GAAmBvP,EAAAA,EAAAA,MACnBwP,GAAaxP,EAAAA,EAAAA,MACbyP,GAAczP,EAAAA,EAAAA,MACd0P,GAAiB1P,EAAAA,EAAAA,MAEjB2P,GAAclhB,EAAAA,EAAAA,KAAQ,IFKvB,SAA8B2R,EAAeK,GAGlD,MAAMmP,GAFNxP,EAAQ3Q,KAAKmY,MAAMxH,EAAQsL,MAC3BjL,EAAShR,KAAKmY,MAAMnH,EAASiL,KAU7B,OARItL,EAAQwL,KACVxL,EAAQwL,GACRnL,EAAShR,KAAKmY,MAAMxH,EAAQwP,IAE1BnP,EAASmL,KACXnL,EAASmL,GACTxL,EAAQ3Q,KAAKmY,MAAMnH,EAASmP,IAEvB,CAAExP,QAAOK,SAClB,CEjBWoP,CAAqB5B,GAAY7N,OAAS,EAAG6N,GAAYxN,QAAU,IACzE,CAACwN,IAEE6B,GAAaxY,EAAAA,EAAAA,IAAiBqV,IAClCA,EAAOld,KAAKsgB,MAAMpD,GAClBsC,EAAetC,GFoDZ,SAA4BA,GAC5BZ,IACEA,GAAac,OAAOF,EAC7B,CEtDIqD,CAAmBrD,MAqKrB,OAlKAre,EAAAA,EAAAA,KAAU,KACR,IAAI8f,GAAsBhC,GAAQ4B,EAClC,OFmCG,SAA6B5B,EAAa/L,GAK/C,OAJI0L,IACFA,GAAamB,UAEfnB,GAAe,IAAIC,GAAaI,EAAK/L,GAC9B,KACL0L,IAAcmB,UACdnB,QAAerd,EAEnB,CE5CWuhB,CAAoB7D,EAAKmD,EAAiBpP,WAChD,CAACiM,EAAK4B,EAASI,KAElB9f,EAAAA,EAAAA,KAAU,KACR8gB,GAAkB,KACjB,CAAC7hB,KAEJe,EAAAA,EAAAA,KAAU,KAGR,GAFIsf,IAAiBA,KACrBA,QAAkBlf,GACbwgB,EAAY/O,UAAYkP,EAAW,CACtC,MAAM1C,EAAOhD,IACPuG,EAAYpC,EAAWnB,EAC7BiB,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAMub,EACNyD,GAAItC,EACJA,SAAuB,IAAZoC,EAAoBhC,EAC/BmC,SAAUzB,GAEd,IACC,CAACjF,EAAgB0F,EAAWT,EAAiBV,EAAcJ,KAE9Dxf,EAAAA,EAAAA,KAAU,KACH6f,IAAaM,MACZb,IAAiBA,KACrBA,QAAkBlf,KAEnB,CAACyf,EAAWQ,EAAiBF,KAEhCngB,EAAAA,EAAAA,KAAU,KACR,GAAI6f,EAAW,CACTP,IAAiBA,KACrBA,QAAkBlf,EAClB,MAAMie,EAAOhD,IACPuG,EAAYpC,EAAWnB,EAC7BiB,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAMub,EACNyD,GAAItC,EACJA,SAAuB,IAAZoC,EAAoBhC,EAC/BmC,SAAUzB,GAEd,IAEC,CAACT,EAAWD,EAAcJ,KAE7BwC,EAAAA,EAAAA,KAAgB,KACd,IAAKb,EAAYtP,QAAS,OAC1B,MAAM0I,GAAWjB,EAAAA,GAAAA,IAAO+G,IAAoBb,EAAY,IAAK,GAC7D2B,EAAYtP,QAAQzD,MAAM0D,MAAQ,GAAGyI,OACpC,CAAC8F,EAAiBb,KAErBwC,EAAAA,EAAAA,KAAgB,KACTd,EAAWrP,UAChBqP,EAAWrP,QAAQzD,MAAM6T,KAAO,GAAGzB,WAClC,CAACA,KAEJwB,EAAAA,EAAAA,KAAgB,KACTZ,EAAevP,UACpBuP,EAAevP,QAAQqQ,WAAYC,EAAAA,GAAAA,IAAoBzB,QACtD,CAACA,KAEJ1gB,EAAAA,EAAAA,KAAU,KACR,IAAKigB,EAAUpO,UAAY5S,EAAU,OACrC,MAAMmjB,EAASnC,EAAUpO,QACzB,IAAIwQ,EAAaD,EAAOE,wBAEpBjE,EAAO,EACPkE,EAAS,EAEb,MAAMC,EAAmBpb,IACvB,MAAMqb,GAAQtb,EAAAA,GAAAA,GAAmBC,GAAGC,EAC9Bqb,GAAIC,EAAAA,GAAAA,IAAMnD,IAAaiD,EAAQJ,EAAWJ,MAAQI,EAAWvQ,OAAQ,EAAG0N,GAC9E,GAAIM,EAAmB,MAAO,CAAC4C,EAAG,GAC7BL,EAAWvQ,QAAOuQ,EAAaD,EAAOE,yBAC3C,MAAMM,EAAU1B,EAAWrP,QAI3B,MAAO,CAAC6Q,GAHEC,EAAAA,GAAAA,IACRF,EAAQJ,EAAWJ,KAAOW,EAAQC,YAAc,GAAI,EAAGR,EAAWvQ,MAAQ8Q,EAAQC,YAAc,KAK9FC,EAAgBA,KAChBxD,IAAiBA,KACrBA,QAAkBlf,GAmBd2iB,EAAiBA,KACrBD,IACAlC,EAAY/O,SAAU,EACtBiP,GAAkB,GAClBE,GAAa,GACbV,EAAgBjC,GAChB0B,EAAO1B,GAEPpL,YAAW,KACT2N,EAAY/O,SAAU,IA1JT,MA8JXmR,GAAUC,EAAAA,GAAAA,IAAcb,EAAQ,CACpCc,UArBsBC,KACtBL,IACAhC,GAAkB,GAClBE,GAAa,GACbhB,KAkBAoD,UAAWL,EACXxjB,QAASwjB,EACTM,OAjCkBjc,IAClB0b,IACAhC,GAAkB,IAChBzC,EAAMkE,GAAUC,EAAgBpb,GAC7Boa,EAAWnD,GAChBoC,EAAiB8B,GACjBjC,EAAgBjC,MA8BlB,GAAInC,EAAAA,IAAgB4D,EAClB,OAAOkD,EAGT,MAAMM,EAAuBlc,IAC3B0Z,GAAkB,IAChBzC,EAAMkE,GAAUC,EAAgBpb,GAClCqZ,EAAiB8B,GACZf,EAAWnD,IAGZkF,EAAuBA,KAC3BzC,GAAkB,IAOpB,OAJAsB,EAAO3F,iBAAiB,YAAa6G,GACrClB,EAAO3F,iBAAiB,aAAc6G,GACtClB,EAAO3F,iBAAiB,aAAc8G,GAE/B,KACLP,IACAZ,EAAO1F,oBAAoB,YAAa4G,GACxClB,EAAO1F,oBAAoB,aAAc4G,GACzClB,EAAO1F,oBAAoB,aAAc6G,MAE1C,CACD/D,EACAgC,EACAviB,EACA8gB,EACAC,EACAS,EACAH,EACAU,EACAlB,EACAF,KAIAre,EAAAA,GAAAA,IAAA,OAAKrC,UDpPmB,WCoPU0b,IAAKqF,EAAUve,SAAA,EAC7Coe,IACAve,EAAAA,GAAAA,IAACiiB,GAAAA,EAAc,CACb3d,QAAM,EACNmW,UAAW6E,EACX3hB,UDzPuC,WC0PvCkP,MAAO,UAAUiT,EAAYvP,oBAAoBuP,EAAYlP,WAC7DyI,IAAKsG,EAAWxf,SAAA,EAEhBe,EAAAA,GAAAA,GAAA,UAAQvD,UD7P0D,WC6PzB0b,IAAKqG,KAC9Cxe,EAAAA,GAAAA,GAAA,OAAKvD,UD9PsF,WC8PxDwC,UACjCe,EAAAA,GAAAA,GAAA,QAAMvD,UD/PgH,WC+P7E0b,IAAKwG,UAIpD3e,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,SAC1B+d,EAAe9d,KAAI,EAClB8hB,QACAC,UAEAjhB,EAAAA,GAAAA,GAAA,OAEEvD,UD1Q+J,WC4Q/JkP,MAAO,SAAiB,IAARqV,cAAwB,IAAY,IAANC,MAHzC,GAAGD,KAASC,UAOvBjhB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,UAC3Be,EAAAA,GAAAA,GAAA,OACEmY,IAAKuG,EACLjiB,WAAWsC,EAAAA,GAAAA,GDnR0K,WCmR5Iuf,GDnRiK,sBE8D9M7U,GAAa9E,IACjBA,EAAEwV,mBAGE+G,GAAiB,CACrB,GACA,EACA,IACA,GA0MF,SAASC,GAAWhG,EAAqB4B,GACvC,OACE/c,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SACzB,IAAGygB,EAAAA,GAAAA,IAAoBvE,SAAkBuE,EAAAA,GAAAA,IAAoB3C,MAGpE,CAEA,UAAezgB,EAAAA,EAAAA,KA7M2B8kB,EACxC/F,MACA2B,iBACAqE,mBACAtE,WACAE,UACAqE,WACAnI,uBACAiE,YACAmE,wBACAC,eACAC,aACApE,oBACAqE,SACAC,UACAxE,eACAD,aACA0E,qBACAC,gBACAC,iBACAC,uBACAC,8BACAC,2BACAC,cACA5E,SACA6E,sBAEA,MAAOC,EAAoBC,EAAkBC,IAAqBhlB,EAAAA,EAAAA,MAC3Dsb,GAAkBE,KACnBqC,GAAc3B,EAAAA,GAAAA,IAAgB,IAAM9a,KAAK6jB,MAAM3J,MAAmB,CAACA,KAClE4J,EAAcjE,IAAgBT,EAAAA,EAAAA,KAAU,GAEzC2E,GAAkBxT,EAAAA,EAAAA,OAElB,SAAEhN,IAAaC,EAAAA,EAAAA,OACdoX,EAAcoJ,GAAiBhK,KAChCiK,GAAYnJ,EAAAA,GAAAA,GAAgBF,IAElC/b,EAAAA,EAAAA,KAAU,KACR,GAAKkc,EAAAA,IAAiBN,EAAtB,CACA,GAAKwJ,GAAcvF,IAAagF,IAAsBI,IAOtD,OAHAC,EAAgBrT,QAAUmB,OAAOC,YAAW,KAC1CkS,GAAc,KA/Ca,KAiDtB,KACDD,EAAgBrT,SAASmB,OAAOL,aAAauS,EAAgBrT,UAP7DqT,EAAgBrT,SAASmB,OAAOL,aAAauS,EAAgBrT,QAFP,IAW3D,CAACgO,EAAWuF,EAAWD,EAAeN,EAAoBI,EAAcrJ,KAE3EoG,EAAAA,EAAAA,KAAgB,KACVoD,EACF9a,SAAS+a,KAAKzZ,UAAUC,IAAI,0BAE5BvB,SAAS+a,KAAKzZ,UAAU0Z,OAAO,0BAE1B,KACLhb,SAAS+a,KAAKzZ,UAAU0Z,OAAO,6BAEhC,CAACF,KAEJplB,EAAAA,EAAAA,KAAU,KACHolB,GACHL,MAED,CAACA,EAAmBK,IAEvB,MAAM1lB,GAAOD,EAAAA,EAAAA,KAEP8lB,GAAavc,EAAAA,EAAAA,IAAiBwc,IAClCxE,GAAa,GACbjB,EAAOyF,GACPZ,GAAgB,MAGZa,GAAkBzc,EAAAA,EAAAA,IAAgB,KACtCgY,GAAa,GACb4D,GAAgB,MAGZc,GAAuBvlB,EAAAA,EAAAA,KAAQ,IACpB,IAAXgkB,GAAgBC,EAAgB,QAChCD,EAAS,GAAY,WACrBA,EAAS,GAAY,WAClB,YACN,CAACA,EAAQC,IAEZ,OACE7iB,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAe,sBAAuBoa,GAAwB,SAAUwJ,GAAa,UAChG7lB,QAAS2M,GAAUxK,SAAA,EAEnBe,EAAAA,GAAAA,GAAC8c,GAAQ,CACPzB,IAAKA,EACL0B,SAAUA,EACVE,QAASA,EACTG,UAAWA,EACXC,kBAAmBA,EACnBH,WAAYA,EACZF,eAAgBA,EAChBG,aAAcA,EACdG,OAAQwF,EACRvF,YAAayF,EACbxmB,SAAUmmB,KAEZ7jB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAW7Z,EAAK,iBAChBwD,KAAK,OACLyiB,QAASjhB,EACT2D,MAAM,oBACNnJ,UAAU,OACVoa,OAAK,EACL/Z,QAASolB,EAAYjjB,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM8b,EAAY,QAAU,YAEpCpd,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAU,SACVrW,KAAK,OACLmF,MAAM,oBACNnJ,UAAU,SACVoa,OAAK,EACL/Z,QAAS+kB,EAAc5iB,UAEvBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM2hB,OAEZvI,EAAAA,KACA1a,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CAACC,MAAI,EAAC3mB,UAAU,gBAAgBoK,MAAO8a,EAAU,EAAa,IAATD,EAActP,SAAU0P,IAE1FX,GAAWhG,EAAa4B,IACvB0E,IACAzhB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,mBAAkBwC,SAC9B,IAAGokB,EAAAA,GAAAA,IAAepmB,EAAMqkB,EAAWD,SAAuBgC,EAAAA,GAAAA,IAAepmB,EAAMqkB,QAGpFthB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,YACfuD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAU,gBACVrW,KAAK,OACLmF,MAAM,oBACNnJ,UAAU,gBACVoa,OAAK,EACL/Z,QAASulB,EAAiBpjB,SAEzB,GAAGke,OAEL6E,IACChiB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAU,qBACVrW,KAAK,OACLmF,MAAM,oBACNnJ,UAAU,aACVoa,OAAK,EACL/Z,QAASmlB,EAAyBhjB,UAElCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UAGdigB,IACCvhB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAU,aACVrW,KAAK,OACLmF,MAAM,oBACNnJ,UAAU,aACVoa,OAAK,EACL/Z,QAAS8kB,EAAmB3iB,UAE5Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMkgB,EAAe,cAAgB,qBAIjDxhB,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQgf,EACR3lB,WAAWsC,EAAAA,GAAAA,GACT,sBACCwiB,GAAyB,iBACzBS,GAA+B,UAElCrK,UAAU,QACV4L,UAAU,SACVC,WAAS,EACT5f,QAAS0e,EAAkBrjB,SAE1BiiB,GAAehiB,KAAKukB,IAEnBzjB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC/R,SAAUsX,IAAiBsG,EAAM3mB,QAASA,IAAMilB,EAAqB0B,GAAMxkB,SAClF,GAAGwkB,iBCqJhB,IAAennB,EAAAA,EAAAA,KAhWmBonB,EAChCrI,MACAxS,QACA8a,aACAzG,aACA1O,eACA8S,WACAsC,oBACAC,SACAnC,SACAC,UACAxE,eACAhE,uBACA2K,qBACA/P,cACAgQ,kBACA1G,oBACA2G,qBACAC,YACA/K,uBACAtV,cAEA,MAAM,qBACJsgB,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,qBAC1BC,IACEhe,EAAAA,EAAAA,MACEie,GAAWrV,EAAAA,EAAAA,OACVmO,EAAWmH,IAAgB9S,EAAAA,EAAAA,KAAUgI,EAAAA,KAAiBiB,EAAAA,KACtD8G,EAAcgD,EAAeC,IAAkBC,EAAAA,GAAAA,IAAcJ,EAAUC,IACxE,SAAEtiB,IAAaC,EAAAA,EAAAA,MACf6a,EAAWuH,EAASlV,SAAS2N,UAAY,EACzC4H,EAAW9b,GAASkU,GArCF,GAuClB6H,GAAwBre,EAAAA,EAAAA,IAAgB,KAExCse,EAAAA,IACJR,EAAqB,CAAE9K,UAAU,OAG7BuL,GAAwBve,EAAAA,EAAAA,IAAgB,KACxCse,EAAAA,IACJR,EAAqB,CAAE9K,UAAU,QAIjCyI,EACA+C,EACAC,GjB7FW,SACbC,EACA/S,EACAgT,GAEA,MAAOC,EAAaC,IAAkB3T,EAAAA,EAAAA,KAAS,IACxCjV,EAAU6oB,IAAe5T,EAAAA,EAAAA,KAAS,IAEzC8N,EAAAA,EAAAA,KAAgB,KAEd,GAAK7E,EAAAA,IAAU4K,EAAAA,KAAYL,EAAM7V,QAAS,OAC1C,MAAMrH,EAAQkd,EAAM7V,QACdmW,EAAUvZ,EAAuBjE,GAGvC,KAFmBF,SAAS2d,yBAA4BP,EAAM7V,SAASqW,+BACtD9nB,IAAZ4nB,EACW,OAEhBxd,EAAM2d,sBAAuB,EAC7BN,GAAe,GACf,MAAMO,EAAkBA,KACtBzT,IACAmT,GAAY,GACZtZ,GAAsB,IAElB6Z,EAAkBA,KACtB7Z,GAAsB,GACtBsZ,GAAY,GACZH,KAIF,OAFAnd,EAAMiS,iBAAiB,wBAAyB2L,GAChD5d,EAAMiS,iBAAiB,wBAAyB4L,GACzC,KACL7d,EAAMkS,oBAAoB,wBAAyB0L,GACnD5d,EAAMkS,oBAAoB,wBAAyB2L,MAEpD,CAACX,EAAO/S,EAASgT,IAEpB,MAAM5Y,GAAuB9J,EAAAA,EAAAA,KAAY,KACvC,IAAKyiB,EAAM7V,QAAS,OACpB,MACMmW,EAAUvZ,EADFiZ,EAAM7V,SAEhBmW,EACFA,EAAQ,UAERnZ,MAED,CAAC6Y,IAEEF,GAAwBviB,EAAAA,EAAAA,KAAY,KACxC,IAAKyiB,EAAM7V,QAAS,OACpB9C,IACA,MAAMvE,EAAQkd,EAAM7V,QACdgO,GAAYyI,EAAAA,EAAAA,GAAkB9d,GAC9Bwd,EAAUvZ,EAAuBjE,GACnCwd,EACFA,EAAQ,sBA0Bd,SAAiCxd,GAC/B,GAAIA,EAAM+d,wBACR,IACE/d,EAAM+d,yBACR,CAAE,MAAOvZ,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,CAnCMuZ,CAAwB/d,GAGtBqV,IACF2I,EAAAA,EAAAA,GAAShe,KAEV,CAACkd,EAAO3Y,IAEX,OAAK6Y,EAIE,CAACA,EAAaJ,EAAuBvoB,GAHnC,EAAC,EAIZ,CiBwBMwpB,CAAoB1B,EAAUM,EAAuBE,IAElD,CAAEmB,EAAgBC,GAAgBxN,MAClC8J,EAAcjE,KAAgBT,EAAAA,EAAAA,KAAU,GACzCqI,IAAoBlX,EAAAA,EAAAA,IAAO,CAAErK,EAAG,EAAGG,EAAG,KAE5CxH,EAAAA,EAAAA,KAAU,KACR,MAAM6oB,EAAuBzhB,IAC3BwhB,GAAkB/W,SAAU1K,EAAAA,GAAAA,GAAmBC,IAMjD,OAHA4L,OAAOyJ,iBAAiB,YAAaoM,GACrC7V,OAAOyJ,iBAAiB,YAAaoM,GAE9B,KACL7V,OAAO0J,oBAAoB,YAAamM,GACxC7V,OAAO0J,oBAAoB,YAAamM,MAEzC,IAEH,MAAMC,IAAsC9f,EAAAA,EAAAA,IAAgB,CAACzB,EAAiBE,KAC5E,MAAMshB,EAAShC,EAASlV,SAASyQ,wBAC5ByG,IACDxhB,GAAWwhB,EAAO9G,MAAQ1a,GAAWwhB,EAAOC,OAC3CvhB,GAAWshB,EAAOE,KAAOxhB,GAAWshB,EAAOG,UACzCjE,KACHyD,GAAe,OAKfS,IAAkBngB,EAAAA,EAAAA,IAAgB,KACtC0f,GAAe,MAGXU,IAAmBpgB,EAAAA,EAAAA,IAAiB5B,IACxC0hB,GAAoC1hB,EAAEG,QAASH,EAAEK,YAG7C4hB,IAAsBrgB,EAAAA,EAAAA,IAAiB+X,IAE3C,GADAC,GAAaD,IACRA,EAAW,CACd,MAAM,EAAE1Z,EAAC,EAAEG,GAAMohB,GAAkB/W,QACnCiX,GAAoCzhB,EAAGG,EACzC,MAGI,QACJkY,GAAO,WAAEwE,GAAU,eAAEzE,GAAc,kBAAE6J,GAAiB,iBAAExF,KACtDyF,EAAAA,GAAAA,KACEC,IAAgBC,EAAAA,GAAAA,GAAoB1C,OAAU3mB,GAAY0d,IAG9D4L,aAAcC,GACdC,qBAAsBC,KACpBC,EAAAA,GAAAA,IACD5F,KAAesF,QAAeppB,OAAWA,EAAW,SAGrDspB,aAAcK,GACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GACF3M,EAAAA,KAAW0C,IAAc8J,KAAwBH,QAAeppB,OAAWA,EAAW,SAGjF,CAAEkb,IAAkBC,MACpB,CAAEwB,IAAqBC,MAE9Bhd,EAAAA,EAAAA,KAAU,KACR2oB,EAAagB,MACZ,CAAChB,EAAcgB,MAElB3pB,EAAAA,EAAAA,KAAU,KACJsmB,IAAWD,GAAqBmD,GAClCzC,EAASlV,QAASoY,QACTnM,IAAQ5B,EAAAA,KAIjBsM,EAAAA,EAAAA,GAASzB,EAASlV,WAEnB,CAACyU,EAAQD,EAAmBvI,EAAK8I,EAAqB4C,MAEzDxpB,EAAAA,EAAAA,KAAU,KACR+mB,EAASlV,QAASsS,OAASA,IAC1B,CAACA,KAEJnkB,EAAAA,EAAAA,KAAU,KACR+mB,EAASlV,QAAS+N,aAAeA,IAChC,CAACA,KAEJ5f,EAAAA,EAAAA,KAAU,KACH0mB,IACLK,EAASlV,QAAS+L,YAAc8I,EAChCpL,GAAeoL,MACd,CAACpL,GAAgBoL,IAEpB,MAAMwD,IAAkBlhB,EAAAA,EAAAA,IAAiB5B,IACvCA,EAAEwV,kBACEiD,GACFkH,EAASlV,QAASoY,QAClBjD,GAAa,MAEbwB,EAAAA,EAAAA,GAASzB,EAASlV,SAClBmV,GAAa,OAIXmD,IAAcnhB,EAAAA,EAAAA,IAAiB5B,IAC/Bqf,IACF9K,KAAuB,GACvBtV,EAAQe,IAENof,IAGAD,EACFlgB,EAAQe,GAER8iB,GAAgB9iB,QAIpBgjB,EAAAA,GAAAA,GAAgBrD,EAAUuC,IAE1B,MAAMe,IAAmBrhB,EAAAA,EAAAA,IAAiB5B,IACxC,MAAMoD,EAAQpD,EAAEkjB,cACZ9f,EAAM+f,YApLU,IAqLlBxN,IAAkB,GAClBzB,GAAe9Q,EAAMoT,cAElBwJ,GAAY5c,EAAMoT,cAAgBpT,EAAMgV,WAC3ClE,GAAe,GACf0L,GAAa,OAIXwD,IAAcxhB,EAAAA,EAAAA,IAAgB,KAC9Boe,IACJ9L,GAAe,GACf0L,GAAa,GACb0B,GAAe,OAGX+B,IAAyBzhB,EAAAA,EAAAA,IAAgB,KACzCib,GAAgBiD,EAClBA,KACUjD,GAAgBgD,GAC1BA,OAIE1B,IAAavc,EAAAA,EAAAA,IAAiBwc,IAClCuB,EAASlV,QAAS+L,YAAc4H,KAG5BkF,IAAqB1hB,EAAAA,EAAAA,IAAiB2hB,IAC1ChE,EAAqB,CAAExC,OAAQwG,EAAY,SAGvCC,IAAoB5hB,EAAAA,EAAAA,IAAgB,KAExC+d,EAASlV,QAASgZ,OAAS9D,EAASlV,QAASgZ,MAC7CjE,EAAoB,CAAExC,SAAUA,OAG5B0G,IAA2B9hB,EAAAA,EAAAA,IAAiB+hB,IAChDlE,EAA2B,CAAEjH,aAAcmL,QAG7C/qB,EAAAA,EAAAA,KAAU,KACR,IAAKqmB,EAAmB,OACxB,MAAM2E,EAAUroB,IACd,IAAKshB,EAAc,OACnB,MAAMzZ,EAAQuc,EAASlV,QACjBoZ,GAAUtI,EAAAA,GAAAA,IAAMnY,EAAMoT,YAnOd,EAmO4Bjb,EAAmB,EAAG6H,EAAMgV,UAClE0L,OAAOC,SAASF,KAClBzgB,EAAMoT,YAAcqN,IAGlBG,EAAiBhkB,IACrB,IAAIqgB,EACJ,OAAQrgB,EAAEikB,KACR,IAAK,IACL,IAAK,QACHjkB,EAAEkkB,iBACFpB,GAAgB9iB,GAChB,MACF,IAAK,OACL,IAAK,YACHA,EAAEkkB,iBACFN,GAAQ,GACR,MACF,IAAK,QACL,IAAK,aACH5jB,EAAEkkB,iBACFN,EAAO,KAOb,OAFA1gB,SAASmS,iBAAiB,UAAW2O,GAAe,GAE7C,KACL9gB,SAASoS,oBAAoB,UAAW0O,GAAe,MAExD,CAAClB,GAAiB7D,EAAmBpC,EAAcwD,IAEtD,MAAM8D,GAAe5L,GAAc,UAAUA,EAAW7N,oBAAoB6N,EAAWxN,WACjFqZ,GAAa,yBAAyBpF,KACtCqF,IAAwBvP,EAAAA,KAAiBN,EAE/C,OACEra,EAAAA,GAAAA,IAAA,OACErC,UAAU,cACVwsB,YAAaD,GAAuBtC,QAAkB/oB,EACtDurB,aAAcF,GAAuBrC,QAAmBhpB,EAAUsB,SAAA,EAElEH,EAAAA,GAAAA,IAAA,OACE6M,MAAOmd,GAAa7pB,SAAA,CAEnB8U,IACC/T,EAAAA,GAAAA,GAAA,OACEmpB,cAAe1f,EAAAA,EACf2f,cAAgB3P,EAAAA,QAAwC9b,EAAzBqqB,GAC/BlrB,QAAUmF,OAA6BtE,EAAlB8pB,GACrBhrB,UAAU,eAGduD,EAAAA,GAAAA,GAAA,SACEmY,IAAKmM,EACL+E,SAAU5P,EAAAA,GACV6P,aAAa,aACbC,aAAW,EACXC,KAAM7E,EAENyD,MAAOvf,GAAS8Y,EAChBlf,GAAG,qBACHkJ,MAAOod,GACPU,UAAWA,IAAMnP,IAAkB,GACnCoP,OAAQA,IAAMnF,GAAa,GAC3BoF,QAAS5B,GACTjrB,QAAUmF,GAAauf,OAA6B7jB,EAAd+pB,GACtC0B,cAAgB3P,EAAAA,QAAwC9b,EAAzBqqB,MAE3BnB,GACJ+C,QAAUjlB,IACR4f,GAAa,GACbsC,GAAkB+C,QAAQjlB,IAE5BklB,aAAcjC,GACdle,IAAK2R,OAGRiM,KACCtnB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACpa,UAAW,eAAe8qB,KAAwBzqB,QAAS2qB,GAAgBxoB,UACvFe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WAGd4lB,KACCpoB,EAAAA,GAAAA,IAAA,OAAKrC,UAAW,CAAC,oBAAqB2qB,IAAmB0C,KAAK,KAAK7qB,SAAA,EAC/DwiB,KAAczhB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,YAAWwC,SAAC,kBAC3Ce,EAAAA,GAAAA,GAAC6X,GAAAA,EAAe,CACdpX,KAAK,KACLqX,SAAU2J,GAAa,EAAIjT,EAC3B1R,QAAS8G,QAIbiF,IAAUmb,IAAuB+C,KACjC/mB,EAAAA,GAAAA,GAACohB,GAAmB,CAClB/F,IAAKA,EACL+B,UAAWA,EACXJ,eAAgBA,GAChBqE,iBAAkBA,GAClBI,WAAYA,GACZF,sBAAuBzgB,QAAQ0jB,GAC/BxC,4BAA6BA,EAC7BR,aAAcA,EACdnE,kBAAmBA,EACnBiE,SAAUA,EACVvE,SAAUA,EACVE,QAASA,GACTC,WAAYA,EACZ/D,qBAAsBA,EACtBmE,OAAQwF,GACRlB,mBAAoBoG,GACpB/F,yBAA0B8C,EAC1B7C,YAAauF,GACb/F,OAAQA,EACRvE,aAAcA,EACdwE,QAASA,EACTE,cAAesG,GACfrG,eAAgBmG,GAChBlG,qBAAsBsG,GACtBlG,gBAAiByE,WCvK3B,IAAetqB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUC,WACT,MAAM,OACJuO,EAAM,QACNC,EAAO,aACPxE,EAAY,SACZ5D,EAAQ,OACRvQ,EAAM,UACNib,EAAS,SACTnQ,IACER,EAAAA,EAAAA,KAAeJ,GAAQK,YACrBpL,EAAwB,YAAdgL,EAAK3S,KAAqB2S,EAAKhL,aAAUxK,EACnDosB,EAAiC,qBAAd5W,EAAK3S,KAA8B2S,EAAKhL,aAAUxK,EACrEqsB,EAAc7hB,GAAW4hB,EAEzBE,EAAe9hB,IAAW+hB,EAAAA,EAAAA,KAAmChX,EAAQ/K,GAAS,GAEpF,MAAO,CACLa,SACAghB,cACAjW,YAAa5L,IAAW6L,EAAAA,EAAAA,KAAyBd,EAAQ/K,GACzDuZ,SACAC,UACApI,WACA4D,eACArJ,WACAmQ,YACAgG,kBA3BchX,EAhLOkX,EACzBhX,OACA3W,WACAwtB,cACAhhB,SACAohB,gBACArW,cACA2N,SACAvE,eACAwE,UACApI,WACA8Q,WACAvW,WACAmQ,YACAgG,eACArmB,UACA0mB,gBACApR,2BAEA,MAAM,4BAAEqR,IAAgClkB,EAAAA,EAAAA,MAElCpJ,GAAOD,EAAAA,EAAAA,KAEPgQ,EAAyB,WAAdmG,EAAK3S,KAChBwjB,EAAmC,qBAAd7Q,EAAK3S,MAC1B,MAAE8G,GAAUF,EAAiB+L,IAAS,CAAC,GAEvC,QACJ/F,EAAO,QACPI,EAAO,cACPqB,EAAa,SACb+B,EAAQ,WACRI,EAAU,MACVnI,EAAK,QACLkI,EAAO,cACP1D,EAAa,UACbwD,EAAS,aACTrC,GACEzB,EAAc,CAChBzF,QAAO0F,WAAUhE,SAAQiE,QAAOmd,GA3CT,OA8ClB,CAAEnE,GAAkBvN,MACpBE,GAAkBE,KAEnB1V,EAAStC,QAAQwG,IACjB,SAAErF,IAAaC,EAAAA,EAAAA,MAEfsoB,GAAuBjkB,EAAAA,EAAAA,IAAgB,KAC3C0f,GAAe,MAGXwE,GAA0BC,EAAAA,GAAAA,IAAqB,KACnD,IAAKluB,IAAawtB,GAAoC,UAArB1iB,GAAO6F,UAAuB,OAC/D,GAAI7F,EAAMyV,SAAW4N,EAAAA,IAAuC,OAE5D,MAAMxiB,EAAU,OAAQ6hB,EAAcA,OAAcrsB,EAC9Cwd,EAAcvC,IACpB,IAAKuC,IAAgBhT,GAAWA,EAAQyiB,UAAW,OAGnD,MAAMC,EAAevjB,EAAMyV,SAAW5B,EAAc2P,EAAgC3P,OAAcxd,EAClG4sB,EAA4B,CAAEvjB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,GAAIwhB,UAAW4G,MACvF,CAACjS,EAAgBpc,EAAU8K,EAAO0iB,GAjER,KAqE7B,IAFAe,EAAAA,GAAAA,GAAgBN,EAAyB,CAAC7R,KAErCtR,EAAO,OAEZ,GAAkB,WAAd6L,EAAK3S,KACP,OAAK6M,GAaDrN,EAAAA,GAAAA,GAAA,OAAoBvD,UAAU,qBAAoBwC,UAChDe,EAAAA,GAAAA,GAAC0jB,GAAW,CAEVrI,IAAKzK,EACL/H,OAAK,EACL8a,WAAY9U,EACZqO,YAAY8N,EAAAA,EAAAA,IAA+Bha,GAAa,GAAO,GAC/DxC,aAAcA,EACd8S,SAAUzQ,EACV+S,kBAAmBxgB,GAAU5G,EAC7BuX,YAAaA,EACbsJ,mBAAoB4N,GAAAA,IAA2Bla,EAC/C8S,QAASrnB,EACToH,QAASA,EACT+d,SAAO,EACPmC,oBAAkB,EAClBpC,OAAQ,EACRqC,gBAAiBsG,EACjBlN,aAAc,EACd6G,mBAAoBA,EACpB9K,qBAAsBA,GAlBjB5R,EAAM7E,KAFL6E,EAAM7E,KAXhBzC,EAAAA,GAAAA,GAAA,OAAoBvD,UAAU,qBAAoBwC,SAC/CisB,GACCta,GACAoa,EAAAA,EAAAA,IAA+Bha,GAAa,IAC3C/O,IAAa8R,EACdA,IALMzM,EAAM7E,IAsCtB,MAAM0oB,EAAYnB,IAAqD,wBAArCA,EAAY3S,QAAQzP,QAAQpH,KAC1DvD,EAAK,qCACLmuB,EAAAA,EAAAA,GAAkB,CAClBjjB,QAAS6hB,EAAaC,eAAcnW,WAAUuX,eAAe,EAAMC,kBAAkB,KAEnF7nB,EAAaumB,GAAe,eAAgBA,EAAcA,EAAYvmB,gBAAa9F,EACnF4tB,EAAYzqB,QAAQqqB,GACpBjO,GAAa8N,EAAAA,EAAAA,IAA+Bha,EAAaua,EAAWne,GACpE+L,EAAuBlX,GAgJ/B,SAAkCib,GAChC,QAAKA,GACEA,EAAW7N,MA3QiB,GA4QrC,CAnJ2Cmc,CAAyBtO,GAElE,OACEpe,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAe,qBAAsBwsB,GAAa,cAC7DtC,YAAa9P,IAAyBM,EAAAA,GAAe+Q,OAAuB7sB,EAAUsB,SAAA,CAErFuO,GAAW0d,GACVta,EACAsM,GACCjb,IAAa8R,EACdA,GAED3G,IAAa5Q,GAMZwD,EAAAA,GAAAA,GAAC0jB,GAAW,CAEVrI,IAAKzK,EACL/H,MAAOA,EACP8a,WAAY9U,EACZqO,WAAYA,EACZ1O,aAAcA,EACd8S,SAAUzQ,EACV+S,kBAAmBxgB,GAAU5G,EAC7BqnB,QAASrnB,EACT6gB,mBAAoB4N,GAAAA,IAA2Bla,EAC/CnN,QAASA,EACT+d,QAASA,EACTpI,SAAUA,EACVJ,qBAAsBA,EACtBpF,YAAaA,EACb2N,OAAQA,EACRqC,gBAAiBsG,EACjBlN,aAAcA,EACd6G,mBAAoBA,EACpB9K,qBAAsBA,EACtB+K,UAAWA,GApBN3c,EAAM7E,IAPUwc,GACvBpQ,EACAqO,GACCjb,IAAa8R,EACdA,IA0BDoX,IACCnrB,EAAAA,GAAAA,GAAC+Y,GAAiB,CAChBC,KAAMmS,EACN1nB,WAAYA,EACZ3G,QAASwtB,EACTvW,YAAaA,EACboF,qBAAsBA,EACtBF,WAAY7L,IAAYvE,EACxBqQ,qBAAsBA,WAuChC,SAASgS,GAAYtc,EAAkB6c,EAA2BC,EAAmB3X,GACnF,OAAOnF,GAEH9P,EAAAA,GAAAA,IAAA,OAAK6M,MAAM,sBAAqB1M,SAAA,CAC7B8U,IAAe/T,EAAAA,GAAAA,GAAA,OAAKmpB,cAAe1f,EAAAA,EAAWhN,UAAU,eACzDuD,EAAAA,GAAAA,GAAA,OACE0J,IAAKkF,EACL+c,IAAI,GACJlvB,WAAWsC,EAAAA,GAAAA,GAAegV,GAAe,gBACzCpI,MAAO8f,EAAY,UAAUA,EAAUpc,UAAY,GACnD9F,UAAWzI,QAAQ4qB,SAKvB1rB,EAAAA,GAAAA,GAAA,OACEvD,UAAU,kBACVkP,MAAO8f,EAAY,UAAUA,EAAUpc,UAAY,GAAGpQ,UAEtDe,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAGvB,CAEA,SAASqZ,GAAmBrQ,EAAkB6c,EAA2BC,EAAmB3X,GAC1F,MAAM+U,EAAe2C,GAAa,UAAUA,EAAUpc,oBAAoBoc,EAAU/b,WAC9EqZ,EAAa,yBAAyBna,KAC5C,OAAOA,GAEH9P,EAAAA,GAAAA,IAAA,OACErC,UAAU,cAAawC,SAAA,CAEtB8U,IAAe/T,EAAAA,GAAAA,GAAA,OAAKmpB,cAAe1f,EAAAA,EAAWhN,UAAU,eACzDuD,EAAAA,GAAAA,GAAA,OACE2L,MAAOmd,EAAa7pB,UAEpBe,EAAAA,GAAAA,GAAA,SACE2L,MAAOod,EACPtsB,WAAWsC,EAAAA,GAAAA,GAAegV,GAAe,gBACzCxK,UAAWzI,QAAQ4qB,WAMzB1rB,EAAAA,GAAAA,GAAA,OACEvD,UAAU,kBACVkP,MAAO8f,EAAY,UAAUA,EAAUpc,UAAY,GAAGpQ,UAEtDe,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAGvB,CC9RA,MAAM,aAAEimB,GAAY,aAAEC,IAAiBC,EAAAA,GA2BjCC,GAAavS,EAAAA,GAAe,GAAK,EACjCwS,GAAqB,IAS3B,IAAIpP,GACAqP,GAAkE,IAQjEC,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAKnB,MAwrBA,IAAe7vB,EAAAA,EAAAA,KAxrByB8vB,EACtCjZ,OACA/F,UACAvE,QACAzF,SACAgnB,gBACA7Q,WACA8S,qBACAC,WACAC,wBACAC,cACAC,aACA7oB,UACA0mB,gBACApR,2BAEA,MAAMwT,GAAezd,EAAAA,EAAAA,MACf0d,GAAiB1d,EAAAA,EAAAA,MACjB2d,GAAe3d,EAAAA,EAAAA,MACf4d,GAAgB5d,EAAAA,EAAAA,MAChB6d,GAAmB7d,EAAAA,EAAAA,IAAkB,CAAErK,EAAG,EAAGG,EAAG,EAAGgoB,MAAO,IAC1DC,GAAoB/d,EAAAA,EAAAA,SAAmCtR,GACvDsvB,GAAwBhe,EAAAA,EAAAA,SAA4BtR,GACpDuvB,GAAgBje,EAAAA,EAAAA,KAAO,IACtBzS,EAAU6oB,IAAe5T,EAAAA,EAAAA,KAAS,IAClCc,GAAiBE,KAClB0a,GAAoBle,EAAAA,EAAAA,IAAOsD,KAC3BiP,GAAe4L,EAAAA,GAAAA,OACdC,EAAaC,IAAkB7b,EAAAA,EAAAA,KAAS,IACxC8b,EAAcC,IAAgB1P,EAAAA,EAAAA,IAAqB,CAAElZ,EAAG,EAAGG,EAAG,EAAGgoB,MAAO,IACzEU,EAAexV,GAAasV,IAC3BG,EAAeC,IAAiB7P,EAAAA,EAAAA,IAAuC3K,GACxEya,EAAgB3V,GAAayV,GAC7BG,GAAWrU,EAAAA,GAAAA,IAAgB,IAA+B,IAAzB+T,IAAeR,OAAa,CAACQ,IAC9DO,GAAatU,EAAAA,GAAAA,GAAgBkU,IAC3Bhe,OAAQqe,EAAc1e,MAAO2e,EAAW,WAAEC,IAAeC,EAAAA,GAAAA,MAC1D5V,EAAoBC,EAAoB2N,GAAgBxN,KAEzDzb,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,SAAU4G,EACVgrB,OAAQxqB,EACRyqB,kBAAkB,IAGpB,MAAMC,GAAsBC,EAAAA,GAAAA,GAAqB9B,EAAY,CAACA,GApElC,KAoEsE,GAC5F+B,GAA+BD,EAAAA,GAAAA,IAAqB,KACxDvB,EAAkB5d,aAAUzR,IAC3B,GAtEkB,KAsEE,GAEjB8wB,GAAuBF,EAAAA,GAAAA,IAAsB1nB,GAAUwe,EAAYxe,IAAQ,GAvE3D,KAuEgF,GAEhG6nB,EAAqB5tB,QAAQ+H,IAAU6R,EAAAA,IACvCiU,EAAkBlV,EAAAA,GAAe,GAAKuU,EAAc,GAEpDY,IAA2BroB,EAAAA,EAAAA,IAAiB5B,IAChD,IAAK8U,EAAAA,GAAc,OACnB,MAAMoV,EAAWd,EAAeppB,EAAEmqB,MA5EZ,IA6EjBD,GAAYlqB,EAAEqb,MAAQ2O,IACtBE,GAAYlqB,EAAEqb,MAAQgO,EAAcW,GACzCpW,GAAoBD,SAGtBhW,EAAAA,GAAAA,IAAW,IAAMiW,GAAmB,IAAO0T,KAE3C1uB,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEwvB,EAAK,EAAEnoB,EAAC,EAAEG,GAAM0oB,EAAare,QAE3B,IAANxK,GAAiB,IAANG,GAAqB,IAAVgoB,GACxBY,EAAcxa,KAEf,CAACA,EAAMwa,EAAeF,KAEzBlwB,EAAAA,EAAAA,KAAU,KACH+uB,GAAawB,IAAczB,GAChCE,EAAsBuB,KACrB,CAACA,EAAYvB,EAAuBD,EAAUD,KAEjD9M,EAAAA,EAAAA,KAAgB,KACd,MAAM,EAAE3a,EAAC,EAAEG,EAAC,MAAEgoB,GAAUQ,IACxBrH,EAAuB,IAAV6G,GACTH,EAAaxd,UACfwd,EAAaxd,QAAQzD,MAAMojB,UAAYC,IAAmBhB,EAAcppB,EAAIonB,KAE1EW,EAAevd,UACjBud,EAAevd,QAAQzD,MAAMojB,UAAYC,GAAkBpqB,EAAGG,EAAGgoB,IAE/DF,EAAczd,UAChByd,EAAczd,QAAQzD,MAAMojB,UAAYC,GAAkBhB,EAAcppB,EAAIonB,OAE7E,CAACuB,EAAcrH,EAAc8H,KAEhCzwB,EAAAA,EAAAA,KAAU,KACR,IAAKmvB,EAAatd,cAAqCzR,IAA1BiwB,EAAcxe,SAAyBmK,GAAYiI,EAC9E,OAEF,IAAIyN,EAAgBnC,EAAiB1d,QACrC,MAAM8f,EAAiB,CACrBtqB,EAAG,EACHG,EAAG,GAECoqB,EAAiB,CACrBvqB,EAAG,EACHG,EAAG,GAECqqB,EAAW,CACfxqB,EAAG,EACHG,EAAG,GAEL,IACIsS,EADAgY,EAAkBC,KAAKC,MAE3B,MAAMC,GAAqBC,EAAAA,GAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,QACtB,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAchC,EAAcxe,QAClC,QAAoBzR,IAAhBiyB,EAA2B,OAAO,EACtC,MAAMC,EAAWrD,EAAYoD,EAAaD,GAC1C,QAAiBhyB,IAAbkyB,EAAwB,CAC1B,MAAM/P,GAAUkO,EAAchC,IAAc2D,EAEtC/qB,EADY6oB,EAAare,QACXxK,EAAIkb,EAMxB,OALAuF,GAAY,GACZsI,EAAckC,GACdvB,EAAoBuB,GACpBpB,GAAqB,GACrBQ,EAAgB,CAAErqB,EAAG,EAAGG,EAAG,EAAGgoB,MAAO,GAChC3C,GAILvN,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAMuE,EACNya,GAAI,EACJtC,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,GAAU2mB,EAAa,CAChCzoB,EAAG,EACHH,EAAGiC,EACHkmB,MAAO,OAGJ,IAdLS,EAAayB,IACN,EAcX,CACA,OAAO,GAGHc,EAAsBprB,IAC1B,MAAM,MAAEooB,GAAUU,EAAare,QAC/B,GAAc,IAAV2d,EAAa,MAAO,EAAC,GAAO,GAChC,GAAKpoB,EAAEqN,OAAuBge,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAIL,EAAY,EAChB,OAAI5B,EAAeppB,EAAEmqB,MA9KD,GA+KX,EAAC,GAAO,IAEbnqB,EAAEqb,MAAQ2O,EACZgB,GAAa,EACJhrB,EAAEqb,MAAQgO,EAAcW,IACjCgB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,MAK7BhH,EAAiBhkB,IACrB,MAAM,MAAEooB,GAAUU,EAAare,QAC/B,GAAc,IAAV2d,EACJ,OAAQpoB,EAAEikB,KACR,IAAK,OACL,IAAK,YACH8G,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,KAKZO,EAA4BA,EAC9BrrB,IAAGG,IAAGgoB,SACRmD,EAAY,KAEZ,MAAMC,EAAqBlD,EAAsB7d,QACjD,IAAK+gB,EAAoB,MAAO,CAAC,CAAEvrB,IAAGG,IAAGgoB,UAAS,GAAM,GAExD,IAAIqD,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAWtC,EAAcA,EAAcjB,GAAS,EAChDwD,GAAWxC,EAAeA,EAAehB,GAAS,EAIlDyD,EAAa9xB,KAAKZ,KAAKqyB,EAAmB3Q,KAAOuN,EAAOuD,GACxDG,EAAazC,EAAcmC,EAAmB5J,MAAQwG,EAC5DqD,GAAYM,EAAAA,GAAAA,IAAU9rB,EAAG6rB,EAAYD,GACrC5rB,GAAIsb,EAAAA,GAAAA,IAAMtb,EAAG6rB,EAAYD,GAEzB,MAAMG,EAAajyB,KAAKZ,KAAKqyB,EAAmB3J,IAAMuG,EAAQmD,EAAWK,GACnEK,EAAa7C,EAAeoC,EAAmB1J,OAASsG,EAI9D,OAHAsD,GAAYK,EAAAA,GAAAA,IAAU3rB,EAAG6rB,EAAYD,GAG9B,CAAC,CAAE/rB,IAAGG,EAFbA,GAAImb,EAAAA,GAAAA,IAAMnb,EAAG6rB,EAAYD,GAET5D,SAASqD,EAAWC,IAGhC1P,EAAahc,IAGjB,GAAIuoB,EAAc9d,QAEhB,YADA8d,EAAc9d,SAAU,GAGX,YAAXzK,EAAEnE,MACJ8sB,GAAe,GAEjB,MAAMyB,EAAYtB,EAAare,SACzB,EAAErK,EAAC,MAAEgoB,GAAUgC,EACrB,IAAInqB,EAAImqB,EAAUnqB,EAClB,MAAMisB,EAAOnyB,KAAKoyB,IAAIlsB,GAChBmsB,EAAOryB,KAAKoyB,IAAI/rB,GAMtB,GAJAypB,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAkC,EAAgB,CAAErqB,EAAG,EAAGG,EAAG,EAAGgoB,MAAO,QACrClQ,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAM,CAACuE,EAAGG,EAAGgoB,GACb1N,GAAI,CAAC,EAAG,EAAG,GACXtC,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,GAAU2mB,EAAa,CAChC5oB,EAAGiC,EAAM,GACT9B,EAAG8B,EAAM,GACTkmB,MAAOlmB,EAAM,QAKnB,GAAIkmB,EAAQ,EAAG,CAEb,MAAMiE,EAAKtyB,KAAKC,IAAIouB,EA1QX,GA2QHkE,EAAcD,EAAKjE,EAIzB,IAAImE,EAAKtsB,EAAIqsB,GAAe9B,EAAevqB,EAAIqsB,EAAc9B,EAAevqB,GACxEusB,EAAKpsB,EAAIksB,GAAe9B,EAAepqB,EAAIksB,EAAc9B,EAAepqB,GAG5E,MAAMqsB,EAAI,IAGV,GAAe,UAAXzsB,EAAEnE,MAAoByuB,EAAclC,QAAUA,EAAO,CAEvD,MAAMsE,EAAK3yB,KAAKoyB,IAAI5B,EAAetqB,IAAM0qB,KAAKC,MAAQF,GAChDiC,EAAK5yB,KAAKoyB,IAAI5B,EAAenqB,IAAMuqB,KAAKC,MAAQF,GAGtD6B,GAAMxyB,KAAKoyB,IAAI5B,EAAetqB,GAAKysB,EAAKD,EAAIhC,EAASxqB,EACrDusB,GAAMzyB,KAAKoyB,IAAI5B,EAAenqB,GAAKusB,EAAKF,EAAIhC,EAASrqB,CACvD,CAcA,OAZCkqB,GAAiBgB,EAA0B,CAAErrB,EAAGssB,EAAInsB,EAAGosB,EAAIpE,MAAOiE,GAjSrD,SAkSdnU,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAM,CAACuE,EAAGG,EAAGgoB,GACb1N,GAAI,CAAC4P,EAAcrqB,EAAGqqB,EAAclqB,EAAGkqB,EAAclC,OACrDhQ,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,GAAU2mB,EAAa,CAChC5oB,EAAGiC,EAAM,GACT9B,EAAG8B,EAAM,GACTkmB,MAAOlmB,EAAM,OAInB,CAMA,GALAooB,EAAgB,CACdrqB,IACAG,IACAgoB,SAEEgE,GA5TgB,GA8TlB,YADAntB,IAIF,GAAImtB,EAAO,EAYT,YAXAlU,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAM0E,EACNsa,GAAI,EACJtC,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,GAAU2mB,EAAa,CAChC5oB,EAAG,EACHG,EAAG8B,EACHkmB,aAMN,MAAM4C,EAAY/qB,EAAI,EAAI,GAAK,EACzBgrB,EAAchC,EAAcxe,QAC5BygB,EAAWD,GAAepD,EAAYoD,EAAahrB,EAAI,EAAI,GAAK,GAKhE2sB,EAAOnC,EAASxqB,EAAI,GAAK,EAAI,OAClBjH,IAAbkyB,GAA0BgB,GAzVV,IAyVuClB,IAAc4B,IAIvE3sB,IAHgBopB,EAAchC,IAAc2D,EAI5ChC,EAAckC,GACdvB,EAAoBuB,IAGtBhT,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAMuE,EACNya,GAAI,EACJtC,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,GAAU2mB,EAAa,CAChCzoB,EAAG,EACHH,EAAGiC,EACHkmB,MAAOA,GAAS,OAKhBxM,GAAUC,EAAAA,GAAAA,IAAckM,EAAatd,QAAS,CAClDoiB,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,0DACzBC,QAxWW,EAyWXC,QA1WW,EA2WXC,cA9WkB,EA+WlBC,eAAe,EACfrR,UAAY9b,IACV,GAAIotB,GAAqBptB,GAAI,OAC7B,MAAM,EAAEC,EAAC,EAAEG,EAAC,MAAEgoB,GAAUU,EAAare,QACrC,GAAe,cAAXzK,EAAEnE,OACJ8sB,GAAe,GACD,IAAVP,IAMN,GADAsC,EAAkBC,KAAKC,MACb,IAAN3qB,GAAiB,IAANG,GAAqB,IAAVgoB,EAAa,CACrC,IAAKJ,EAAevd,QAAS,OAE7B,GADAiI,EAAUsV,EAAevd,QAAQlF,cAAc,eAC1CmN,EAAS,OAEd4V,EAAsB7d,QAAUiI,EAAQwI,uBAC1C,OAXIlb,EAAEkkB,kBAaRjI,OAAQA,CAACoR,EAAOC,GACdC,cACAC,eACCC,KACD,GAAIlF,EAAc9d,SAAW2iB,GAAqBC,GAAQ,OAE1D,GAAItX,EAAAA,IAAgC,eAAtBuX,EAAazxB,KAAuB,CAChD,MAAM,MAAEwf,GAAWiS,EAAgCptB,QAAQ,GAC3D,GAAImb,GAASqS,GAAAA,IAA6BrS,GAASgO,EAAcqE,GAAAA,GAC/D,MAEJ,CACIxV,KACFA,KACAA,QAAkBlf,GAEpByxB,EAASxqB,EAAIsqB,EAAetqB,EAAIstB,EAChC9C,EAASrqB,EAAImqB,EAAenqB,EAAIotB,EAChCjD,EAAetqB,EAAIstB,EACnBhD,EAAenqB,EAAIotB,EACnB,MAAMG,EAAa5zB,KAAKoyB,IAAIoB,GACtBK,EAAa7zB,KAAKoyB,IAAIqB,IACtB,EAAEvtB,EAAC,EAAEG,EAAC,MAAEgoB,GAAUU,EAAare,QAOrC,GAHAogB,IAGc,IAAVzC,GAkBJ,GAAmB,cAAfiF,EAAMxxB,KAAV,CACA,GAAIwsB,EAAkB5d,UAAY+c,GAAeqG,WAG3CxF,EAAkB5d,UAAY+c,GAAesG,YAC5C/zB,KAAKoyB,IAAIlsB,GAAK8tB,GAAAA,IAA6BJ,EAAaC,EAAaI,GAAAA,IAA2B,CACnG3F,EAAkB5d,QAAU+c,GAAesG,WAC3CpN,GAAY,GACZ,MAAMuN,EAAQ5E,EAAchC,GACtBkF,GAAKhR,EAAAA,GAAAA,IAAMgS,GAAcU,EAAOA,GAatC,OAZApF,EAAa,CACX5oB,EAAGssB,EACHnsB,EAAG,EACHgoB,eAKiB,UAAfiF,EAAMxxB,MAAoB9B,KAAKoyB,IAAII,GAAM2B,MAC3ClS,EAAUqR,GACV9E,EAAc9d,SAAU,GAG5B,CAGF,GAAI4d,EAAkB5d,UAAY+c,GAAeqG,UAC5C9zB,KAAKoyB,IAAI/rB,GAAK2tB,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,GAA2B,CACnG3F,EAAkB5d,QAAU+c,GAAeqG,SAC3C,MAAMI,EAAQ7E,EACRoD,GAAKjR,EAAAA,GAAAA,IAAMiS,GAAcS,EAAOA,GACtCpF,EAAa,CACX5oB,EAAG,EACHG,EAAGosB,EACHpE,UAEiB,UAAfiF,EAAMxxB,MAAoB9B,KAAKoyB,IAAIK,GAAM2B,MAC3CnS,EAAUqR,GACV9E,EAAc9d,SAAU,EAE5B,CAxCsC,MAlBtC,CACE,MAAM8hB,EAAKjC,EAAcrqB,EAAIstB,EACvBf,EAAKlC,EAAclqB,EAAIotB,EAC7B,GAAI,CAAC,QAAS,aAAaY,SAASf,EAAMxxB,MAAO,CAC/C,MAAOuuB,EAAWqB,EAAWC,GAAaJ,EAA0B,CAAErrB,EAAGssB,EAAInsB,EAAGosB,EAAIpE,SAla1E,IAqaV,OAFIqF,GAAYA,GAAYhC,GAAYC,QACxC7C,EAAauB,EAEf,CACI,YAAaiD,GAAkC,IAAzBA,EAAMntB,QAAQhG,QACtC2uB,EAAa,CACX5oB,EAAGssB,EACHnsB,EAAGosB,EACHpE,SAIN,GA2CFiG,OAAQA,CAACruB,GACPsuB,OACAC,aACAC,iBACAC,iBACAlB,cACAC,cACAkB,iBACAC,qBAEIzW,IAAiBA,KACrBsW,EAAiBA,GAAkBnF,EAAc,EACjDoF,EAAiBA,GAAkBrF,EAAe,EAClDsF,EAAiBA,GAAkBrF,EAAc,EACjDsF,EAAiBA,GAAkBvF,EAAe,EAGlD,MAAMhB,EAAQkG,IAAQ/S,EAAAA,GAAAA,IAAM+O,EAAclC,MAAQmG,EAAaK,GAAgBC,IACzEvC,EAAclE,EAAQkC,EAAclC,MACpC0G,EAAU/0B,KAAKoyB,IAAIpyB,KAAKC,IAAIswB,EAAcrqB,EAAG,IAC7C8uB,EAAUh1B,KAAKoyB,IAAIpyB,KAAKC,IAAIswB,EAAclqB,EAAG,IAGnDoqB,EAAevqB,EAAIyuB,EACnBlE,EAAepqB,EAAIuuB,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgB1C,EAAc0C,EAC9CG,EAAgBF,EAAgB3C,EAAc2C,GAE7C7E,GAAakB,EAA0B,CAC5CrrB,EAAGqqB,EAAcrqB,EAAIivB,EAAe3B,EACpCntB,EAAGkqB,EAAclqB,EAAI+uB,EAAe3B,EACpCpF,UAGFS,EAAauB,IAEfjyB,OAAAA,CAAQ6H,GACN2oB,GAAe,GACf,MAAOyG,EAAeC,GAAgBjE,EAAmBprB,GACzD,GAAIovB,EAAJ,CAGE,GAFApvB,EAAEkkB,iBACFlkB,EAAEwV,kBACEV,EAAAA,GAAc,OACbua,GAAcpwB,GAErB,MAC4B,IAAxBqrB,EAAclC,OAAetT,EAAAA,KAC7BiV,GAAuBuF,GAAsBtvB,EAAEqN,OAAuB,iBACxEpO,GAEJ,EACAwlB,aAAAA,CAAczkB,GAAG,QACf2rB,EAAO,QACPC,IAEA,MAAOwD,GAAiBhE,EAAmBprB,GAC3C,GAAIovB,EAGF,OAFApvB,EAAEkkB,sBACFlkB,EAAEwV,kBAGJ,IAAKV,EAAAA,IAA2B,UAAX9U,EAAEnE,KAAkB,OACzC,MAAM,EAAEoE,EAAC,EAAEG,EAAC,MAAEgoB,GAAUU,EAAare,QAIrC,GAAc,IAAV2d,EAAa,CACf,GAAU,IAANnoB,GAAiB,IAANG,EAAS,OACxBkqB,EAAgBgB,EAA0B,CACxCrrB,EALkB0rB,EAliBN,EAkiBkCA,EAM9CvrB,EALkBwrB,EAniBN,EAmiBkCA,EAM9CxD,MAziBY,IA0iBX,EACL,MACEkC,EAAgB,CACdrqB,EAAG,EACHG,EAAG,EACHgoB,MAAO,GAGXlQ,IAAkBuC,EAAAA,EAAAA,IAAc,CAC9B/e,KAAM,CAACuE,EAAGG,EAAGgoB,GACb1N,GAAI,CAAC4P,EAAcrqB,EAAGqqB,EAAclqB,EAAGkqB,EAAclC,OACrDhQ,SAAUkP,GACV6D,OAAQjE,GACRvM,SAAWzY,IACT,MAAMkoB,EAAY,CAChBnqB,EAAGiC,EAAM,GACT9B,EAAG8B,EAAM,GACTkmB,MAAOlmB,EAAM,IAEf2mB,EAAauB,KAGnB,EACApO,cAGF,OADA9Y,SAASmS,iBAAiB,UAAW2O,GAAe,GAC7C,KACLpI,IACA1Y,SAASoS,oBAAoB,UAAW0O,GAAe,MAG3D,CACEiF,EACAY,EACAG,EACAnC,EACAhL,EACAjI,EACA3V,EACA0qB,EACAX,EACAc,EACAjB,EACAkB,EACAjB,EACAM,EACAC,EACA5D,KAGF7sB,EAAAA,EAAAA,KAAU,KACR,MAAM+Y,EAAa/D,IACb2hB,OAA+Cv2B,IAA9BwvB,EAAkB/d,SACpC+d,EAAkB/d,UAAYkH,EACnC,IAAKoW,EAAatd,UAAY8kB,GAAkB3a,GAAYiI,EAAc,OAC1E2L,EAAkB/d,QAAUkH,EAC5B,MAAM,MAAEyW,GAAUU,EAAare,QACzBlP,EAAMoW,EAAa,GAAK,EAAI,EAGlC,IAAI6d,EAAQ,IACRC,EAAY,EACZrH,GAJYwG,IAIQrzB,EAAM,GAC1B6sB,GAJYyG,IAIQtzB,EAAM,IAChB,IAAV6sB,GAAe7sB,EAAM,IAAGi0B,EAAQ,IAChCjI,IAAqBA,KACzBA,IAAsB9M,EAAAA,EAAAA,IAAc,CAClC/e,KAAMH,EACNmf,GAAInf,EAAMi0B,EACVpX,SAAUkP,GACV6D,OAAQhE,GACRxM,SAAWzY,IACT,IAAK6lB,EAAatd,QAAS,OAC3B,MAAMilB,GAAQxd,EAAAA,GAAAA,IAAMhQ,EAAQutB,EAAW,GACvCA,EAAYvtB,EAEZ,MAAMytB,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEX/H,EAAatd,QAAQslB,cAAcJ,SAGtC,CAAC/hB,EAAegH,EAAUiI,EAAciM,IAE3C,MAAOkH,GAAU9E,KAAYnyB,EAAAA,EAAAA,KAAQ,SAChBC,IAAfmwB,EAAiC,MAACnwB,OAAWA,GAC1C,CAAC6uB,EAAYsB,GAAa,GAAItB,EAAYsB,EAAY,KAC5D,CAACA,EAAYtB,IAEhB,QAAmB7uB,IAAfmwB,EAA0B,OAE9B,MAAM8G,QAAuBj3B,IAAbg3B,GACVE,QAAuBl3B,IAAbkyB,GACVxF,GAAWgD,GAAeQ,EAEhC,OACE/uB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAoB0b,IAAKuU,EAAaztB,SAAA,EACnDe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,mBAAmB0b,IAAKyU,EAAa3tB,SACjD21B,KAAY/G,IAAaI,IACxBjuB,EAAAA,GAAAA,GAACmqB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVlX,KAAMwhB,GACN/wB,QAASA,EACT0mB,cAAeA,EACfpR,qBAAsBA,OAI5BlZ,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACT,mBACA,2BACAsrB,IAAY,4BAEdvtB,QAAS8xB,GACTzW,IAAKwU,EAAe1tB,UAEpBe,EAAAA,GAAAA,GAACmqB,GAAkB,CACjBhX,KAAM2a,EACN1D,cAAeA,EACf5tB,SAAUA,EACV6tB,SAAUA,GACVzmB,QAASA,EACT0mB,cAAeA,EACfpR,qBAAsBA,OAG1BlZ,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,mBAAmB0b,IAAK0U,EAAc5tB,SAClD41B,KAAYhH,IAAaI,IACxBjuB,EAAAA,GAAAA,GAACmqB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVlX,KAAM0c,GACNjsB,QAASA,EACT0mB,cAAeA,EACfpR,qBAAsBA,MAI3B0b,KAAY/G,IAAapU,EAAAA,KACxBzZ,EAAAA,GAAAA,GAAA,UACEQ,KAAK,SACL/D,UAAW,mBAAmB2Q,IAAYvE,GAAS,WACnD,aAAY5L,EAAK,oBACjBiD,IAAKjD,EAAKkD,MAAQ,WAAQxC,IAG7Bk3B,KAAYhH,IAAapU,EAAAA,KACxBzZ,EAAAA,GAAAA,GAAA,UACEQ,KAAK,SACL/D,UAAW,mBAAmB2Q,IAAYvE,GAAS,WACnD,aAAY5L,EAAK,QACjBiD,IAAKjD,EAAKkD,MAAQ,WAAQxC,UASpC,SAASqxB,GAAkBpqB,EAAI,EAAGG,EAAI,EAAGgoB,EAAQ,GAC/C,MAAO,eAAenoB,EAAEkwB,QAAQ,SAAS/vB,EAAE+vB,QAAQ,oBAAoB/H,EAAM+H,QAAQ,KACvF,CAEA,SAASb,GAAsBc,EAAsBC,GACnD,QAAKD,MACDA,EAAQE,QAAQD,IACbl0B,QAAQi0B,EAAQ/E,QAAQgF,IACjC,CAEA,SAASjD,GAAqBptB,GAC5B,MAAMqN,EAASrN,EAAEqN,OACjB,QAAIiiB,GAAsBjiB,EAAQ,0BAC5BiiB,GACFjiB,EACA,gGAIFrN,EAAEkkB,kBAFO,EAMb,C,uCCxwBA,MA8FA,IAAe5V,EAAAA,EAAAA,KACb,CAACC,GAAUC,WACT,MAAMhL,EAAyB,YAAfgL,GAAM3S,KAAqB2S,EAAKhL,aAAUxK,EACpDu3B,EAAgB/sB,IAAWgtB,EAAAA,EAAAA,KAAajiB,EAAQ/K,GAItD,MAAO,CACLitB,MAH2B,WAAfjiB,GAAM3S,KAAoB2S,EAAKK,YAAc0hB,KAL/D,EA3F8CG,EAC5CD,QACAjiB,WAEA,MAAM,iBACJmiB,EAAgB,aAChBC,EAAY,eACZC,IACEnvB,EAAAA,EAAAA,OAEE,SAAEpE,IAAaC,EAAAA,EAAAA,MAEfuzB,GAAqBlvB,EAAAA,EAAAA,IAAgB,KAGzC,GAFA+uB,IAEmB,YAAfniB,GAAM3S,KAAoB,OAE9B,MAAM2H,EAAUgL,EAAKhL,QAEjBlG,EACFuO,YAAW,KACTglB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAEvuB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,OAxBvC,KA2BrB8yB,EAAa,CAAEvuB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,QAIxDxF,GAAOD,EAAAA,EAAAA,KAEPoH,GAAW1G,EAAAA,EAAAA,KAAQ,KACvB,IAAKyV,GAAsB,eAAdA,EAAK3S,KAAuB,OAEzC,MAAMgT,EAA4B,WAAdL,EAAK3S,KAAoB2S,EAAKK,iBAAc7V,EAC1D+J,EAA8B,WAAdyL,EAAK3S,KAAoB2S,EAAKzL,mBAAgB/J,EAC9D8J,EAASC,GAAeC,OAAOwL,EAAK5L,YACpCquB,EAAmBnuB,GAAQhF,KAAOiF,GAAemuB,eAAepzB,GAChEqzB,EAAmBruB,GAAQhF,KAAOiF,GAAequB,eAAetzB,GAChEuzB,EAAqB,YAAd7iB,EAAK3S,KAAqB2S,EAAKhL,QAAQ6tB,KAAOvuB,GAAQuuB,KACnE,IAAKA,EAAM,OAEX,MAAMC,GAAgBC,EAAAA,GAAAA,IAAoBj5B,EAAa,IAAP+4B,GAAa,GACvDG,EAAQzuB,GAAeyuB,OACvBzuB,EAAcyuB,OAASzuB,GAAemuB,cAAgB,EAAI,GAC1DO,EAAejjB,EAAK5L,WAAc,GAAKG,GAAequB,eAAiB,EAAI,GAC3EM,EAAYF,GAASl5B,EAAK,KAAM,CAACm5B,EAAcD,IAE/CG,EAAkB,GACxB,GAAI7uB,EAAQ,CACV,MAAMiM,GAAQV,EAAAA,EAAAA,IAASQ,EAAa/Q,SAA+B9E,EAAzB6V,EACpC+iB,EAAY7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GAClC+iB,EAAU/iB,IAAQgjB,EAAAA,EAAAA,IAAYhjB,GACpC4iB,EAAM93B,KAAKvB,EACT64B,EAAmB,qCACfF,EAAmB,qCACjBW,EAAY,8BACVE,EAAU,4BAA8B,+BAEpD,CAQA,OANIJ,GAAcP,GAAqBF,GACrCU,EAAM93B,KAAK63B,GAGbC,EAAM93B,KAAKy3B,GAEJK,EAAMxM,KAAK,SACjB,CAAC3W,EAAMlW,IAEV,IAAKm4B,EACH,OAGF,MAAMuB,GAAcC,EAAAA,GAAAA,IAAa35B,EAAMm4B,GAEvC,OACEt2B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAaK,QAAS24B,EAAmBx2B,SAAA,EACtDe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAAgBjG,KAAK,SAASkG,KAAMyuB,GAA9BA,EAAM3yB,KACnB3D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,EACnBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAQyD,IAAI,OAAMjB,SAC9B03B,IAAe51B,EAAAA,GAAAA,GAAW41B,MAE7B32B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,OAAOyD,IAAI,OAAMjB,SAC7BmF,aC7BL6nB,GAAqB,IAyY3B,IAAe3vB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,YAAEK,EAAW,4BAAEsjB,IAAgCvjB,EAAAA,EAAAA,KAAeJ,IAC9D,OACJlM,EAAM,SACN8M,EAAQ,UACRwI,EAAS,OACTtT,EAAM,SACNuQ,EAAQ,mBACRud,EAAkB,gBAClBC,EAAe,WACfxvB,EAAU,aACVkP,EAAY,mBACZuN,GACEzQ,EACE6W,GAAgB4M,EAAAA,EAAAA,KAA+B9jB,EAAQ,0BAEvD,cAAE+jB,EAAa,SAAE3K,GAAapZ,EAC9BgkB,EAAiBp2B,QAAQkG,KAAWmwB,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAEvE,GAAIyP,EAAc,CAChB,MAAM9P,GAAOywB,EAAAA,EAAAA,KAAWlkB,EAAQlM,GAChC,IAAIoM,GAAiB,EACjBzM,IACFyM,GAAiBJ,EAAAA,EAAAA,IAASrM,EAAKlE,IAAMkE,EAAKlE,KAAOw0B,GAAgBI,EAAAA,EAAAA,IAAY1wB,IAG/E,MAAMe,GAAgB4vB,EAAAA,EAAAA,KAAiBpkB,EAAQlM,GAE/C,MAAO,CACLU,gBACAD,OAAQC,GAAeC,OAAOJ,GAC9BiM,YAAa7M,EACb0lB,mBAAoB3kB,GAAe6vB,UACnCL,iBACA9jB,iBACAgX,gBACAphB,SACA6tB,8BACAtd,WACAwd,kBACAxvB,aACA+kB,WAEJ,CAEA,IAAInkB,EASA4hB,EAOAyN,EAfAxwB,GAAUsV,IAEVnU,EADEa,GAAU,CAACc,EAAAA,GAAkBU,eAAgBV,EAAAA,GAAkBqB,iBAAiB4nB,SAAS/pB,IACjFyuB,EAAAA,EAAAA,KAAuBvkB,EAAQlM,EAAQsV,IAEvCob,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQsV,IAK5C0H,GAAsBhd,GACpBgC,IAAWc,EAAAA,GAAkBmB,mBAC/B8e,GAAmB4N,EAAAA,EAAAA,KAAuBzkB,EAAQlM,IAMlDA,IAEAwwB,EADExuB,GAAU,CAACc,EAAAA,GAAkBU,eAAgBV,EAAAA,GAAkBqB,iBAAiB4nB,SAAS/pB,IAC5E4uB,EAAAA,EAAAA,KAA4B1kB,EAAQlM,IAEpC6wB,EAAAA,EAAAA,KAAmB3kB,EAAQlM,IAI9C,IAAIqlB,GAAqB,EACzB,MAAMyL,EAAiB9uB,IAAWc,EAAAA,GAAkBsB,OAC9C2sB,EAAgB/uB,IAAWc,EAAAA,GAAkBS,MACnD,IAAIytB,EAEJ,GAAIhxB,GAAU8M,GAAYwI,EACxB,GAAIwa,IAAuBgB,GAAkBC,GAAgB,CAC3D,MAAME,GAAgBC,EAAAA,EAAAA,KAA6BhlB,GACnDmZ,EAAqBvrB,QAAQm3B,GAAeV,WAC5C,MAAM,SAAEY,GAAcF,GAAeG,gBAAmB,CAAC,EACzDJ,EAAsBG,CACxB,MAAO,GAAInvB,IAAWc,EAAAA,GAAkBa,YAAa,CACnD,MAAMstB,GAAgBI,EAAAA,EAAAA,KAA+BnlB,IAC/C,SAAEilB,GAAcF,GAAiBA,EAAcK,eAAiBL,EAAcK,cAAchxB,OAAU,CAAC,EAC7G0wB,EAAsBG,CACxB,MAAWL,GAAkBC,KAE3BC,GADqBO,EAAAA,EAAAA,KAA8BrlB,EAAQlM,EAAQ8M,EAAUwI,KACvCkc,EAAAA,EAAAA,KAAgBtlB,EAAQlM,EAAQ8M,IAI1E,MAAO,CACL9M,SACA8M,WACAwI,YACA4a,iBACAluB,SACAb,UACAqvB,eACAzN,mBACAiO,sBACA5N,gBACA7Q,WACAsd,8BACAC,qBACAC,kBACAxvB,aACA8kB,qBACAC,cA9GcrZ,EAtYAwlB,EAClBzxB,SACA8M,WACAwI,YACAnU,UACA6vB,sBACAd,iBACA9jB,iBACApK,SACAvB,SACA+L,cACA9L,gBACA8vB,eACAzN,mBACAgN,kBACAxvB,aACA6iB,gBACA7Q,WACAsd,8BACAC,qBACAzK,qBACAC,gBAEA,MAAM,gBACJ3W,GAAe,iBACf2f,GAAgB,gBAChBoD,GAAe,aACfnD,GAAY,eACZC,GAAc,wBACdmD,GAAuB,sBACvBC,GAAqB,eACrBC,GAAc,QACdC,KACEzyB,EAAAA,EAAAA,MAEEjD,GAAStC,QAAQ0S,GAAerL,GAAW4uB,GAAmBhN,IAC9D,SAAE9nB,KAAaC,EAAAA,EAAAA,MAGf62B,IAAe9pB,EAAAA,EAAAA,MACf+pB,GAAW7wB,GAAS6wB,UAAYxlB,GAAa/Q,IAAM0F,GAASnB,OAC5DiyB,IAAeC,EAAAA,EAAAA,GAA0CF,IACzDG,GAAkB/O,EAAgB,YAAc,OAChDgP,GAAmBt4B,QAAQspB,IAAkByM,IAG5CwC,GAAyBC,GAAuBC,KAA0Bj8B,EAAAA,EAAAA,KAE3Ek8B,GvBhHD,UAA4B,QACjCrxB,EAAO,YAAEqL,EAAW,cAAE9L,EAAa,gBAAEqvB,EAAe,WAAExvB,EAAU,iBAAEwiB,IASlE,OAAIvW,GAAe9L,EACV,CACLlH,KAAM,SACNgT,cACA9L,gBACAH,WAAYA,GAIZwvB,EACK,CACLv2B,KAAM,aACN8G,MAAOyvB,EACPxvB,WAAYA,GAIZY,EACK,CACL3H,KAAM,UACN2H,UACAZ,cAIAwiB,EACK,CACLvpB,KAAM,mBACN2H,QAAS4hB,EACTxiB,mBAJJ,CASF,CuBoEsBkyB,CAAmB,CACrCtxB,UAASqL,cAAaujB,kBAAiBrvB,gBAAeH,aAAYwiB,sBAE9D,MAAEziB,GAAK,SAAEE,IAAaJ,EAAiBoyB,KAAgB,CAAC,GAExD,QACJpsB,GAAO,QACPI,GAAO,cACPqB,GAAa,SACb+B,GAAQ,WACRI,GAAU,MACVnI,GAAK,kBACL4E,IACEV,EAAc,CAChBzF,SAAO0F,SAAUlM,QAAQ0S,GAAcxK,SAAQiE,MAAOmsB,IAAoBnN,KAGtEnX,GAAkB,MACtB,GAAIoiB,EAAgB,OAAO,EAC3B,GAA0B,WAAtBsC,IAAah5B,OAAsBgT,EAAa,OAAO,EAC3D,MAAMkmB,EAAOF,GAAY9xB,cACzB,OAAIJ,KAAUoyB,EAAK3D,aAEpB,EANuB,GAOlBpT,IAAapJ,GAAYnW,GAEzBu2B,IAAkBj8B,EAAAA,EAAAA,KAAQ,IACvBo5B,EACHkB,GACA4B,EAAAA,EAAAA,IAAuBpC,GAAgB,CAAC,EAAGQ,GAAuB,GAAIvqB,KACzE,CAAC+pB,EAAcQ,EAAqBvqB,GAAmBqpB,KAEtD1zB,IAAY61B,IAAgBA,KAAiBD,SAAqCr7B,IAAzBo7B,GAAa3pB,UACxE2pB,GAAa3pB,QAAU5H,GAAW,EAAK8U,GAAa/U,GAGtD,MAAOsyB,IrBpKAhuB,GqBsKPtO,EAAAA,EAAAA,KAAU,KACR,IAAK6F,IAAUy2B,KACb,QAGFC,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,KACLD,KACAE,EAAAA,EAAAA,SAED,CAAC72B,GAAQy2B,MAEZt8B,EAAAA,EAAAA,KAAU,KACJolB,IACFvW,MAED,CAACuW,MAEJplB,EAAAA,EAAAA,KAAU,KACJ0E,KACFga,EAAAA,EAAAA,KAAgB,KACdpU,SAAS+a,KAAKzZ,UAAU+wB,OAAO,uBAAwB92B,SAG1D,CAACnB,GAAUmB,KAEd,MAAM+2B,IAAYlrB,EAAAA,EAAAA,OAClBmrB,EAAAA,EAAAA,GAAgBD,IAEhB,MAAMnqB,IAAcC,EAAAA,EAAAA,MACpB1S,EAAAA,EAAAA,KAAU,KACR,MAAM88B,EAAM9pB,OAAO+pB,WAAWC,EAAAA,IAG9B,OAFAF,EAAIrgB,iBAAiB,SAAUhK,IAExB,KACLqqB,EAAIpgB,oBAAoB,SAAUjK,OAEnC,CAACA,KAEJ,MAAMwqB,IAActB,EAAAA,EAAAA,GAA8C/wB,GAC5DsyB,IAAevB,EAAAA,EAAAA,GAA2C3f,GAC1DmhB,IAAaxB,EAAAA,EAAAA,GAAsBlwB,GACnC2rB,IAAWuE,EAAAA,EAAAA,GAAsBM,IACjCmB,IAAoBzB,EAAAA,EAAAA,GAAsBrqB,IAC1Csc,GAAYhjB,GAAUijB,EAAAA,EAAAA,GAAkB,CAAEjjB,UAASkjB,eAAe,EAAMC,kBAAkB,SAAU3tB,EACpG4tB,GAAYzqB,QAAQqqB,IACpByP,GAAuBH,IAAgB9F,KAAa6E,IAE1Dj8B,EAAAA,EAAAA,KAAU,KACJ67B,IAAoBh2B,KAAWw3B,KAAyBjG,OAC1DkG,EAAAA,EAAAA,IAAoB5O,GAAqB6O,EAAAA,KtBpNxC,SACLvP,EACAviB,EACA6F,EACAmC,EACA5D,EACAjF,EACAZ,GAEA,MAAQiE,QAASuvB,GAAc3wB,EAASpB,EAAQb,EAASZ,GACzD,IAAKwzB,EACH,OAGF,MAAQ1rB,MAAO2e,GAAgBgN,EAAAA,EAAWlrB,OAExCT,MAAO4rB,EAAgBvrB,OAAQwrB,IAC7BC,EAAAA,EAAAA,IAAkC5P,EAAWne,IACzCiC,MAAO+rB,EAAS1rB,OAAQ2rB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiBlqB,EAAW3B,MAAO2B,EAAWtB,QAE1D6rB,GAAUvN,EAAcoN,GAAW,EACnCI,EA6OR,SAAsBjQ,GACpB,MAAM8O,EAAM9pB,OAAO+pB,WAAWC,EAAAA,IAC9B,IAAIkB,EAAe,MAKnB,OAJIlQ,IAAc9R,EAAAA,KAChBgiB,GAAgBpB,EAAIpF,QAAU,KAAQ,OAGjCwG,EAAe5hB,EAAAA,CACxB,CArPgB6hB,CAAanQ,IAAc2P,EAAkBG,GAAY,EAEvE,IACE7U,IAAKmV,EAASnc,KAAMoc,EAAUvsB,MAAOwsB,EAAWnsB,OAAQosB,GACtDf,EAAUlb,wBAEd,GAAI,CACF/V,EAAAA,GAAkBa,YAClBb,EAAAA,GAAkBS,MAClBT,EAAAA,GAAkBU,eAClBV,EAAAA,GAAkBc,cAClBmoB,SAAS/pB,GAAS,CAClB,MAAM+yB,EAkMV,SAAiBC,EAAmBC,EAAoBzV,EAAahH,EAAcnQ,EAAeK,GAChG,GAAIssB,IAAcC,EAAY,CAC5B,MAAMx7B,EAAO/B,KAAKZ,IAAIuR,EAAOK,IAAWssB,EAAYC,GACpDzc,IAAS/e,EAAO4O,GAAS,EACzBmX,IAAQ/lB,EAAOiP,GAAU,EACzBL,EAAQ5O,EACRiP,EAASjP,CACX,MAAO,GAAIu7B,EAAYC,EAAY,CACjC,MAAMC,EAAW7sB,EAEjBmQ,KADAnQ,EAAQK,GAAUssB,EAAYC,IACbC,GAAY,CAC/B,MAAO,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYzsB,EAElB8W,KADA9W,EAASL,GAAS4sB,EAAaD,IACdG,GAAa,CAChC,CAEA,MAAO,CACL3V,MAAKhH,OAAMnQ,QAAOK,SAEtB,CAtNsB0sB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUvV,IACpBoV,EAAWG,EAAUvc,KACrBqc,EAAYE,EAAU1sB,MACtBysB,EAAaC,EAAUrsB,MACzB,CAEA,MAAM2sB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhCpf,EAAAA,EAAAA,KAAgB,KACd,MAAMhT,EAAQH,EAAY+F,GAAiBksB,IAC3C0B,EAAAA,EAAAA,IAAYxzB,EAAO,CACjBud,IAAK,GAAGgV,MACRhc,KAAM,GAAG+b,MACTlsB,MAAO,GAAG+rB,MACV1rB,OAAQ,GAAG2rB,MACXtM,UAAW,eAAesN,QAAqBC,iBAA8BC,MAAeC,OAE9F/wB,EAAWxC,EAAOD,GAElBnB,SAAS+a,KAAK/Y,YAAYZ,GAC1BpB,SAAS+a,KAAKzZ,UAAUC,IAAI,oBAE5B6S,EAAAA,EAAAA,KAAgB,KACdhT,EAAM0C,MAAMojB,UAAY,GAwT9B,SAAoB9lB,GACjBA,EAAMyC,WAA2BC,MAAMC,UAAY,UACpD3C,EAAME,UAAU0Z,OAAO,kBAAmB,SAC5C,CA1TM6Z,CAAWzzB,GAEXuH,YAAW,MACTyL,EAAAA,EAAAA,KAAgB,KACVpU,SAAS+a,KAAK+Z,SAAS1zB,IACzBpB,SAAS+a,KAAKga,YAAY3zB,GAE5BpB,SAAS+a,KAAKzZ,UAAU0Z,OAAO,wBAvEd,IAyEGiY,EAAAA,UAG9B,CsB2IM+B,CAAetR,GAAWviB,EAAS6F,GAAgBmC,GAAa5D,GAASjF,EAASZ,IAGhF6xB,KAAqBh2B,IAAUuxB,MACjCkG,EAAAA,EAAAA,IAAoB5O,GAAqB6O,EAAAA,KtB7IxC,SACL9xB,EAA2B6F,EAAuB1G,EAAsBZ,GAExE,MAAM,UAAE8D,EAAWG,QAASsxB,GAAY1yB,EAASpB,EAAQb,EAASZ,GAClE,IAAKu1B,EACH,OAGF,MAAM/B,EAAYlzB,SAASk1B,eAAe,eAAgB7yB,cACxD,kEAEF,IAAK6wB,EACH,OAGF,MACEvU,IAAKmV,EAASnc,KAAMoc,EAAUvsB,MAAOwsB,EAAWnsB,OAAQosB,GACtDf,EAAUlb,yBAEZ2G,IAAKwW,EAAWxd,KAAM+b,EAAQlsB,MAAO+rB,EAAS1rB,OAAQ2rB,GACpDyB,EAAQjd,wBAEZ,IAAI2b,EAAQwB,EACZ,KAAKC,EAAAA,EAAAA,GAAoB5xB,GAAY,CACnC,MAAQqE,OAAQqe,GAAiBiN,EAAAA,EAAWlrB,MAC5C0rB,EAAQwB,EAAYrB,GAAWN,EAAWtN,CAC5C,CAEA,MAAMsO,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM6B,EACJ,CACEpzB,EAAAA,GAAkBsB,OAClBtB,EAAAA,GAAkBqB,gBAClBrB,EAAAA,GAAkBS,MAClBT,EAAAA,GAAkBU,gBAClBuoB,SAAS/pB,KAuIf,SAAoCm0B,GAClC,MAAMC,EAAqBv1B,SAASqC,cAA8B,4CAE5D,IAAEsc,IAAQ6W,EAAAA,EAAAA,GAAqBF,EAASC,GAE9C,OAAO5W,EAAM4W,EAAmBE,WAC3B9W,EAAM2W,EAAQI,aAAeH,EAAmBE,UAAYF,EAAmBG,YACtF,CA7IQC,CAA2BV,GAG7B,CACFhzB,EAAAA,GAAkBa,YAClBb,EAAAA,GAAkBS,MAClBT,EAAAA,GAAkBU,eAClBV,EAAAA,GAAkBc,cAClBmoB,SAAS/pB,KACLuzB,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMkB,EAAgB51B,SAAS61B,uBAAuB,SAAS,GACzDz0B,EAAQw0B,GAAiB30B,EAAY+F,GAAiBiuB,EAAS9zB,GAErE,IAAIhK,EACJ,GAAIy+B,EAAe,CACjB,MAAM,IACJjX,EAAG,KAAEhH,EAAI,MAAEnQ,EAAK,OAAEK,GAChB+tB,EAAc5d,wBAIlB7gB,EAAS,CACP2+B,WAAY,OACZnX,IAAK,GAAGgV,MACRhc,KAAM,GAAG+b,MACTqC,gBAAiB,WACjB7O,UAAW,eAAevP,EAAO+b,QAAa/U,EAAMgV,iBARvCnsB,EAAQ+rB,MACR1rB,EAAS2rB,KAQtBhsB,MAAO,GAAG+rB,MACV1rB,OAAQ,GAAG2rB,MAEf,MACEr8B,EAAS,CACPwnB,IAAK,GAAGgV,MACRhc,KAAM,GAAG+b,MACTlsB,MAAO,GAAG+rB,MACV1rB,OAAQ,GAAG2rB,MACXtM,UAAW,eAAesN,QAAqBC,iBAA8BC,MAAeC,OAIhGvgB,EAAAA,EAAAA,KAAgB,MACdwgB,EAAAA,EAAAA,IAAYxzB,EAAOjK,GACdy+B,GAAe51B,SAAS+a,KAAK/Y,YAAYZ,GAC9CpB,SAAS+a,KAAKzZ,UAAUC,IAAI,oBAE5B6S,EAAAA,EAAAA,KAAgB,KACVwhB,IACFA,EAAc9xB,MAAMgyB,WAAa,IAGnC10B,EAAM0C,MAAMojB,UAAY,GAEpBmO,IACFj0B,EAAM0C,MAAMkyB,QAAU,KAGxBpyB,EAAWxC,EAAOD,GAElBwH,YAAW,MACTyL,EAAAA,EAAAA,KAAgB,KACVpU,SAAS+a,KAAK+Z,SAAS1zB,IACzBpB,SAAS+a,KAAKga,YAAY3zB,GAE5BpB,SAAS+a,KAAKzZ,UAAU0Z,OAAO,wBA3Ld,IA6LGiY,EAAAA,UAG9B,CsB4BMgD,CAAepD,GAAaC,GAAoBH,GAAa7F,IAAUptB,eAExE,CACDsH,GAAemC,GAAYua,GAAW6N,GAAkBh2B,GAAQgK,GAASjF,EAASa,EAClF2xB,GAAmBhG,GAAU6F,GAAaE,GAAYE,GAAsBrzB,IAG9E,MAAMw2B,IAAcx3B,EAAAA,EAAAA,IAAgB,IAAM+uB,OAEpC0I,IAAoBz3B,EAAAA,EAAAA,IAAiB5B,IACrCA,EAAEqN,kBAAkBisB,aAAet5B,EAAEqN,OAAOge,QAAQ,OAExD+N,KAEK/2B,GAAWsV,IAEZra,GACFuO,YAAW,KACTglB,GAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,GAAa,CAAEvuB,SAAQ8M,WAAUwI,gBAChC2P,IAEHsJ,GAAa,CAAEvuB,SAAQ8M,WAAUwI,mBAI/BpD,IAAuB3S,EAAAA,EAAAA,IAAiB23B,IACvCnU,GAAqB/iB,IAE1B6xB,GAAe,CAAEsF,QAASD,EAAa1c,cAAc,EAAM4c,SAAUrU,EAAiBqU,WACtFtF,GAAQ,CAAEzd,IAAK0O,EAAiB1O,MAChCia,SAGI+I,IAAgB93B,EAAAA,EAAAA,IAAgB,KACpCmyB,GAAgB,CACd4F,WAAYt3B,EACZiQ,WAAY,CAACqF,SAIjB/e,EAAAA,EAAAA,KAAU,IAAO6F,IAASm7B,EAAAA,EAAAA,IAAsB,KAC9CR,aACGpgC,GAAY,CAACogC,GAAa36B,MAE/B7F,EAAAA,EAAAA,KAAU,KACJ6P,KAAYvE,KACd21B,EAAAA,EAAAA,QAED,CAAC31B,GAAOuE,KAEX,MAAMmf,IAAwBhmB,EAAAA,EAAAA,IAAiB4M,IAC7C,GAAKA,IAAQkZ,EAAb,CAEA,GAAkB,WAAdlZ,EAAK3S,KAAmB,CAE1B,KADkB2S,EAAK5L,YAAc4L,EAAKzL,cAAcC,OAAO9I,OAzMzC,GA0MN,OAChB+5B,GAAsB,CAAEpyB,OAAQ2M,EAAKK,YAAY/Q,IACnD,CAEkB,YAAd0Q,EAAK3S,MAAsBs2B,GAC7B6B,GAAwB,CAAE3xB,SAAQ8M,WAAU2qB,sBAAuBtrB,EAAKhL,QAAQ1F,IAT3C,KAanC+pB,IAAcjmB,EAAAA,EAAAA,IAAgB,CAAClG,EAAuBsvB,KAC1D,GAAkB,IAAdA,GAAmBnoB,GAAU,OAEjC,GAAkB,eAAdnH,EAAKG,KAAuB,CAC9B,MAAQ8G,MAAOo3B,EAAWn3B,WAAYo3B,GAAmBt+B,EACnDu+B,EAAYD,EAAiBhP,EACnC,OAAIiP,GAAa,GAAKA,EAAYF,EAAU7/B,OACnC,CAAE2B,KAAM,aAAc8G,MAAOo3B,EAAWn3B,WAAYq3B,QAG7D,CACF,CAEA,GAAkB,WAAdv+B,EAAKG,KAAmB,CAC1B,MAAQgT,YAAaqrB,EAAiBn3B,cAAeo3B,EAAmBv3B,WAAYo3B,GAAmBt+B,EACjGu+B,EAAYD,EAAiBhP,EACnC,OAAIiP,GAAa,GAAKE,GAAqBF,EAAYE,EAAkBn3B,OAAO9I,OACvE,CACL2B,KAAM,SACNgT,YAAaqrB,EACbn3B,cAAeo3B,EACfv3B,WAAYq3B,QAIhB,CACF,CAEA,GAAkB,qBAAdv+B,EAAKG,KAA6B,CACpC,MAAQ2H,QAAS42B,EAAsBx3B,WAAYy3B,GAA8B3+B,EAC3Eu+B,EAAYI,EAA6BrP,EAC/C,OAAIiP,GAAa,GAAKG,EACb,CAAEv+B,KAAM,mBAAoB2H,QAAS42B,EAAsBx3B,WAAYq3B,QAGhF,CACF,CAEA,MAAQz2B,QAAS82B,EAAa13B,WAAYo3B,GAAmBt+B,EAEvD4H,GAAYi3B,EAAAA,EAAAA,IAAoBD,GACtC,GAAIh3B,EAAW,CACb,MAAM22B,EAAYD,EAAkBhP,EAEpC,GAAIiP,GAAa,GAAKA,EAAY32B,EAAUS,cAAc7J,OACxD,MAAO,CAAE2B,KAAM,UAAW2H,QAAS82B,EAAa13B,WAAYq3B,EAEhE,CAEA,MAAMtgC,EAAQq7B,IAAiBwF,QAAQF,EAAYx8B,IACnD,QAAc9E,IAAVW,EAAqB,OACzB,MACM8gC,EAAgBzF,GADJr7B,EAAQqxB,GAEpB0P,EAAc7H,IAAe4H,GACnC,OAAIC,EACK,CAAE7+B,KAAM,UAAW2H,QAASk3B,QADrC,KAOIC,IAAsB/4B,EAAAA,EAAAA,IAAiB4M,IAC3C,IAAKA,EAEH,YADA4qB,KAIF,MAAMwB,EAA2B,WAAdpsB,EAAK3S,KACpB2S,EAAKK,YAAY/Q,GAAmB,YAAd0Q,EAAK3S,KACzB2S,EAAKhL,QAAQnB,YAASrJ,EACtB6hC,EAA8B,YAAdrsB,EAAK3S,KAAqB2S,EAAKhL,QAAQ1F,QAAK9E,EAC5D8hC,EAAoC,eAAdtsB,EAAK3S,KAAwB2S,EAAK7L,WAAQ3J,EAEtEgY,GAAgB,CACd3M,OAAQA,EACRhC,OAAQu4B,EACRjjB,UAAWkjB,EACXzI,gBAAiB0I,EACjBl4B,WAAY4L,EAAK5L,WACjBkP,aAA4B,WAAdtD,EAAK3S,KACnBs2B,sBACC,CACDpgB,uBAAuB,OAIrBgpB,IAAqBn5B,EAAAA,EAAAA,IAAgB,KAGzC,IAFmBmB,GAAeC,OAAO9I,QACpCk4B,GAAiBl4B,QAAU86B,IAAiB96B,QAAU,IACzC,IAAM26B,GAEtB,YADAuE,KAIF,MAAM4B,EAAYnT,GAAYgN,IAAc,GACxCmG,EACFL,GAAoBK,GAII,WAArBnG,GAAYh5B,OAAqBwS,EAAAA,EAAAA,IAASwmB,GAAYhmB,YAAY/Q,KAA6B,eAArB+2B,GAAYh5B,MAK3Fu9B,QAGI9gC,IAAOD,EAAAA,EAAAA,KAEb,OACE8B,EAAAA,GAAAA,IAACiiB,GAAAA,EAAc,CACbte,GAAG,cACHW,OAAQA,GACRmW,SAAUA,EACVqmB,0BAAwB,EACxBC,kBAAmBhJ,EAA4B53B,SAAA,EAE/CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAoByD,IAAKjD,GAAKkD,MAAQ,WAAQxC,EAAWwa,IAAKgiB,GAAUl7B,SAAA,CACpFgD,KACCjC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,qBACVoa,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,GAAK,SAChBH,QAASihC,GAAY9+B,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CAACC,UAAWhH,GAAa3pB,QAAU9N,KAAM63B,GAAgBl6B,UAClEe,EAAAA,GAAAA,GAACq1B,GAAU,CAETliB,KAAMqmB,IADDlyB,IAAO7E,OAIhBzC,EAAAA,GAAAA,GAAC6U,GAAkB,CACjBvG,UAAWsC,GACXxD,QAASA,GACT+F,KAAMqmB,GACNpmB,eAAgBA,EAChB0B,gBAAiBA,GACjBI,eAAgBwqB,GAChB3qB,eAAgBukB,GAChBrkB,mBAAoB8oB,GACpB5oB,UAAWkpB,MAEbr+B,EAAAA,GAAAA,GAACoR,GAAiB,CAChBhO,OAAQi2B,GACRz1B,QAAS21B,GACTzxB,MAAOL,EACPjB,OAAQgN,GAAa/Q,SAGzBzC,EAAAA,GAAAA,GAACosB,GAAiB,CAChBjZ,KAAMqmB,GACNjN,sBAAuBA,GACvBF,mBAAoBA,EACpBC,SAAUA,GACVE,YAAaA,GACbxlB,OAAQA,EACRwG,QAASA,GACT3E,MAAOA,GACPiL,SAAUA,EACVksB,cAAexsB,GAAa/Q,GAC5BuG,OAAQA,EACR5F,OAAQA,GACRmoB,UAAWA,GACXne,QAASA,GACTgd,cAAeA,EACfxmB,QAASm6B,GACTtR,WAAY6S,GACZ/lB,SAAUA,EACV+Q,cAAe0T,GACf9kB,qBAAsBA,Y,eC9d9B,SAA6C,WAA7C,GAA4K,WAA5K,GAAwM,WAAxM,GAA4O,WAA5O,GAAiQ,WAAjQ,GAAuS,WAAvS,GAA2Z,WAA3Z,GAA+c,WAA/c,GAAie,WAAje,GAAof,WAApf,GAA6gB,WAA7gB,GAAgkB,WAAhkB,GAAwlB,WAAxlB,GAAm1B,WAAn1B,GAAy+B,WAAz+B,GAAopC,WAAppC,GAAiuC,WAAjuC,GAA+yC,WAA/yC,GAAy7C,WCgBn7C+mB,GAAgB,IAAMpmB,EAAAA,EACtBqmB,GAAgB,GAAMrmB,EAAAA,EAsJ5B,SAAS/Q,GAAYC,EAAgBo3B,GAAU,EAAOC,GAAW,GAC/D,MAAMn3B,EAAQpB,SAASqB,cAAc,OACrCD,EAAME,UAAUC,IAAKg3B,EDzK+zC,WAApB,YC2Kh0C,MAAM/2B,EAAM,IAAIC,MAKhB,GAJAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EACpBJ,EAAIF,UAAUC,ID9K81C,YCgLx2C+2B,EAAS,CACX,MAAM7wB,EAASzH,SAASqB,cAAc,UACtCoG,EAAOnG,UAAUC,IAAIpK,IACrBqK,EAAI8G,OAAS,KACX,MAAMkwB,EAAM/wB,EAAOG,WAAW,KAAM,CAAE6wB,OAAO,KACvC,MACJjxB,EAAK,OACLK,GACErG,GAEJ4S,EAAAA,EAAAA,KAAgB,KACd3M,EAAOD,MAAQA,EACfC,EAAOI,OAASA,EAEZ6wB,EAAAA,KACFF,EAAIG,OAAS,aAGfH,EAAInkB,UAAU7S,GAAK,GAAa,EAAagG,EAAQoxB,EAAY/wB,EAAS+wB,GAErEF,EAAAA,KACH/wB,EAAAA,EAAAA,GAAS6wB,EAAK,EAAG,EAAGhxB,EAAOK,EAjCtB,EACI,OAoCfrG,EAAIK,IAAMX,EACVE,EAAMY,YAAYyF,EACpB,MACEjG,EAAIK,IAAMX,EACVE,EAAMY,YAAYR,GAGpB,OAAOJ,CACT,CAEA,SAASmB,GAASpB,EAA2B03B,GAC3C,IAAIr2B,EACJ,MAAMC,EAAgB,KAAIq2B,EAAAA,EAAAA,IAAmBD,KAE7C,OAAQ13B,GACN,KAAK43B,EAAAA,GAAkBC,YACrBx2B,EAAoB,gBAAgBy2B,GAAAA,EAAkBC,OACtD,MACF,KAAKH,EAAAA,GAAkB/1B,mBACrBR,EAAoB,mDACpB,MACF,KAAKu2B,EAAAA,GAAkBI,SACrB32B,EAAoB,yBACpB,MACF,KAAKu2B,EAAAA,GAAkBh2B,aACrBP,EAAoB,qCAIxB,MAAMgB,EAAYxD,SAASqC,cAA2BG,GAChDiB,EAAWD,GAAaA,EAAUE,iBAAmC,GAAGjB,SAE9E,MAAO,CACLe,YACAG,QAASF,IAAW,GAExB,CCrMO,SAAS21B,IAAiB,MAC/BlU,EAAK,YACLmU,EAAW,kBACXC,EAAiB,yBACjBC,EAAwB,WACxBC,IAQA,MAAMC,EA1Ce,IA0CgBH,EA9CP,IAEP,KA6CjBI,GAAoB7iC,KAAKoyB,IAAIoQ,GAAe,IA3C7B,IA4CfE,EAhDwB,IAEP,MA+CjBI,GAAcC,EAAAA,GAAAA,KAAoBH,EAAaC,GAAoBxU,GAEzE,OAAOsU,GAAcG,EAAcA,CACrC,CCtDe,SAASE,KACtB,MAAQryB,MAAO2e,EAAate,OAAQqe,IAAiBG,EAAAA,GAAAA,KACrD,OAAOxwB,EAAAA,EAAAA,KAAQ,IDMV,SAA6BswB,EAAqBD,GAOvD,MAAMhB,EAyCR,SAAwB4U,EAAmBC,EAAoBC,EAAkBC,GAC/E,MAAMC,EAAaF,EAzDK,KA0DlBG,EAAcF,EAzDK,IA2DzB,OAAOpjC,KAAKC,IAAIojC,EAAYC,EAC9B,CA9CgBC,CAfU,EACC,EAc2CjU,EAAaD,GAE3EmU,GAAmBT,EAAAA,GAAAA,IAfK,IAewC1U,GAChEoV,GAAaV,EAAAA,GAAAA,IAdI,IAckC1U,GAEzD,MAAO,CACLqV,YAAa,CACX/yB,MAAO6yB,EACPxyB,QAAQ+xB,EAAAA,GAAAA,IApBmB,IAoB2B1U,IAExDsV,MAAO,CACLhzB,MAAO8yB,EACPzyB,QAAQ+xB,EAAAA,GAAAA,IAtBY,IAsB2B1U,IAEjDA,QACAuV,cAAeJ,EAAmBC,EAClCI,gBAAiBJ,EAAaD,EAElC,CC/BuBM,CAAoBxU,EAAaD,IAAe,CAACC,EAAaD,GACrF,CCFe,SAAS0U,GACtBC,EAAsBC,GAAuB,EAAOC,GAAqB,GAEzE,MAAMC,EAAgBH,GAAS,YAAaA,EACtCI,EAAiBJ,GAAS,cAAeA,EACzCK,IAAUF,IAAgBG,EAAAA,EAAAA,IAAeN,GACzCO,EAAiBJ,GAAiB/hC,QAAQ4hC,EAAMQ,aAEtD,IAAIC,EACAN,IACEH,EAAMrrB,QAAQvP,OAAOq7B,YACvBA,EAAYT,EAAMrrB,QAAQvP,MAAMq7B,UAAUp0B,SAExC2zB,EAAMrrB,QAAQtP,OAAOo7B,WAAWp0B,UAClCo0B,EAAYT,EAAMrrB,QAAQtP,MAAMo7B,UAAUp0B,UAI9C,MAAMq0B,EAAcP,GAAgBQ,EAAAA,EAAAA,IAAkBX,QAAS/kC,EACzD0Q,GAAiBJ,EAAAA,EAAAA,GAASm1B,GAC1Bh2B,EAAUtM,QAAQ+hC,GAAiBH,EAAMrrB,QAAQtP,OACjDu7B,EAAUT,GAAiBH,EAAMrrB,QAAQtP,OAAOu7B,QAChDC,EAAgBV,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,aAAU/kC,EACnE6lC,GAAgBv1B,EAAAA,EAAAA,GAASs1B,GAAgBb,EAAOt1B,EAAUc,EAAAA,GAAewO,YAAcxO,EAAAA,GAAeC,SACtGs1B,EAAer2B,GAAWy1B,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,QAAQ,QAAQ/kC,EACnF+lC,GAAez1B,EAAAA,EAAAA,GAASw1B,GAAef,EAAOx0B,EAAAA,GAAewO,aAE7DinB,EAAc7iC,QAAQ0iC,GAAiBE,GACvC70B,EAAgBzB,EAAUiB,EAAiBm1B,GAAiBn1B,EAC5Du1B,GAAYv1B,IAAmBs1B,EAE/BE,EAAclB,GAAwBE,IAAkBH,EAAMoB,WAC9DC,EAAelB,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,iBAAc/kC,EAG5E,MAAO,CACLklC,gBACAC,iBACAC,UACAE,iBACAE,YACAC,cACA/0B,iBACAjB,UACAk2B,UACAC,gBACAC,gBACAC,eACAC,eACAC,cACA90B,gBACA+0B,WACAC,cACAG,mBApBwB/1B,EAAAA,EAAAA,GAAS81B,GAAeF,IAAgBjB,GAsBpE,C,wCC7DA,SAA2I,WAA3I,GAA6J,WAA7J,GAAuM,WC8HvM,IAAetmC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAYC,IAC9B,MAAMG,GAAWC,EAAAA,EAAAA,KAAeJ,GAEhC,MAAO,CACL9P,OAAQiQ,EAAS4wB,aAAaC,mBAC9BC,YAAajxB,EAAOkxB,QAAQD,YAC5BxB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MANjCD,EArGKqxB,EAAGlhC,SAAQ+gC,cAAaxB,2BAC/C,MAAM,mBACJ4B,EAAkB,oBAClBC,EAAmB,iBACnBC,EAAgB,iBAChBC,IACEr+B,EAAAA,EAAAA,OACGs+B,EAAcC,IAAmBnzB,EAAAA,EAAAA,KAAS,IAEjDlU,EAAAA,EAAAA,KAAU,KACR,IAAK4mC,EAAa,OAClB,MAAMU,GAAaC,EAAAA,GAAAA,MACfX,EAAYY,eAAiBZ,EAAYY,cAAgBF,GAC3DD,GAAgB,KAEjB,CAACT,EAAa/gC,IAEjB,MAAMnG,GAAOD,EAAAA,EAAAA,KAEPgoC,GAAkBz+B,EAAAA,EAAAA,IAAgB,KACtCq+B,GAAgB,MAGZ7G,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCg+B,EAAmB,CAAEnhC,QAAQ,OAGzB6hC,GAAiB1+B,EAAAA,EAAAA,IAAgB,KAChCo8B,GAKL6B,IACAC,EAAiB,CACftgC,MAAOlH,EAAK,iBACZkL,QAASlL,EAAK,uBAEhBsnC,EAAmB,CAAEnhC,QAAQ,KAT3BshC,EAAiB,CAAEQ,eAAgB,eAYvC,OACEpmC,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAU,uBACVqH,iBDrEiB,WCsEjBV,OAAQA,EACRsC,QAAM,EACN9B,QAASm6B,EAAY9+B,SAAA,EAErBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLhE,UD9EwC,WC+ExCqa,UAAW7Z,EAAK,SAChBH,QAASihC,EAAY9+B,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UDpF8D,WCoFhCwC,UACjCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,2BAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UDvFiF,WCuFzDwC,SAAEhC,EAAK,kBACpC+C,EAAAA,GAAAA,GAAA,OAAKvD,UDxF0G,WCwF5EwC,SAChChC,EAAK0lC,EAAuB,kBAAoB,6BAEnD7jC,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,WAAWsC,EAAAA,GAAAA,GAAeC,GAAiB,gBAC3CuF,WAAS,EACT4gC,UAAQ,EACRC,aAAaplC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAAe7E,UAAWuC,KAAgBC,SAAA,EAElEe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,sBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYC,IAAiBC,SAAEhC,EAAK,oCAEtE6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,WAAWsC,EAAAA,GAAAA,GAAeC,GAAiB,gBAC3CuF,WAAS,EACT4gC,UAAQ,EACRC,aAAaplC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAAiB7E,UAAWuC,GAAa,mBAAeC,SAAA,EAEhFe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,oBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYC,IAAiBC,SAAEhC,EAAK,kCAEtE+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UD9GyK,WC+GzKgE,KAAK,UACLoF,SAAU8+B,EACVU,SAAU1C,EACVp9B,qBAAsBo9B,EACtB7lC,QAASmoC,EAAehmC,SAEtB0jC,EACEgC,GACG3kC,EAAAA,GAAAA,GAACslC,GAAAA,EAAS,CAACC,QAAQ,cAAcC,OAAQrB,EAAaY,cAAgBU,MAAOT,IAC9E/nC,EAAK,qBAHcA,EAAK,8B,gBCxEtC,UAAeX,EAAAA,EAAAA,KA/Bf,UAAiC,OAC/B8G,EAAM,MAAEs/B,EAAK,QAAE9+B,IAEf,MAAM,YAAE8hC,EAAW,cAAEC,IAAkBt/B,EAAAA,EAAAA,MAEjCpJ,GAAOD,EAAAA,EAAAA,KAEP4oC,GAAyBpjC,EAAAA,EAAAA,KAAY,KACpCkgC,IAILiD,IACAD,EAAY,CAAEl/B,OAAQk8B,EAAMl8B,OAAQq/B,QAASnD,EAAMjgC,KACnDmB,OACC,CAACA,EAAS8+B,IAEb,OACE1iC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQA,EACRQ,QAASA,EACTO,MAAOlH,EAAK,oBACZ+b,KAAM/b,EAAK,uBACX8oC,aAAc9oC,EAAK,UACnB+oC,eAAgBJ,EAChBK,sBAAoB,EACpBxpC,UAAU,wBAGhB,I,gECYA,UAAeH,EAAAA,EAAAA,KArCf,UAAuB,GACrBmG,EAAE,eACFyjC,EAAc,cACdjP,EAAa,YACbkP,EAAW,UACXC,EAAS,SACTC,IAEA,MAAMppC,GAAOD,EAAAA,EAAAA,MAENspC,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,IACjD+0B,GAAe9oC,EAAAA,EAAAA,KAAQ,KAC3B,MAAM+oC,GAAcP,GAAkB,IAAI1F,QAAQE,GAAWA,IAAWzJ,IACxE,OAAOyP,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIT,GAAe,MAAOM,GAAaI,MAAOP,EAAa9lC,KAAM,YACxG,CAAC0lC,EAAgBjP,EAAeqP,EAAaH,IAEhD,OACEnmC,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CAETC,QAASP,EACTL,YAAaA,GAAea,GAAAA,EAC5BC,kBAAmBb,EACnBc,YAAaZ,EACba,kBAAmBlqC,EAAK,UACxBmqC,cAAe,GAAG3kC,kBAClB4kC,cAAY,EACZC,oBAAkB,EAClBrgC,eAAa,EACbsgC,oBAAqBlB,EACrBmB,eAAgBjB,EAChBkB,eAAa,EACbC,YAAU,EACVC,cAAc,YAdTllC,EAiBX,I,4BCrDA,MC8FA,IAAenG,EAAAA,EAAAA,KAlEf,UAAsB,SACpBE,EAAQ,eAAE0pC,EAAc,UAAE0B,EAAS,cAAE3Q,EAAa,QAAErzB,IAEpD,MAAM,iBAAEikC,IAAqBxhC,EAAAA,EAAAA,MAEvBpJ,GAAOD,EAAAA,EAAAA,MACNspC,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,KAChDq2B,EAAeC,IAAoBt2B,EAAAA,EAAAA,KAAkB,IACrDu2B,EAAuBC,IAA4Bx2B,EAAAA,EAAAA,IAAmB,IAEvEy2B,GAAiBxqC,EAAAA,EAAAA,KAAQ,KACrBwoC,GAAkB,IAAI1F,QAAQE,GAAWkH,EAAUlH,IAASyH,iBACnE,CAACjC,EAAgB0B,IAEdpB,GAAe9oC,EAAAA,EAAAA,KAAQ,KAC3B,MAAM+oC,GAAcP,GAAkB,IAAI1F,QAAQ/9B,GAAOA,IAAOw0B,IAChE,OAAOyP,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIsB,KAAmBzB,GAAaI,MAAOP,EAAa9lC,KAAM,YACrG,CAAC0nC,EAAgBhC,EAAgBjP,EAAeqP,KAEnD8B,EAAAA,GAAAA,IAAsB,EAAEC,OACjBA,GAAgB7rC,IACnBurC,GAAiB,GACjBE,EAAyBC,MAE1B,CAAC1rC,EAAU0rC,IAEd,MAAMI,GAAiC9lC,EAAAA,EAAAA,KAAaqE,IAClDohC,EAAyBphC,GACzBkhC,GAAiB,KAChB,IAEGQ,GAAehiC,EAAAA,EAAAA,IAAgB,KACnCshC,EAAiB,CAAEW,QAASR,IAC5BpkC,OAGF,OACE9E,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASP,GAAgB,GACzBL,YAAa6B,EACbd,YAAaZ,EACba,kBAAmBlqC,EAAK,UACxBmqC,cAAc,8BACdC,cAAY,EACZC,oBAAkB,EAClBC,oBAAqBe,EACrBd,eAAgBjB,EAChBkB,eAAa,EACbC,YAAU,EACVC,cAAc,cAGhB3nC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GDjFS,WCiF2B+oC,GDjFP,YCiFuC7oC,UAClFe,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASZ,EACThrC,QAASyrC,EACTzxB,UAAW7Z,EAAK,QAAQgC,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAKrB,IC5FA,IAAgB,MAAQ,WAAW,OAAS,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,cAAgB,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,YCuD9VqnC,GAA2B,CAAC,CAChCrnC,KAAM,6BACNuF,MAAO,YACPjB,MAAO,CAAC,UAAW,WACnB1B,KAAM,iBACN0kC,QAAS,gBACR,CACDtnC,KAAM,6BACNuF,MAAO,WACPjB,MAAO,CAAC,UAAW,WACnB1B,KAAM,cACN0kC,QAAS,uBACR,CACDtnC,KAAM,iCACNuF,MAAO,eACPjB,MAAO,CAAC,UAAW,WACnB1B,KAAM,kBACN0kC,QAAS,gBACR,CACDtnC,KAAM,qCACNuF,MAAO,SACPjB,MAAO,CAAC,UAAW,WACnB1B,KAAM,eACN0kC,QAAS,iBACR,IAEEC,GAAO,SAAPA,GAAO,OAAPA,EAAAA,EAAO,qBAAPA,EAAAA,EAAO,yBAAPA,EAAAA,EAAO,+BAAPA,EAAAA,EAAO,uBAAPA,CAAO,EAAPA,IAAO,IAgUZ,UAAevsC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MACE+wB,aAAa,QACX4B,EAAO,OAAEr/B,KAET8M,EAAAA,EAAAA,KAAeJ,GACbwvB,EAASl8B,GAAUq/B,GACrBiD,EAAAA,EAAAA,KAAgB51B,EAAQ1M,EAAQq/B,QAChCloC,EAEJ,MAAO,CACL+kC,MAAOA,GAAS,YAAaA,EAAQA,OAAQ/kC,EAC7CorC,WAAYrG,GAAS,eAAgBA,EAAQA,EAAMqG,gBAAaprC,EAChEuoC,eAAgBhzB,EAAO81B,aAAaR,QACpCZ,UAAW10B,EAAOxT,MAAMupC,KACxBhS,cAAe/jB,EAAO+jB,iBAfNhkB,EAzTpB,UAAuB,OACrB7P,EAAM,MACNs/B,EAAK,WACLqG,EAAU,eACV7C,EAAc,UACd0B,EAAS,cACT3Q,EAAa,QACbrzB,IAEA,MAAM,iBAAEslC,EAAgB,qBAAEC,IAAyB9iC,EAAAA,EAAAA,MAE7CpJ,GAAOD,EAAAA,EAAAA,MACNosC,EAAaC,EAAWC,IAAchsC,EAAAA,EAAAA,IAAQ,IAC9CisC,EAASC,IAAc/3B,EAAAA,EAAAA,IAAyCs3B,IAChEU,EAAUC,IAAej4B,EAAAA,EAAAA,IAASixB,GAAOiH,cACzC5J,EAAW6J,IAAgBn4B,EAAAA,EAAAA,IAAkBo3B,GAAQU,UACrDM,EAAyBC,IAA8Br4B,EAAAA,EAAAA,IAA4B,aACpFs4B,EAAehK,IAAc8I,GAAQU,QAErCrB,GAAiBxqC,EAAAA,EAAAA,KAAQ,KACrBwoC,GAAkB,IAAI1F,QAAQE,GAAWkH,EAAUlH,IAASyH,iBACnE,CAACjC,EAAgB0B,IAEdxB,GAAY1oC,EAAAA,EAAAA,KAAQ,KACxB,GAAIqiC,IAAc8I,GAAQmB,aACnBT,GAASU,cAAcprC,QAAU0qC,EAAQU,aAAa,KAAOhT,GAElE,MAAO,CAACA,KAIT,CAAC8I,EAAW9I,EAAesS,GAASU,eAEjCC,GAAqBxsC,EAAAA,EAAAA,KAAQ,IAC7BmsC,IAA4BN,GAASR,WAAmB,GACrDQ,GAASY,cAAgB,IAC/B,CAACN,EAAyBN,GAASY,aAAcZ,GAASR,aAEvDqB,GAA2B7jC,EAAAA,EAAAA,IAAiB8jC,IAChDb,EAAW,IACND,EACHU,aAAcI,GAAQxrC,OAASwrC,GAAQ7J,QAAQ/9B,GAAOA,IAAOw0B,IAAiB,CAACA,QAI7EqT,GAA0B/jC,EAAAA,EAAAA,IAAiB8jC,IAC/Cb,EAAW,IACND,EACHY,aAAcE,EACdtB,WAAYc,QAIhBtsC,EAAAA,EAAAA,KAAU,KACJ6F,IACFwmC,EAAaf,GAAQU,SACrBF,OAED,CAACjmC,KAEJ7F,EAAAA,EAAAA,KAAU,KACRisC,EAAWT,KACV,CAACA,IAEJ,MAAMwB,GAAyBhkC,EAAAA,EAAAA,IAAgB,KACzCw5B,IAAc8I,GAAQU,QAK1BK,EAAaf,GAAQU,SAJnBD,OAmCEkB,GAAuBjkC,EAAAA,EAAAA,IAAgB,KAC3CmjC,GAAaD,MAKTlB,GAAehiC,EAAAA,EAAAA,IAAgB,KACnC2iC,EAAiB,CACf1iC,OAAQk8B,EAAOl8B,OACfq/B,QAASnD,EAAOjgC,GAChB8mC,QAASA,IAEP7G,EAAOiH,cAAgBF,GACzBN,EAAqB,CAAE3iC,OAAQk8B,EAAOl8B,OAAQq/B,QAASnD,EAAOjgC,GAAIknC,YAAaF,IAEjFH,OAkKF,OACExqC,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQgmC,EACR3sC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOyrC,MAAO,wBACxC7mC,QAAS0lC,EACToB,YAAU,EACVr5B,oBAAqBzN,EAAQ3E,SAAA,EAE7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOuE,OAAOtE,SAAA,EAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO2rC,YAAa,gBAC9C9zB,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACL3D,QAASytC,EACTzzB,UAA0B7Z,EAAf8sC,EAAoB,cAAsB,gBAAgB9qC,UAErEe,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,sBAAuBgrC,GAAgB,mBAExE/pC,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CAACx+B,KAAK,YAAYy+B,UAAWA,EAAU9gC,SA7IxD,WACE,OAAQ8gC,GACN,KAAK8I,GAAQU,QACX,OAAOvpC,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAO4rC,YAAY3rC,SAAEhC,EAAK,gCAClD,KAAK4rC,GAAQmB,UACX,OAAOhqC,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAO4rC,YAAY3rC,SAAEhC,EAAK,0CAClD,KAAK4rC,GAAQgC,aACX,OAAO7qC,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAO4rC,YAAY3rC,SAAEhC,EAAK,kBAClD,KAAK4rC,GAAQiC,SACX,OAAO9qC,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAO4rC,YAAY3rC,SAAEhC,EAAK,4CAEtD,CAmIS8tC,SAGL/qC,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTC,UAAWA,EACXz+B,KAAK,YACL0pC,eAAe,yBACfvuC,UAAWuC,GAAOqY,QAAQpY,SAxIhC,SAAuBzC,GACrB,OAAQujC,GACN,KAAK8I,GAAQU,QACX,OAsCN,WACE,MAAM0B,EAAgBvI,GAAQwI,EAAAA,GAAAA,IAASxI,EAAMyI,WAAazI,EAAM1M,MAAQ,EAExE,OACEl3B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOosC,QAAQnsC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAOmF,MAAMlF,SAAEhC,EAAK,uCACnC+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOqsC,KAAKpsC,SACzB0pC,GAAQzpC,KAAKnB,IACZe,SAAAA,GAAAA,IAAA,SAEErC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOjB,OAAQA,EAAO8I,QAAU0iC,GAASR,YAAc/pC,GAAOssC,SAASrsC,SAAA,EAEjGe,EAAAA,GAAAA,GAAA,SACEQ,KAAK,QACLc,KAAK,gBACL7E,UAAWuC,GAAOusC,MAClB1kC,MAAO9I,EAAO8I,MACdykC,QAASvtC,EAAO8I,QAAU0iC,GAASR,WACnC32B,SAAUA,KAAMo5B,OA5JAC,EA4JuB1tC,EAAO8I,WA3J5D2iC,EAAW,IACND,EACHR,WAAY0C,IAHhB,IAAgCA,GA6JhBC,2BAAyB,KAE3B1rC,EAAAA,GAAAA,GAAA,QACEvD,UAAWuC,GAAOkF,KAClByH,MAAO,iBAAiB5N,EAAO6H,MAAM,mBAAmB7H,EAAO6H,MAAM,KAAK3G,UAE1Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMvD,EAAOmG,UAErBpF,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO2sC,cAAc1sC,SAAA,EACnCe,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO4sC,aAAa3sC,SAAEhC,EAAKc,EAAOuD,QACjEvD,EAAO6qC,UACN9pC,EAAAA,GAAAA,IAAA,OACE+sC,SAAU,EACVC,KAAK,SACLrvC,UAAWuC,GAAO4I,OAClB,aAAY3K,EAAK,QACjBH,QAAU6H,KAtK9B,SAA2BA,EAAqCiD,GAG9D,QAFA6B,EAAAA,EAAAA,GAAU9E,GAEFiD,GACN,IAAK,eACHgiC,EAAaf,GAAQgC,cACrB,MACF,IAAK,eACHjB,EAAaf,GAAQmB,WACrB,MACF,IAAK,eACHJ,EAAaf,GAAQiC,UACrBhB,EAA2B,aAC3B,MACF,IAAK,sBACHF,EAAaf,GAAQiC,UACrBhB,EAA2B,YAGjC,CAmJsCiC,CAAkBpnC,EAAG5G,EAAO6qC,UAAa3pC,SAAA,EAE3De,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAOgtC,YAAY/sC,UAjI9B2I,EAiIiD7J,EAAO6qC,QAhIjE,iBAAXhhC,EAC4B,IAA1BsgC,EAAerpC,OACV5B,EAAK,wCAGgB,IAA1BirC,EAAerpC,QACV+3B,EAAAA,GAAAA,IAAa35B,EAAM2qC,EAAUM,EAAe,KAG9CjrC,EAAK,2BAA4BirC,EAAerpC,OAAQ,KAGjD,iBAAX+I,GAAqD,cAAxB2hC,GAASR,YAC1B,wBAAXnhC,GAA4D,aAAxB2hC,GAASR,WAC5CQ,GAASY,cAActrC,OAIQ,IAAhC0qC,EAAQY,aAAatrC,OAChB5B,EAAK,mCAAmCgvC,EAAAA,EAAAA,IAAgBrE,EAAU2B,EAAQY,aAAa,MAGzFltC,EAAK,kCAAmCssC,EAAQY,aAAatrC,OAAQ,KAPnE5B,EAAK,oCAUXssC,GAASU,cAAgD,IAAhCV,EAAQU,aAAaprC,OAIf,IAAhC0qC,EAAQU,aAAaprC,QAChBotC,EAAAA,EAAAA,IAAgBrE,EAAU2B,EAAQU,aAAa,KAGjDhtC,EAAK,2BAA4BssC,EAAQU,aAAaprC,OAAQ,KAP5D5B,EAAK,gDAuGI+C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBA7BZvD,EAAO8I,OArG1B,IAA0Be,WA0IpB5H,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOosC,QAAQnsC,UAC7BH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAAC6e,QAAM,EAACpmB,QAAS0tC,EAAqBvrC,SAAA,EAC7Ce,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,gBACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,sBACHmE,MAAO3J,EAAK,aACZquC,QAAS7B,EACTtE,UAAQ,UAIdrmC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOwE,OAAOvE,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO06B,KAAKz6B,SAAEhC,EAAK,gBAAiBguC,MACpDjrC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOmtC,OAAOltC,UAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAASyrC,EAAatpC,SAAEhC,EAAK,mCAK/C,CAxGamvC,GACT,KAAKvD,GAAQgC,aACX,OACE7qC,EAAAA,GAAAA,GAACqsC,GAAY,CAEX7vC,SAAUA,EACV0pC,eAAgBA,EAChBjP,cAAeA,EACf2Q,UAAWA,EACXhkC,QAAS2mC,GALL,iBAQV,KAAK1B,GAAQiC,SACX,OACE9qC,EAAAA,GAAAA,GAACssC,GAAa,CAEZ7pC,GAAG,YACHyjC,eAAgBA,EAChBjP,cAAeA,EACfkP,YAAa+D,EACb7D,SAAUiE,GALN,aAQV,KAAKzB,GAAQmB,UACX,OACEhqC,EAAAA,GAAAA,GAACssC,GAAa,CAEZ7pC,GAAG,aACHyjC,eAAgBA,EAChBE,UAAWA,EACXnP,cAAeA,EACfkP,YAAaoD,GAASU,aACtB5D,SAAU+D,GANN,cAUd,MAuGF,K,qUCzWA,MAgGA,IAAe9tC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUgwB,kBAIF,CACLqJ,OAJarJ,EAAYsJ,YAAapV,EAAAA,EAAAA,KAAWlkB,EAAQgwB,EAAYsJ,iBAAc7uC,EAKnF+kC,MAJYQ,EAAY2C,SAAW3C,EAAYsJ,YAC7C1D,EAAAA,EAAAA,KAAgB51B,EAAQgwB,EAAYsJ,WAAYtJ,EAAY2C,cAAWloC,KAJ3DsV,EAhGoCw5B,EACtDhwC,YACAymC,cACAqJ,SACA7J,YAEA,MAAM,gBAAEgK,EAAe,qBAAEC,EAAoB,SAAEvmC,IAAaC,EAAAA,EAAAA,MACtD8R,GAAMlJ,EAAAA,EAAAA,MAENhS,GAAOD,EAAAA,EAAAA,MAEbO,EAAAA,EAAAA,KAAU,MACHmlC,GAASQ,EAAYsJ,YAActJ,EAAY2C,SAClD8G,EAAqB,CACnBnmC,OAAQ08B,EAAYsJ,WACpBI,SAAU,CAAC1J,EAAY2C,aAG1B,CAAC3C,EAAaR,IAEjB,MAAM/L,EAAc4V,GAAS3V,EAAAA,GAAAA,IAAa35B,EAAMsvC,GAAUrJ,EAAY2J,SAEhEC,GAAoBvmC,EAAAA,EAAAA,IAAgB,KACxC,MAAM,WAAEimC,EAAU,QAAE3G,GAAY3C,EAC3BsJ,KAEgB9J,GAAW,cAAeA,GAASA,EAAMqK,UAS5D3mC,EAAS,CAAE3D,GAAI+pC,IANfE,EAAgB,CACdlmC,OAAQgmC,EACR3G,UACAmH,eAAe,SAOf,YAAEtlB,EAAW,gBAAEulB,IAAoBC,EAAAA,GAAAA,GAAaJ,GA6BtD,OACEhuC,EAAAA,GAAAA,IAACquC,GAAAA,EAAgB,CACfh1B,IAAKA,EACL1b,WAAWsC,EAAAA,GAAAA,GACT,kBACAtC,GACA2wC,EAAAA,GAAAA,GAAkBb,GAAQ,GAAM,IAElCrsC,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAC1Bb,QAAS4qB,EACT2lB,YAAaJ,EAAgBhuC,SAAA,CAE5BstC,GAAQ3mC,OAAO0nC,oBACdttC,EAAAA,GAAAA,GAACutC,GAAAA,EAAmB,CAClBC,gBAAiBjB,EAAO3mC,MAAM0nC,kBAC9B7wC,UAAU,uCAGdqC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAcwC,SAAA,CA7CjC,WACE,GAAIyjC,GAAS,YAAaA,GAASA,EAAMrrB,QAAQ2B,KAC/C,OACEhZ,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,wBAAuBwC,UACjCwuC,EAAAA,GAAAA,IAAuB/K,EAAMrrB,QAAQ2B,OAM9C,CAoCO00B,IACD1tC,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAewC,SAnCpC,WACE,IAAKstC,IAAW5V,EACd,OAGF,MAAMzyB,GAA8B8O,EAAAA,EAAAA,IAASu5B,EAAO9pC,IAAyB,cAAnB,iBAE1D,OACE3D,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGiF,IAAQlE,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM4C,EAAMzH,UAAU,uBACpCk6B,IAAe51B,EAAAA,GAAAA,GAAW41B,KAGjC,CAuBSgX,e,gBCmCX,UAAerxC,EAAAA,EAAAA,KAnIf,UAAsB,MACpBomC,EAAK,WAAEkL,EAAU,UAAEnxC,EAAS,SAAEoxC,EAAQ,OAAEC,IAExC,MAAM7wC,GAAOD,EAAAA,EAAAA,KACPmb,GAAMlJ,EAAAA,EAAAA,MACN8+B,GAAa9+B,EAAAA,EAAAA,MACb++B,GAAU/+B,EAAAA,EAAAA,MACVg/B,GAAoBh/B,EAAAA,EAAAA,MACpBi/B,GAAiBC,EAAAA,GAAAA,GAAiBzL,GAAO,GAEzC0L,EAAUF,GAAgB72B,QAAQ2B,MAEjCq1B,EAAaC,IAAkB78B,EAAAA,EAAAA,KAAS,GACzC88B,GAAiBC,EAAAA,GAAAA,GAAuBZ,QAAcjwC,EAhBzB,KAiB7B8wC,EAAoBb,GAAcW,GAExChxC,EAAAA,EAAAA,KAAU,MACR0e,EAAAA,EAAAA,KAAgB,KACT8xB,EAAW3+B,UAIZw+B,GACFc,EAAAA,GAAAA,IAAcX,EAAW3+B,QAASpQ,KAElC2vC,EAAAA,GAAAA,IAAiBZ,EAAW3+B,QAASpQ,UAGxC,CAAC4uC,IAEJ,MAAMgB,EAAYP,IAAgBI,GAC1BxnB,aAAc4nB,EAAoB,qBAAE1nB,IAAyBE,EAAAA,GAAAA,GACnEunB,OAAWjxC,GAAW,EAAM,QAAQ,IAItC4hB,EAAAA,EAAAA,KAAgB,MACduvB,EAAAA,EAAAA,KAAe,KACb,MAAMzjC,EAAY0iC,EAAW3+B,QACvB2/B,EAASd,EAAkB7+B,QACjC,IAAK/D,IAAc0jC,EACjB,OAGF,MAAM,YAAEC,GAAgBD,GAExB9yB,EAAAA,EAAAA,KAAgB,KACd5Q,EAAUM,MAAMsjC,YAAY,wBAAyB,GAAGD,eAG3D,CAACH,EAAsB5xC,KAE1BsiB,EAAAA,EAAAA,KAAgB,MACd2vB,EAAAA,EAAAA,KAAoB,KAClB,IAAKnB,EAAW3+B,UAAY4+B,EAAQ5+B,QAClC,OAGF,MAAM/D,EAAY0iC,EAAW3+B,QACvB+/B,EAAgBnB,EAAQ5+B,QAExBggC,EAAgBD,EAAcjf,WAC9B,WAAEmf,EAAU,WAAEC,IAAeC,EAAAA,GAAAA,GAA2BJ,GACxDK,EAAgBF,EAjEN,EAkEVG,EAAgBL,EAlEN,EAkEsBC,EAEtC,MAAO,KACDG,KACFd,EAAAA,GAAAA,IAAcrjC,EdnGilC,YcoG/lCijC,GAAe,IAGjBjjC,EAAUM,MAAMsjC,YAAY,oBAAqB,GAAGQ,aAGvD,CAACrB,KAEJ7wC,EAAAA,EAAAA,KAAU,KACHqwC,GACHz1B,EAAI/I,SAASsgC,SAAS,CAAElpB,IAAK,MAE9B,CAAConB,IAEJ,MAAM+B,GAAgB5wC,EAAAA,GAAAA,GdlH+hC,WcoHnjC0vC,GdpH2nC,WcqH3nCI,GdrH0qC,YcwH5qC,OACE/vC,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GdzHuV,WcyHxTtC,GAAWwC,SAAA,EACxDe,EAAAA,GAAAA,GAAA,OACEmY,IAAK41B,EACLtxC,UAAWkzC,EACX7D,KAAM8C,EAAY,cAAWjxC,EAC7Bb,QAAS8xC,EAAYf,EAAWC,EAAO7uC,UAEvCH,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EACL1b,WAAWsC,EAAAA,GAAAA,GdlIsgC,WckIl+B,kBAAmB,iBAAiBE,SAAA,CAElFivC,GAAgBhL,cACfljC,EAAAA,GAAAA,GAACysC,GAAoB,CACnBvJ,YAAagL,EAAehL,YAC5BzmC,UdvIo8C,ac0Iv8CyxC,IACCluC,EAAAA,GAAAA,GAAA,OAAKmY,IAAK61B,EAASvxC,Ud3IijC,Wc2InhCwC,UAC/Ce,EAAAA,GAAAA,GAAC4vC,GAAAA,EAAW,CACVC,eAAgB3B,EAChB4B,uBAAqB,EACrBzkB,eAAa,WAMtBwjB,IACC7uC,EAAAA,GAAAA,GAAA,OACEmY,IAAK81B,EACLxxC,WAAWsC,EAAAA,GAAAA,GdxJsrC,WcwJ/oCooB,GAClDrqB,QAAS+wC,EAAS5uC,SAEjBhC,EAAK,6BAKhB,I,4BChKA,SAAuB,WAAvB,GAAkM,WAAlM,GAAqN,WCmLrN,IAAeX,EAAAA,EAAAA,KAzJKyzC,EAClBrN,QACAjmC,gBAEA,MAAM,mBAAEuzC,EAAkB,gBAAEtX,EAAe,kBAAEuX,IAAsB5pC,EAAAA,EAAAA,MAC7DpJ,GAAOD,EAAAA,EAAAA,MAEP,MACJkzC,EAAK,MAAEC,EAAK,OAAE3pC,EAAQ/D,GAAIojC,EAAO,aAAEuK,GACjC1N,GACE,WAAE2N,EAAU,cAAEC,EAAa,eAAEC,GAAmBL,GAAS,CAAC,EAC1D3Z,IAAavjB,EAAAA,EAAAA,IAASxM,GAEtBgqC,EAA2BJ,IAAgBK,EAAAA,EAAAA,IAAeL,EAAcM,EAAAA,KAExEC,EAAa7vC,SAChBqvC,GAAS5Z,IACPmM,EAAMkO,WACLlO,EAAMoB,YAGN+M,GAAcC,EAAAA,EAAAA,IAAYtqC,EAAQq/B,GAElCkL,GAAgBrzC,EAAAA,EAAAA,KAAQ,KAC5B,MAAQgC,OAASupC,KAAMrB,KAAgBoJ,EAAAA,EAAAA,MAEjCC,EAAkBf,GAAS,oBAAqBA,EAAQA,EAAMe,qBAAkBtzC,EACtF,GAAKszC,EAEL,OAAOA,EAAgB/xC,KAAKuD,GAAOmlC,EAAUnlC,KAAK+9B,OAAO1/B,WACxD,CAACovC,IAEEgB,GAA2B3qC,EAAAA,EAAAA,IAAgB,KAC/CypC,EAAmB,CAAEnK,eAGjBsL,GAAqB5qC,EAAAA,EAAAA,IAAgB,KACzCmyB,EAAgB,CAAE4F,WAAY93B,EAAQq/B,eAGlCuL,GAAkB7qC,EAAAA,EAAAA,IAAgB,KACtC,MAAM8qC,EAAWjB,OAAezyC,EAAY+yC,EAAAA,IAC5CT,EAAkB,CAChBzpC,SACAq/B,UACAgL,cACAQ,gBAIJ,OAAKhB,GASHvxC,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACTC,GACAvC,GACAwC,SAAA,EAEFH,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GD5F0B,YC4FOw3B,GD5FkB,YC6F9Dz5B,QAAUy5B,OAAuC54B,EAA3BuzC,EAAqCjyC,SAAA,CAE1D6B,QAAQiwC,GAAelyC,UACtBmB,EAAAA,GAAAA,GAACsxC,GAAAA,EAAU,CACT7wC,KAAK,QACL8wC,MAAOR,EACPt0C,UDnG+E,aCuGlF85B,GACCz3B,EAAAA,GAAAA,IAAA,QAAMrC,UAAWuC,GAAaC,SAAA,EAC5Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAAe7E,UDzGqM,aC0G9N4zC,MAGHrwC,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAaC,SAAEhC,EAAK,QAASozC,EAAY,OAE3DvvC,QAAQyvC,KAAoBha,IAC3Bz3B,EAAAA,GAAAA,IAAA,QAAMrC,UDhH0H,WCgH1FwC,SAAA,EACpCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UDjH2I,aCkH7J8zC,SAIPvwC,EAAAA,GAAAA,GAAA,OAAKvD,UDtHoG,aCuHxGk0C,IACC3wC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNnF,KAAK,UACLoW,OAAK,EACL/Z,QAASq0C,EACTr6B,UAAW7Z,EAAK,WAChBR,UAAWuC,GAAkBC,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cAGdi1B,IACCz3B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACG6B,QAAQwvC,KACPxxC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAkBC,SAAA,EAChCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACL+wC,gBAAc,EACd16B,UAAW7Z,EAAK,gBAAgBgC,UAEhCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEbtB,EAAAA,GAAAA,GAAA,QAAAf,SAAOqxC,QAGXxxC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAkBC,SAAA,EAChCH,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACL6V,OAAK,EACLpa,UDtJyP,WCuJzPmJ,MAAM,cACNnF,KAAK,UACL3D,QAASs0C,EACTt6B,UAAW7Z,EAAK,gBAAgBgC,SAAA,CAE/BmxC,IACCpwC,EAAAA,GAAAA,GAACyxC,GAAAA,EAAqB,CAEpBZ,YAAaA,EACbQ,SAAUjB,EACVsB,eAAgBlB,IAHXmB,EAAAA,EAAAA,IAAevB,MAMrBA,GAAgBI,KACjBxwC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAMkvC,EAA2B,QAAU,gBAC3C/zC,WAAWsC,EAAAA,GAAAA,GAAeyxC,GDvKsP,iBC2KrR1vC,QAAQyvC,KAAoBvwC,EAAAA,GAAAA,GAAA,QAAAf,SAAOsxC,cA7F1CvwC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAavC,GAAWwC,SACpDhC,EAAK,qBC9Bd,IAAeX,EAAAA,EAAAA,KA5Bf,UAAuB,SACrBE,EAAQ,SAAEo1C,EAAQ,QAAExkC,EAAO,SAAE2P,EAHE,EAGiC,SAAE80B,EAAQ,gBAAEC,IAE5E,MAAMC,GAAqBxrC,EAAAA,EAAAA,IAAiByrB,IACrC5kB,GCzB+F,aDyBpF4kB,EAAMggB,eACpBF,OAIE53B,GAAanb,EAAAA,GAAAA,GC9BE,WDgCnB6yC,GChCuC,WDiCvCp1C,GCjC2D,WDkC3Dq1C,GClCwH,YDqC1H,OACE7xC,EAAAA,GAAAA,GAAA,QACEvD,UAAWyd,EACX,iBAAWjb,SAEVzC,IACCwD,EAAAA,GAAAA,GAAA,KAAG2L,MAAO,wBAAwBoR,KAAatgB,UC3C2B,WD2CFw1C,eAAgBF,KAIhG,IEgEMG,GAAwBC,EAAAA,GAAY,EAAI,EAgzB9C,IAAe71C,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GACxC1M,SACAq/B,UACAzwB,wBAEA,MAAM,UAAEg9B,GAAcl/B,EAChBm/B,GAAOC,EAAAA,EAAAA,KAAWp/B,EAAQ1M,GAC1BkN,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQ1M,GAC1BgsC,GAAeC,EAAAA,EAAAA,KAAmBv/B,EAAQ1M,GAC1C6M,GAAWC,EAAAA,EAAAA,KAAeJ,IAE9B+wB,aAAa,QACXtiB,EAAO,UACP+wB,EAAS,mBACTC,EAAkB,mBAClBzO,EAAkB,UAClB0O,GAEFC,iBAAmBhN,QAASiN,GAAkB,aAC9CC,EAAY,iBACZC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,cACXC,EAAa,kCACbC,GACE//B,GACIjQ,OAAQiwC,GAAuBN,GAAgB,CAAC,EAClDrQ,GAAQoG,EAAAA,EAAAA,KAAgB51B,EAAQ1M,EAAQq/B,GACxChD,EAAgBH,GAAS,YAAaA,EACtC4Q,EAAmBxyC,QACvBsyC,GACGV,GAAaI,GAAoBz/B,EAASkgC,gBAAgB1N,SAAWqN,GAAeP,GACpFU,GAAsBj+B,GAAqB49B,GAAoB9O,GAAsB+O,GAAYE,GAGhGjQ,EAAcL,EAAgBH,EAAMQ,iBAAcvlC,EAClD61C,EAAa3Q,EAAgBH,EAAM8Q,gBAAa71C,EAChD81C,EAAkBvQ,GAAasJ,YAChCgH,GAAYh0C,MAAMk0C,GAAwD,gBAAdA,EAAKlzC,QAAyBmzC,UACzFC,EAAgBH,GAAkBrc,EAAAA,EAAAA,KAAWlkB,EAAQugC,QAAmB91C,EACxEk2C,GAAsB7c,EAAAA,EAAAA,KAA+B9jB,EAAQ,yBAE7D4gC,EAAWjR,GAAiBH,EAAMqR,QAAS3c,EAAAA,EAAAA,KAAWlkB,EAAQwvB,EAAMqR,aAAUp2C,EAC9Eq2C,GAAoBC,EAAAA,EAAAA,KAA4B/gC,EAAQ1M,GACxD0tC,GAAkBC,EAAAA,EAAAA,KAA0BjhC,GAElD,MAAO,CACLvM,KAAO0rC,GAAQ3+B,EACfkgC,gBACAE,WACApR,QACA0R,WAAYxB,GAAWyB,iBAAiB7tC,GACxCmb,UACAghB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDogC,mBACAgB,qBAAsBlC,EAAWkC,qBACjCC,oBAAqBnC,EAAWoC,kBAAoBpC,EAAWqC,yBAC/DC,YAAa5zC,QAAQ4S,GACrBihC,sBAAuB7zC,QAAQ0xC,GAAcoC,UAC7CzQ,YAAajxB,EAAOkxB,QAAQD,YAC5B0P,sBACAG,oBACAE,qBA9DgBjhC,EA3yBpB,UAAe,OACbzM,EAAM,QACNq/B,EAAO,KACPl/B,EAAI,cACJitC,EAAa,SACbE,EAAQ,QACRnyB,EAAO,kBACPkzB,EAAiB,iBACjBC,EAAgB,MAChBpS,EAAK,WACL0R,EAAU,cACVpH,EAAa,WACbh8B,EAAU,iBACVsiC,EAAgB,qBAChBgB,EAAoB,oBACpBC,EAAmB,YACnBG,EAAW,sBACXC,EAAqB,eACrBI,EAAc,qBACdpS,EAAoB,YACpBwB,EAAW,oBACX0P,EAAmB,SACnBmB,EAAQ,QACRpxC,EAAO,SACPoR,EAAQ,kBACRg/B,EAAiB,gBACjBE,IAEA,MAAM,UACJe,EAAS,oBACTC,EAAmB,kBACnBC,EAAiB,cACjBxP,EAAa,uBACbyP,EAAsB,gBACtB1c,EAAe,cACf2c,EAAa,qBACblM,EAAoB,SACpB/iC,EAAQ,iBACRq+B,EAAgB,uBAChB6Q,EAAsB,iBACtBC,EAAgB,UAChBC,EAAS,eACTC,EAAc,mBACdlR,IACEl+B,EAAAA,EAAAA,MACEw+B,GAAaC,EAAAA,GAAAA,MAEb/nC,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,MACP,SAAE+E,KAAaC,EAAAA,EAAAA,OACdwzC,GAAoBC,GAAsBC,KAA0Bt4C,EAAAA,EAAAA,IAAQ,IAC5Eu4C,GAA0BC,GAAWC,KAAcz4C,EAAAA,EAAAA,IAAQ,IAC3D04C,GAAgBC,GAAkBC,KAAsB54C,EAAAA,EAAAA,IAAQ,IAChE64C,GAAcC,GAAgBC,KAAoB/4C,EAAAA,EAAAA,IAAQ,IAC1Dg5C,GAAmBC,GAAeC,KAAel5C,EAAAA,EAAAA,IAAQ,IACzDm5C,GAAoBC,KAAyBjlC,EAAAA,EAAAA,KAAS,IACtDklC,GAAqBC,GAAyBC,KAA6Bv5C,EAAAA,EAAAA,IAAQ,IACnFslC,GAAoBkU,GAAsBC,KAA0Bz5C,EAAAA,EAAAA,IAAQ,GAC7EgnB,IAAWrV,EAAAA,EAAAA,OACX,eACJ6zB,GAAc,QACdC,GAAO,eACPE,GAAc,UACdE,GAAS,eACT90B,GAAc,QACdjB,GAAO,QACPk2B,GAAO,cACPE,GAAa,aACbC,GAAY,aACZC,GAAY,YACZC,GAAW,SACXC,GAAQ,YACRC,GAAW,kBACXG,IACEvB,GAAcC,EAAOC,EAAsBC,IAEzCC,GAAgBH,GAAS,YAAaA,EACtCsU,GAAcxwC,IAAW8tC,EACzB2C,IAAcjkC,EAAAA,EAAAA,IAASxM,GACvB0wC,IAAeD,GACfE,GAAiBD,KAAe1gB,EAAAA,EAAAA,IAAc7vB,GAC9CwpC,GAAQtN,IAAiBH,EAAMyN,MAE/BiH,IAAkBjJ,EAAAA,GAAAA,GACtBgC,IAASzN,EAAMiH,iBAAchsC,GAC7B,GAEI05C,IAAsBlJ,EAAAA,GAAAA,GAC1BgC,GAAQzN,EAAMiH,iBAAchsC,GAC5B,GAEI25C,GAAkBx2C,QACtBqvC,IAAUzN,EAAM1M,KAAOue,GAAuBzP,EAAAA,GAAAA,OAG1CyS,GAAqB3D,GAAgBhd,EAAAA,GAAAA,IAAa75B,GAAS62C,GAC5D/Q,IAAiBH,EAAMQ,aAAa2J,SAEnC2K,GAAc12C,QAClB+hC,IACGH,EAAMkO,WACLoG,IACDrwC,GAAM8wC,aAGLC,GAAW52C,QACf+hC,IACGH,EAAMkO,WACLlO,EAAMoB,aACNkT,KACAV,IAGAqB,GAAe72C,QACnB6iC,KAAgB2P,GAAoB6C,KAAiBT,KAAuBY,KACxEG,KAAuBE,IAGvB55B,GAAW8lB,IAAiBH,EAAMrrB,QAAQtP,OAAOgV,SACnD2lB,EAAMrrB,QAAQtP,MAAMgV,cACpBpf,EAEEi6C,KAAuBzH,IAAS8G,IAAiBD,IAAgBG,IAAmBjD,GACpF2D,GAAmBhV,KAAkB+U,KAAuBzH,IAASgH,IACrEhe,GAAkBl3B,IAAY4xC,EAAsB,YAAc,QAGtE5sB,aAAc6wB,GACd3wB,qBAAsB4wB,KACpB1wB,EAAAA,GAAAA,IAA6Bsc,KAG/Bxc,qBAAsB6wB,KACpB3wB,EAAAA,GAAAA,GAA4BvmB,QAAQ0iC,KAElCyU,IAAWC,EAAAA,GAAAA,GAAc/U,IAAYS,IACrCuU,IAA8BC,EAAAA,GAAAA,GAA6B/pC,KAG/D4Y,aAAcoxB,GACdlxB,qBAAsBmxB,KACpBjxB,EAAAA,GAAAA,GAA4BuwB,KAG9B3wB,aAAcsxB,GACdpxB,qBAAsBqxB,KACpBnxB,EAAAA,GAAAA,GAA4B0b,IAAWuT,KAEnCnvB,qBAAsBsxB,KAAkCpxB,EAAAA,GAAAA,IAA4B,IAE1FJ,aAAcyxB,GACdvxB,qBAAsBwxB,KACpBtxB,EAAAA,GAAAA,GAA4B0b,IAAWE,IAErC2V,IAAuBC,EAAAA,GAAAA,GAAav0B,GAAUkf,GAAesV,GAAAA,IAEnEC,EAAAA,GAAAA,GAAkBvyC,EAAQq/B,IAE1BtoC,EAAAA,EAAAA,KAAU,KACJsoC,GACFoP,EAAU,CAAEzuC,SAAQq/B,cAErB,CAACA,EAASr/B,KAEbjJ,EAAAA,EAAAA,KAAU,KACR63C,EAAuB,CAAE5uC,aACxB,CAACA,KAGJjJ,EAAAA,EAAAA,KAAU,KACR,MAAMy7C,GAAWhmC,EAAAA,EAAAA,IAASxM,IACrBkuC,GAAesE,GAClBxD,EAAU,CAAExuC,OAAQR,MAErB,CAACkuC,EAAaluC,KACjBjJ,EAAAA,EAAAA,KAAU,KACJm3C,IAAgBC,GAClBY,EAAiB,CAAE/uC,aAEpB,CAACmuC,EAAuBD,EAAaluC,IAExC,MAAMyyC,IAAmB1yC,EAAAA,EAAAA,IAAgB,KACnC6G,IACFkX,GAASlV,SAASoY,QAGpB0uB,KACAH,QAGImD,IAAkB3yC,EAAAA,EAAAA,IAAgB,KACjCoxC,KAEL7B,KACK1oC,IAAS6oC,SAGVkD,IAAuB5yC,EAAAA,EAAAA,IAAgB,KAC3CqwC,QAEIwC,IAAqB7yC,EAAAA,EAAAA,IAAgB,KACzCswC,QAGIwC,IAAyB9yC,EAAAA,EAAAA,IAAgB,KAC7CuwC,KACAmC,QAGIK,IAA0B/yC,EAAAA,EAAAA,IAAgB,KAC9CwwC,KACAmC,SAIA7L,YAAakM,GACbC,UAAWC,GACXvwB,aAAcwwB,GACdC,aAAcC,GACdC,WAAYC,KACVC,EAAAA,GAAAA,GAAa,CACfC,QAASb,GACT1T,MAAO2T,KAGHryB,IAAgBC,EAAAA,GAAAA,GACpB1C,QACA3mB,GACCyP,KAAYo2B,IAAiBoV,IAG1BqB,GAAazW,MAAmBC,IAAgBC,KAEtDnmC,EAAAA,EAAAA,KAAU,KACJ08C,KAAelzB,IAAemyB,OACjC,CAACe,GAAYlzB,MAEhBmzB,EAAAA,GAAAA,GAAkB7D,GAAkBD,KAEpC74C,EAAAA,EAAAA,KAAU,KACH08C,IACL31B,GAASlV,SAAS+qC,SACjB,CAACF,MAEJ18C,EAAAA,EAAAA,KAAU,MACHslC,IAAiBC,IAAkBwU,KAEnCnH,IAAUgH,KAGf1B,EAAe,CAAEjvC,SAAQq/B,cACxB,CAAC/C,GAAgBwU,GAAiBzU,GAAer8B,EAAQq/B,EAASsK,GAAOgH,MAE5E55C,EAAAA,EAAAA,KAAU,KAEN+1C,IAAqB6C,IAAgBT,IAClCY,IAAqBG,IAAsBE,GAE9CsC,KAEAC,OAED,CACDA,GAAiB/C,GAAcG,GAAmBZ,GAClDpC,EAAkBmD,GAAoBE,MAGxCp5C,EAAAA,EAAAA,KAAU,KACR,KAAIm4C,IAAsBpC,GAAoBgD,IAa9C,OAFAzuC,SAASmS,iBAAiB,UAAW2O,GAE9B,KACL9gB,SAASoS,oBAAoB,UAAW0O,IAV1C,SAASA,EAAchkB,GApRL,KAqRZA,EAAEy1C,UACJz1C,EAAEkkB,iBACF6tB,IAAuBD,IAE3B,IAOC,CAACH,GAAmBZ,GAAoBe,GAAoBnD,KAG/DlL,EAAAA,GAAAA,IAAsB,EACpBiS,EACAC,EACAC,EACAC,EACAC,OAGGhE,IAAsBH,IAAqBZ,IACzCpC,IAAqB6C,IAAgBQ,IAMxC2D,IAA0BhE,IACvB+D,IAA2B3E,IAC3B6E,IAAyBjH,GACzBkH,IAAqBrE,IACrBsE,IAA4B9D,IAE/BD,IAAsB,KAEvB,CAAChB,GAAoBY,GAAmBhD,EAAkB6C,GAAcQ,GAAqBF,KAEhG,MAAMnwC,IAAiBC,EAAAA,EAAAA,IAAgB,KACrC3C,IACAwC,EAAS,CAAE3D,GAAI+D,OAGXk0C,IAAyBn0C,EAAAA,EAAAA,IAAgB,KAC7C3C,IACAwC,EAAS,CAAE3D,GAAImxC,EAAenxC,QAG1Bk4C,IAAsBp0C,EAAAA,EAAAA,IAAgB,KAC1C3C,IACAwC,EAAS,CAAE3D,GAAIqxC,EAAUrxC,QAGrBm4C,IAAsBr0C,EAAAA,EAAAA,IAAgB,KAC1C4uC,OAGI0F,IAAsBt0C,EAAAA,EAAAA,IAAgB,KAC1Co/B,OAGImV,IAA6Bv0C,EAAAA,EAAAA,IAAiB5B,IAClD,MAAMoD,EAAQpD,EAAEkjB,cACZ9f,EAAM+f,YAAcoqB,GACtB+D,KAEAC,KAEEn5B,KAAYlG,EAAAA,GAAAA,IAAM9O,EAAMoT,YAAa,KAAMtE,EAAAA,GAAAA,IAAMkG,GAAU,IAC7D89B,SAIJt9C,EAAAA,EAAAA,KAAU,IACAw3C,KAAqBW,QAGxB/3C,GAH6Co9C,EAAAA,GAAAA,GAAyB,CACzEC,QAASH,GACTI,OAAQL,MAET,CAAC7F,EAAgBW,KAEpB,MAAMwF,IAAsB30C,EAAAA,EAAAA,IAAgB,KAC1C8uC,EAAc,CAAE7uC,SAAQq/B,eAGpBsV,IAAiB50C,EAAAA,EAAAA,IAAgB,KACrC4iC,EAAqB,CAAE3iC,SAAQq/B,UAAS8D,aAAa,OAGjDyR,IAAmB70C,EAAAA,EAAAA,IAAgB,KACvC4iC,EAAqB,CAAE3iC,SAAQq/B,UAAS8D,aAAa,OAGjD/D,IAAyBr/B,EAAAA,EAAAA,IAAgB,KAC7CyuC,EAAStS,MAGL2Y,IAAyB90C,EAAAA,EAAAA,IAAgB,KAC7CyO,OAGIm8B,IAAqB5qC,EAAAA,EAAAA,IAAgB,KACzCmyB,EAAgB,CAAE4F,WAAY93B,EAAQq/B,eAGlCyV,IAAwB/0C,EAAAA,EAAAA,IAAgB,KAC5C+uC,OAGIiG,IAAyBh1C,EAAAA,EAAAA,IAAgB,KAC7C,MAAMwiC,GAAclG,IAAiBH,EAAMkO,cACvCjzC,EACA+kC,EAAM8Y,cAAgB,WAAc9Y,EAAM+Y,kBAAoB,eAAiB,SAEnF,IAAItzC,EACJ,MAAMuzC,GAAS9kB,EAAAA,GAAAA,IAAa75B,GAAS4J,GACrC,OAAQoiC,GACN,IAAK,SACH5gC,EAAUpL,GAAQ,4BAA6B2+C,GAC/C,MACF,IAAK,WACHvzC,EAAUpL,GAAQ,oBAAqB2+C,GACvC,MACF,IAAK,eACHvzC,EAAUpL,GAAQ,wBAAyB2+C,GAC3C,MACF,QACE,OAEJjX,EAAiB,CAAEt8B,eAGfggB,IAAoB5hB,EAAAA,EAAAA,IAAgB,KACpC+8B,GACFmB,EAAiB,CACft8B,QAASpL,GAAQ,mCAKrBunB,GAASlV,QAASgZ,OAAS9D,GAASlV,QAASgZ,MAC7C8sB,EAAoB,CAAEvzB,SAAUA,QAG5Bg6B,IAAyBp1C,EAAAA,EAAAA,IAAgB,KAC7C,GAAI49B,EAAYyX,cAAe9W,EAAAA,GAAAA,MAAkBX,EAAYyX,YAA7D,CACE,MAAMC,EAAO1X,EAAYyX,aAAc9W,EAAAA,GAAAA,MACvCL,EAAiB,CACftgC,MAAOpH,GAAQ,iBACfoL,QAASpL,GAAQ,oCAAoC2iB,EAAAA,GAAAA,IAAoBm8B,IACzE9+B,SAzamC,KA4avC,MAEAwnB,EAAmB,CAAEnhC,QAAQ,OAGzB04C,IAAiBv1C,EAAAA,EAAAA,IAAgB,KAChCy9B,KACLzsB,EAAAA,GAAAA,GAASysB,GAAmB,SAASx9B,KAAUq/B,KAAWz4B,GAAU,MAAQ,aAG9E7P,EAAAA,EAAAA,KAAU,KACHulC,IAEL2B,EAAiB,CACft8B,QAASpL,GAAQ,qBAElB,CAACA,GAAS+lC,KAEb,MAAMnsB,IAA8DjZ,EAAAA,EAAAA,KAAQ,IACnE,EAAGkZ,YAAWxT,aAEjBpD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLqM,QAASjhB,GACTxB,KAAK,OACLmF,MAAM,oBACN9I,QAAS8Z,EACTna,WAAWsC,EAAAA,GAAAA,GAAeC,GAAeoE,GAAU,UACnD0T,UAAW/Z,GAAQ,qBAAqBkC,UAExCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAIhB,CAACW,GAAUlF,KAqMd,MAAMg/C,GAAmB/H,EACrB/2C,GAAK,+BAAgC,CACrC2D,QAAQo7C,EAAAA,GAAAA,GAAkB/+C,GAAM+2C,EAAmB,CAAEiI,QAAQ,EAAMx/C,UAAW,2BAC7E,CACDy/C,WAAW,IAEXn/C,GAAQm6C,GAAc,oBAAsB,kBAEhD,OACEp4C,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAmB,wBAC7CquC,YAAakM,GACbC,UAAWC,GACXvwB,aAAcwwB,GACdC,aAAcC,GACdC,WAAYC,GAAwB76C,SAAA,EAEpCH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GnBtxB0S,WmBsxBvQ05C,IAA+Bx5C,SAAA,EAlNlFe,EAAAA,GAAAA,GAAA,OAAKvD,UnBpkBypB,WmBokBvnBwC,UACnC+tC,EAAgB,CAACnH,GAAWuO,GAAc,IAAIl1C,KAAKuD,IACnDzC,EAAAA,GAAAA,GAACm8C,GAAa,CAEZ3/C,SAAUiG,IAAOigC,GAAOjgC,GACxB2K,QAASA,GACTwkC,SAAU9wC,QAAQ4hC,GAAOjgC,KAAQqyC,GAAoBD,EAAqBpyC,EAAKigC,GAAOjgC,GAAKA,EAAKigC,GAAOjgC,KACvGovC,UAAWmE,GACXj5B,SAAUA,GACV+0B,gBAAiB+I,IANZ,YAAYp4C,UAmHvB3D,EAAAA,GAAAA,IAAA,OAAKrC,UnB1rB6qB,WmB0rBppBwC,SAAA,EAC5Be,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CAACC,UAAWtX,OAAOjiB,GAASlF,KAAM63B,GAAiB18B,UnB3rBopB,WmB2rB7mBwC,UApDvGH,EAAAA,GAAAA,IAAA,OAAKrC,UnBvoBuuB,WmBuoB1sBwC,SAAA,EAChCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAMA,EACNlG,KAAK,OACL3D,QAASwJ,MAEXxH,EAAAA,GAAAA,IAAA,OAAKrC,UnB7oB6vB,WmB6oBhuBwC,SAAA,EAChCe,EAAAA,GAAAA,GAAA,QAAMlD,QAASwJ,GAAgB7J,UnB9oByvB,WmB8oB5tBwC,UACzD8B,EAAAA,GAAAA,IAAW61B,EAAAA,GAAAA,IAAa75B,GAAS4J,IAAS,OAE7C7H,EAAAA,GAAAA,IAAA,OAAKrC,UnBjpB6yB,WmBipB9wBwC,SAAA,CACjCs4C,KACCz4C,EAAAA,GAAAA,IAAA,QACErC,WAAWsC,EAAAA,GAAAA,GACTC,GnBrpBu3C,WmBqpB/0C40C,GnBrpBs2C,YmBupBh5C92C,QAAS82C,EAAgB8G,QAAyB/8C,EAAUsB,SAAA,EAE5De,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UACXtB,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAmBC,UACjC8B,EAAAA,GAAAA,GAAWw2C,SAIjBzD,IACCh1C,EAAAA,GAAAA,IAAA,QACErC,WAAWsC,EAAAA,GAAAA,GACTC,GnBlqBs9C,YmBoqBx9ClC,QAAS69C,GAAoB17C,SAAA,EAE7Be,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAMmtC,EAAUrzC,KAAK,WAC7BT,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAmBC,UACjC8B,EAAAA,GAAAA,IAAW61B,EAAAA,GAAAA,IAAa75B,GAAS+2C,IAAa,SAIpDpR,GAAS,SAAUA,IAClB1iC,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAiBC,UAAEm9C,EAAAA,GAAAA,IAAuBr/C,GAAS8nC,EAAYnC,EAAM1M,QAEvF6M,IAAiBH,EAAM2Z,WACtBr8C,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAiBC,SAAElC,GAAQ,oCAelD+B,EAAAA,GAAAA,IAAA,OAAKrC,UnB/rBo3B,WmB+rB11BwC,SAAA,CA3GrC,WACE,IAAKg4C,GAAa,OAElB,IAAIqF,EAAwB,iBAC5B,MAAMC,EAA6C,CACjD,iBAAkB,CAAC,UAAW,WAC9B,cAAe,CAAC,UAAW,WAC3B,kBAAmB,CAAC,UAAW,WAC/B,eAAgB,CAAC,UAAW,YAG9B,GAAIpM,GAAO,CACT,MAAM,WAAEpH,GAAgBrG,GAAS,eAAgBA,GAASA,EAAMqG,YAAe,CAAC,EAEhF,OAAQA,GACN,IAAK,YACHuT,EAAc,iBACd,MACF,IAAK,WACHA,EAAc,cACd,MACF,IAAK,eACHA,EAAc,kBACd,MACF,IAAK,SACHA,EAAc,eAEpB,KAAO,CACL,IAAK5Z,KAAW,YAAaA,IAAUA,EAAMkO,SAC3C,OAGF0L,EAAc5Z,EAAM+Y,kBAChB,kBACC/Y,EAAM8Y,cAAgB,cAAgB,cAC7C,CAEA,OACE18C,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GnB3nBg6B,WmB2nBx3BoxC,InB3nB05B,YmB4nB78BrzC,QAASqzC,GAAQmL,GAAwBC,GACzC5vC,MAAO,iBAAiB4wC,EAASD,GAAa,mBAAmBC,EAASD,GAAa,KAAKr9C,SAAA,EAE5Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMg7C,IACXnM,KAASnwC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WAG3B,CA6DSk7C,GACApvC,KACCpN,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAWuC,GACX6X,OAAK,EACLqM,QAASjhB,GACTxB,KAAK,OACLmF,MAAM,oBACNC,UAAW89B,GACX7mC,QAASqrB,GACTrR,UAAW/Z,GAAQ,UAAUkC,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAOqgB,GAAW2hB,GAAW,sBAAwB,qBAG/DxkC,EAAAA,GAAAA,IAAC2Y,GAAAA,EAAY,CACXhb,UnBhtBq/B,WmBitBr/Bib,QAASf,GACTgB,UAAU,QACV8kC,OAAQpD,GACRz1C,QAAS01C,GAAwBr6C,SAAA,CAEhCu4C,KAAex3C,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,OAAOpH,QAASo+C,GAAoBj8C,SAAElC,GAAQ,cAC5Eq6C,KACCp3C,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,aAAapH,QAASq+C,GAAel8C,SACjDlC,GAAQk6C,GAAc,YAAc,iBAGxCI,KACCr3C,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAASs+C,GAAiBn8C,SAC/ClC,GAAQk6C,GAAc,eAAiB,qBAG3CpT,KACC7jC,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAW2B,UAAWm+B,GAAmBlnC,QAASg/C,GAAe78C,SAC7ElC,GAAQ,yBAGXozC,IAAS8G,KACTj3C,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,sBAAsBpH,QAAS6+C,GAAuB18C,SAClElC,GAAQ,kBAGXozC,KAASnwC,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,OAAOpH,QAASu+C,GAAuBp8C,SAAElC,GAAQ,sBAC1EozC,KACCnwC,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,SACLsT,aAAW,EACX1a,QAAS8oC,GAAuB3mC,SAE/BlC,GAAQ,gBAIfiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GnBvvBs0B,YmBwvBh2B6X,OAAK,EACLpW,KAAK,OACLmF,MAAM,oBACNkR,UAAW/Z,GAAQ,SACnBD,QAAS8G,EAAQ3E,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,sBA6BjBxC,EAAAA,GAAAA,IAAA,OACErC,UnB5xB0mB,WmB6xB1mBkP,MAAO,UAAUqF,EAAW3B,oBAAoB2B,EAAWtB,WAAWzQ,SAAA,EAEtEe,EAAAA,GAAAA,GAAA,UAAQmY,IAAK8/B,GAAUx7C,UAAWuC,KACjCqP,KACCrO,EAAAA,GAAAA,GAAA,OAEE0J,IAAK2E,GACL9E,WAAW,EACXoiB,IAAI,GACJlvB,WAAWsC,EAAAA,GAAAA,GAAeC,GnBtyB+Y,WmBsyB5Wm5C,KAJxD,WAAWtS,KAOnBiS,KACC93C,EAAAA,GAAAA,GAAC08C,GAAAA,EAAQ,CAACjgD,WAAWsC,EAAAA,GAAAA,GAAeg5C,GAA8B/4C,OAElEoO,IAAWo2B,KACXxjC,EAAAA,GAAAA,GAAA,OACE0J,IAAK85B,GACL7X,IAAI,GACJlvB,WAAWsC,EAAAA,GAAAA,GAAeC,GAAcg5C,IACxCzuC,WAAW,IAGd6D,IAAWo2B,KACV1kC,EAAAA,GAAAA,IAAC69C,GAAAA,EAAc,CACbxkC,IAAKmM,GAEL7nB,WAAWsC,EAAAA,GAAAA,GAAeC,GAAcg5C,IACxC4E,QAAS/G,GACTztB,MAAOzG,EACPtS,MjBxzBoB,IiByzBpBK,OjBxzBqB,KiByzBrBnG,WAAW,EACXggB,aAAW,EACX9D,yBAAuB,EACvBo3B,YAAU,EACVjzB,QAASssB,GACTzsB,UAAWysB,GACX4G,uBAAqB,EACrBjzB,aAAcixB,GAA2B77C,SAAA,EAEzCe,EAAAA,GAAAA,GAAA,UAAQ0J,IAAK85B,GAAehjC,KAAMs4C,GAAAA,EAAoBzpC,MAAM,QAC3Dq0B,KAAgB1jC,EAAAA,GAAAA,GAAA,UAAQ0J,IAAKg6B,GAAcljC,KAAMu8C,GAAAA,EAAsB1tC,MAAM,UAhBzE,SAASw2B,MAoBhB8Q,KAAwBjB,KACxB52C,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,UACEQ,KAAK,SACL/D,WAAWsC,EAAAA,GAAAA,GAAeC,GnB/0B2sC,YmBg1BruClC,QAAS89C,GACT,aAAY79C,GAAQ,eAEtBiD,EAAAA,GAAAA,GAAA,UACEQ,KAAK,SACL/D,WAAWsC,EAAAA,GAAAA,GAAeC,GnBr1B6tC,YmBs1BvvClC,QAAS+9C,GACT,aAAY99C,GAAQ,aAIzB8lC,IAAiBW,KAChBxjC,EAAAA,GAAAA,GAACg9C,GAAAA,EAAgB,CAEfta,MAAOA,EACPlmC,UAAQ,EACRw5C,eAAgBpT,IAHX,gBAAgBiD,KAAWr/B,MAMlCvE,KACAjC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,UAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAoBC,SAAA,EAClCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAMA,EACNs2C,WAAS,EACTC,gBAAgB,cAElBl9C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,UAAE8B,EAAAA,GAAAA,IAAW61B,EAAAA,GAAAA,IAAa75B,GAAS4J,IAAS,cAM/EkxC,KACC73C,EAAAA,GAAAA,GAAC+vC,GAAW,CAACrN,MAAOA,EAAOjmC,UAAWg8C,KAEvCF,KACCv4C,EAAAA,GAAAA,GAAA,OACE6rC,SAAU,EACVC,KAAK,SACLrvC,WAAWsC,EAAAA,GAAAA,GnBx3B2E,WmBw3BpCy5C,IAClD17C,QAASA,IAAM05C,KACf,aAAYz5C,GAAQ,WAGvBgmC,KAAW/iC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GnB73BsW,WmB63B/T45C,MAClED,KACC14C,EAAAA,GAAAA,GAACm9C,GAAY,CAEXza,MAAOA,EACPkL,WAAY0I,GACZzI,SAAU0I,GACVzI,OAAQ0I,GACR/5C,UAAWk8C,IALN,WAAW9S,KAAWr/B,KAQ9B6xC,KACCr4C,EAAAA,GAAAA,GAACo9C,GAAAA,EAAQ,CACP58C,KAAK,QACLwG,OAAQR,EACRsN,SAAUupC,EAAAA,GACVxX,QAASA,EACT5oB,SAAUkzB,GACVv7B,gBAAgB,SAChB3S,UAAUq7C,EAAAA,EAAAA,MACVC,yBAA0BC,EAAAA,IAC1BC,gBAAiBC,EAAAA,IACjBC,QAAQ,mBACRlhD,WAAWsC,EAAAA,GAAAA,GnBp5BiU,WmBo5BjSu5C,IAC3CyD,iBAAkBA,GAClB5mC,UAAWuiC,GAAWvG,QAAqBxzC,EAC3CigD,QAASjI,GACTkI,OAAQjI,OAKlB,KC9zBA,IAAet5C,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAUvM,WAClD,MACEs9B,aACE6Z,mBAAoBC,EAAmB,OACvC/0C,EAAM,UACN4pC,KAEAt/B,EAAAA,EAAAA,KAAeJ,GAEnB,MAAO,CACL8qC,aAAcr3C,GAAMlE,GAAKs7C,IAAsBp3C,EAAKlE,SAAM9E,EAC1DqL,SACAi1C,kBAAmBt3C,GAAMlE,GAAKmwC,GAAWyB,iBAAiB1tC,EAAKlE,SAAM9E,KAZrDsV,EAhEpB,UAAsB,KACpBtM,EAAI,YAAEu3C,EAAW,aAAEF,EAAY,kBAAEC,EAAiB,OAAEj1C,IAEpD,MAAM,gBAAE0jC,EAAe,uBAAE0I,IAA2B/uC,EAAAA,EAAAA,MAC9CpJ,GAAOD,EAAAA,EAAAA,KAEP0lC,GAAQhlC,EAAAA,EAAAA,KAAkC,KAC9C,IAAKwgD,EACH,OAGF,MAAM,WACJ9J,EAAU,WAAE+J,EAAU,KAAElV,GACtBiV,EACEE,EAAmBhK,EAAWA,EAAWv1C,OAAS,KAAOs/C,EACzDE,EAAiBL,GAAgBC,GAAmBlrB,SAASirB,GAC/DA,IAAiBI,EAAoBD,IAAe,GAAM,IACzD,EAGL,OAAOlV,EAFUA,EAAKoV,IAAiB57C,IAAMw7C,IAAoB,IAAM7J,EAAW,MAGjF,CAAC4J,EAAcE,EAAaD,IAEzBK,EAAW5b,GAAS,YAAaA,GAEvCnlC,EAAAA,EAAAA,KAAU,KACJmlC,IAAU4b,GACZlJ,EAAuB,CAAE5uC,OAAQk8B,EAAMl8B,WAExC,CAACk8B,EAAO4b,IAEX,MAAMv2C,EAAQu2C,EAAW5b,EAAMrrB,QAAQtP,WAAQpK,EACzC4gD,EAAYD,GAAWjb,EAAAA,EAAAA,IAAkBX,QAAS/kC,EAElD6gD,GADavwC,EAAAA,EAAAA,GAASswC,IACGx2C,GAAOo7B,WAAWp0B,QAEjD,GAAKpI,GAAS+7B,KAAS,cAAeA,GAItC,OACE5jC,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GACXlC,QAASA,KAAQ4vC,EAAgB,CAAElmC,OAAQk8B,EAAMl8B,OAAQq/B,QAASnD,EAAMjgC,GAAIuG,YAAa/J,SAAA,CAExFu/C,IACCx+C,EAAAA,GAAAA,GAAA,OAAK0J,IAAK80C,EAAU7yB,IAAI,GAAGlvB,UAAWuC,GAAcuK,WAAW,IAEhE+0C,IAAYt+C,EAAAA,GAAAA,GAACg9C,GAAAA,EAAgB,CAACta,MAAOA,KAEtC1iC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,UAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAoBC,SAAA,EAClCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAMA,EACNs2C,WAAS,EACTC,gBAAgB,cAElBl9C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,UAAE8B,EAAAA,GAAAA,IAAW61B,EAAAA,GAAAA,IAAa35B,EAAM0J,IAAS,aAK/E,KC7BkC,IAE7BwlB,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAkZnB,UAAe7vB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MACE+wB,aACEz9B,OAAQi4C,EAAe5Y,QAAS6Y,EAAc,aAAEC,EAAY,cAAE3R,EAAa,UAAE4R,EAAS,UAAEC,EAAS,UAAEjM,KAEnGt/B,EAAAA,EAAAA,KAAeJ,IACb,SAAE4rC,EAAUC,gBAAgB,OAAEl/C,IAAaqT,EAAOkxB,QAExD,MAAO,CACL0a,WACAE,QAASpM,GAAWoM,SAAWn/C,EAC/B4+C,gBACAC,iBACAC,eACA3R,gBACA4R,YACAC,gBAEA3rC,IAAW+rC,EAAAA,EAAAA,KAAwB/rC,IAlBnBD,EA7YpB,UAAqB,QACnB+rC,EAAO,cACPP,EAAa,eACbC,EAAc,OACdt7C,EAAM,aACNu7C,EAAY,cACZ3R,EAAa,UACb4R,EAAS,UACTC,EAAS,SACTC,EAAQ,kBACR1pC,EAAiB,SACjB4/B,EAAQ,QACRpxC,EAAO,SACPoR,IAEA,MAAM,mBAAEkqC,IAAuB74C,EAAAA,EAAAA,MACzBqmB,GAAezd,EAAAA,EAAAA,OACdkwC,EAAiBC,IAAsB3tC,EAAAA,EAAAA,IAASgtC,IAChDY,EAAkBC,IAAuB7tC,EAAAA,EAAAA,IAASitC,GACnDa,GAAarmB,EAAAA,EAAAA,GAAsBulB,GACnCe,GAAqBrR,EAAAA,GAAAA,GAAiB0Q,GAAW,GACjDY,GAAqBtR,EAAAA,GAAAA,GAAiByQ,GAAW,GACjDc,GAAwBvR,EAAAA,GAAAA,GAAiBwQ,GAAc,GACvDgB,GAAyBxR,EAAAA,GAAAA,GAAiBnB,GAAe,GACzD4S,EAAale,MACXhyB,OAAQqe,EAAc1e,MAAO2e,IAAgBE,EAAAA,GAAAA,KAC/ClB,GAAoB/d,EAAAA,EAAAA,SAAmCtR,GACvDuvB,GAAgBje,EAAAA,EAAAA,KAAO,IACvB,SAAEhN,IAAaC,EAAAA,EAAAA,MAEf29C,GAAa5wC,EAAAA,EAAAA,IAAoD,CAAC,IACjE8lC,EAAgB+K,IAAkBhiC,EAAAA,EAAAA,KAAU,GAQnD,SAASiiC,EAAO5nC,EAAiC3R,GAC1C2R,IAGA0nC,EAAWzwC,QAAQ5I,GAGtBq5C,EAAWzwC,QAAQ5I,GAAQ4I,QAAU+I,EAFrC0nC,EAAWzwC,QAAQ5I,GAAU,CAAE4I,QAAS+I,GAI5C,EAfAgW,EAAAA,GAAAA,GAAe,CACb3xB,SAAU4G,EACVgrB,OAAQxqB,EACRyqB,kBAAkB,IAcpB,MAAM2xB,GAAmBtiD,EAAAA,EAAAA,KAAQ,KAC/B,GAAIyhD,IAAoBO,GAAyBC,GAC/C,MAAO,CAACR,GAGV,MAAM7gD,EAAQ6gD,EAAkBH,EAAQ7f,QAAQggB,IAAoB,EACpE,IAAKA,IAA8B,IAAX7gD,EACtB,MAAO,GAGT,MAAM0iB,EAAQtiB,KAAKZ,IAAIQ,EAAQ,EAAG,GAC5B2iB,EAAMviB,KAAKC,IAAIL,EAAQ,EAAG0gD,EAAQngD,QAExC,OAAOmgD,EAAQiB,MAAMj/B,EAAOC,KAC3B,CAAC0+B,EAAwBD,EAAuBP,EAAiBH,IAE9DkB,GAAwBxiD,EAAAA,EAAAA,KAAQ,IAC/BsiD,EAAiBnhD,QAAWsgD,EAI1Ba,EAAiB7gB,QAAQggB,IAHtB,GAIT,CAACA,EAAiBa,IAEfG,GAAsBziD,EAAAA,EAAAA,KAAQ,IAC7BsiD,EAAiBnhD,QAAW4/C,EAG1BuB,EAAiB7gB,QAAQsf,IAFtB,GAGT,CAACA,EAAeuB,KAEnBziD,EAAAA,EAAAA,KAAU,KACH0E,GAGLm9C,EAAmBX,KAClB,CAACA,EAAex8C,KAGnB1E,EAAAA,EAAAA,KAAU,KACJ4hD,IAAoBV,GAAiBC,IAAmBW,GAC1DC,EAAoBZ,KAErB,CAACD,EAAeC,EAAgBS,EAAiBE,KAEpD9hD,EAAAA,EAAAA,KAAU,KACR,IAAI0E,EAKJ,OAJIs9C,GAAcA,IAAed,GAC/BqB,GAAe,GAGV,KACLA,GAAe,MAEhB,CAACP,EAAYd,EAAeqB,EAAgB79C,KAE/C1E,EAAAA,EAAAA,KAAU,IACD,KACAmhD,GAAmBD,GACxBS,EAAmB,CACjBrO,aAAaC,EAAAA,EAAAA,IAAY2N,EAAeC,OAG3C,CAACA,EAAgBD,IAEpB,MAAMvd,EAAcif,EAAsBD,EACpC7e,EAAa6e,EAAwBC,EAErCC,GAAsB75C,EAAAA,EAAAA,IAAgB,IACnCy4C,EAAQnhD,QAA+B,CAACwiD,EAAY75C,EAAQlI,KACjE,GAAIkI,IAAW24C,EACbkB,EAAW75C,GAAUy6B,GAAiB,CACpClU,MAAO6yB,EAAW7yB,MAClBmU,cACAG,aACAF,kBAAmBE,QAEhB,CACL,IAAID,GAA2B,GAC1BC,GAAc/iC,EAAQ,GAAK0gD,EAAQ1gD,EAAQ,KAAO6gD,IACrD/d,GAA2B,GAEzBC,GAAc/iC,EAAQ0gD,EAAQngD,OAAS,GAAKmgD,EAAQ1gD,EAAQ,KAAO6gD,IACrE/d,GAA2B,GAG7Bif,EAAW75C,GAAUy6B,GAAiB,CACpClU,MAAO6yB,EAAW7yB,MAClBmU,cACAG,aACAF,kBAAmBsd,IAAkBj4C,IAAW66B,EAChDD,4BAEJ,CAEA,OAAOif,IACN,CAAC,MAGN9iD,EAAAA,EAAAA,KAAU,KACR,IAAKmvB,EAAatd,UAAYhM,EAC5B,OAGF,IAAIswB,EAAU,EAEd,MAAM4sB,EAAqBA,IAClBnB,EAAkBU,EAAWzwC,QAAQ+vC,IAAkB/vC,aAAUzR,EAGpEgjB,EAAaqR,IAGjB,GAAI9E,EAAc9d,QAEhB,YADA8d,EAAc9d,SAAU,GAG1B,MAAMA,EAAUkxC,IAChB,GAAKlxC,EAEL,GAAIskB,GAlLgB,GAkLpB,CACE,MAAM6sB,EAAW14C,SAASk1B,eAAe2gB,EAAAA,KACrC6C,IACFtkC,EAAAA,EAAAA,KAAgB,MACdukC,EAAAA,GAAAA,GAAqBD,KAI3B,MAEI7sB,EA5LgB,IA6LlB9vB,IACmB,UAAfouB,EAAMxxB,QACRigD,EAAAA,GAAAA,MACAjwC,WAAWkwC,GAAAA,GA/LQ,SAkMrBzkC,EAAAA,EAAAA,KAAgB,KACd7M,EAAQzD,MAAMsjC,YAAY,sBAAuB,WAKvD,OAAOzuB,EAAAA,GAAAA,IAAckM,EAAatd,QAAS,CACzCoiB,cAAc,EACdC,gBAAgB,EAChBK,eAAe,EACfJ,wBAAyB,YACzB9Q,OAAQA,CAACoR,EAAOC,GACdC,cAAaC,kBAEb,GAAIjF,EAAc9d,QAAS,OAE3B,GAAIsL,EAAAA,IAAgC,eAAtBuX,EAAazxB,KAAuB,CAChD,MAAM,MAAEwf,GAAWiS,EAAgCptB,QAAQ,GAC3D,GAAImb,GAASqS,GAAAA,IAA6BrS,GAASgO,EAAcqE,GAAAA,GAC/D,MAEJ,CACA,GAAmB,cAAfL,EAAMxxB,KAAsB,OAChC,MAAM8xB,EAAa5zB,KAAKoyB,IAAIoB,GACtBK,EAAa7zB,KAAKoyB,IAAIqB,GACtB/iB,EAAUkxC,IAChB,GAAKlxC,IAED4d,EAAkB5d,UAAY+c,GAAeqG,UAC5C9zB,KAAKoyB,IAAIyB,GAAcG,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,IAA2B,CAC5G3F,EAAkB5d,QAAU+c,GAAeqG,SAC3C,MAAMI,EAAQ7E,EACd2F,GAAUxT,EAAAA,GAAAA,IAAMiS,GAAcS,EAAOA,GACjCc,EAAU,IACZzX,EAAAA,EAAAA,KAAgB,KACd7M,EAAQzD,MAAMsjC,YAAY,sBAA0Bvb,GAAWzxB,EAAW,GAAK,GAA9B,SAGlC,UAAf+vB,EAAMxxB,MAAoB9B,KAAKoyB,IAAI4C,GAAWZ,MAChDnS,EAAUqR,GACV9E,EAAc9d,SAAU,EAE5B,GAEFuR,gBAED,CAACvd,EAAQQ,EAASoqB,EAAaD,EAAc9rB,EAAUk9C,KAE1D5/B,EAAAA,EAAAA,KAAgB,KACd,GAAItd,EAAU,OACd,MAAMo+C,EAAaD,IAEnBO,OAAOC,QAAQf,EAAWzwC,SAAS/Q,SAAQ,EAAEmI,GAAU4I,eACrD,IAAKA,EAAS,OAEd,IAAK2lC,IAOH,OANA3lC,EAAQjG,UAAU0Z,OAAO7jB,GAAuBA,GAA+BA,IAC/EoQ,EAAQzD,MAAMsjC,YAAY,sBAAuB,OACjD7/B,EAAQzD,MAAMsjC,YAAY,sBAAuB,OACjD7/B,EAAQzD,MAAMsjC,YAAY,0BAA2B,UACrD7/B,EAAQzD,MAAMsjC,YAAY,wBAAyB4R,OAAOjB,EAAWtd,gBAevE,IAAI5O,EAAU,EACVltB,IAAW24C,IACbzrB,GAjRqC,KAiRaksB,EAAWrd,gBAC7DnzB,EAAQjG,UAAUC,IAAIpK,KAEpBwH,IAAWi4C,IACb/qB,EArRqC,KAsRrCtkB,EAAQjG,UAAUC,IAAIpK,KAGxBoQ,EAAQjG,UAAUC,IAAIpK,IACtBoQ,EAAQzD,MAAMsjC,YAAY,sBAAuB,GAAGoR,EAAW75C,IAAW,OAC1E4I,EAAQzD,MAAMsjC,YAAY,sBAAuB,GAAGvb,QACpDtkB,EAAQzD,MAAMsjC,YAAY,0BAtBpBwP,IAAkBj4C,EACbq6C,OAAOjB,EAAWtd,eAEvB97B,IAAW24C,EACN0B,OAAOjB,EAAWrd,iBAEpB,UAkBV,CAACkc,EAAe1J,EAAgBoK,EAAiBS,EAAY39C,IAEhE,MAAM6+C,GAAsBv6C,EAAAA,EAAAA,IAAiByrB,IAE3C,MAAMhgB,EAASggB,EAAMhgB,OAEhBA,GAAWA,EAAO7I,UAAUwzB,SAAS39B,MAEtCmgD,IAAoBV,GACtBW,EAAmBX,GACnBa,EAAoBZ,IACXA,IAAmBW,GAC5BC,EAAoBZ,GAEtBoB,GAAe,OAGjB,OAAI79C,GAEAjC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAgBmZ,IAAKuU,EAAaztB,UAChDe,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GACXmZ,IAAMA,GAAQ4nC,EAAO5nC,EAAKgnC,GAAkBlgD,UAE5Ce,EAAAA,GAAAA,GAAC+gD,GAAK,CACJv6C,OAAQ24C,EACRtZ,QAASwZ,EACTrK,SAAUA,EACVhkC,WAAY4uC,EAAWxd,YACvB0S,iBAAkB2K,EAClB5K,kBAAmB2K,EACnBpqC,kBAAmBA,EACnB43B,cAAeA,EACf+H,eAAgBA,EAChBnxC,QAASA,EACToR,SAAUA,SAgElBlW,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GACXmZ,IAAKuU,EACL/gB,MAAO,yBAAyBi0C,EAAW7yB,QAC3Ci0B,gBAAiBF,EAAoB7hD,SAAA,EAErCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAiBlC,QAAS8G,IACzCo8C,EAAiBnhD,OAAS,IACzBmB,EAAAA,GAAAA,GAAA,OAAKvD,UrBvcuH,WqBuc7EkP,MAAO,WAAWi0C,EAAWvd,MAAM3yB,aAEnFswC,EAAiB9gD,KAAI,CAACsH,EAAQlI,IACzBkI,IAAW24C,EA1CrB,SAAqB34C,GACnB,MAAMmF,EAAQ1J,OAAWtE,GAAYsjD,EAAAA,GAAAA,GACnC,UAAUrB,EAAWxd,YAAY/yB,UACjC,yBAAyBuwC,EAAWxd,YAAY1yB,YAGlD,OACE1P,EAAAA,GAAAA,GAAA,OAEEmY,IAAMA,GAAQ4nC,EAAO5nC,EAAK3R,GAC1B/J,WAAWsC,EAAAA,GAAAA,GAAeC,GAAcA,IACxC2M,MAAOA,EAAM1M,UAEbe,EAAAA,GAAAA,GAAC+gD,GAAK,CACJv6C,OAAQA,EACRq/B,QAASwZ,EACTrK,SAAUA,EACVhkC,WAAY4uC,EAAWxd,YACvB0S,iBAAkB2K,EAClB5K,kBAAmB2K,EACnBpqC,kBAAmBA,EACnB43B,cAAeA,EACf+H,eAAgBA,EAChBnxC,QAASA,EACToR,SAAUA,KAhBPxO,EAoBX,CAee06C,CAAY/B,GArE3B,SAA4B34C,EAAgBlI,EAAeykB,GACzD,MAAMpX,GAAQs1C,EAAAA,GAAAA,GACZ,UAAUrB,EAAWvd,MAAMhzB,UAC3B,WAAWuwC,EAAWvd,MAAM3yB,YAExBjT,GAAYsC,EAAAA,GAAAA,GAChBC,GrB5YiiB,WqB8YjiB,SAAS+jB,KAGX,OACE/iB,EAAAA,GAAAA,GAAA,OAEEmY,IAAMA,GAAQ4nC,EAAO5nC,EAAK3R,GAC1B/J,UAAWA,EACXkP,MAAOA,EAAM1M,UAEbe,EAAAA,GAAAA,GAACmhD,GAAY,CACXx6C,MAAMywB,EAAAA,EAAAA,MAAW4Z,EAAAA,EAAAA,MAAaxqC,GAC9B03C,YAAaY,IAAWt4C,MAPrBA,EAWX,CAgDa46C,CAAmB56C,EAAQlI,EAAOA,EAAQ4hD,OAIzD,KC7ce,SAASmB,GAAiBC,EAFvB,GAGhB,MAAOC,EAAeC,IAAoB/vC,EAAAA,EAAAA,KAAS,IAC5CgwC,EAASC,IAAcjwC,EAAAA,EAAAA,KAAS,GASvC,MAAO,CAAE8vC,gBAAeE,UAASE,cAPZp7C,EAAAA,EAAAA,IAAiB5B,IACpC,MAAM,aAAEi9C,EAAY,UAAEtkB,EAAS,aAAE1jB,GAAiBjV,EAAEqN,OAEpDwvC,EAAiBlkB,EAAYgkB,GAC7BI,EAAWE,EAAetkB,EAAY1jB,EAAe0nC,MAIzD,C,0ECjBA,UAAgB,aAAa,WAAW,UAAY,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,KAAO,WAAW,aAAe,WAAW,gBAAgB,WAAW,aAAe,WAAW,OAAS,WAAW,QAAU,WAAW,aAAa,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,SAAW,WAAW,KAAO,WAAW,cAAc,WAAW,WAAa,WAAW,YAAY,WAAW,SAAW,WAAW,YAAY,WAAW,SAAW,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,kBAAkB,WAAW,cAAgB,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,WAAa,WAAW,sBAAsB,WAAW,kBAAoB,YCkCn2BO,GAAwB,IAAMhoC,EAAAA,EAoKpC,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAU4uC,gBAG3C,CACLn7C,MAHWywB,EAAAA,EAAAA,KAAWlkB,EAAQ4uC,EAAUt7C,QAIxCu7C,mBAAoB7uC,EAAO8uC,UAAUD,sBALrB9uC,EAjKFgvC,EAChBH,YACAn7C,OACAo7C,yBAEA,MAAM,SACJ37C,EAAQ,iBACR87C,EAAgB,YAChBC,EAAW,UACXC,EAAS,cACTC,EAAa,gBACbC,EAAe,aACf/sB,EAAY,gBACZmX,EAAe,oBACf6V,IACEl8C,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEP0qB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClC,MAAM,KAAE/F,GAASshD,EAEjB,GAAa,WAATthD,EAMF,OALA+hD,SACA7V,EAAgB,CACdlmC,OAAQs7C,EAAUt7C,OAClBq/B,QAASic,EAAUjc,UAKvBqc,IAEA1xC,YAAW,KACI,SAAThQ,EACF4F,EAAS,CAAE3D,GAAIq/C,EAAUt7C,SACP,YAAThG,GACT+0B,EAAa,CAAEvuB,OAAQ86C,EAAUt7C,OAAQ8V,UAAWwlC,EAAUxlC,cAzCrC,QA8CzBkmC,GAAiB9kD,EAAAA,EAAAA,KAAQ,KAC7B,KAAKsV,EAAAA,EAAAA,IAAS8uC,EAAUt7C,QAAS,OACjC,MAAM,OAAEA,EAAM,kBAAEi8C,EAAiB,cAAEC,GAAkBZ,EAC/CzP,EAAO1rC,GACP,UAAEg8C,GAActQ,GAAQ,CAAC,EACzBuQ,GAAW3W,EAAAA,EAAAA,IAAgBoG,GAE3BzJ,EAAmC,GAkDzC,OAhDK8Z,IACED,EAUH7Z,EAAQpqC,KAAK,CACXqkD,QAASA,KACPV,EAAY,CAAEzhB,OAAQl6B,EAAQs8C,eAAe,IAC7CR,EAAgB,CAAE5hB,OAAQl6B,EAAQi8C,mBAAmB,KAEvDt+C,MAAOlH,EAAK,kBAAmB2lD,GAC/B1+C,KAAM,eAfR0kC,EAAQpqC,KAAK,CACXqkD,QAASA,KACPT,EAAU,CAAE1hB,OAAQl6B,EAAQs8C,eAAe,IAC3CR,EAAgB,CAAE5hB,OAAQl6B,EAAQi8C,mBAAmB,KAEvDt+C,MAAOlH,EAAK,gBAAiB2lD,GAC7B1+C,KAAM,eAcRy+C,EACF/Z,EAAQpqC,KAAK,CACXqkD,QAASA,KACPR,EAAc,CAAE3hB,OAAQl6B,KAE1BrC,MAAOlH,EAAK,iBACZiH,KAAM,cACNsT,aAAa,IAGfoxB,EAAQpqC,KAAK,CACXqkD,QAASA,KACHH,GACFP,EAAY,CAAEzhB,OAAQl6B,IACtB87C,EAAgB,CAAE5hB,OAAQl6B,EAAQk8C,eAAe,MAEjDN,EAAU,CAAE1hB,OAAQl6B,IACpB87C,EAAgB,CAAE5hB,OAAQl6B,EAAQk8C,eAAe,MAGrDv+C,MAAOlH,EAAKylD,EAAgB,UAAY,aACxCx+C,KAAMw+C,EAAgB,OAAS,cAC/BlrC,aAAckrC,IAIX9Z,IACN,CAAC3rC,EAAM6kD,EAAWn7C,IAEfo8C,EAA0C,SAAnBjB,EAAUthD,KAAkB,eAClC,YAAnBshD,EAAUthD,KAAqB,UAAY,OACzCwiD,EAAuC,YAAnBlB,EAAUthD,MAAyC,WAAnBshD,EAAUthD,KAE9DyiD,GAASvlD,EAAAA,EAAAA,KAAQ,KACrB,MAAMwlD,EAAgC,WAAnBpB,EAAUthD,MAAqBshD,EAAUpf,MAAMQ,aAAaggB,WACzE5sB,EAAQ,EAAC6sB,EAAAA,GAAAA,GAAiBlmD,EAAuB,IAAjB6kD,EAAU9rB,OAKhD,OAJIktB,GACF5sB,EAAM93B,KAAKvB,EAAK,eAGXq5B,EAAMxM,KAAK,SACjB,CAAC7sB,EAAM6kD,IAEV,OACE9hD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,WAAWsC,EAAAA,GAAAA,GACT,iCACAC,GAAOokD,eACNtB,EAAUY,eAAiBZ,EAAUW,oBAAsBzjD,GAAOqkD,SAErEvmD,QAAS4qB,EACT47B,aAAiC,SAAnBxB,EAAUthD,MAAmBshD,EAAUzQ,UACnDrxC,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAClBlS,SAAUyQ,EAAUzQ,SACpB50C,UAAWuC,GAAOwkD,aAClB/iD,KAAMohD,GACNE,mBAAoBA,EACpB0B,eAAa,SAEb9lD,EACJ6kD,eAAgBA,EAChBkB,mBAAiB,EACjBC,oBAAqB3kD,GAAO4kD,WAAW3kD,UAEtC+T,EAAAA,EAAAA,IAAS8uC,EAAUt7C,SAClBxG,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdpnD,WAAWsC,EAAAA,GAAAA,GAAeikD,GAAqBhkD,GAAO8kD,mBACtDpjB,OAAQohB,EAAUt7C,OAClBu9C,kBAAgB,EAChBd,OAAQA,EACRF,WAAYA,EACZ9F,WAAS,EACTh2C,eAAa,KAGfjH,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZvnD,WAAWsC,EAAAA,GAAAA,GAAeikD,GAAqBhkD,GAAO8kD,mBACtD98C,OAAQ86C,EAAUt7C,OAClBy8C,OAAQA,EACRF,WAAYA,EACZ9F,WAAS,KApCR6E,EAAUt7C,YCkHrB,IAAelK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAYC,IAC9B,MAAM,UAAEk/B,GAAcl/B,GACd+wB,aAAa,UAAEyO,KAAgBp/B,EAAAA,EAAAA,KAAeJ,IAChD,QACJ2yB,EAAO,MAAEqK,EAAK,WAAE+T,EAAU,UAAE1sB,GAC1Bmb,GAAa,CAAC,EACZhQ,EAAQmD,GAAUiD,EAAAA,EAAAA,KAAgB51B,EAAQA,EAAO+jB,cAAgB4O,QAAWloC,EAElF,MAAO,CACLkoC,UACAqK,QACAqE,oBAAqBnC,EAAWoC,kBAAoBpC,EAAWqC,yBAC/D/R,MAAOA,GAAS,YAAaA,EAAQA,OAAQ/kC,EAC7CsmD,aACA1sB,YACAwqB,mBAAoB7uC,EAAO8uC,UAAUD,mBACrCpf,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MAhBjCD,EA1NpB,UAAwB,MACtByvB,EAAK,oBACL6R,EAAmB,MACnBrE,EAAK,WACL+T,EAAU,UACV1sB,EAAS,qBACToL,IAEA,MAAM,kBACJuhB,EAAiB,oBAAE3B,EAAmB,gBAAE4B,IACtC99C,EAAAA,EAAAA,OAEG+9C,EAAiBC,EAAkBC,IAAsBhnD,EAAAA,EAAAA,IAAQ,IACjEinD,EAAmBC,EAAoBC,IAAwBnnD,EAAAA,EAAAA,IAAQ,IACvEupC,EAAO6d,IAAYjzC,EAAAA,EAAAA,IAAS,IAE7BxU,GAAOD,EAAAA,EAAAA,KAEPoG,EAAStC,QAAQ4hC,GACjBiiB,EAAY7jD,QAAQ4hC,GAAO1M,OAAU0M,EAAM1M,KAAOue,GAAuBzP,EAAAA,GAAAA,OACzE,WAAEuL,EAAa,EAAC,eAAEE,EAAiB,GAAM7N,GAAOwN,OAAS,CAAC,EAE1D0U,EAAyBliB,GAAOkO,UAAYP,EAAawU,EAAAA,IACzDC,EAA4BvU,EAAiBwU,EAAAA,IAC7CC,EAAmB3U,EAAa4U,EAAAA,IAChCC,EAAYN,GAA0BE,GAA6BE,GAEzEznD,EAAAA,EAAAA,KAAU,KACH6F,IACHshD,EAAS,IACTJ,IACAE,OAED,CAACphD,IAEJ,MAAM+hD,GAAe52B,EAAAA,GAAAA,IAAqB,KACxC41B,EAAgB,CAAE5sB,WAAW,MAC5B,GAvCoB,KAuCE,IAEzBh6B,EAAAA,EAAAA,KAAU,KACR4nD,MACC,CAACf,EAAiBG,EAAmB1d,EAAOse,IAE/C,MAAMC,GAAc1nD,EAAAA,EAAAA,KAAQ,IACnBwyC,GAAOmV,KA6JlB,SAA2Bd,GACzB,MAAO,CAACe,EAAqBC,KAC3B,GAAIhB,EAAmB,CACrB,MAAMiB,EAAuB,SAAXF,EAAE9kD,MAAmB8kD,EAAEjU,SACnCoU,EAAuB,SAAXF,EAAE/kD,MAAmB+kD,EAAElU,SACzC,GAAImU,IAAcC,EAChB,OAAQ,EAEV,IAAKD,GAAaC,EAChB,OAAO,CAEX,CAEA,OAAOF,EAAEvvB,KAAOsvB,EAAEtvB,KAEtB,CA5KuB0vB,CAAkBnB,KACpC,CAACA,EAAmBrU,IAEjByV,EAAoBP,GAAavmD,OAAmC,EAA1BH,KAAKC,IAAI0xC,EAAY,GAE/DuV,EAAkB9kD,QAAQskD,GAAavmD,SAAWumD,EAAYvmD,OAASwxC,GAAcsU,EAErFkB,GAAiBt/C,EAAAA,EAAAA,IAAgB,KAChCm8B,GAAOjgC,SAAqB9E,IAAfsmD,GAClBC,EAAkB,CAChB19C,OAAQk8B,EAAMl8B,OACdq/B,QAASnD,EAAMjgC,GACfqd,OAAQmkC,EACRM,kBAAmBA,QAAqB5mD,EACxCymD,gBAAiBA,QAAmBzmD,EACpCkpC,cAIE,aAAE8a,EAAY,cAAEJ,GAAkBF,KAElCtjB,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCg8C,OAGIuD,GAAkEpoD,EAAAA,EAAAA,KAAQ,IACvE,EAAGkZ,YAAWxT,OAAQ2iD,MAC3BjnD,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLglD,OAAK,EACLvlD,KAAK,OACLmF,MAAM,cACNnJ,WAAWsC,EAAAA,GAAAA,IAAgBgnD,GAAc,SAAU/mD,GAAOinD,WAAYjnD,GAAOknD,WAC7EC,MAAOJ,EACPjpD,QAAS8Z,EACTE,UAAW7Z,EAAK,UAAUgC,SAAA,EAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMijD,EAAoB,gBAAkB,SAAU9nD,UAAWuC,GAAOonD,YAC9EpmD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UAAWuC,GAAOqC,eAGvC,CAACkjD,EAAmBtnD,IAEvB,OACE6B,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASm6B,EACTthC,UAAU,uBACVqH,iBAAkB9E,GAAOqnD,UACzB3gD,QAAM,EAAAzG,SAAA,CAELimD,IACCpmD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOuE,OAAOtE,SAAA,CAC3B2lD,IACC9lD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOsnD,cAAcrnD,SAAA,EACnCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,IAAgBqlD,GAAmBplD,GAAOqT,SAAUrT,GAAOknD,WACtEzlD,KAAK,OACLmF,MAAM,oBACNogD,OAAK,EACLlpD,QAASwnD,EAAmBrlD,SAE3BhC,EAAK,iBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeqlD,GAAmBplD,GAAOqT,SAAUrT,GAAOknD,WACrEzlD,KAAK,OACLmF,MAAM,oBACNogD,OAAK,EACLlpD,QAASunD,EAAiBplD,SAEzBhC,EAAK,iBAIX6nD,IACChmD,EAAAA,GAAAA,IAAC2Y,GAAAA,EAAY,CACXhb,UAAWuC,GAAOqmD,KAClB3tC,QAASouC,EACTnuC,UAAU,QAAO1Y,SAAA,EAEjBH,EAAAA,GAAAA,IAAC8Y,GAAAA,EAAQ,CAAC1T,KAAK,gBAAgBpH,QAAS0nD,EAAmBvlD,SAAA,CACxDhC,EAAK,mBACLsnD,IACCvkD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAWuC,GAAOunD,YAGzCznD,EAAAA,GAAAA,IAAC8Y,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAAS2nD,EAAqBxlD,SAAA,CACnDhC,EAAK,eACJsnD,IACAvkD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAWuC,GAAOunD,cAK5CvB,IACChlD,EAAAA,GAAAA,GAACwmD,GAAAA,EAAW,CAAC/pD,UAAWuC,GAAOynD,OAAQ5/C,MAAOggC,EAAOz0B,SAAUsyC,QAIrE5lD,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOqY,SAAUkqC,GAAiBviD,GAAO0nD,YAAa,iBAChFC,SAAUhF,EAAa1iD,SAAA,CAEtB0lD,IAAcptB,IAAcsP,GAAS/lC,SAASskD,GAAavmD,UAC1DmB,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO06B,KAAM16B,GAAO4nD,cAAc3nD,UAC9D8B,EAAAA,GAAAA,GACC9D,EAAK0lC,EAAuB,qBAAuB,oBACnD,CAAC,kBAAmB,aAIxBpL,GAAaz2B,QAAQ+lC,EAAMhoC,UAAYumD,GAAavmD,SACpDmB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO06B,KAAKz6B,SACzBhC,EAAK,qCAGV6B,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbC,MAAO1B,EACP2B,WAAYlB,EAAe5mD,SAAA,CAE1BmmD,GAAalmD,KAAK8nD,IACjB,MAAMC,EAAgC,YAAdD,EAAKxmD,KAAqBwmD,EAAK1qC,UACrC,WAAd0qC,EAAKxmD,KAAoBwmD,EAAKnhB,QAAU,OAC5C,OACE7lC,EAAAA,GAAAA,GAACiiD,GAAS,CAAwDH,UAAWkF,GAA7D,GAAGA,EAAKxgD,UAAUwgD,EAAKhxB,QAAQixB,QAGlD1vB,GAAan3B,MAAMC,KAAK,CAAExB,OAAQ8mD,IAAoBzmD,KAAI,CAACgoD,EAAGC,KAC7DnnD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAGP5H,UAAU,+DACVoJ,UAAQ,EAAA5G,UAERe,EAAAA,GAAAA,GAAConD,GAAAA,EAAmB,KAJf,eAAeD,OAOvBvB,IACC5lD,EAAAA,GAAAA,GAAA,OAA6BvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO06B,KAAM16B,GAAOqoD,YAAYpoD,SACpFhC,EAAK,oCADC,4BAMf+C,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOwE,OAAQ,kBAAkBvE,UAC9De,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAe,wBAAyBC,GAAOgd,OAC1D9a,QAAM,EACNpE,QAASihC,EAAY9+B,SAEpBhC,EAAK,eAKhB,KCpEA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAYC,IAC9B,MAAM,4BACJ2jB,EAA6BoN,aAAa,QACxC4B,EAAO,OAAEr/B,EAAM,mBAAEmsC,EAAkB,OAAE3pC,KAErCsK,EAAAA,EAAAA,KAAeJ,GACbwvB,EAAQl8B,GAAUq/B,GAAUiD,EAAAA,EAAAA,KAAgB51B,EAAQ1M,EAAQq/B,QAAWloC,EACvEysB,GAAgB4M,EAAAA,EAAAA,KAA+B9jB,EAAQ,yBAE7D,MAAO,CACL9P,QAAQ67C,EAAAA,EAAAA,KAAwB/rC,GAChC2jB,8BACArwB,OAAQA,EACRq/B,UACAnD,QACA15B,SACAohB,gBACAuoB,wBAjBgB1/B,EAnIpB,UAAqB,OACnB7P,EAAM,OACNoD,EAAM,QACNq/B,EAAO,MACPnD,EAAK,OACL15B,EAAM,4BACN6tB,EAA2B,cAC3BzM,EAAa,mBACbuoB,IAEA,MAAM,iBAAEuP,EAAgB,wBAAEoF,EAAuB,YAAEC,IAAgBlhD,EAAAA,EAAAA,MAE7DpJ,GAAOD,EAAAA,EAAAA,MACNwqD,EAAeC,IAAoBh2C,EAAAA,EAAAA,SAAmC9T,IACtEyX,EAAmBC,EAAiBC,IAAoBhY,EAAAA,EAAAA,IAAQ,IAEjE,cAAEuR,EAAa,UAAEs0B,GAAcV,GAAcC,GAC7Ckd,EAAale,KACbgmB,GAAaxuB,EAAAA,EAAAA,GAAsB91B,GACnCu3B,GAAoBzB,EAAAA,EAAAA,GAAsBrqB,GAC1C0wC,GAAarmB,EAAAA,EAAAA,GAAsB1yB,GACnCk0B,GAAaxB,EAAAA,EAAAA,GAAsBlwB,GACnCowB,EAAmBt4B,QAAQspB,IAAkByM,IAEnDt5B,EAAAA,EAAAA,KAAU,KACH6F,IACHqkD,OAAiB9pD,GACjB2X,OAED,CAAClS,KAEJ7F,EAAAA,EAAAA,KAAU,KACR,IAAK6F,EACH,QAGF02B,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,MACLC,EAAAA,EAAAA,MACAF,OAED,CAAC32B,IAEJ,MAAM26B,GAAcv7B,EAAAA,EAAAA,KAAY,KAC9B0/C,MACC,CAACA,IAEEyF,GAAwBphD,EAAAA,EAAAA,IAAiBqhD,IAC7CH,EAAiBG,GACjBvyC,OAGIwyC,GAAyBthD,EAAAA,EAAAA,IAAgB,KAC7C+O,IACAmyC,OAAiB9pD,MAGbmqD,GAAoBvhD,EAAAA,EAAAA,IAAgB,KACnCs/B,GACL0hB,EAAY,CAAE1hB,UAASr/B,cA8BzB,OA3BAjJ,EAAAA,EAAAA,KAAU,IAAO6F,GAASm7B,EAAAA,EAAAA,IAAsB,KAC9CR,YACGpgC,GAAY,CAACogC,EAAa36B,KAE/B7F,EAAAA,EAAAA,KAAU,KACJ67B,IAAqBsuB,GAActkD,GAAUoD,GAAU28B,QAAwBxlC,IAAXqL,KACtE6xB,EAAAA,EAAAA,IAnFqB,IAmFoBC,EAAAA,KzBrGxC,SACL4F,EACA13B,EACA++C,EACAl5C,EACAmC,GAEA,MAAQxF,QAASuvB,GAAc3wB,GAASpB,EAAQ03B,GAChD,IAAK3F,EACH,OAEF,MAAQ1rB,MAAO2e,EAAate,OAAQqe,GAAiBiN,EAAAA,EAAWlrB,MAChE,IAAMT,MAAO+rB,EAAS1rB,OAAQ2rB,GAAarqB,EAE3C,MAAM/O,EAAW+rB,GAhBE,IAkBnB,GAAI/rB,EAAU,CACZm5B,EAAUpN,EAAc,EAAIkS,GAC5B7E,EAAWtN,EAAekS,GAAgB,EAAIC,GAE9C,MAAM8nB,EAAiBC,iBAAiBpgD,SAASqgD,iBAAiBC,iBAAiB,sBAC/EH,IACF3sB,GAAY+sB,WAAWJ,GAE3B,CAEA,MAAMzsB,EAASt5B,EAAWi+B,IAAiBlS,EAAcoN,GAAW,EAC9DI,EAAQv5B,EAAWi+B,IAAiBnS,GAAgBsN,EAAW4E,KAAkB,GAGrFzZ,IAAKmV,EAASnc,KAAMoc,EAAUvsB,MAAOwsB,EAAWnsB,OAAQosB,GACtDf,EAAUlb,wBAERwc,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhCpf,EAAAA,EAAAA,KAAgB,KACd,MAAMhT,EAAQH,GAAY+F,GAAiBk5C,GAAQl5C,IACnD4tB,EAAAA,EAAAA,IAAYxzB,EAAO,CACjBud,IAAK,GAAGgV,MACRhc,KAAM,GAAG+b,MACTlsB,MAAO,GAAG+rB,MACV1rB,OAAQ,GAAG2rB,MACXtM,UAAW,eAAesN,QAAqBC,iBAA8BC,MAAeC,OAG9F,MAAMnxB,EAAYxD,SAASk1B,eAAe,eAC1C1xB,EAAUxB,YAAYZ,GACtBpB,SAAS+a,KAAKzZ,UAAUC,IAAI,oBAE5B6S,EAAAA,EAAAA,KAAgB,MACdwgB,EAAAA,EAAAA,IAAYxzB,EAAO,CACjB8lB,UAAW,KAGbve,YAAW,MACTyL,EAAAA,EAAAA,KAAgB,KACV5Q,EAAUsxB,SAAS1zB,IACrBoC,EAAUuxB,YAAY3zB,GAExBpB,SAAS+a,KAAKzZ,UAAU0Z,OAAO,wBAnEd,IAqEGiY,EAAAA,UAG9B,CyBmCM+B,CAAer2B,EAAQwC,EAAQm6B,EAAWt0B,EAAe+wC,EAAWxd,cAElEhJ,GAAoBsuB,IAAetkD,GAAUm8C,GAAc5kB,QAAoCh9B,IAAf+8B,KAClFG,EAAAA,EAAAA,IAvFqB,IAuFoBC,EAAAA,KzBpCxC,SACL4F,EACA13B,EACA6F,GAEA,MAAQrD,QAASsxB,GAAY1yB,GAASpB,EAAQ03B,GAExC3F,EAAYlzB,SAASk1B,eAAe,eAAgB7yB,cACxD,IAAIlL,OAAuBA,QAAkBA,OAAuBA,MAEtE,IAAK+7B,IAAc+B,EACjB,OAEF,MACEtW,IAAKmV,EAASnc,KAAMoc,EAAUvsB,MAAOwsB,EAAWnsB,OAAQosB,GACtDf,EAAUlb,yBAEZ2G,IAAKgV,EAAOhc,KAAM+b,EAAQlsB,MAAO+rB,EAAS1rB,OAAQ2rB,GAChDyB,EAAQjd,wBAENwoC,EAAgB9sB,EAASH,EAAU,GAAMQ,EAAWC,EAAY,GAChEysB,EAAgB9sB,EAAQH,EAAW,GAAMM,EAAUG,EAAa,GAChEysB,EAAWntB,EAAUS,EACrB2sB,EAAWntB,EAAWS,GAE5B7f,EAAAA,EAAAA,KAAgB,KACd,MAAMhT,EAAQH,GAAY+F,IAC1B4tB,EAAAA,EAAAA,IAAYxzB,EAAO,CACjBud,IAAK,GAAGmV,MACRnc,KAAM,GAAGoc,MACTvsB,MAAO,GAAGwsB,MACVnsB,OAAQ,GAAGosB,QAGb,MAAM2sB,EAAS3/C,GAAYg0B,EAAQpzB,SAAK/L,GAAW,GAC7C+qD,EAAa/sB,EAAUG,EAAa,EAAKD,EAAY,GAC3DY,EAAAA,EAAAA,IAAYgsB,EAAQ,CAClBjiC,IAAK,GAAGkiC,MACRlpC,KAAM,GAAGoc,MACTvsB,MAAO,GAAGwsB,MACVnsB,OAAQ,GAAGmsB,QAGb,MAAMxwB,EAAYxD,SAASk1B,eAAe,eAC1C1xB,EAAUxB,YAAYZ,GACtBpB,SAAS+a,KAAK/Y,YAAY4+C,GAC1B5gD,SAAS+a,KAAKzZ,UAAUC,IAAI,oBAE5B6S,EAAAA,EAAAA,KAAgB,MACdwgB,EAAAA,EAAAA,IAAYxzB,EAAO,CACjB8lB,UAAW,eAAes5B,QAAmBC,iBAA4BC,MAAaC,QAGxF/rB,EAAAA,EAAAA,IAAYgsB,EAAQ,CAClB15B,UAAW,eAAes5B,QAAmBC,iBAA4BC,KACzE1qB,QAAS,MAGXrtB,YAAW,MACTyL,EAAAA,EAAAA,KAAgB,KACV5Q,EAAUsxB,SAAS1zB,IACrBoC,EAAUuxB,YAAY3zB,GAGpBpB,SAAS+a,KAAK+Z,SAAS8rB,IACzB5gD,SAAS+a,KAAKga,YAAY6rB,GAG5B5gD,SAAS+a,KAAKzZ,UAAU0Z,OAAO,wBA9Id,IAgJGiY,EAAAA,UAG9B,CyBpCMgD,CAAeyhB,EAAY7kB,EAAYC,MAExC,CACDvB,EACAvqB,EACA8rB,EACAv3B,EACAskD,EACA9H,EAAWxd,YACXe,EACA38B,EACA+4C,EACAv2C,EACA0xB,KAIA57B,EAAAA,GAAAA,IAACiiB,GAAAA,EAAc,CACbte,GAAG,cACHhG,U1BjJiB,W0BkJjB2G,OAAQA,EACRw8B,0BAAwB,EACxBC,kBAAmBhJ,EAA4B53B,SAAA,EAE/Ce,EAAAA,GAAAA,GAAA,OAAKvD,U1BtJwD,W0BsJ5BK,QAASihC,KAC1C/9B,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,U1BxJ+I,W0ByJ/Ioa,OAAK,EACLpW,KAAK,UACLmF,MAAM,oBACNkR,UAAW7Z,EAAK,SAChBH,QAASihC,EAAY9+B,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGbtB,EAAAA,GAAAA,GAAC2oD,GAAW,CACVvlD,OAAQA,EACRgS,kBAAmBA,EACnBJ,SAAU8yC,EACVlkD,QAASm6B,EACTiX,SAAU2S,KAGZ3nD,EAAAA,GAAAA,GAAC4oD,GAAuB,CACtBxlD,OAAQgS,EACRstB,MAAO8kB,EACP5jD,QAASikD,KAEX7nD,EAAAA,GAAAA,GAAC6oD,GAAc,KACf7oD,EAAAA,GAAAA,GAACskC,GAAgB,KACjBtkC,EAAAA,GAAAA,GAAC8oD,GAAa,CAAC1lD,OAAQuvC,EAAoB/uC,QAAS0jD,MAG1D,K,gHC5HA,MAEMyB,GAAkB,KAAOlvC,EAAAA,EACzBmvC,GAAkB,wBAmRxB,IAAe1sD,EAAAA,EAAAA,KAhRwB2sD,EACrC7lD,SACA6zB,gBACAiyB,gBACAzC,SACA0C,oBACA1sD,YACA2sD,WACAC,iBACAC,qBACA1lD,UACAyN,sBACAlL,yBAEA,MAAM,WAAEojD,IAAeljD,EAAAA,EAAAA,MAEjBpJ,GAAOD,EAAAA,EAAAA,KACP0vB,GAAezd,EAAAA,EAAAA,MACfu6C,GAAoBv6C,EAAAA,EAAAA,MACpBw6C,GAAYx6C,EAAAA,EAAAA,MACZy6C,GAAiBz6C,EAAAA,EAAAA,OAChB06C,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBT,EAAUF,EAAepoD,QAAQ2lD,KAC3EqD,EAASC,IAAct4C,EAAAA,EAAAA,SAA6B9T,IACpDqsD,EAAaC,IAAkBx4C,EAAAA,EAAAA,IAAiB,IACjDsuB,EAAY+pB,EA7BK,EADD,EA+BhBI,EAAiBhB,EAAc/pB,QAAQwqB,EAAa,IAEpDQ,GAAc5jD,EAAAA,EAAAA,IAAgB,KAClC8iD,EAAe,QAEjBe,EAAAA,GAAAA,GAAoBX,EAAWrmD,GApCT,IAoCmB28B,EAA+BoqB,IACxEC,EAAAA,GAAAA,GAAoBV,EAAgBtmD,GApCb,IAoCuB28B,GAE9C,MAAMsqB,GAAmB9jD,EAAAA,EAAAA,IAAiB2M,IACxC,GAAK42C,EAIL,OAAOQ,EAAAA,EAAAA,KAAap3C,EAAQ42C,MAGxBS,GAAkBC,EAAAA,GAAAA,GAAYH,IAE7BI,EAAUC,IAAUhtD,EAAAA,EAAAA,KAAQ,KACjC,MAAMwV,GAAS89B,EAAAA,EAAAA,MACT2Z,EAAYz3C,EAAO03C,MAAM3hB,KACzB4hB,EAAmB33C,EAAO03C,MAAME,aAEhCp3C,EAAOi3C,EAAUb,GAEvB,IAAKp2C,IAAS62C,EACZ,MAAO,MAAC5sD,OAAWA,GAGrB,MAAMotD,EAAcf,EAAYgB,cAE1B9sD,EAASqsD,EACX5J,OAAOsK,OAAOV,GAAiB1sD,QAAO,CAACqtD,EAAKC,OAE1CC,EAAAA,EAAAA,IAAiB13C,EAAMy3C,OAAOxtD,EAAWktD,EAAiBf,KACrDiB,IAAeI,EAAMhnD,MAAM6mD,cAAcj4B,SAASg4B,KAEvDG,EAAIC,EAAM1oD,IAAM0oD,GAGXD,IACN,CAAC,GACFX,EAEJ,MAAO,CAAC5J,OAAO0K,KAAKntD,GAAQgB,IAAIupB,QAASvqB,KACxC,CAAC4rD,EAASE,EAAaO,IAEpBe,GAAwB/kD,EAAAA,EAAAA,IAAgB,KAC5CwjD,OAAWpsD,GACXssD,EAAe,OAGXsB,GAAqBhlD,EAAAA,EAAAA,IAAiB5B,IAC1C0kD,EAAe1kD,EAAEkjB,cAAchhB,UAG3B2kD,GAA0BjlD,EAAAA,EAAAA,IAAiB5B,IAC/CslD,EAAetlD,EAAEkjB,cAAchhB,UAG3B8hB,GAAgB8iC,EAAAA,GAAAA,GAA0B/+B,EAActpB,GAAS9E,IACrE,GAAIqrD,GAAeA,EAAY9qD,OAAS,EAAG,CACzC,MAAM8rD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAE9BjiC,EAAS2iD,GAAuB,IAAXrrD,EAAe,EAAIA,GACxCoV,EAAOi3C,EAAU3jD,GACnB0M,GAAMg4C,SACHnB,GAAiBhB,EAAW,CAAEviD,WACnC+iD,EAAW/iD,IAEXsiD,EAAmBtiD,EAEvB,IACC,IAAIgiD,MAAmB,GAEpB2C,GAAqBF,EAAAA,GAAAA,GAA0BjC,EAAmBpmD,GAAS9E,IAC3EmsD,GAAU5rD,QACZyqD,EAAmBQ,EAAUW,GAAoB,IAAXnsD,EAAe,EAAIA,MAE1D,IAAI0qD,MAAmB,GAEpBthC,GAAcnhB,EAAAA,EAAAA,IAAiBS,IACnC,MAAM2jD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAC9Bv1B,EAAOi3C,IAAY3jD,GACrB0M,GAAMg4C,SACHnB,GAAiBhB,EAAW,CAAEviD,WACnC+iD,EAAW/iD,GACXmjD,KAEAb,EAAmBtiD,MAIjB4kD,GAAiBppD,EAAAA,EAAAA,KAAY,CAACC,EAAYnE,KAC9C,MAAM4U,GAAS89B,EAAAA,EAAAA,MACTrqC,GAAOywB,EAAAA,EAAAA,KAAWlkB,EAAQzQ,GAChC,IAAKkE,EACH,OAGF,MAAMklD,EAASllD,KAASmlD,EAAAA,GAAAA,IAAcnlD,GAAQA,EAAKklD,YAASluD,GAgBrDyG,EAAU2nD,GAdjB,WACE,IAAKplD,EAAM,OACX,GAAIA,EAAKlE,KAAOw0B,EAAe,MAAO,CAACh6B,EAAK,sBAC5C,IAAI6uD,EAAAA,GAAAA,IAAcnlD,GAChB,MAAO,EAACqlD,EAAAA,EAAAA,IAAe/uD,EAAM0J,IAG/B,MAAMslD,GAAaC,EAAAA,EAAAA,KAAiBh5C,EAAQvM,EAAKlE,IACjD,MAAO,EACL0pD,EAAAA,EAAAA,IAAclvD,EAAM0J,EAAMslD,IAC1BltD,EAAAA,GAAAA,IAAeqtD,EAAAA,EAAAA,IAAazlD,EAAMslD,GAAY,IAAS,UAE3D,CAEsCI,IAAiB,GAEvD,OACErsD,EAAAA,GAAAA,GAACssD,GAAAA,EAAU,CAET7vD,UAAWusD,GACX7kD,OAAOnE,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC5lD,KAAMA,EAAM6lD,gBAAiBX,IACnDY,eACEzsD,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAMA,EACN6lD,gBAAiBX,EACjBprD,KAAK,WAGT2D,SAAUA,EACV2nD,kBAAmBA,EACnB7oC,QAAM,EACNvX,MAAO,SAASu+C,EAAiB5rD,GAASouD,EAAAA,SAE1C5vD,QAASA,IAAM4qB,EAAYjlB,IAftBA,KAkBR,CAACw0B,EAAeh6B,EAAMitD,IA4FzB,OACElqD,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACR3G,WAAWsC,EAAAA,GAAAA,GAAe,mBAAoBtC,GAC9CmH,QAASA,EACTyN,oBAAqBA,EACrBlL,mBAAoBA,EAAmBlH,UAEvCe,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CAACC,UAAWA,EAAWz+B,KAAK,YAAY0pC,eAAe,yBAAwB/rC,SACvFA,IA7QgB,IA8QR8gC,GAlGXjhC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAeyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAChEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAW7Z,EAAK,QAASH,QAASwuD,EAAsBrsD,UACvGe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAEbtB,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAKuxC,EACL7iD,MAAOmjD,EACP53C,SAAUo5C,EACVmB,UAAWhB,EACXiB,YAAazD,QAGjBrqD,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACb1uC,IAAKqxC,EACL/sD,UAAU,4BACVqqD,MAAO2D,EACPoC,yBAAuB,EACvBC,UA3LmB,IA2LPrC,GAAU5rD,QAAU,GAChC8tD,UAAWhB,EAAmB1sD,SAAA,EAE5BwrD,IAAYzqD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IACrBtC,GAAUvrD,KAAI,CAAC8tD,EAAS7F,KACvBnnD,EAAAA,GAAAA,GAACssD,GAAAA,EAAU,CAET7vD,UAAWusD,GAEXlsD,QAASA,IAAMwsD,EAAmBQ,EAAUkD,GAC5CrhD,MAAO,QArMQ,IAqMCu+C,EAAiB/C,QACjCsF,eACEzsD,EAAAA,GAAAA,GAACitD,GAAAA,EAAS,CACRxsD,KAAMsoD,GACNoC,MAAOT,EAAOsC,GACdvwD,UAAU,aACVywD,gBAAgB,sBAGpB/oD,OAAOpD,EAAAA,GAAAA,GAAW2pD,EAAOsC,GAAS7oD,QAb7B,GAAG2lD,KAAWkD,cAuB3BluD,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAeyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAChEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAK,SAChBH,QAAS8G,EAAQ3E,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAKsxC,EACL5iD,MAAO4/C,EACPr0C,SAAUm5C,EACVoB,UAAWhkC,EACXikC,YAAazD,OAGhBQ,GAAa9qD,QACZmB,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACb1uC,IAAKuU,EACLjwB,UAAU,4BACVqqD,MAAO6C,EACPwD,aAAc,IAAInE,KAClBjC,WAAY6C,EACZiD,yBAAuB,EACvBC,UAAW5D,EAAcrqD,OAAS6tD,EAAAA,IAClCC,UAAWhkC,EAAc1pB,SAExB0qD,EAAYzqD,IAAI0sD,KAEjBjC,IAAgBA,EAAY9qD,QAC9BmB,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,aAAYwC,SAAEhC,EAAK,iCAEhC+C,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,cC/LlB,IAAezwD,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACE03C,OAAO,QACLwC,EAAO,iBACPC,GACD,cACDp2B,GACE/jB,EAEJ,MAAO,CACLo6C,cAAeF,EAAQvtD,OACvB0tD,gBAAiBH,EAAQI,SACzBC,UAAWJ,EAAiBxtD,OAC5B4mC,WAAYvzB,EAAO81B,aAAaR,QAChCvR,mBAfchkB,EA9E+By6C,EACjDtqD,SACA6zB,gBACAq2B,gBACAC,kBACAE,YACAhnB,aACAjG,SAASmtB,EAAAA,IACTlxD,YACA0sD,oBACAC,WACAwE,oBACAhqD,UACAyN,sBACAlL,yBAEA,MAAOsgD,EAAQoH,IAAap8C,EAAAA,EAAAA,IAAS,IAC/Bm1B,GAAMlpC,EAAAA,EAAAA,KAAQ,KAClB,IAAK0F,EAAQ,OAEb,IAAI0qD,EAAcL,GAAa,GAC3Bx2B,IACF62B,GAAcpnB,EAAAA,GAAAA,IAAO,CAACzP,KAAkB62B,KAI1C,MAAM56C,GAAS89B,EAAAA,EAAAA,MAETgO,EAAU,IACVsO,GAAiB,MAChB7G,GAAU8G,GAAoB,IACnC/sB,QAAQ/9B,IACR,MAAMiR,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQzQ,GAC1B4vC,GAAOC,EAAAA,EAAAA,KAAWp/B,EAAQzQ,GAChC,GAAI4vC,KAAS0b,EAAAA,EAAAA,IAAc1b,GAAO,OAAO,EAEzC,MAAM2b,GAAeC,EAAAA,EAAAA,KAAmB/6C,EAAQzQ,GAEhD,OAAOiR,KAAUs6C,IAAgB5C,EAAAA,EAAAA,IAAiB13C,OAAM/V,OAAWA,EAAWqwD,OAG1EE,GAASC,EAAAA,GAAAA,IACbxnB,EAAAA,GAAAA,IAAmB,CACjBC,KAAKF,EAAAA,GAAAA,IAAO,IACNzP,EAAgB,CAACA,GAAiB,MACnC+nB,KACCvY,GAAc,KAEpBI,MAAO4f,SAET9oD,EACAmwD,EACA72B,GAGF,OAAOm3B,EAAAA,EAAAA,KAAoBl7C,EAAQg7C,EAAQ1tB,KAC1C,CAACitB,EAAWx2B,EAAeq2B,EAAe7G,EAAQ8G,EAAiB9mB,EAAYjG,EAAQp9B,IAEpFirD,GAAelgB,EAAAA,GAAAA,GAAiBvH,GAAK,GAE3C,OACE5mC,EAAAA,GAAAA,GAACipD,GAAgB,CACf7lD,OAAQA,EACR3G,UAAWA,EACXysD,cAAemF,EACfp3B,cAAeA,EACfkyB,kBAAmBA,EACnB1C,OAAQA,EACR4C,eAAgBwE,EAChBzE,SAAUA,EACVE,mBAAoBsE,EACpBhqD,QAASA,EACTyN,oBAAqBA,EACrBlL,mBAAoBA,QCQ1B,IAAe7J,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,WAAE+D,EAAU,QAAE4uB,IAAYvyB,EAAAA,EAAAA,KAAeJ,GAAQ2/B,gBACjDyb,EAAgBr3C,GAAcA,EAAWpY,OAAS,EACxD,MAAO,CACLo4B,cAAe/jB,EAAO+jB,cACtBs3B,gBAAiBt3C,GAAYpY,QAAU,GAAK,EAC5C2vD,QAAS1tD,QAAQ+kC,GACjByoB,kBAPgBr7C,EA3FsCw7C,EACxDrrD,SACA6zB,gBACAs3B,iBACAC,UACAF,mBAEA,MAAM,gCACJI,EAA+B,sBAC/BC,EAAqB,gBACrBC,EAAe,uBACfC,EAAsB,aACtBC,EAAY,iBACZrqB,IACEp+B,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEP+xD,GAAmB71B,EAAAA,EAAAA,GAAsBs1B,GAAS,IACjD9lB,EAASsmB,EAAaC,IAAiB3xD,EAAAA,EAAAA,MAC9CC,EAAAA,EAAAA,KAAU,KACJ6F,GACF4rD,MAED,CAAC5rD,EAAQ4rD,IAEZ,MAAME,GAAwB1sD,EAAAA,EAAAA,KAAY,CAAC2sD,EAAqBr7C,KAC9D,MAAM+3C,EAASsD,IAAgBl4B,EAC/B,GAAIu3B,EAAJ,CACEM,EAAa,CAAEM,SAAUD,IACzB,MAAMj8C,GAAS89B,EAAAA,EAAAA,MACf,IAAIh+B,EAAAA,EAAAA,IAASm8C,GACX1qB,EAAiB,CACft8B,QAAS0jD,EACL5uD,EAAK,sDACLA,EACA,iBACAoyD,EAAAA,EAAAA,KAAuB/c,EAAAA,EAAAA,KAAWp/B,EAAQi8C,WAG3C,CACL,MAAMz7C,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQi8C,GAChC,IAAKz7C,EAAM,OAEX+wB,EAAiB,CACft8B,QAASlL,EAAK,iBAAiBqyD,EAAAA,EAAAA,IAAaryD,EAAMyW,KAEtD,CAEF,MAEA,GAAIm4C,EAAQ,CACV,MAAM1jD,EAAUlL,EACdsxD,EACI,iDACA,iDAGNM,IACApqB,EAAiB,CAAEt8B,WACrB,KAAO,CACL,MAAMnB,EAASmoD,EACTnC,EAAUl5C,EAAW2U,OAAO3U,QAAYnW,EAC1C2wD,EACFK,EAAsB,CAAE3nD,SAAQgmD,YAEhC0B,EAAgC,CAAE1nD,SAAQgmD,WAE9C,IACC,CAAC/1B,EAAes3B,EAAgBC,EAASvxD,EAAMqxD,IAE5CvwB,GAAcv7B,EAAAA,EAAAA,KAAY,KAC9BosD,MACC,CAACA,IAEJ,GAAKxrD,GAAWslC,EAIhB,OACE1oC,EAAAA,GAAAA,GAAC0tD,GAAe,CACdtqD,OAAQA,EACR3G,UAAWsyD,EAAmB,4BAAyBpxD,EACvDwrD,kBAAmBlsD,EAAKqxD,EAAe,YAAc,iBACrDV,kBAAmBsB,EACnBtrD,QAASm6B,EACT1sB,oBAAqB49C,QCtD3B,IAAe3yD,EAAAA,EAAAA,KA/C4BizD,EACzCC,qBAEA,MAAMpsD,EAAStC,QAAQ0uD,IAAmBA,EAAexoD,SACnD,kBACJyoD,EAAiB,uBACjBC,IACErpD,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MAEN0rC,EAASsmB,EAAaC,IAAiB3xD,EAAAA,EAAAA,MAC9CC,EAAAA,EAAAA,KAAU,KACJ6F,GACF4rD,MAED,CAAC5rD,EAAQ4rD,IAEZ,MAAME,GAAwB1sD,EAAAA,EAAAA,KAAY,CAAC2sD,EAAqBr7C,KAC9D27C,EAAkB,CAChBzoD,OAAQmoD,EACRr7C,WACAkF,KAAMw2C,EAAgBx2C,KACtB22C,MAAOH,EAAgBG,UAExB,CAACF,EAAmBD,IAEjBzxB,GAAcv7B,EAAAA,EAAAA,KAAY,KAC9BktD,MACC,CAACA,IAEJ,GAAKtsD,GAAWslC,EAIhB,OACE1oC,EAAAA,GAAAA,GAAC0tD,GAAe,CACdtqD,OAAQA,EACR+lD,kBAAmBlsD,EAAK,aACxBujC,OAAQgvB,GAAgBhvB,OACxBotB,kBAAmBsB,EACnBtrD,QAASm6B,EACT1sB,oBAAqB49C,OCR3B,IAAe3yD,EAAAA,EAAAA,KArCgCszD,EAC7CC,+BAEA,MAAM,sBAAEC,EAAqB,cAAEC,IAAkB1pD,EAAAA,EAAAA,MAC3CpJ,GAAOD,EAAAA,EAAAA,KAEPoG,EAAStC,QAAQ+uD,IAChBnnB,EAASsmB,EAAaC,IAAiB3xD,EAAAA,EAAAA,MAC9CC,EAAAA,EAAAA,KAAU,KACJ6F,GACF4rD,MAED,CAAC5rD,EAAQ4rD,IAEZ,MAAM,IAAEgB,EAAG,OAAExvB,EAAM,WAAEyvB,GAAeJ,GAA4B,CAAC,EAE3DK,GAAsB1tD,EAAAA,EAAAA,KAAa2sD,IACvCY,EAAc,CAAEC,IAAKA,EAAMhpD,OAAQmoD,EAAac,eAChDH,MACC,CAACE,EAAKD,EAAeD,EAAuBG,IAE/C,GAAK7sD,GAAWslC,EAIhB,OACE1oC,EAAAA,GAAAA,GAAC0tD,GAAe,CACdtqD,OAAQA,EACR+lD,kBAAmBlsD,EAAK,UACxBujC,OAAQA,EACRotB,kBAAmBsC,EACnBtsD,QAASksD,EACTz+C,oBAAqB49C,O,gBC8D3B,SAASkB,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,UAIX,CAEA,UAAeh0D,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLq9C,SAASj9C,EAAAA,EAAAA,KAAeJ,GAAQq9C,QAChC38C,oBAAoBC,EAAAA,EAAAA,KAAyBX,MAJ/BD,EAjGYu9C,EAAGD,UAAS38C,yBAC1C,MAAM,cACJ68C,EAAa,YACbC,IACErqD,EAAAA,EAAAA,OACGsqD,EAAatnB,EAAWC,IAAchsC,EAAAA,EAAAA,KAEvCL,GAAOD,EAAAA,EAAAA,KAmES4zD,MAvDQC,EAqCTT,EAzCrB,IANA7yD,EAAAA,EAAAA,KAAU,KACJgzD,EAAQ1xD,OAAS,GACnBwqC,MAED,CAACknB,EAASlnB,IAERknB,EAAQ1xD,OAmEb,OAAOiC,QAAQyvD,EAAQ1xD,UAPjB,gBADgB+xD,EAQyBL,EAAQA,EAAQ1xD,OAAS,KA/D1CgyD,EAyDED,GA3C5B9xD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQutD,EACR/sD,QAAS0lC,EACT7sC,UAAU,UACV0H,MAAOlH,EAAK,4BACZoU,oBAAqBo/C,EAAcxxD,SAAA,CAElChC,EAAK,oCACN6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sBAAqBwC,SAAA,EAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EAENpE,QA1Bcg0D,KACfl9C,IAIL88C,EAAY,CACVK,QAASF,EACTG,YAAap9C,IAEf01B,MAiB6BrqC,SAEtBhC,EAAK,SAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAASwsC,EAAWrqC,SAAEhC,EAAK,oBAM/DmzD,EAuBAQ,GArBjB9xD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQutD,EACR/sD,QAAS0lC,EACTj4B,oBAAqBo/C,EACrBh0D,UAAU,QACV0H,MAAOgsD,GAAeC,GAAOnxD,SAAA,CAE5BmxD,EAAME,aAAcW,EAAAA,GAAAA,IAAqBb,IACtCrvD,EAAAA,GAAAA,GAAWqvD,EAAMjoD,QAAS,CAAC,kBAAmB,QAAS,QAC3DnI,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACpE,QAASwsC,EAAWrqC,SAAEhC,EAAK,mB,gBC7EpD,MAcA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAAuBg+C,EAAAA,GAAAA,KAAK59C,EAAAA,EAAAA,KAAeJ,GAAS,CAAC,mBADpCD,EAdkBk+C,EAAGC,oBACvC,GAAKA,EAAcvyD,OAInB,OACEmB,EAAAA,GAAAA,GAAA,OAAKyC,GAAG,gBAAexD,SACpBmyD,EAAclyD,KAAKmyD,IAClBrxD,EAAAA,GAAAA,GAACsxD,GAAAA,EAAY,CAA4BD,aAAcA,GAApCA,EAAaE,iB,gBCPxC,MAgCA,IAAej1D,EAAAA,EAAAA,KAhCqBk1D,EAAGn2C,UACrC,MAAM,oBAAEo2C,IAAwBprD,EAAAA,EAAAA,MAE1BpJ,GAAOC,EAAAA,GAAAA,KAEPw0D,GAAalvD,EAAAA,EAAAA,KAAY,KACxB6Y,IAIL9K,OAAOohD,MAAKC,EAAAA,GAAAA,IAAev2C,GAAM,SAAU,uBAC3Co2C,EAAoB,CAAEp2C,SAAK1d,OAC1B,CAAC8zD,EAAqBp2C,IAEnBw2C,GAAgBrvD,EAAAA,EAAAA,KAAY,KAChCivD,EAAoB,CAAEp2C,SAAK1d,MAC1B,CAAC8zD,IAEEK,GAAe3jB,EAAAA,GAAAA,GAAiB9yB,GAEtC,OACErb,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQua,GAChBzX,QAASiuD,EACT1tD,MAAOlH,EAAK,gBACZkuB,WAAWpqB,EAAAA,GAAAA,GAAW9D,EAAK,cAAe,CAAEoe,IAAKy2C,GAAgB,CAAE5V,WAAW,EAAM6V,cAAc,KAClGhsB,aAAc9oC,EAAK,kBACnB+oC,eAAgB0rB,O,gBC1CtB,MCmGA,IAAep1D,EAAAA,EAAAA,KAhFM01D,EAAGvnB,YACtB,MAAM,cAAEwnB,IAAkB5rD,EAAAA,EAAAA,OAElB6rD,MAAOC,EAAQ,KAAEl/B,GAASwX,GAAS,CAAC,EAEtCxtC,GAAOD,EAAAA,EAAAA,KAEPoG,EAAStC,QAAQqxD,GAEjBp0B,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClC0rD,QAGKG,EAAWC,EAASC,EAAUC,IAAU70D,EAAAA,EAAAA,KAAQ,KACrD,IAAKy0D,EACH,MAAO,GAGT,MAAMK,GAASC,EAAAA,GAAAA,IAAc,SAAUN,EAAUl/B,GAC3Cy/B,GAAOD,EAAAA,GAAAA,IAAc,OAAQN,EAAUl/B,GACvC0/B,GAAMF,EAAAA,GAAAA,IAAc,MAAON,EAAUl/B,GAG3C,MAAO,CAACu/B,EAAQE,GAFFD,EAAAA,GAAAA,IAAc,QAASN,EAAUl/B,GAElB0/B,KAC5B,CAACR,EAAUl/B,IAER6F,GAAUvyB,EAAAA,EAAAA,IAAiB8U,IAC/B42C,IACA1hD,OAAOohD,KAAKt2C,EAAK,SAAU,eAGvBu3C,GAAoBrsD,EAAAA,EAAAA,IAAgB,KACxCuyB,EAAQs5B,MAGJS,GAAkBtsD,EAAAA,EAAAA,IAAgB,KACtCuyB,EAAQu5B,MAGJS,GAAmBvsD,EAAAA,EAAAA,IAAgB,KACvCuyB,EAAQw5B,MAGJS,GAAiBxsD,EAAAA,EAAAA,IAAgB,KACrCuyB,EAAQy5B,MAGV,OACEzzD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJD,iBDpEiB,WCqEjBK,MAAOlH,EAAK,eACZmG,OAAQA,EACRQ,QAASm6B,EACTr4B,QAAM,EAAAzG,SAAA,EAENH,EAAAA,GAAAA,IAAA,OAAKrC,UD1EiC,WC0EPwC,SAAA,EAC3Byb,EAAAA,IAAUs4C,EAAAA,MACVhzD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACglD,OAAK,EAACvlD,KAAK,UAAU3D,QAASg2D,EAAiB7zD,SAAC,gBAI1De,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACglD,OAAK,EAACvlD,KAAK,UAAU3D,QAAS81D,EAAkB3zD,SAAC,iBAGzDe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACglD,OAAK,EAACvlD,KAAK,UAAU3D,QAAS+1D,EAAgB5zD,SAAC,eAGvDe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACglD,OAAK,EAACvlD,KAAK,UAAU3D,QAASi2D,EAAe9zD,SAAC,sBAIxDe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAASihC,EAAY9+B,SACnEhC,EAAK,oB,gBCjEhB,MAsFA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAEQ,CACL+/C,aAFkB3gB,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,kBAF9BhkB,EAtF4BigD,EAC9CzoB,QAAOwoB,kBAEP,MAAM,kBAAEE,EAAiB,iBAAEC,EAAgB,kBAAEC,IAAsBhtD,EAAAA,EAAAA,OAC5DitD,EAAgBC,IAAmB9hD,EAAAA,EAAAA,KAAS,IAC5C+hD,EAAsBC,IAAyBhiD,EAAAA,EAAAA,KAAS,GACzDiiD,GAAcvlB,EAAAA,GAAAA,GAAiB1D,GAAO,IACtC,OAAEkpB,EAAM,MAAEC,EAAK,yBAAEC,GAA6BH,GAAal4C,SAAW,CAAC,EACvEw0C,EAAM4D,GAAQ5iB,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAAK2qB,QAASj2D,EAE9CV,GAAOD,EAAAA,EAAAA,KAEP00D,GAAalvD,EAAAA,EAAAA,KAAY,KACzBioC,GAAOpvB,KAAOi4C,GACK7oB,EAAMsE,OAASqkB,EAAmBC,GAC1C,CACXS,eAAgBN,IAETE,GAAar4C,KACtB9K,OAAOohD,MAAKC,EAAAA,GAAAA,IAAe8B,EAAYr4C,KAAM,SAAU,YAEzD83C,MACC,CACD1oB,EAAO6oB,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGjG7B,GAAgBrvD,EAAAA,EAAAA,KAAY,KAChC2wD,MACC,CAACA,IAEEY,GAAqBvxD,EAAAA,EAAAA,KAAaqE,IACtC0sD,EAAgB1sD,GAChB4sD,EAAsB5sD,KACrB,CAAC0sD,IAUJ,OAPAh2D,EAAAA,EAAAA,KAAU,KACJo2D,IACFJ,GAAgB,GAChBE,EAAsB3yD,QAAQ+yD,OAE/B,CAACA,EAA0BF,KAG5B70D,EAAAA,GAAAA,IAACgnC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQ2pC,GAAOpvB,KACvBzX,QAASiuD,EACT1tD,MAAOlH,EAAK,gBACZ8oC,aAAc9oC,EAAK,gBACnB+oC,eAAgB0rB,EAAWzyD,SAAA,EAE1B8B,EAAAA,GAAAA,GAAW9D,EAAK,gBAAiBy2D,GAAar4C,KAAM,CAAC,UACrDs4C,IACC3zD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAASgoB,EACT1sD,OACE5G,EAAAA,GAAAA,GAAA8G,GAAAA,GAAA,CAAA7H,UACG8B,EAAAA,GAAAA,GACC9D,EAAK,gCAAiC,CAAC02D,GAAQ1nB,EAAAA,EAAAA,IAAgBgnB,KAC/D,CAAC,sBAIPgB,QAASF,IAGZF,IACC7zD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAASkoB,EACT5sD,OACE5G,EAAAA,GAAAA,GAAA8G,GAAAA,GAAA,CAAA7H,UACG8B,EAAAA,GAAAA,GACC9D,EAAK,yCAAyCgvC,EAAAA,EAAAA,IAAgB+jB,IAC9D,CAAC,sBAIPiE,QAASR,EACT5tD,UAAWytD,WCtFfY,GAA6B,IAAbC,EAAAA,IAkBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBAgVF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIrlC,KAAKglC,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,EAK3C,CAEA,SAASG,GAAgBluD,GACvB,OAAOg6C,OAAOh6C,GAAOmuD,SAAS,EAAG,IACnC,CAEA,SAASC,GAAUX,EAAcC,EAAeC,GAC9C,MAAO,GAAGF,KAAQC,EAAQ,KAAKC,GACjC,CAaA,UAAel4D,EAAAA,EAAAA,KA9WqB44D,EAClCC,aACAC,QACAC,QACAC,eACAC,aACAnyD,SACAoyD,iBACAC,oBACAC,oBACA9xD,UACA+xD,WACAC,0BAEA,MAAM34D,GAAOD,EAAAA,EAAAA,KACPuyB,EAAM,IAAID,KAEVmlC,GAAU/2D,EAAAA,EAAAA,KAAQ,IAClB43D,IAAiBF,EAAc,IAAI9lC,KAChC,IAAIA,KAAK5wB,KAAKZ,IAAIs3D,GA9CP,OA+CjB,CAACE,EAAcF,IACZV,GAAUh3D,EAAAA,EAAAA,KAAQ,IAClB63D,IAAeF,EAAc,IAAI/lC,KAC9B,IAAIA,KAAK5wB,KAAKC,IAAI02D,GAASnB,GAAeA,MAChD,CAACqB,EAAYF,IAEVQ,GAAqBn4D,EAAAA,EAAAA,KAAQ,IAAOy3D,EAAa,IAAI7lC,KAAK6lC,GAAc,IAAI7lC,MAAS,CAAC6lC,IACtFW,GAAa58B,EAAAA,EAAAA,GAAsB91B,IAClC2yD,EAAoBC,IAA0B14D,EAAAA,EAAAA,IAAQ,IAEtD24D,EAAcC,IAAmBzkD,EAAAA,EAAAA,IAAeokD,IAChDM,EAAqBC,IAA0B3kD,EAAAA,EAAAA,IACpD,IAAI6d,KAAK2mC,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoB/kD,EAAAA,EAAAA,IACxCsjD,GAAgBc,EAAmB3qB,cAE9BurB,EAAiBC,IAAsBjlD,EAAAA,EAAAA,IAC5CsjD,GAAgBc,EAAmBc,eAG/BhC,EAAcM,GAAUgB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaW,WAC1FC,EAAcV,EAAoBE,cAClCS,EAAeX,EAAoBG,WAEnCzmD,EAAcylD,GAAgBW,EAAac,UAAYtC,EAAQsC,WAC/DxB,GAAcU,EAAac,UAAYrC,EAAQqC,WAErDx5D,EAAAA,EAAAA,KAAU,MACHu4D,GAAc1yD,IACjB8yD,EAAgBL,GAChBO,EAAuB,IAAI9mC,KAAKumC,EAAmBQ,cAAeR,EAAmBS,WAAY,IAC7Fd,IACFgB,EAAiBzB,GAAgBc,EAAmB3qB,aACpDwrB,EAAmB3B,GAAgBc,EAAmBc,mBAGzD,CAACd,EAAoBzyD,EAAQ0yD,EAAYN,KAE5Cj4D,EAAAA,EAAAA,KAAU,KACJ+3D,IAAiBS,GAAsBE,EAAac,UAAYtC,EAAQsC,YAC1Eb,EAAgBzB,GAChB+B,EAAiBzB,GAAgBN,EAAQvpB,aACzCwrB,EAAmB3B,GAAgBN,EAAQkC,kBAE5C,CAACrB,EAAcS,EAAoBtB,EAASwB,KAE/C14D,EAAAA,EAAAA,KAAU,KACJg4D,IAAeQ,GAAsBE,EAAac,UAAYrC,EAAQqC,YACxEb,EAAgBxB,GAChB8B,EAAiBzB,GAAgBL,EAAQxpB,aACzCwrB,EAAmB3B,GAAgBL,EAAQiC,kBAE5C,CAACrB,EAAcC,EAAYQ,EAAoBrB,EAASD,EAASwB,KAEpE14D,EAAAA,EAAAA,KAAU,KACR,GAAI43D,EAAY,CACd,MAAM6B,EAAkB,IAAI1nC,KAAK6lC,GACjCe,EAAgBc,GAChBR,EAAiBzB,GAAgBiC,EAAgB9rB,aACjDwrB,EAAmB3B,GAAgBiC,EAAgBL,cACrD,IACC,CAACxB,IAEJ,MAAM8B,EAA0B1B,GAAcsB,GAAetnC,EAAI8mC,eAAiBS,GAAgBvnC,EAAI+mC,YAChG5B,GAAWmC,GAAenC,EAAQ2B,eAAiBS,GAAgBpC,EAAQ4B,WAC3EY,EAAyB5B,GAAgBuB,GAAetnC,EAAI8mC,eAAiBS,GAAgBvnC,EAAI+mC,YAEjG,cAAEa,EAAa,iBAAEC,EAAgB,cAAEC,IAAkB35D,EAAAA,EAAAA,KAAQ,IAqNrE,SAA2B42D,EAAcC,GACvC,MAAM4C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BrhC,EAAO,IAAI1G,KACjB0G,EAAKshC,QAAQ,GACbthC,EAAKuhC,SAAShD,GACdv+B,EAAKwhC,YAAYlD,GACjB,MAAMmD,EAAWzhC,EAAK0hC,UAAY,EAC5BC,EAAuB,IAAIroC,KAAKglC,EAAMC,EAAO,GAAGqC,UAEtD,IAAK,IAAIzP,EAAI,EAAGA,EAAIsQ,EAAUtQ,IAC5BgQ,EAAc34D,KAAKm5D,EAAuBF,EAAWtQ,EAAI,GAG3D,KAAOnxB,EAAKsgC,aAAe/B,GAAO,CAChC,MAAMqD,EAAW5hC,EAAK4gC,UACtBQ,EAAiB54D,KAAKo5D,GACtB5hC,EAAKshC,QAAQM,EAAW,EAC1B,CAEA,MAAMC,GAAoBT,EAAiBv4D,OAASs4D,EAAct4D,QAAU,EAC5E,GAAIg5D,EAAmB,EACrB,IAAK,IAAI1Q,EAAI,EAAGA,GAAK,EAAI0Q,EAAkB1Q,IACzCkQ,EAAc74D,KAAK2oD,GAIvB,MAAO,CAAEgQ,gBAAeC,mBAAkBC,gBAC5C,CAlPIS,CAAkBjB,EAAaC,IAC9B,CAACA,EAAcD,IAEZkB,GAAcr6D,EAAAA,EAAAA,KAAQ,IACnB+3D,GAsQX,SAA2Bx4D,EAAiB+4B,GAC1C,MAAMw+B,GAAMwD,EAAAA,GAAAA,GAAmBhiC,EAAM/4B,EAAKg7D,MAG1C,OAAIzD,KAFUwD,EAAAA,GAAAA,GAAmB,IAAI1oC,KAAQryB,EAAKg7D,MAGzCh7D,EAAK,0CAA0Ci7D,EAAAA,GAAAA,IAAWj7D,EAAM+4B,IAGlE/4B,EAAK,sCAAuC,CAACu3D,GAAK0D,EAAAA,GAAAA,IAAWj7D,EAAM+4B,IAC5E,CA/QgCmiC,CAAkBl7D,EAAMg5D,IACnD,CAACh5D,EAAMg5D,EAAcR,IA+BlBltB,GAAe/lC,EAAAA,EAAAA,KAAY,KAE7BmzD,EADEL,GAAgBW,EAAexB,EACxBA,EACAc,GAAcU,EAAevB,EAC7BA,EAEAuB,KAEV,CAACX,EAAcC,EAAYd,EAASC,EAASiB,EAAUM,IAEpDmC,GAAoB51D,EAAAA,EAAAA,KAAamC,IACrC,MAAMkC,EAAQlC,EAAEqN,OAAOnL,MAAMwxD,QAAQ,UAAW,IAChD,IAAKxxD,EAAMhI,OAGT,OAFA23D,EAAiB,SACjB7xD,EAAEqN,OAAOnL,MAAQ,IAInB,MAAMyxD,EAAQ55D,KAAKZ,IAAI,EAAGY,KAAKC,IAAI8pB,OAAO5hB,GAAQ,KAE5CmvB,EAAO,IAAI1G,KAAK2mC,EAAac,WACnC/gC,EAAKuiC,SAASD,GACdpC,EAAgBlgC,GAEhB,MAAMwiC,EAAWzD,GAAgBuD,GACjC9B,EAAiBgC,GACjB7zD,EAAEqN,OAAOnL,MAAQ2xD,IAChB,CAACvC,IAEEwC,GAAsBj2D,EAAAA,EAAAA,KAAamC,IACvC,MAAMkC,EAAQlC,EAAEqN,OAAOnL,MAAMwxD,QAAQ,UAAW,IAChD,IAAKxxD,EAAMhI,OAGT,OAFA63D,EAAmB,SACnB/xD,EAAEqN,OAAOnL,MAAQ,IAInB,MAAM6xD,EAAUh6D,KAAKZ,IAAI,EAAGY,KAAKC,IAAI8pB,OAAO5hB,GAAQ,KAE9CmvB,EAAO,IAAI1G,KAAK2mC,EAAac,WACnC/gC,EAAK2iC,WAAWD,GAChBxC,EAAgBlgC,GAEhB,MAAM4iC,EAAa7D,GAAgB2D,GACnChC,EAAmBkC,GACnBj0D,EAAEqN,OAAOnL,MAAQ+xD,IAChB,CAAC3C,IA0BJ,OACEn3D,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTnH,UAAU,gBACVyV,QAASq2B,EAAatpC,SAAA,EAEtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,YAAWwC,UACxBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACN9I,QAAS8G,EAAQ3E,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGbxC,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACGhC,EAAK,YAAY65D,EAAe,KAChC,IACAD,MAGH72D,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACNC,SAAUqxD,EACVp6D,QAAUo6D,OAA2Cv5D,EAlI/D,WACEy4D,GAAwByC,IACtB,MAAMC,EAAW,IAAIxpC,KAAKupC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,IAEX,EA2HyE75D,UAE/De,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAGbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACNC,SAAUoxD,EACVn6D,QAAUm6D,OAA2Ct5D,EAnI/D,WACEy4D,GAAwByC,IACtB,MAAMC,EAAW,IAAIxpC,KAAKupC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,IAEX,EA4HyE75D,UAE/De,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAKjBtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,mBAAkBwC,UAC/BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,CAC3Bm1D,GAAgBl1D,KAAKs1D,IACpBx0D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,2BAA0BwC,UACvCe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAKu3D,SAGf2C,EAAcj4D,KAAK04D,IAClB53D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAACe,EAAAA,GAAAA,GAAA,QAAAf,SAAO24D,QAE7CR,EAAiBl4D,KAAK04D,IACrB53D,EAAAA,GAAAA,GAAA,OACE8rC,KAAK,SACLD,SAAU,EACV/uC,QAASA,KAAMi8D,OA/ID/iC,EA+IkB4hC,OA9I1C1B,GAAiB2C,IACf,MAAMC,EAAW,IAAIxpC,KAAKupC,GAK1B,OAJAC,EAASxB,QAAQthC,GACjB8iC,EAASvB,SAAST,GAClBgC,EAAStB,YAAYX,GAEdiC,KAPX,IAA0B9iC,GAgJdv5B,WAAWsC,EAAAA,GAAAA,GACT,aACA,aACAs1D,GACEwC,EAAaC,EAAcc,EAAUnD,EAASC,GAE5C,WACAkD,EAAW,YAAc,GAC7BjD,IAAgBM,GAAU4B,EAAaC,EAAcc,IAAa,YAClE34D,SAED6B,QAAQ82D,KACP53D,EAAAA,GAAAA,GAAA,QAAAf,SAAO24D,QAIZP,EAAcn4D,KAAK04D,IAClB53D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAACe,EAAAA,GAAAA,GAAA,QAAAf,SAAO24D,aAKjDpC,IAzGD12D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBe,EAAAA,GAAAA,GAAA,SACEQ,KAAK,OACL/D,UAAU,eACVu8D,UAAU,UACVnyD,MAAO0vD,EACPnkD,SAAUgmD,EACVxa,QAASoY,IACT,KAEFh2D,EAAAA,GAAAA,GAAA,SACEQ,KAAK,OACL/D,UAAU,eACVu8D,UAAU,UACVnyD,MAAO4vD,EACPrkD,SAAUqmD,EACV7a,QAASoY,QA2Fbh2D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,SAAQwC,UACrBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,SAAQwC,SAAA,EACrBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLlE,QAASyrC,EACT1iC,SAAUgK,EAAW5Q,SAEpB84D,IAEFrC,IACC11D,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAAS84D,EAAqB10D,QAAM,EAAAjC,SACzCy2D,eC5Sf,IAAep5D,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CAAEiiD,YAAY7hD,EAAAA,EAAAA,KAAeJ,GAAQ+lD,6BAF5BhmD,EAxB+BimD,EACjD91D,SAAQ+xD,iBAER,MAAM,qBAAEgE,EAAoB,qBAAEC,IAAyB/yD,EAAAA,EAAAA,MAEjDgzD,GAAmB72D,EAAAA,EAAAA,KAAawzB,IACpCmjC,EAAqB,CAAEl1C,UAAW+R,EAAK+gC,UAAY,MACnDqC,MACC,CAACA,EAAsBD,IAEpBl8D,GAAOD,EAAAA,EAAAA,KAEb,OACEgD,EAAAA,GAAAA,GAACk1D,GAAa,CACZ9xD,OAAQA,EACR+xD,WAAYA,EACZI,YAAU,EACVE,kBAAmBx4D,EAAK,cACxB2G,QAASw1D,EACTzD,SAAU0D,Q,gBCVhB,MAgNA,IAAe/8D,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUwtB,aAEF,CACL2R,KAFW3R,GAAS4R,EAAAA,EAAAA,KAAWp/B,EAAQwtB,QAAU/iC,EAGjDsuD,WAAYvrB,GAASwrB,EAAAA,EAAAA,KAAiBh5C,EAAQwtB,QAAU/iC,EACxD27D,cAAepmD,EAAOqmD,YAAYC,cANpBvmD,EAlM+BwmD,EACjDr2D,SACAs9B,SACAg5B,kBACArnB,OACA4Z,aACAqN,oBAEA,MAAM,cAAEK,EAAa,cAAEC,EAAa,sBAAEC,IAA0BxzD,EAAAA,EAAAA,MAE1DpJ,GAAOD,EAAAA,EAAAA,KACP88D,GAAgB3rB,EAAAA,GAAAA,GAAiBkE,GACjC0nB,GAA2B5rB,EAAAA,GAAAA,GAAiBurB,GAC5CM,GAAW/qD,EAAAA,EAAAA,OAEVy5B,EAASsmB,EAAaC,IAAiB3xD,EAAAA,EAAAA,MACvC28D,EAAWC,IAAgBzoD,EAAAA,EAAAA,IAAiBqoD,GAAeG,WAAa,KACxEE,EAAUC,IAAe3oD,EAAAA,EAAAA,IAAiBqoD,GAAeK,UAAY,KACrEE,EAAOC,IAAY7oD,EAAAA,EAAAA,IAAiBqoD,GAAeS,aAAe,KAClEC,EAAwBC,IAA6BhpD,EAAAA,EAAAA,KAAkB,GACxEipD,EAAiB55D,QAAQm5D,KAAeP,GAAmBW,KAEjE98D,EAAAA,EAAAA,KAAU,KACJ6F,IACF4rD,IACAkL,EAAaJ,GAAeG,WAAa,IACzCG,EAAYN,GAAeK,UAAY,IACvCG,EAASR,GAAeS,aAAe,IACvCE,GAA0B,MAE3B,CAACr3D,EAAQ4rD,EAAa8K,GAAeG,UAAWH,GAAeK,SAAUL,GAAeS,eAE3Fh9D,EAAAA,EAAAA,KAAU,MACHkc,EAAAA,IAAgBivB,GACnBl4B,YAAW,KACTwpD,EAAS5qD,SAASurD,UAjDC,OAoDtB,CAACjyB,IAEJ,MAAMkyB,GAAwBp4D,EAAAA,EAAAA,KAAamC,IACzCu1D,EAAav1D,EAAEqN,OAAOnL,SACrB,IAEGg0D,GAAoBr4D,EAAAA,EAAAA,KAAamC,IACrC21D,GAASQ,EAAAA,GAAAA,IAA0BxB,EAAe30D,EAAEqN,OAAOnL,UAC1D,CAACyyD,IAEEyB,GAAuBv4D,EAAAA,EAAAA,KAAamC,IACxCy1D,EAAYz1D,EAAEqN,OAAOnL,SACpB,IAEGk3B,GAAcv7B,EAAAA,EAAAA,KAAY,KAC9Bq3D,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,MACR,CAACT,IAEEtxB,GAAe/lC,EAAAA,EAAAA,KAAY,KAC3Bk3D,IAAoBh5B,EACtBk5B,EAAc,CACZK,YACAE,WACAI,YAAaF,IAGfV,EAAc,CACZj5B,SACAu5B,YACAE,WACAK,6BAGH,CAACP,EAAWL,EAAeF,EAAiBS,EAAUE,EAAOG,EAAwBb,EAAej5B,IAEvG,GAAKt9B,GAAWslC,EAuFhB,OACE5pC,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAU,kBACV0H,MAAOlH,EAAK,cACZmG,OAAQA,EACRQ,QAASm6B,EACT1sB,oBAAqB49C,EAAchwD,SAAA,CAElC66D,IAzFDh7D,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA2ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC5Ee,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,QACLkG,KAAMmzD,EACN9gD,KAAM,GAAGihD,KAAaE,OAExBr7D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gCAA+BwC,SAAA,EAC5Ce,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,gCAA+BwC,SACzC66D,GAAeS,aACZO,EAAAA,GAAAA,IAA0BxB,EAAeQ,EAAcS,aACvDt9D,EAAK,mBAEX+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA+ByD,IAAI,OAAMjB,UACtDktD,EAAAA,EAAAA,IAAclvD,EAAM68D,EAAgB7N,YAI3CjsD,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAK6hD,EACLnzD,MAAOozD,EACPrzD,MAAO3J,EAAK,aACZ4uC,SAAU,EACVz5B,SAAUwoD,KAEZ56D,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOszD,EACPvzD,MAAO3J,EAAK,YACZ4uC,SAAU,EACVz5B,SAAU2oD,KAEZ/6D,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,6BAA4BwC,UACtC8B,EAAAA,GAAAA,GACC9D,EAAK,+BAAgC68D,GAAeG,WAAa,IACjE,CAAC,QAAS,uBAGdj6D,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAASkvB,EACT3uB,SAAU,EACVooB,QAASwG,EACT7zD,MAAO3J,EAAK,4BAEd+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,kEAAiEwC,UAC3E8B,EAAAA,GAAAA,GAAW9D,EAAK,wCAAyC68D,GAAeG,iBA6C5EF,IArCDj7D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+BAA+ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAChFe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,QAAQuY,KAAM,GAAGihD,KAAaE,OAC3Cr7D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAK6hD,EACLnzD,MAAOwzD,EACPrB,UAAU,MACVpyD,MAAO3J,EAAK,qBACZ4uC,SAAU,EACVz5B,SAAUyoD,KAEZ76D,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOozD,EACPrzD,MAAO3J,EAAK,aACZ4uC,SAAU,EACVz5B,SAAUwoD,KAEZ56D,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOszD,EACPvzD,MAAO3J,EAAK,YACZ4uC,SAAU,EACVz5B,SAAU2oD,WAiBhBj8D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNzE,UAAU,wBACVoJ,UAAW60D,EACX59D,QAASyrC,EAAatpC,SAErBhC,EAAK,WAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNzE,UAAU,wBACVK,QAASihC,EAAY9+B,SAEpBhC,EAAK,sB,4ECrNT,IAAK+9D,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,aAAhBA,EAAAA,EAAgB,mBAAhBA,EAAAA,EAAgB,eAAhBA,EAAAA,EAAgB,iBAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,uBAAhBA,EAAAA,EAAgB,2BAAhBA,EAAAA,EAAgB,6BAAhBA,CAAgB,MAc5B,MAAMC,GAA+E,CACnFz0C,IAAKw0C,GAAiBE,IACtBz0C,OAAQu0C,GAAiBG,OACzB37C,KAAMw7C,GAAiBI,KACvB70C,MAAOy0C,GAAiBK,MACxBC,QAASN,GAAiBO,QAC1BC,SAAUR,GAAiBS,SAC3BC,WAAYV,GAAiBW,WAC7BC,YAAaZ,GAAiBa,aAG1BC,GAAwBnb,OAAO0K,KAAK4P,IAE1C,IAAIc,GACJ,MAAMC,GAAsB,CAAEp3D,EAAG,EAAGG,EAAG,G,gBC1CvC,MCyHA,IAAezI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACM+oD,GADW3oD,EAAAA,EAAAA,KAAeJ,GACP+oD,SAEnB,MAAErI,IAAUsI,EAAAA,EAAAA,KAAmBhpD,IAAW,CAAC,GAC3C,WAAEipD,EAAU,cAAEC,GAAkBH,GAAW,CAAC,EAC5CI,EAAkC,cAAfF,EAGzB,MAAO,CACLG,aAHmB1I,GAAQthB,EAAAA,EAAAA,KAAWp/B,EAAQ0gD,QAASj2D,EAIvD0+D,mBACAD,mBAbcnpD,EA7FSspD,EAC3BD,eAAcD,mBAAkBD,oBAEhC,MAAM,uBACJI,EAAsB,iBACtBC,IACEp2D,EAAAA,EAAAA,MAEEtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KACPib,GAAMlJ,EAAAA,EAAAA,MAENytD,GAAsBh/D,EAAAA,EAAAA,KAAQ,IAC3B0+D,GAAiBzb,OAAOsK,OAAOmR,IACrC,CAACA,IAEEO,EAAkBD,GAAqB79D,OAEvC0yC,GAAQ7zC,EAAAA,EAAAA,KAAQ,KACpB,IAAKi/D,EAAiB,MAAO,GAE7B,MAAMzpD,GAAS89B,EAAAA,EAAAA,MACT4rB,EAAiBN,GAAc75D,GAGrC,OAFmBikC,EAAAA,GAAAA,IAAO,CAACk2B,KAAmBF,EAAoBx9D,KAAK29D,GAAQA,EAAIjJ,UAC3D10D,KAAKuD,GAAOA,IAAM6vC,EAAAA,EAAAA,KAAWp/B,EAAQzQ,KAAK+9B,OAAO1/B,SAASm/C,MAAM,EAAG,KAE1F,CAAC0c,EAAiBL,EAAcI,IAE7BI,GAAmBv2D,EAAAA,EAAAA,IAAgB,KACvCk2D,OAGIM,GAAoBx2D,EAAAA,EAAAA,IAAgB,KACxCi2D,EAAuB,CAAEQ,MAAO,iBAGlC,GAAKX,EAsBL,OACEv9D,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EACL1b,WAAWsC,EAAAA,GAAAA,GDzFM,YC2FfE,SAAA,EAEFe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UD9FmG,WC+FnGoa,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACLqW,UAAW/Z,EAAQ,SACnBD,QAASggE,EAAiB79D,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UDrGmL,WCqG3J6E,KAAK,aAErCtB,EAAAA,GAAAA,GAACsxC,GAAAA,EAAU,CAAC70C,UDvG8G,WCuGnFgE,KAAK,OAAO8wC,MAAOA,IArC9D,WACE,MAAM0rB,EAAgB1rB,EAAM1yC,OAAS,GAAK0yC,EAAM,IAAI0oB,UAC9C91D,EAAQw4D,GAAmBM,GAAiBN,EAAkB,EAChE1/D,EAAK,mBACL,CACEigE,QAASD,EACT9mC,MAAOwmC,EAAkB,GAE3B,CACEQ,YAAaR,EAAkB,IAEjCM,EAEJ,OACEj9D,EAAAA,GAAAA,GAAA,OAAKvD,UDhFyM,WCgFjLwC,SAC1BkF,GAGP,CAoBKi5D,IACDp9D,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GD1GoE,WC4G7E,WAEF8X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACL3D,QAASigE,EAAkB99D,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UDnHiK,WCmHpI6E,KAAK,0B,4BCnHhD,UAAgB,UAAY,WAAW,mBAAmB,WAAW,eAAiB,WAAW,kBAAkB,WAAW,cAAgB,WAAW,KAAO,YC8EhK,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aAGF,CACLqrC,MAHWC,EAAAA,EAAAA,KAAWp/B,EAAQlM,MAFhBiM,EAhDpB,UAAwB,KAAEo/B,EAAI,aAAEgrB,IAC9B,MAAM,mBACJC,IACEj3D,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,KAEPwqB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClC,IAAK8rC,EACH,OAEF,MAAMuhB,EAAQvhB,GAAM5vC,GACpB,IAAKmxD,EACH,OAEF,MAAM2J,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB1J,QACAptD,OAAQotD,EACR2J,aAIJ,IAAKlrB,EAAM,OAEX,MAAMluC,EAAQkuC,GAAM4nB,UACdwD,EAAkBprB,GAAMqrB,eACxBC,EAAYF,GAAmBJ,GAAeO,EAAAA,GAAAA,IAAqB3gE,EAAMwgE,QAAmB9/D,EAElG,OACEqC,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GAAOqM,UAClBvO,QAAS4qB,EAAYzoB,UAErBe,EAAAA,GAAAA,GAAC69D,GAAAA,EAAS,CACRphE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO8+D,gBAAiBT,GAAgB,sBAClEU,cAAe/+D,GAAOsC,KACtB08D,eAAgBh/D,GAAOi/D,eACvBC,mBAAoBl/D,GAAOm/D,cAC3Bx3D,KAAM0rC,EACNr5B,KAAM7U,EACNw5D,UAAWA,EACXS,UAAU,iBAIlB,KC5EA,IAAgB,KAAO,WAAW,OAAS,WAAW,gBAAgB,WAAW,aAAe,WAAW,kBAAkB,WAAW,eAAiB,WAAW,aAAe,YCiC7KC,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GA+FjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAYC,IAC9B,MAAMqrD,GAAejrD,EAAAA,EAAAA,KAAeJ,GAAQqrD,aACtCpmC,EAAWomC,EAAaC,gBAAgBxf,QAE9C,MAAO,CACLznB,WAAYY,GAAYomC,EAAaE,gBAAgBC,QACrDvmC,WACAwmC,aAAczrD,EAAO0rD,WAAWp2B,WAPhBv1B,EA7FuB4rD,EACzC1mC,WACAwmC,mBAEA,MAAM5hE,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MACN4hE,EAAoBC,IAAyBttD,EAAAA,EAAAA,KAAkB,IAChE,qBACJutD,IACE34D,EAAAA,EAAAA,MAEE44D,GAA2B14D,EAAAA,EAAAA,IAAgB,KAC/Cw4D,GAAuBG,IAAUA,QAG5B54B,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAS,IAEzC0tD,GAAmBzhE,EAAAA,EAAAA,KAAQ,IAC1By6B,GAEEwO,EAAAA,GAAAA,IAAmB,CAAEC,IAAKzO,EAAU0O,MAAOP,EAAa9lC,KAAM,SAF/C,IAGrB,CAAC23B,EAAUmO,IAERuf,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXW,SAGH,IAEGM,GAAyB98D,EAAAA,EAAAA,KAAY,KACzC+jC,EAAe,MACd,IAEH,OACEznC,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO+hC,KAAM,iBACvC+lB,MAAOqY,EACPpY,WAAYlB,EACZsH,aAAa,sBACboS,YAAU,EACVC,iBApDqB,GAoDgBvgE,SAAA,EAErCe,EAAAA,GAAAA,GAACwmD,GAAAA,EAAW,CACV/pD,UAAWuC,GAAOynD,OAClB5/C,MAAOy/B,EACPl0B,SAAUm0B,EACVk5B,QAASH,EACT1S,YAAa3vD,EAAK,gBAEnB0hE,IAAiBr4B,IAChBxnC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOosC,QAAQnsC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO0gE,aAAazgE,SAAA,EAClCe,EAAAA,GAAAA,GAAA,QAAAf,SAAOlC,EAAQ,qBACfiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAO2gE,aAAc7iE,QAASmiE,EAAyBhgE,SACrElC,EAAQ+hE,EAAqB,2BAA6B,kCAG/D9+D,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO4gE,eAAe3gE,SACnC0/D,EAAaz/D,KAAI,CAACuD,EAAInE,KACrB,GAAKwgE,KAAsBxgE,GAhEV,GAoEjB,OACE0B,EAAAA,GAAAA,GAAC6/D,GAAc,CACb74D,OAAQvE,aAOpB3D,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOosC,QAAQnsC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0gE,aAAazgE,SACnBhC,EAAdqpC,EAAmB,OAAe,kBAErCtmC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO4gE,eAAe3gE,SACnCkgE,GAAoBA,EAAiBjgE,KAAKuD,IAEvCzC,EAAAA,GAAAA,GAAC6/D,GAAc,CACb74D,OAAQvE,EACR46D,cAAe/2B,kBCrFzBw5B,GAAiC,MAAQjmD,EAAAA,ECjC/C,GAAoG,WAApG,GAAmO,WAAnO,GAAqP,WAArP,GAA6U,WAA7U,GAA8c,WAA9c,GAAk/B,WAAl/B,GAAiwC,WAAjwC,GAA0zC,WCgGpzCkmD,GAA6B,IAM7BC,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACAl2C,KAAK,KAEDm2C,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACRnkD,MAAO,SAujCT,IAAe1f,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM21B,EAAe31B,GAAO41B,iBAAkBC,EAAAA,EAAAA,KAAaptD,EAAQu3B,EAAM41B,sBAAmB1iE,GACpFi2D,MAAO2M,GAAgBH,GAAgB,CAAC,EAC1CjE,EAAa1xB,GAAO0xB,WAEpBqE,EAAYD,EAAcrtD,EAAOutD,WAAWC,KAAKH,QAAe5iE,EAChEqyD,EAAMuQ,GAAcjuB,EAAAA,EAAAA,KAAWp/B,EAAQqtD,QAAe5iE,EACtD60C,EAAe+tB,GAAc9tB,EAAAA,EAAAA,KAAmBv/B,EAAQqtD,QAAe5iE,EACvEgjE,EAAiBnuB,GAAcouB,SAASC,YACxC5N,EAAc//C,EAAO+jB,eAAgBqb,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,oBAAiBt5B,EAChF4/D,GAAQuD,EAAAA,EAAAA,KAAY5tD,IACpB,mBAAE6tD,EAAoB9d,OAAQ+d,IAAyB1tD,EAAAA,EAAAA,KAAeJ,GAAQ+tD,SAC5Ehe,OAAQie,EAAoBC,aAAcC,IAAsB9tD,EAAAA,EAAAA,KAAeJ,GAAQmuD,aACzFC,EAAoBtR,GAAMuR,EAAAA,EAAAA,KAAwBruD,EAAQ88C,EAAIvtD,SAAM9E,EAEpE6jE,EAAgBN,GAAsBF,EAE5C,MAAO,CACLR,YACAxQ,MACAiD,cACAsK,QACAwD,mBAAoBA,GAAsBjgE,QAAQsgE,GAClDI,gBACArF,aACAmF,oBACAX,oBA3Bc1tD,EApjCqCwuD,EACvDh3B,QACAi3B,SACA1R,MACAuN,QACAwD,qBACAS,gBACAG,4BACAC,8BACAC,iBACA1F,aACA2F,sBACAC,2BACAT,oBACAX,iBACAqB,kBAEA,MAAM,kBACJC,EAAiB,gBACjBC,EAAe,gBACfC,EAAe,iBACfC,EAAgB,qBAChBC,EAAoB,gBACpBC,EAAe,kBACfC,EAAiB,aACjBC,EAAY,mBACZC,EAAkB,iBAClBC,EAAgB,iBAChBj+B,EAAgB,2BAChBk+B,EAA0B,wBAC1BC,EAAuB,uBACvBpG,EAAsB,iBACtBC,EAAgB,+BAChBoG,IACEx8D,EAAAA,EAAAA,OACGy8D,EAAYC,IAAiBtxD,EAAAA,EAAAA,OAC7BuxD,EAAiBC,IAAsBxxD,EAAAA,EAAAA,OAEvC6sC,EAAU4kB,EAAYC,IAAgB7lE,EAAAA,EAAAA,IAAQ,IAE9C8lE,EAAiBC,IAAsB5xD,EAAAA,EAAAA,OACvC6xD,EAAmBC,KAAwB9xD,EAAAA,EAAAA,KAAS,IACpD+xD,GAAyBC,KAA8BhyD,EAAAA,EAAAA,KAAS,IAChEiyD,GAAuBC,KAA4BlyD,EAAAA,EAAAA,OACnDmyD,GAAgBC,KAAqBpyD,EAAAA,EAAAA,OACtC,eACJqyD,GAAc,kBAAEC,GAAiB,kBAAEC,IChKxB,WACb,MAAOF,EAAgBG,IAAqBxyD,EAAAA,EAAAA,IAAS,GAC/CyyD,GAAkBj1D,EAAAA,EAAAA,IAAO,GACzBk1D,GAAiBl1D,EAAAA,EAAAA,IAAO,GAExB80D,GAAoBx9D,EAAAA,EAAAA,IAAgB,KACxC,MAAMgpB,EAAMD,KAAKC,MAEbA,EAAM40C,EAAe/0D,QDyFH,MCxFpB80D,EAAgB90D,QAAU,GAG5B80D,EAAgB90D,SAAW,EAEvB80D,EAAgB90D,SDkFO,GCjFzB60D,EAAkB10C,EDkFE,QC9ElBy0C,GAAoBz9D,EAAAA,EAAAA,IAAgB,KACpCu9D,EAAiBx0C,KAAKC,QACxB40C,EAAe/0D,QAAUkgB,KAAKC,UAIlC,MAAO,CACLu0C,iBACAC,oBACAC,oBAEJ,CDmIMI,GAEE13C,IAAezd,EAAAA,EAAAA,MAEfo1D,IAAkBp1D,EAAAA,EAAAA,MAElBq1D,IAAyBr1D,EAAAA,EAAAA,MAEzBuS,GAA8B,eAAf26C,EACfE,GAAkC,cAAfF,EAEnBoI,IAAyBh+D,EAAAA,EAAAA,IAAgB,KAC7CiK,YAAW,KACTgsD,EAAuB,CAAEQ,MAAO,gBA/Ed,QAmFhBwH,IAAuBv1D,EAAAA,EAAAA,OAE7B1R,EAAAA,EAAAA,KAAU,KACRinE,GAAqBp1D,QAAUvH,SAASqC,cAAc,cACrD,IAEH,MAAO,CAAEsa,GAAeC,KAAkBC,EAAAA,GAAAA,IAAc8/C,GAAsBD,IAExEnE,GAAe31B,GAAO41B,gBAAkB51B,EAAM2xB,cAAc3xB,EAAM41B,sBAAmB1iE,EACrF8mE,GAAmBrE,IAAcsE,SACjC,IACJrpD,GAAG,WAAE5X,GAAU,oBAAEkhE,IACfjD,GAAU,CAAC,GAET,gBACJkD,IACEjE,GAAkB,CAAC,EAEjBkE,GAAmB/jE,QAAQ4gE,GAAQmD,kBACnCC,GAAoBhkE,QAAQ4gE,GAAQoD,mBAEpCC,GAAYrD,IAAUsD,EAAAA,GAAAA,IAAatD,GACnCrB,GAAkBD,KAAgB4E,EAAAA,GAAAA,IAAa5E,IAE/C5jE,GAAY4jE,IAAgBsB,GAAWrB,KAAoB0E,GAE3DE,GAAcC,EAAAA,GACdC,QAAuDxnE,IAAnC2jE,GAAmB8D,YACvCC,GAAkBvkE,QAAQwgE,GAAmB8D,aAE7CE,IAAsB/+D,EAAAA,EAAAA,IAAiBg/D,IACtCR,IACLvC,EAAa,CAAE55C,IAAKm8C,GAAWS,OAAQD,OAGnCE,IAAc/nE,EAAAA,EAAAA,KAAQ,KACnB8/D,EAAAA,GAAAA,MAEN,CAACD,KAEJhgE,EAAAA,EAAAA,KAAU,KACRsmE,GAAkB4B,GAAYC,sBAC7B,CAACD,KAEJ,MAAME,GAAuBF,GAAYG,UAClCC,GAA0BC,KAA+Br0D,EAAAA,EAAAA,MAC1Ds0D,GAAwC,UAAVxI,EAAoBoD,GAAgBqF,gBACpErF,GAAgBsF,qBAEpB1oE,EAAAA,EAAAA,KAAU,KAGR+nE,GAAoB,CAAEU,gBAFRH,IAA4BE,IAA+BJ,OAGxE,CAACA,GAAsBE,GAA0BE,KAEpD,MAAMG,GAAmBT,GAAYG,UAC9BO,GAAsBC,KAA2B30D,EAAAA,EAAAA,MAClD40D,GAAoC,UAAV9I,EAAoBoD,GAAgB2F,YAChE3F,GAAgB4F,iBAEpBhpE,EAAAA,EAAAA,KAAU,KAGR+nE,GAAoB,CAAEgB,YAFRH,IAAwBE,IAA2BH,OAGhE,CAACA,GAAkBC,GAAsBE,KAE5C,MAAMG,IAAWv3D,EAAAA,EAAAA,MAEXlS,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,KACPkG,GAASqnC,GAAOkmB,cAAe,EAC/B8V,GAAW3lE,QAAQ2C,KAEnB,YACJijE,GAAW,UAAEC,GAAS,sBAAEC,GAAqB,aAAEC,GAAY,aAAEC,GAAY,UAAEC,IF5NxDC,EACrB7uD,EACA/U,EACAoe,EACAylD,EACAC,EACAxF,EACAz+D,KAEA,MAAM,iBACJwhC,EAAgB,qBAChB49B,EAAoB,YACpB8E,EAAW,YACXC,EAAW,yBACXC,EAAwB,aACxB7E,IACEn8D,EAAAA,EAAAA,MAEEihE,GAAoBr4D,EAAAA,EAAAA,KAAgB,GACpCs4D,GAAgBt4D,EAAAA,EAAAA,MAChBu4D,GAAkBv4D,EAAAA,EAAAA,KAAgB,GAClCw4D,GAAmBx4D,EAAAA,EAAAA,MACnB+rB,GAAa9M,EAAAA,GAAAA,MAEnB3wB,EAAAA,EAAAA,KAAU,KACR,IAAK4a,EAAI/I,UAAYhM,EAAQ,OAE7B,MAAMskE,EAAaA,KACjBzkE,OAGI4Y,EAAQ1D,EAAI/I,QAElB,OADAyM,EAAM7B,iBAAiB,OAAQ0tD,GACxB,KACL7rD,EAAM5B,oBAAoB,OAAQytD,MAEnC,CAACzkE,EAAQkV,EAAK/U,IAEjB,MAAMujE,GAAYnkE,EAAAA,EAAAA,KAAawvB,IACxB7Z,EAAI/I,SAASu4D,eAClBxvD,EAAI/I,QAAQu4D,cAAc/qD,YAAYgrD,KAAKC,UAAU71C,GAAQ,OAC5D,CAAC7Z,IAEEyuD,GAAwBpkE,EAAAA,EAAAA,KAAaqE,IACzC8/D,EAAU,CACRmB,UAAW,qBACXC,UAAW,CACTC,cAAenhE,OAGlB,CAAC8/D,IAEEsB,GAAmB1hE,EAAAA,EAAAA,IAAiB8U,IACxC,IAAKlD,EAAI/I,QAAS,OAClB,MAAMyM,EAAQ1D,EAAI/I,QAClByM,EAAMnS,IAAM,cACZmS,EAAM7B,iBAAiB,QAAQ,KAC7B6B,EAAMnS,IAAM2R,IACX,CAAE6sD,MAAM,OAGPxB,GAAclkE,EAAAA,EAAAA,KAAa6Y,IAC/B,GAAIisD,EAAkBl4D,QAOpB,OANAu3D,EAAU,CACRmB,UAAW,uBAEbP,EAAcn4D,QAAUoB,YAAW,KACjCy3D,EAAiB5sD,KAtEF,MA2EnB4sD,EAAiB5sD,KAChB,CAACsrD,IAEEE,GAAerkE,EAAAA,EAAAA,KAAa2lE,IAChC,IAAKhwD,EAAI/I,QACP,OAEF,MAAM,MAAEC,EAAK,OAAEK,GAAWyI,EAAI/I,QAAQyQ,wBACtC8mD,EAAU,CACRmB,UAAW,mBACXC,UAAW,CACT14D,QACAK,SACA04D,aAAa,EACbC,iBAAkBF,OAGrB,CAACxB,EAAWxuD,IAET2uD,GAAetkE,EAAAA,EAAAA,KAAY,KAC1B2V,EAAI/I,UAGTu3D,EAAU,CACRmB,UAAW,oBACXC,UAAW,CACTvoD,KAAM,EACN+G,MAAO,EACPC,IAAK,EACLC,OAAQ,KAIZkgD,EAAU,CACRmB,UAAW,4BACXC,UAAW,CACTvoD,KAAM,EACN+G,MAAO,EACPC,IAAKhF,EAAes+C,GAAiC,EACrDr5C,OAAQ,QAGX,CAACkgD,EAAWnlD,EAAcrJ,IAEvB4uD,GAAYvkE,EAAAA,EAAAA,KAAY,KAC5BmkE,EAAU,CACRmB,UAAW,gBACXC,UAAW,CACTO,cAAc9K,EAAAA,GAAAA,UAGjB,CAACmJ,IAEE4B,GAAkB/lE,EAAAA,EAAAA,KAAamJ,IACnCg7D,EAAU,CACRmB,UAAW,mBACXC,UAAWp8D,MAEZ,CAACg7D,IAEE6B,GAAgBhmE,EAAAA,EAAAA,KAAawvB,IACjC,GAAIw1C,EAAgBp4D,QAClB,OAEF,MAAMu4D,EAAgBxvD,EAAI/I,SAASu4D,cAGnC,GAAIA,IAFiB31C,EAAMjpB,OAM3B,IACE,MAAMwT,EAAOqrD,KAAKa,MAAMz2C,EAAMzV,OACxB,UAAEurD,EAAS,UAAEC,GAAcxrD,EAMjC,GAJkB,kBAAdurD,GACF7kE,MAGgB,kBAAd6kE,GACEpG,EAAQ,CACV,MAAM94C,GAAMo8C,EAAAA,EAAAA,IAAatD,GACzB0F,EAAY,CAAEx+C,MAAK8/C,yBAAyB,GAC9C,CAmBF,GAhBkB,6BAAdZ,GACFjB,EAAa7rC,EAAW/M,YAGR,8BAAd65C,GACFhB,IAGgB,sCAAdgB,GACFhB,IAGgB,0BAAdgB,GACFf,IAGgB,iBAAde,EAA8B,CAChC,MAAMa,EAAiB1gB,iBAAiBpgD,SAAS+a,MAAMulC,iBAAiB,qBACxEogB,EAvMgB,4VAuMgBlQ,QAAQ,qBAAsBsQ,IAC9DrB,EAAkBl4D,QAAUtO,QAAQinE,EAAUa,iBAChD,CAMA,GAJkB,uBAAdd,GACF53D,aAAaq3D,EAAcn4D,SAGX,sBAAd04D,EAAmC,CACrC,IAAKb,EAAc,OACnBO,EAAgBp4D,SAAU,CAC5B,CA8BA,GA3BkB,qCAAd04D,GACFnB,EAAU,CACRmB,UAAW,0BACXC,UAAW,CACTc,OAAQd,EAAUc,OAElBtsD,KAAM,QAKM,+BAAdurD,GACFrjC,EAAiB,CACft8B,QAAS,yDAIK,yBAAd2/D,IACFzF,EAAqB,CACnByG,KAAMf,EAAUe,OAElB3B,EAAY,CACV3mE,KAAM,OACNsoE,KAAMf,EAAUe,QAIF,sBAAdhB,EAAmC,CACrC,MAAMiB,EAAUhB,EAAU1sD,IAC1B9K,OAAOohD,KAAKoX,EAAS,SAAU,aACjC,CAWA,GATkB,8BAAdjB,GACFnB,EAAU,CACRmB,UAAW,yBACXC,UAAW,CACTiB,WAAW,KAKC,iCAAdlB,GACe,mCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEe,GAAWd,EACnBpB,EAAU,CACRmB,UAAW,wBACXC,UAAW,CACTc,SACAzY,MAAO,gBAGb,CAEA,GAAkB,iCAAd0X,GACe,mCAAdA,GACc,uCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEe,GAAWd,EACnBpB,EAAU,CACRmB,UAAW,wBACXC,UAAW,CACTc,SACAzY,MAAO,gBAGb,CA+CA,GA7CkB,gCAAd0X,GACFnB,EAAU,CACRmB,UAAW,uBACXC,UAAW,CACT3X,MAAO,iBAKK,4BAAd0X,GACFnB,EAAU,CACRmB,UAAW,mBACXC,UAAW,CACT3X,MAAO,iBAKK,qCAAd0X,GACFnB,EAAU,CACRmB,UAAW,4BACXC,UAAW,CACT3X,MAAO,iBAKK,+BAAd0X,GACFnB,EAAU,CACRmB,UAAW,qBACXC,UAAW,CACT3X,MAAO,iBAKK,8BAAd0X,GACFnB,EAAU,CACRmB,UAAW,sBACXC,UAAW,CACT9kB,OAAQ,iBAKI,6BAAd6kB,EAA0C,CAC5C,MAAM,gBAAEmB,EAAe,SAAElsD,GAAagrD,EAEtC,IAAKkB,GAA8C,iBAApBA,EAO7B,YANAtC,EAAU,CACRmB,UAAW,sBACXC,UAAW,CACT3X,MAAO,6BAMb,GAAIrzC,EACF,IACEmsD,OAAOnsD,EACT,CAAE,MAAOpY,GAOP,YANAgiE,EAAU,CACRmB,UAAW,sBACXC,UAAW,CACT3X,MAAO,qBAIb,CAGF,IAAKsR,EAOH,YANAiF,EAAU,CACRmB,UAAW,sBACXC,UAAW,CACT3X,MAAO,mBAMbiX,EAAyB,CACvBtC,WAAWC,EAAAA,EAAAA,IAAatD,GACxByH,cAAeF,EACflsD,SAAU0L,OAAO1L,GACjB62C,MAAO8N,EAAO9N,OAElB,CAEAsT,EAAQ3qD,EACV,CAAE,MAAOhQ,GACP,IAED,CACD06D,EAAcN,EAAWO,EAASqB,EAAiB7G,EACnDqF,EAAWF,EAAcC,EAAc7jE,EAAQ+3B,EAAW/M,WAC1D9V,IAyCF,OAtCA5a,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAE8R,EAAK,OAAEK,EAAM,WAAEue,GAAe+M,EAClCysC,EAAiBr4D,SAAWq4D,EAAiBr4D,QAAQC,QAAUA,GAC9Do4D,EAAiBr4D,QAAQM,SAAWA,IAAW+3D,EAAiBr4D,QAAQ6e,aAC7Ew5C,EAAiBr4D,QAAU,CAAEC,QAAOK,SAAQue,cAC5C44C,EAAa54C,MACZ,CAAC44C,EAAcC,EAAc9rC,KAEhCz9B,EAAAA,EAAAA,KAAU,KACHmkE,GAAQ0H,eAAevqE,SACb6iE,EAAO0H,cACf/qE,SAAS2zB,IACd20C,EAAU30C,MAGZwwC,EAAa,CACX55C,KAAKo8C,EAAAA,EAAAA,IAAatD,GAClB8D,OAAQ,CACN4D,cAAe,SAGlB,CAACzC,EAAWjF,KAEfnkE,EAAAA,EAAAA,KAAU,KACRgT,OAAOyJ,iBAAiB,UAAWwuD,GAC5B,IAAMj4D,OAAO0J,oBAAoB,UAAWuuD,KAClD,CAACA,EAAerwD,KAEnB5a,EAAAA,EAAAA,KAAU,KACJ6F,GAAU+U,EAAI/I,SAASu4D,eACzBd,IACAC,IACAU,EAAgBp4D,SAAU,GAE1Bq4D,EAAiBr4D,aAAUzR,IAE5B,CAACyF,EAAQoe,EAAcqlD,EAAcC,EAAc3uD,IAE/C,CACLwuD,YAAWC,wBAAuBF,cAAaG,eAAcC,eAAcC,cEhLzEC,CAAeR,GAAUpjE,GAAQoe,GAAcilD,IAwSnD,SAAqBz0C,GACnB,MAAM,UAAE81C,EAAS,UAAEC,GAAc/1C,EAmBjC,GAjBkB,+BAAd81C,KACEuB,EAAAA,EAAAA,MACF7M,EAAuB,CAAEQ,MAAO,eAEhC2J,GAAU,CACRmB,UAAW,oBACXC,UAAW,CACT3X,MAAO,kBAMG,4BAAd0X,GACFwB,KAGgB,yBAAdxB,EAAsC,CACxC,MAAMiB,EAAUQ,EAAAA,IAAkBxB,EAAUyB,UAC5CpH,EAAiB,CAAE/mD,IAAK0tD,EAASU,kBAAmB1B,EAAU2B,gBAC9DzH,GACF,CAcA,GAZkB,8BAAd6F,GACFxC,GAAoB,CAAEX,oBAAqBoD,EAAU4B,aAGrC,kCAAd7B,GACFxC,GAAoB,CAAEsE,wBAAyB7B,EAAU4B,aAGzC,iCAAd7B,GACFhC,IAA4B+D,EAAAA,GAAAA,IAAiB9B,EAAUniE,OAASmiE,EAAUniE,WAAQjI,GAGlE,6BAAdmqE,EAA0C,CAC5C,MAAMl/C,EAAMm/C,EAAU+B,UACtB1D,GAAwB2B,EAAUniE,QAAUgjB,EAAM68C,GAAY78C,QAAOjrB,GACvE,CAeA,GAbkB,iCAAdmqE,GACFjE,GAAkBkE,EAAUniE,OAGZ,sBAAdkiE,IACF7F,IACAC,EAAgB,CACdlS,IAAKA,EACLvsD,WAAYA,GACZ8Y,KAAMwrD,EAAUxrD,QAIF,8BAAdurD,EAA2C,CAC7C,MAAMliE,EAAQmiE,EAAUniE,MAClBmkE,EAAYhC,EAAUiC,WAC5BjH,EAAc,CACZpgD,UAAWolD,EAAU4B,YAAc7oE,QAAQinE,EAAU/uD,MAAMixD,OAAOprE,QAClErC,SAAUurE,EAAUmC,UACpBlxD,KAAM+uD,EAAU/uD,KAChBpT,QACAmkE,YACAI,kBAAmBpC,EAAUqC,qBAEjC,CAEA,GAAkB,mCAAdtC,EAAgD,CAClD,MAAMliE,EAAQmiE,EAAUniE,MAClBmkE,EAAYhC,EAAUiC,WAC5B/G,EAAmB,CACjBtgD,UAAWolD,EAAU4B,YAAc7oE,QAAQinE,EAAU/uD,MAAMixD,OAAOprE,QAClErC,SAAUurE,EAAUmC,UACpBlxD,KAAM+uD,EAAU/uD,KAChBpT,QACAmkE,YACAI,kBAAmBpC,EAAUqC,oBAC7BrnD,SAAUglD,EAAUhlD,UAExB,CAMA,GAJkB,mCAAd+kD,GACFxC,GAAoB,CAAE+E,sBAAsB,IAG5B,uBAAdvC,EAAoC,CACtC,GAAI1E,IAAoB2E,EAAU5/D,QAAQ8hE,OAAOprE,SAAWkpE,EAAUuC,SAASzrE,QAC1EkpE,EAAUuC,QAAQzrE,OAAS,GAAKykE,GAAqBE,IACrDM,GAAiBx0C,KAAKC,MAEzB,YADAg7C,QAAoB5sE,GAItB0lE,EAAmB0E,GACnBhE,IACF,CAEA,GAAkB,gCAAd+D,EAA6C,CAC/C,MAAMtnC,EAASunC,EAAUyC,YAAYtrE,IAAIurE,EAAAA,IAAsBjqC,OAAO1/B,SAChE4pE,GAAclqC,GAAQ3hC,OAE5ByjE,EAAgB,CACd1O,MAAO5D,EAAKvtD,GACZokC,MAAOkhC,EAAUlhC,MACjBrG,SACAkqC,eAGFzI,GACF,CAEA,GAAkB,0BAAd6F,EAAuC,CACzC,GAAI1E,GAAmBI,IAA2BM,GAAiBx0C,KAAKC,MAEtE,YADAo7C,KAIFpH,IAAqB,GACrBQ,IACF,CAEA,GAAkB,iCAAd+D,EAA8C,CAChD,GAAI1E,GAAmBE,GAAqBQ,GAAiBx0C,KAAKC,MAEhE,YADAq7C,MAvNNvuD,iBACE,IAAK2zC,EAAK,OACV,MAAMhX,QAAiBx8B,EAAAA,GAAAA,IAAQ,yBAA0B,CACvDwzC,QAGEhX,GACF2tB,GAAU,CACRmB,UAAW,yBACXC,UAAW,CACT9kB,OAAQ,aAIdwgB,IAA4BzqB,EAC9B,CA4MI6xB,GACA9G,IACF,CAEA,GAAkB,iCAAd+D,EAA8C,CAChD,MAAM,OAAEgD,EAAM,OAAEzjE,EAAQwhE,OAAQkC,GAAchD,GA5KlD1rD,eAAwC0uD,EAAmBD,EAAgBE,GACzE,MAAM9sE,QAAese,EAAAA,GAAAA,IAAQ,4BAA6B,CACxDwzC,IAAKA,EACLib,aAAcH,EACdE,eAGFrE,GAAU,CACRmB,UAAW,wBACXC,UAAW,CACTc,OAAQkC,KACL7sE,IAGT,CA+JIgtE,CAAyBH,EAAWD,EAAQlD,KAAKC,UAAUxgE,GAC7D,CAEA,GAAkB,kCAAdygE,EAA+C,CACjD,GAAIpE,IAAyBI,GAAiBx0C,KAAKC,MAEjD,YADA47C,MArNN9uD,eAAuC+uD,EAAiBt1D,SAC5B0G,EAAAA,GAAAA,IAAQ,6BAA8B,CAC9DwzC,IAAKA,EACL30C,IAAK+vD,EACLt1D,cAaF6tD,GAAyB,CAAEtoD,IAAK+vD,EAASt1D,aACzCiuD,MAVE4C,GAAU,CACRmB,UAAW,0BACXC,UAAW,CACT9kB,OAAQ,cAQhB,CAqMIooB,CAAwBtD,EAAU1sD,IAAK0sD,EAAUuD,UACnD,CAEA,GAAkB,kCAAdxD,EAA+C,CACjD,IAAK9X,IAAQ+U,GAAW,OACxB,MAAM,GAAEtiE,GAAOslE,EACflF,EAA+B,CAAEjP,MAAO5D,EAAIvtD,GAAI6Z,UAAW7Z,EAAIsiE,cACjE,CAEA,GAAkB,wCAAd+C,EAAqD,CACvD,IAAK9X,EAAK,OACV2S,EAA2B,CAAE3S,MAAK+U,cACpC,CAEkB,2BAAd+C,GAEAnB,GAAU,CACRmB,UAAW,mBACXC,UAAW,CACTiB,UAAW/D,GACXsG,iBAAkBpG,GAClBqG,eAAgBnG,MAQN,6BAAdyC,GAC4BzrD,WAC5B,MAAMovD,QAAwBC,EAAAA,EAAAA,OACxB,gBAAEC,EAAe,cAAEC,EAAa,YAAExG,GAAgBqG,EAExD,IAAKG,IAAkBD,EASrB,OARAhF,GAAU,CACRmB,UAAW,qBACXC,UAAW,CACTiB,WAAW,KAGfvkC,EAAiB,CAAEt8B,QAASpL,GAAQ,uCACpCwtE,QAAoB5sE,GAIlBsnE,GACEE,GACFwB,GAAU,CACRmB,UAAW,qBACXC,UAAW,CACTiB,UAAWloE,QAAQwgE,GAAmB8D,aACtCyG,SAAUzG,GAAayG,SACvBC,UAAW1G,GAAa0G,UACxBC,SAAU3G,GAAa2G,SACvBC,OAAQ5G,GAAa6G,QACrBC,MAAO9G,GAAa8G,MACpBC,oBAAqB/G,GAAagH,SAClCC,kBAAmBjH,GAAakH,oBAIpC1J,EAAwB,CAAE5S,MAAK+U,gBAGjCtgC,EAAiB,CAAEt8B,QAASpL,GAAQ,kCACpCwtE,QAAoB5sE,KAIxB4uE,GAGgB,mCAAdzE,GACFxhE,IAEJ,GAngB0Eo7D,EAAQwB,IAElF3lE,EAAAA,EAAAA,KAAU,KACJf,IAAUmlE,EAA0BgF,MACvC,CAACA,GAAWhF,EAA2BnlE,MAE1Ce,EAAAA,EAAAA,KAAU,KACJf,IAAUolE,EAA4B8E,MACzC,CAACA,GAAa9E,EAA6BplE,KAE9C,MAAMgwE,GAAsBluB,GAAYwkB,GAAYngD,WAAamgD,EAAW9pD,KAAKixD,OAAOprE,OAAS,EAC3F4tE,GAA2BnuB,GAAY0kB,GAAiBrgD,WAAaqgD,EAAgBhqD,KAAKixD,OAAOprE,OAAS,EAE1G6tE,IAAuBnmE,EAAAA,EAAAA,IAAgB,KAC3C++D,GAAoB,CAAET,kBAAkB,OAEpC8H,IAA0BpmE,EAAAA,EAAAA,IAAgB,KAC9C++D,GAAoB,CAAE+E,sBAAsB,EAAOxF,kBAAkB,IACrEr0D,YAAW,KACTyxD,MAlLiB,QAsLf2K,IAAwBrmE,EAAAA,EAAAA,IAAgB,KAC5C++D,GAAoB,CAAER,mBAAmB,OAGrC+H,IAAwBtmE,EAAAA,EAAAA,IAAgB,KAC5CogE,GAAU,CACRmB,UAAW,2BAITgF,IAA6BvmE,EAAAA,EAAAA,IAAgB,KACjDogE,GAAU,CACRmB,UAAW,gCAITyC,IAAsBhkE,EAAAA,EAAAA,IAAiBwmE,IAC3C1J,OAAmB1lE,GACnBqmE,KACA2C,GAAU,CACRmB,UAAW,eACXC,UAAW,CACTiF,UAAWD,QAKXE,IAA2B1mE,EAAAA,EAAAA,IAAgB,KAC/CgkE,QAGI2C,IAAoB3mE,EAAAA,EAAAA,IAAgB,KACxCwgE,SAIF53D,EAAAA,EAAAA,IAAc,KACZqB,YAAW,KACT08D,OA5NiB,OA8NlB,CAAC3P,IAEJ,MAAM4P,IAAwB5mE,EAAAA,EAAAA,IAAgB,OACvC6mE,EAAAA,GAAAA,OAAuB5wE,IAC1BgoB,UAIE8kD,IAA2B/iE,EAAAA,EAAAA,IAAgB,MAC3C6mE,EAAAA,GAAAA,OAAuB5wE,IACzBioB,UAIE4oD,IAAgC9mE,EAAAA,EAAAA,IACnCM,IAAyBrK,IAAUoqE,GAAsB//D,OAG5DtJ,EAAAA,EAAAA,KAAU,KACJikB,IACF2rD,KACAE,IAA8B,KAE9B/D,KACA+D,IAA8B,MAE/B,CAAC7rD,KAEJ,MAAM8rD,IAA4B/mE,EAAAA,EAAAA,IAAiBwiC,IACjD49B,GAAU,CACRmB,UAAW,qBACXC,UAAW,CACT4B,WAAY5gC,SAKlBxrC,EAAAA,EAAAA,KAAU,KACJ+gD,GACFgvB,GAA0BxsE,QAAQtE,OAEnC,CAACA,GAAU8hD,KAEdlW,EAAAA,GAAAA,IAAsB,EAAEmlC,MACH,cAAfpR,GACFmR,IAA0B,GAExBnR,GAAiC,cAAnBoR,GAChBD,IAA0B,KAE3B,CAACnR,KAEJhtD,EAAAA,EAAAA,IAAc,EAAEq+D,MACVzM,IAAuByM,GACvB9L,GAAQoH,OAAS/H,GAAsBS,IACzCmF,GAAU,CACRmB,UAAW,iBACXC,UAAW,CACTe,KAAMpH,EAAOoH,KACb7lB,OAAQue,KAGZa,EAAqB,CACnByG,UAAMnrE,IAER8kE,OAED,CAAC1B,EAAoBS,EAAemF,GAAWjF,GAAQoH,OAE1D,MAAM2E,IAAwBlnE,EAAAA,EAAAA,IAAgB,KAC5C47D,EAAgB,CACdvO,MAAO5D,EAAKvtD,GACZirE,WAAW,IAEbzL,OAGI0I,IAAoBpkE,EAAAA,EAAAA,IAAgB,KACxCg9D,IAAqB,GACrBS,KACA2C,GAAU,CACRmB,UAAW,kBACXC,UAAW,CACT9kB,OAAQ,kBAKR0qB,IAAoBpnE,EAAAA,EAAAA,IAAgB,KACxCg8D,EAAkB,CAAE3O,MAAO5D,EAAKvtD,KAChC8gE,IAAqB,GACrBS,KACA2C,GAAU,CACRmB,UAAW,kBACXC,UAAW,CACT9kB,OAAQ,aAKRkoB,IAA2B5kE,EAAAA,EAAAA,IAAiBqnE,IAC5CA,IACFjK,QAAyBhmE,GACzBqmE,MAGF2C,GAAU,CACRmB,UAAW,0BACXC,UAAW,CACT9kB,OAAQ,kBAKR2nB,IAA0BrkE,EAAAA,EAAAA,IAAgB,KAC9CogE,GAAU,CACRmB,UAAW,yBACXC,UAAW,CACT9kB,OAAQ,eAGZwgB,IAA2B,GAC3BO,QAGI6J,IAA0BtnE,EAAAA,EAAAA,IAAgB8V,UACzC2zC,UACgBxzC,EAAAA,GAAAA,IAAQ,uBAAwB,CAAEwzC,SAMvD2W,GAAU,CACRmB,UAAW,yBACXC,UAAW,CACT9kB,OAAQ,aAGZwgB,IAA2B,GAC3BO,MAXE4G,SAoDEkD,IAAqBvnE,EAAAA,EAAAA,IAAgB,KACpCm9D,KACLC,QAAyBhmE,GACzBqmE,MAEAzsD,EAAAA,GAAAA,GAASmsD,GAAsBroD,IAAKqoD,GAAsB5tD,UAC1D6wD,GAAU,CACRmB,UAAW,0BACXC,UAAW,CACT9kB,OAAQ,sBAqBd1lD,EAAAA,EAAAA,KAAU,KACH6F,KACHigE,OAAmB1lE,GACnB4lE,IAAqB,GACrBE,IAA2B,GAC3BV,OAAcplE,GACdslE,OAAmBtlE,GACnB2nE,GAAoB,CAClBsE,yBAAyB,EACzBS,sBAAsB,EACtB1F,qBAAqB,EACrBE,kBAAkB,EAClBC,mBAAmB,IAErB3B,OAED,CAAC//D,KAEJ,MAAMkD,IAAiBC,EAAAA,EAAAA,IAAgB,KACrCm8D,EAAiB,CAAEjgE,GAAIutD,EAAKvtD,QAgOxBsrE,IAAyB5/B,EAAAA,GAAAA,GAAiB20B,GAAYl9D,OAAO,GAC7DooE,IAA6B7/B,EAAAA,GAAAA,GAAiB20B,GAAYiH,WAAW,GACrEkE,IAA4B9/B,EAAAA,GAAAA,GAAiB20B,GAAchiE,QAAQgiE,EAAWtmE,WAAW,GACzF0xE,IAAwB//B,EAAAA,GAAAA,GAAiB20B,GAAY9pD,MAAM,GAE3Dm1D,IAAiChgC,EAAAA,GAAAA,GAAiB60B,GAAiBjgD,UAAU,GAC7EqrD,IAA8BjgC,EAAAA,GAAAA,GAAiB60B,GAAiBp9D,OAAO,GACvEyoE,IAAkClgC,EAAAA,GAAAA,GAAiB60B,GAAiB+G,WAAW,GAC/EuE,IAAiCngC,EAAAA,GAAAA,GAAiB60B,GAAmBliE,QAAQkiE,EAAgBxmE,WAAW,GACxG+xE,IAA6BpgC,EAAAA,GAAAA,GAAiB60B,GAAiBhqD,MAAM,IAEpEw1D,GAA4BC,KAAiCh9D,EAAAA,EAAAA,KAAS,IACtEi9D,GAAsBC,KAA2Bl9D,EAAAA,EAAAA,KAAS,IAC1Dm9D,GAA2BC,KAAgCp9D,EAAAA,EAAAA,KAAS,IACpEq9D,GAAsBC,KAA2Bt9D,EAAAA,EAAAA,KAAS,IAC1Du9D,GAA2BC,KAAgCx9D,EAAAA,EAAAA,KAAS,IAEpEy9D,GAA+BC,KAAoC19D,EAAAA,EAAAA,KAAS,IAE5E29D,GAAqBC,KAA0B59D,EAAAA,EAAAA,IAAS,IAG/DtC,EAAAA,EAAAA,IAAc,KACZqB,YAAW,KACTq2D,KACAC,OACCjF,EAAiB,EA9rBD,OA+rBlB,CAACmN,GAA2BJ,GAC7BE,GAAsBA,GACtB9L,GAAiBjgD,SAAU8jD,GAAchF,EAAgBG,EACzD8E,KAEF,MAAMwI,GAAsD,QAAnCnB,IAA+E,WAAnCA,GAG/DoB,GAAaD,IAAoBR,IAAwBE,GAA6B,EACxFF,IAAwBE,GAA4B,EAAI,EAEtDQ,GALsBF,IAMrBZ,IAAyBE,GAA6C,WAAf,aAExDa,IAA0BxgE,EAAAA,EAAAA,MAC1BygE,IAAwBzgE,EAAAA,EAAAA,MACxB0gE,IAA+B1gE,EAAAA,EAAAA,MAC/B2gE,IAA6B3gE,EAAAA,EAAAA,MAC7B4gE,IAAwB5gE,EAAAA,EAAAA,OAE9B1R,EAAAA,EAAAA,KAAU,KACJikB,IAAgBpe,IAAUtC,QAAQ2jE,KACpC0K,IAAiC,GAE7BU,GAAsBzgE,SACxBc,aAAa2/D,GAAsBzgE,SAGrCygE,GAAsBzgE,QAAUoB,YAAW,KACzC2+D,IAAiC,GACjCU,GAAsBzgE,aAAUzR,IAztBN,QA4tB5BwxE,IAAiC,GAE7BU,GAAsBzgE,UACxBc,aAAa2/D,GAAsBzgE,SACnCygE,GAAsBzgE,aAAUzR,IAI7B,KACDkyE,GAAsBzgE,SACxBc,aAAa2/D,GAAsBzgE,YAGtC,CAACoS,GAAcpe,GAAQqhE,MAE1BlnE,EAAAA,EAAAA,KAAU,KACJkyE,GAAwBrgE,SAASc,aAAau/D,GAAwBrgE,SACtEsgE,GAAsBtgE,SAASc,aAAaw/D,GAAsBtgE,SAElEo9D,KACFkD,GAAsBtgE,QAAUoB,YAAW,KACzCu+D,IAAwB,KACvB,IACHJ,IAAwB,GACxBc,GAAwBrgE,QAAUoB,YAAW,KAC3Ci+D,IAA8B,KAC7B1O,KAGAyM,KACHuC,IAAwB,GACxBU,GAAwBrgE,QAAUoB,YAAW,KAC3Cm+D,IAAwB,KACvB5O,OAEJ,CAACyM,MAEJjvE,EAAAA,EAAAA,KAAU,KACJoyE,GAA6BvgE,SAASc,aAAay/D,GAA6BvgE,SAChFwgE,GAA2BxgE,SAASc,aAAa0/D,GAA2BxgE,SAE5Eq9D,KACFmD,GAA2BxgE,QAAUoB,YAAW,KAC9Cy+D,IAA6B,KAC5B,IACHJ,IAA6B,GAC7Bc,GAA6BvgE,QAAUoB,YAAW,KAChDi+D,IAA8B,KAC7B1O,KAGA0M,KACHwC,IAA6B,GAC7BU,GAA6BvgE,QAAUoB,YAAW,KAChDq+D,IAA6B,KAC5B9O,OAEJ,CAAC0M,MAEJlvE,EAAAA,EAAAA,KAAU,KACHyxE,IAA8BF,IACjCL,IAA8B,KAE/B,CAACA,GAA+BO,GAA2BF,KAE9D,MAAMgB,GAAajO,EAAiB,wBAA0B,GAExDkO,IAAkBxpE,EAAAA,EAAAA,IAAgB,KAClCo+D,GACFgC,GAAU,CACRmB,UAAW,yBAGbwB,KACA1C,IAAsB,GACtBpK,EAAuB,CAAEQ,MAAO,cAChCP,QAIEuT,IAAsBzpE,EAAAA,EAAAA,IAAgB,KAC1C+iE,QAGI2G,IAAwB1pE,EAAAA,EAAAA,IAAiB5B,IAC7Co9D,EAAyBp9D,MAGrBurE,IAAgBnxE,EAAAA,GAAAA,GDz5B0lC,WC25B9mC4lE,ID35B6pC,YC65BzpCwL,GAAoBjB,GAAgCzK,GACtD1nE,GAAQ4nE,GAAsB,OAAS,SAErCyL,GAAmB9L,IAAwBl1D,QA8GjD,OA5GA7R,EAAAA,EAAAA,KAAU,KAER8xE,GADc/K,IAAwBl1D,SAASgR,aAAe,KAE7D,CAAC+vD,GAAmBC,MA0GrBtxE,EAAAA,GAAAA,IAAA,OACEqZ,IAAKuU,GACLjwB,WAAWsC,EAAAA,GAAAA,GDjhCM,YCmhCdvC,IAAYwC,GACb8iE,GDphC4D,YCqhC5D7iE,SAAA,CAEDuiB,KAAgB6nD,EAAAA,EAAAA,QAlFjBvqE,EAAAA,GAAAA,IAAA,OAAKrC,UDr8BouC,WCq8BtsCwC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKqZ,IAAKksD,GAAiB5nE,UAAWuC,GAAqBlC,QAASizE,GAAgB9wE,SAAA,EAClFe,EAAAA,GAAAA,GAAA,OAAKvD,UDv8BirC,WCu8B7oCwC,UACvCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWyzE,QA1BtBlwE,EAAAA,GAAAA,GAAA,QACEvD,UD/6B23C,WCg7B33CkP,MACE,UAAUyjE,QACXnwE,UAEDe,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTC,UAbFmvC,GAAsC,EACnCvK,GAAsB,EAAI,EAa3BrjE,KAAK,YAAWrC,UAEhBe,EAAAA,GAAAA,GAAA,OACEmY,IAAKmsD,GACL7nE,UD17Bs5C,WC07Bl3CwC,SAEnCkxE,aAgBLrxE,EAAAA,GAAAA,IAAA,OAAKrC,UD58BmxC,WC48B/uCwC,SAAA,EACvCe,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACTC,GD/8B8zC,YCk9Bh0C6sC,SAAU,EACVC,KAAK,SACL,aAAY7uC,GAAK,kBACjBH,QAASkzE,GAAoB/wE,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAK,OACL7E,UAAWuC,QAGfgB,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACTC,GD99Bi1C,YCi+Bn1C6sC,SAAU,EACVC,KAAK,SACL,gBAAc,OACd,aAAY7uC,GAAK,kBACjBH,QAASmzE,GAAsBhxE,UAE/Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAK,OACL7E,WAAWsC,EAAAA,GAAAA,GACTC,GD1+BssC,uBCwhC9sCq9D,KAvBCuI,IAIH5kE,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAA2Bs/C,GAAYt/C,IACjEqxE,QAAQ,cAAapxE,UAErBe,EAAAA,GAAAA,GAAA,QAAMvD,UDzgCmH,WCygChFo8D,EAAG+L,OArBlD,WACE,MAAMnoE,GAAYsC,EAAAA,GAAAA,GAAeC,GDr/B+J,WCq/BrGs/C,GAAYt/C,IACvG,OACEF,EAAAA,GAAAA,IAAA,OAAKrC,UAAWA,EAAUwC,SAAA,EACxBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,MAChBgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,MAChBgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,MAChBgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,OAGtB,CAIWsxE,KAuBPtwE,EAAAA,GAAAA,GAAA,UACEvD,WAAWsC,EAAAA,GAAAA,GD1hCqP,WC4hC9PyvE,ID5hC+S,YC6hC9SlwB,GAAYt/C,IAEf2M,MAAOmkE,GACPpmE,IAAK2R,GACLlX,MAAO,GAAG6rD,GAAKiK,oBACfsW,QAASvQ,GACTwQ,MAAM,oDACNC,iBAAe,EACft4D,IAAKquD,MAELnK,KACAv9D,EAAAA,GAAAA,IAAA,OACE6M,MAAO,qBAAqBi4D,MAC5BnnE,WAAWsC,EAAAA,GAAAA,GD1iCsf,WC4iC5d,SAAnCovE,ID5iCuoB,WC6iCpmB,UAAnCA,ID7iC2rB,WC8iCxpB,QAAnCA,ID9iC+uB,WC+iC5sB,WAAnCA,ID/iCmyB,WCgjCjxB,eAAlBqB,IDhjC41B,WCijC90B,IAAdD,IDjjCwiB,WCkjC1hB,IAAdA,IDljCmlB,YCmjCnlBtwE,SAAA,EAEFH,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GDtjCiX,WCwjC1XiwE,KAA8BJ,IAA6B5vE,GAC3D4vE,IAA6B5vE,IAE/BgnD,OAAK,EACLr6C,MAAO,qBAAqByiE,cAAuCC,KACnExoE,UAAWyoE,KAAmCtL,GAAiBmH,kBAC/D34B,eAAgBwxB,GAAiBmH,kBACjCrtE,QAASgwE,GACTrsE,KAAK,UAASxB,SAAA,EAEZ+jE,GAAiBmH,mBAAqBoE,GACvCvL,GAAiBmH,oBACbnqE,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAACnvB,UAAWuC,GAA0B4G,MAAM,aAE3D9G,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GDvkCka,WCykC3a+vE,KAAyBJ,IAAwB1vE,GACjD0vE,IAAwB1vE,IAE1BgnD,OAAK,EACLr6C,MAAO,qBAAqBoiE,cAAkCC,KAC9DnoE,UAAWooE,KAA8BnL,GAAYqH,kBACrD34B,eAAgBsxB,GAAYqH,kBAC5BrtE,QAAS+vE,GACTpsE,KAAK,UAASxB,SAAA,EAEZ6jE,GAAYqH,mBAAqB+D,GAClCpL,GAAYqH,oBAAqBnqE,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAACnvB,UAAWuC,GAA0B4G,MAAM,gBAI3Fw9D,IACCtkE,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQtC,QAAQsiE,GAChBj/D,MAAOi/D,EAAgBj/D,OA7/BpB,IA8/BHP,QAASqpE,GACTxmE,gBAAc,EACdhK,WACEsC,EAAAA,GAAAA,GD/lC0hC,YC+lCt/BqkE,EAAgBj/D,OAAO8lE,OAAOprE,QD/lC6gC,YCgmChlCI,SAAA,CAEAmkE,EAAgBj7D,SACjBnI,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,SACjCmkE,EAAgBkH,QAAQprE,KAAK6vC,IAC5B/uC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAELvE,UAAU,wBACVmJ,MAAuB,gBAAhBmpC,EAAOvuC,KAAyB,SAAW,UAClDU,QAAM,EACNT,KAAK,UAEL3D,QAASA,IAAMytE,GAAoBx7B,EAAOtsC,IAAIxD,SAE7C8vC,EAAO/1B,MAAQjc,GAAQkjE,GAAoBlxB,EAAOvuC,QAR9CuuC,EAAOtsC,IAAMssC,EAAOvuC,cAenCR,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQkgE,EACR1/D,QAAS+mE,GACTxmE,MAAOpH,GAAQ,4BACfic,KAAMjc,GAAQ,mCACdipC,eAAgB2nC,GAChB5nC,aAAchpC,GAAQ,mBAExBiD,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQogE,GACR5/D,QAASgnE,GACTzmE,MAAOpH,GAAQ,6BACfic,KAAMjc,GAAQ,uBACdipC,eAAgB6nC,GAChB9nC,aAAchpC,GAAQ,kCAExBiD,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQ4iE,IAChBv/D,MAAOpH,GAAQ,wBACfouB,UAAWluB,GAAK,6BAA8B,CAC5C+yD,IAAKA,GAAKiK,UACVyW,SAAUhN,IAAuB5tD,UAChC,CACDomC,WAAW,EACX6V,cAAc,IAEhBhsB,aAAchpC,GAAQ,yBACtB6G,QAASunE,GACTnlC,eAAgB8nC,MAGlB9tE,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQyhE,GACRjhE,QAAS8oE,GACTvoE,MAAOpH,GAAQ,+BACfic,KAAMjc,GAAQ,yBACdipC,eAAgB2mC,GAChB1mC,sBAAoB,EACpBF,aAAchpC,GAAQ,iCAExBiD,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ0hE,GACRlhE,QAASgpE,GACTzoE,MAAOpH,GAAQ,0BACfouB,WAAWpqB,EAAAA,GAAAA,GAAWhE,GAAQ,oBAAqBizD,GAAKiK,WAAY,CAAC,oBACrEj0B,eAAgBynC,GAChBxnC,sBAAoB,WEnqC5B,GAA6R,WAA7R,GAA4U,WAA5U,GAAkY,WAAlY,GAA4b,WAA5b,GAAkkB,WAAlkB,GAAuoB,WAAvoB,GAAi0B,WAAj0B,GAAoiC,WAApiC,GAA6qC,WAA7qC,GAA4tC,WAA5tC,GAA8uC,WCsExuC0qC,GAAuB,CAAEthE,MAAO,IAAKK,OAAQ,IAC7CkhE,GAA+B,CAAEvhE,MAAO,IAAKK,OAAQ,KACrDmhE,GAA+B,CAAExhE,MAAO,IAAKK,OAAQ,KAuoB3D,IAAepT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM21B,EAAe31B,GAAO41B,iBAAkBC,EAAAA,EAAAA,KAAaptD,EAAQu3B,EAAM41B,sBAAmB1iE,GACpFi2D,MAAO2M,GAAgBH,GAAgB,CAAC,EAE1CI,EAAYD,EAAcrtD,EAAOutD,WAAWC,KAAKH,QAAe5iE,EAChEqyD,EAAMuQ,GAAcjuB,EAAAA,EAAAA,KAAWp/B,EAAQqtD,QAAe5iE,EACtD+V,GAAOC,EAAAA,EAAAA,KAAkBT,GACzBqqD,GAAQuD,EAAAA,EAAAA,KAAY5tD,IACpB,uBAAE49D,EAAsB,mBAAEC,IAAuBC,EAAAA,GAAAA,GAAqB99D,GAE5E,MAAO,CACLstD,YACAxQ,MACAt8C,OACA6pD,QACA0T,eAAgBH,EAChBI,WAAYH,KAjBE99D,EAroB2Bk+D,EAC7C1mC,QACA/2B,OACAs8C,MACAwQ,YACAjD,QACA2T,aACAD,qBAEA,MAAM,kBACJhP,EAAiB,iBACjBxF,EAAgB,eAChB2U,EAAc,gBACdjP,EAAe,SACf/7D,EAAQ,uBACRo2D,EAAsB,cACtB6U,EAAa,aACb7O,EAAY,gBACZ8O,EAAe,iBACfC,EAAgB,4BAChBC,EAA2B,wBAC3BC,IACEprE,EAAAA,EAAAA,OAEGqrE,EAAuBC,IAAyB7zD,EAAAA,EAAAA,IAAUozD,GAAcN,IAE/E,SAASgB,IACP,MAA0B,eAAtBnnC,GAAO0xB,WAAoCnhC,EAAAA,EAAWlrB,MAChC,cAAtB26B,GAAO0xB,WAAmCuV,IACvCf,EACT,CAMA,MAAM,cACJvU,EAAa,gBAAEiE,EAAe,kBAAEwR,EAAiB,YAAEC,EAAW,oBAAEC,GAC9DtnC,GAAS,CAAC,EACR21B,EAAeC,EAAkBjE,IAAgBiE,QAAmB1iE,GACpE,oBACJgnE,EAAmB,YAAE2B,EAAW,gBAAEN,EAAe,wBAAE4D,GACjDxJ,GAAgB,CAAC,EAEf4R,GAAOt0E,EAAAA,EAAAA,KAAQ,IACZm0E,GAAmB3yE,KAAK0pB,IAC7B,MAAM84C,EAAStF,EAAexzC,GAC9B,MAAO,CACLonC,KAAKhf,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAAKy4B,EAAO9N,OACnC8N,SACAt+D,OAAQtC,QAAQs/D,GAAiBx3C,KAAQo8C,EAAAA,GAAAA,IAAa5E,SAGzD,CAACyR,EAAmBzV,EAAegE,KAEhC,SAAEn+D,IAAaC,EAAAA,EAAAA,MACfkB,EAASqnC,GAAOkmB,cAAe,EAC/BshB,EAAyC,cAAtBxnC,GAAO0xB,WAC1BE,EAAyC,cAAtB5xB,GAAO0xB,WAC1B+V,EAAqC,eAAtBznC,GAAO0xB,WAEtBgW,GAAuBlwE,EACvBkW,GAAMlJ,EAAAA,EAAAA,MACNkrB,GAAYlrB,EAAAA,EAAAA,MACZmjE,GAAUnjE,EAAAA,EAAAA,MAEVojE,GAAoB9rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,UAE9CkjE,IAAiB/rE,EAAAA,EAAAA,IACrB,IAAM4R,EAAI/I,UAGNmjE,IAAiBhsE,EAAAA,EAAAA,IACrB,IAAM6rE,EAAQhjE,WAGV,kBACJojE,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuB16D,IAEpB26D,GAAmBC,KAAwBthE,EAAAA,EAAAA,KAAS,GAErDuhE,GAAgB74C,EAAU/qB,QAC1B6jE,GAAmB96D,EAAI/I,SAE7B7R,EAAAA,EAAAA,KAAU,KACRw1E,GAAqBjyE,QAAQqxE,GAAuBa,IAAiBC,KAAqBf,MACzF,CAACC,EAAqBa,GAAeC,GAAkBf,KAE1D30E,EAAAA,EAAAA,KAAU,KACRi/D,EAAuB,CAAEQ,MAAO,gBAC/B,CAACmV,IAEJ,MAAM,WACJe,GAAU,WACVjlD,GACAtiB,MAAOwnE,GAAc,KACrB1yE,GAAI,SACJsiB,IZpIW,SACb5K,EACAi7D,EACAC,GAAyB,EACzBC,EACA9xD,GAAwB,EACxB+xD,EAAoB,CAAElkE,MAAO,EAAGK,OAAQ,GACxCuhE,GAEA,MAAOuC,EAAwBC,IAA6BhiE,EAAAA,EAAAA,IAA4Bw/D,IACjFyC,EAAoBC,IAAyBliE,EAAAA,EAAAA,SAA2B9T,IAExEi2E,EAAoCC,IAAsC/1D,EAAAA,EAAAA,IAAU,CAAElZ,EAAG,EAAGG,EAAG,KAC/F+uE,EAAgCC,IAAkCj2D,EAAAA,EAAAA,IAAU,CAAEzO,MAAO,EAAGK,OAAQ,KAChGskE,EAAwBC,IAA0Bn2D,EAAAA,EAAAA,IAAU,CAAElZ,EAAG,EAAGG,EAAG,IAExEmvE,EAAkCN,IAClCO,EAAsBH,IAEtBj/C,EAAU5c,EAAI/I,QACdglE,EAAoBhB,EAAqBhkE,SAExCilE,EAAaC,IAAkBh3E,EAAAA,EAAAA,IAAQ,IACvCi3E,EAAiBC,IAAsBl3E,EAAAA,EAAAA,IAAQ,IAC/C41E,EAAYuB,EAAeC,IAAgBp3E,EAAAA,EAAAA,IAAQ,IACnD2wB,EAAY0mD,EAAeC,IAAgBt3E,EAAAA,EAAAA,IAAQ,IACnDu3E,EAAmBC,EAAqBC,IAAsBz3E,EAAAA,EAAAA,IAAQ,IAEtE03E,EAAiBC,IAAsBxjE,EAAAA,EAAAA,SAAuC9T,GAErF,SAASu3E,IACP,MAAO,CACL7lE,MAAOkB,OAAO4kE,WACdzlE,OAAQa,OAAO6kE,YAEnB,CAEA,MAAMC,GAAwB9uE,EAAAA,EAAAA,IAAiBwc,IACxCvB,GAAciyD,EAA0B,CAAE7uE,EAAGme,EAASne,EAAGG,EAAGge,EAAShe,OAGtEuwE,GAAoB/uE,EAAAA,EAAAA,IAAgB,IACjCib,EAAew6C,GAAsBwX,IAGxC+B,GAAsBhvE,EAAAA,EAAAA,IAAgB,KAC1C,IAAKmtE,EAAoB,OACzB,MAAM,MAAErkE,EAAK,OAAEK,GAAWgkE,EAEpB8B,EAAcN,IAOpB,MAAO,CAAEtwE,GANa4wE,EAAYnmE,MAGCA,GAAS,EAGrBtK,GALAywE,EAAY9lE,OAGCA,GAAU,OAKhDnS,EAAAA,EAAAA,KAAU,KACJw3B,GAASy/C,MACZ,CAACz/C,KAEJx3B,EAAAA,EAAAA,KAAU,KACR,IAAK82E,GAAeX,EAAoB,CACtC,MAAM+B,EAAmBF,IACzB,IAAKE,EAAkB,OAEvBJ,EAAsBI,GACtBnB,GACF,IACC,CAACZ,EAAoBW,EAAat/C,IAErC,MAAM2gD,GAAkBnvE,EAAAA,EAAAA,IAAiByrB,IACvC,GAAIA,aAAiB2jD,YAA+B,IAAjB3jD,EAAM+c,OACvC,OAIF,GADsB/c,EAAMhgB,OACVge,QAAQ,cAAgB+E,EACxC,OAEF,MAAM,EAAEnwB,EAAC,EAAEG,IAAML,EAAAA,GAAAA,GAAmBstB,IAE9B,KAAExS,EAAI,IAAEgH,GAAQuO,EAAQlV,wBAC9Bg0D,EAAmC,CAAEjvE,EAAG4a,EAAMza,EAAGyhB,IACjDytD,EAAuB,CAAErvE,IAAGG,MAE5B0vE,OAeImB,GAAoBrvE,EAAAA,EAAAA,IAAiByrB,IACzC,GAAIA,aAAiB2jD,YAA+B,IAAjB3jD,EAAM+c,OACvC,OAGF,MAAM8mC,EAAgB7jD,EAAMhgB,OAC5B,IAAK+iB,IAAY8gD,EACf,OAEF,MAAMC,EArBR,SAAmCD,GACjC,MAAM7lD,EAAWgF,GAAqB6gD,EAAc7lD,QAAQgF,GAE5D,GAAKhF,EAAQ+lD,EAAAA,KACb,IAAK,MAAM/gD,KAAY8mC,GACrB,GAAI9rC,EAAQ,IAAIgF,KACd,OAAOimC,GAAyBjmC,EAItC,CAWuBghD,CAA0BH,GAE/C,QAAqBl4E,IAAjBm4E,EAA4B,OAChCb,EAAmBa,GAEnB,MAAM,EAAElxE,EAAC,EAAEG,IAAML,EAAAA,GAAAA,GAAmBstB,IAE9B,KACJxS,EAAI,MAAE+G,EAAK,IAAEC,EAAG,OAAEC,GAChBsO,EAAQlV,wBACZg0D,EAAmC,CAAEjvE,EAAG4a,EAAMza,EAAGyhB,IACjDutD,EAA+B,CAAE1kE,MAAOkX,EAAQ/G,EAAM9P,OAAQ+W,EAASD,IACvEytD,EAAuB,CAAErvE,IAAGG,MAE5B4vE,OAGIsB,GAAoB1vE,EAAAA,EAAAA,IAAgB,KACxCmuE,OAGIwB,GAAsB3vE,EAAAA,EAAAA,IAAgB,KAC1CquE,QAGFr3E,EAAAA,EAAAA,KAAU,KACH81E,GACHqB,MAED,CAACrB,IAEJ,MAAM8C,EAA8BA,CAACvxE,EAAWG,KAC9C,MAAMywE,EAAcN,IAEdkB,EAAmBZ,EAAYnmE,MAC/BgnE,EAAoBb,EAAY9lE,OAEhC4mE,EAAiB5C,EAAoBrkE,MACrCknE,EAAkB7C,EAAoBhkE,OAE5C,IAAI8mE,EAAO5xE,EACP6xE,EAAO1xE,EAOX,OALIyxE,EAAO,IAAGA,EAAO,GACjBC,EAAO,IAAGA,EAAO,GACjBD,EAAOF,EAAiBF,IAAkBI,EAAOJ,EAAmBE,GACpEG,EAAOF,EAAkBF,IAAmBI,EAAOJ,EAAoBE,GAEpE,CAAE3xE,EAAG4xE,EAAMzxE,EAAG0xE,IAGjBC,GAA6BnwE,EAAAA,EAAAA,IAAgB,KACjD,GAAIib,EAAc,OAClB,MAAMuB,EAAYwxD,GAAoBtD,EAAyCuC,EAAxB+B,IACvD,IAAK7B,IAAuB3wD,EAAU,OACtC,MAAM4zD,EAAcR,EAA4BpzD,EAASne,EAAGme,EAAShe,GACrEswE,EAAsBsB,MAGlBC,GAA0BrwE,EAAAA,EAAAA,IAAiBswE,IAC/C,MAAMC,EAAUD,EAEVrB,EAAcN,IAEd6B,EAAgBzD,EAAajkE,MAC7B2nE,EAAiB1D,EAAa5jE,OAIpC,OAHAonE,EAAQznE,MAAQ3Q,KAAKC,IAAI62E,EAAYnmE,MAAO3Q,KAAKZ,IAAIi5E,EAAeD,EAAQznE,QAC5EynE,EAAQpnE,OAAShR,KAAKC,IAAI62E,EAAY9lE,OAAQhR,KAAKZ,IAAIk5E,EAAgBF,EAAQpnE,SAExEonE,MAGTv5E,EAAAA,EAAAA,KAAU,KACR,GAAI0wB,EAAY,OAChB,MAAM6oD,EAAUF,EAAwB,CAAEvnE,MAAOikE,EAAajkE,MAAOK,OAAQ4jE,EAAa5jE,SACtFonE,GAASnD,EAAsBmD,KAClC,CAACxD,EAAcrlD,IAElB,MAAMgpD,GAAyB1wE,EAAAA,EAAAA,IAAgB,KAC7C,IAAKmtE,GAAsBzlD,EAAY,OACvC,MAAM6oD,EAAUF,EAAwBlD,GACpCoD,GAASnD,EAAsBmD,OAGrCv5E,EAAAA,EAAAA,KAAU,KACJ0wB,GACJyoD,MACC,CAAChD,EAAoBzlD,KAExB1wB,EAAAA,EAAAA,KAAU,KACR,MAAM25E,EAAqBA,KACzBpC,IACAmC,IACAP,IACI3a,KACF7rD,aAAa6rD,IACbA,QAAgBp+D,GAElBo+D,GAAgBxrD,OAAOC,YAAW,KAChCurD,QAAgBp+D,EAChBo3E,MACC,MAKL,OAFAxkE,OAAOyJ,iBAAiB,SAAUk9D,GAE3B,KACLhnE,aAAa6rD,IACbA,QAAgBp+D,EAChB4S,OAAO0J,oBAAoB,SAAUi9D,MAEtC,CAACR,IAEJ,MAAMS,GAAa5wE,EAAAA,EAAAA,IAAiByrB,IAClC,IAAKkhD,IAAen+C,EAAS,OAC7B,MAAM,EAAEnwB,EAAC,EAAEG,IAAML,EAAAA,GAAAA,GAAmBstB,GAE9ByB,EAAU7uB,EAAIuvE,EAAoBvvE,EAClC8uB,EAAU3uB,EAAIovE,EAAoBpvE,EAElCyxE,EAAOtC,EAAgCtvE,EAAI6uB,EAC3CgjD,EAAOvC,EAAgCnvE,EAAI2uB,EAE7CggD,GAAoBD,EAA0B0C,EAA4BK,EAAMC,OAGhF38D,GAAevT,EAAAA,EAAAA,IAAiByrB,IACpC,IAAK/D,IAAe8G,QAA+Bp3B,IAApBq3E,EAA+B,OAC9D,MAAM,EAAEpwE,EAAC,EAAEG,IAAML,EAAAA,GAAAA,GAAmBstB,GAC9BolD,EAAuBtD,IAEvBuD,EAAe34E,KAAKC,IAAID,KAAKZ,IAAI,EAAG8G,GAAIswE,IAAiB7lE,OACzDioE,EAAe54E,KAAKC,IAAID,KAAKZ,IAAI,EAAGiH,GAAImwE,IAAiBxlE,QAEzD+jB,EAAU4jD,EAAelD,EAAoBvvE,EAC7C8uB,EAAU4jD,EAAenD,EAAoBpvE,EAE7CwyE,EAAOrD,EAAgCtvE,EAAIwyE,EAAqB/nE,MAAQkkE,EAAYlkE,MACpFmoE,EAAOtD,EAAgCnvE,EAAIqyE,EAAqB1nE,OAAS6jE,EAAY7jE,OASrF+nE,EAAY,CANhB7yE,EAAGsvE,EAAgCtvE,EACnCG,EAAGmvE,EAAgCnvE,EACnCsK,MAAO+nE,EAAqB/nE,MAC5BK,OAAQ0nE,EAAqB1nE,QAK3BslE,IAAoBha,GAAiBI,MACpC4Z,IAAoBha,GAAiBO,SACrCyZ,IAAoBha,GAAiBW,aAExC8b,EAAUpoE,MAAQ3Q,KAAKZ,IAAIs5E,EAAqB/nE,MAAQokB,EAAS8/C,EAAYlkE,OAC7EooE,EAAU7yE,EAAIlG,KAAKC,IAAI84E,EAAU7yE,EAAI6uB,EAAS8jD,IAG5CvC,IAAoBha,GAAiBK,OACpC2Z,IAAoBha,GAAiBS,UACrCuZ,IAAoBha,GAAiBa,cAExC4b,EAAUpoE,MAAQ3Q,KAAKZ,IAAIs5E,EAAqB/nE,MAAQokB,EAAS8/C,EAAYlkE,QAG3E2lE,IAAoBha,GAAiBE,KACpC8Z,IAAoBha,GAAiBO,SACrCyZ,IAAoBha,GAAiBS,WAExCgc,EAAU/nE,OAAShR,KAAKZ,IAAIs5E,EAAqB1nE,OAASgkB,EAAS6/C,EAAY7jE,QAC/E+nE,EAAU1yE,EAAIrG,KAAKC,IAAI84E,EAAU1yE,EAAI2uB,EAAS8jD,IAG5CxC,IAAoBha,GAAiBG,QACpC6Z,IAAoBha,GAAiBW,YACrCqZ,IAAoBha,GAAiBa,cAExC4b,EAAU/nE,OAAShR,KAAKZ,IAAIs5E,EAAqB1nE,OAASgkB,EAAS6/C,EAAY7jE,SAGjFikE,EAAsB,CAAEtkE,MAAOooE,EAAUpoE,MAAOK,OAAQ+nE,EAAU/nE,SAClE+jE,EAA0B,CAAE7uE,EAAG6yE,EAAU7yE,EAAGG,EAAG0yE,EAAU1yE,QAG3DxH,EAAAA,EAAAA,KAAU,KACR,IAAIgjB,EAUJ,OATI6zD,GAAqBf,IACvB9yD,GAAUC,EAAAA,GAAAA,IAAc4zD,EAAmB,CACzC3zD,UAAWi1D,EACX90D,OAAQu2D,EACRx2D,UAAWs1D,EACXn5E,QAASm5E,EACT7sD,cAAe6sD,KAGZ11D,IACN,CAAC8yD,EAAee,KAEnB72E,EAAAA,EAAAA,KAAU,KACR,MAAMm6E,EAAiC,GACvC,GAAI3iD,GAAWs+C,EACb,IAAK,MAAMr+C,KAAY8mC,GAAuB,CAC5C,MAAM6b,EAAgB5iD,EAAQ7qB,cAAc,iBAAiB8qB,KAE7D,GAAI2iD,EAAe,CACjB,MAAMp3D,GAAUC,EAAAA,GAAAA,IAAcm3D,EAAe,CAC3Cl3D,UAAWm1D,EACXh1D,OAAQ9G,EACR6G,UAAWu1D,EACXp5E,QAASo5E,EACT9sD,cAAe8sD,IAGb31D,GACFm3D,EAASl5E,KAAK+hB,EAElB,CACF,CAGF,MAAO,KACLm3D,EAASr5E,SAASkiB,GAAYA,SAE/B,CAAC8yD,EAAet+C,IAEnB,MAAM6iD,GAAc1E,EAAa,gCAAkC,GAE7D2E,GAAiBvC,IAEvB,IAAKjB,IAAgBX,IAAuBmE,GAC1C,MAAO,CACL3E,YAAY,EACZvnE,MAAOisE,IAIX,MAAMjsE,IAAQs1C,EAAAA,GAAAA,GACZ,SAAS42B,GAAejzE,OACxB,QAAQizE,GAAe9yE,QACtByc,GAAgB,cAAckyD,EAAmBrkE,YACjDmS,GAAgB,eAAekyD,EAAmBhkE,YACnD,oBACCwjE,GAAcjlD,GAAc4mD,IAAsB,+BACnD+C,IAGF,MAAO,CACL70D,SAAUywD,EACV/yE,KAAMizE,EACNR,aACAjlD,aACAtiB,SAEJ,CYvOMmsE,CACF3/D,EACAgiB,EACA24C,GACAlB,IACAM,EA7EF,WACE,GAA0B,cAAtBznC,GAAO0xB,WAA4B,OAAO0U,EAEhD,CA2EEkH,GACA9G,GAGIrsE,GAAIme,IAAUne,EACdG,GAAIge,IAAUhe,GACpBxH,EAAAA,EAAAA,KAAU,KACH21E,SAAoBv1E,IAANiH,SAAyBjH,IAANoH,IACpCysE,EAA4B,CAAEzuD,SAAU,CAAEne,KAAGG,UAE9C,CAACmuE,GAAYtuE,GAAGG,MAEnBxH,EAAAA,EAAAA,KAAU,MACH21E,IAAczyE,IAAQwxE,GACzBR,EAAwB,CAAEhxE,YAE3B,CAACyyE,GAAYjB,EAAkBxxE,KAElC,MAAMu3E,GAAcv3E,IAAQmxE,IAEtBqG,GAAeD,GAAY3oE,MAC3B6oE,GAAgBF,GAAYtoE,QAElCnS,EAAAA,EAAAA,KAAU,KACJ0wB,IACF0jD,EAAsB,CAAEtiE,MAAO4oE,GAAcvoE,OAAQwoE,OAEtD,CAACA,GAAeD,GAAchqD,GAAY0jD,IAE7C,MAAM50E,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,MACP,QACJi7E,IACE/X,GAAgB,CAAC,EAEfgY,GAAgBhc,EAAgBzb,OAAOsK,OAAOmR,GAAev9D,OAAS,GAE5Ew5E,EAAAA,GAAAA,IAAY,KACLjc,GACLzb,OAAO0K,KAAK+Q,GAAe/9D,SAASuqB,IAClC,MAAM84C,EAAStF,EAAcxzC,GACzB84C,EAAOyW,SACT/G,EAAe,CACbxd,MAAO8N,EAAO9N,MACdukB,QAASzW,EAAOyW,QAChB3xE,OAAQk7D,EAAOl7D,QAAUkN,EAAMjR,GAC/B61E,UAAW5W,EAAO4W,iBAIvBH,GAtKoB,UAsKSx6E,GAAW,GAG3C,MAAM46E,IAAoBtpE,EAAAA,EAAAA,IAAsD,MAE1EupE,IAAsBvpE,EAAAA,EAAAA,IAAuC,MAE7D0yD,IAA4Bp7D,EAAAA,EAAAA,IAAiBkyE,IACjDF,GAAkBnpE,QAAUqpE,KAGxB9R,IAAYpgE,EAAAA,EAAAA,IAAiByrB,IAC7BumD,GAAkBnpE,SACpBmpE,GAAkBnpE,QAAQ4iB,MAIxB4vC,IAA8Br7D,EAAAA,EAAAA,IAAiBkyE,IACnDD,GAAoBppE,QAAUqpE,KAG1B/R,IAAcngE,EAAAA,EAAAA,IAAiB8U,IAC/Bm9D,GAAoBppE,SACtBopE,GAAoBppE,QAAQiM,MAI1Bq9D,IAA4BnyE,EAAAA,EAAAA,IAAgB,KAChDogE,GAAU,CACRmB,UAAW,+BAIT6Q,IAAqBpyE,EAAAA,EAAAA,IAAgB,KACzCmgE,GAAYtG,EAAc/kD,QAGtBu9D,IAAmBryE,EAAAA,EAAAA,IAAgB,KACvCk2D,OAGIoc,IAAyBtyE,EAAAA,EAAAA,IAAgB,KAC7CgrE,OAGIuH,IAAiBvyE,EAAAA,EAAAA,IAAgB,KACjC6xE,GAAgB,EAClBnW,IAEAxF,OAIEsc,IAAoBxyE,EAAAA,EAAAA,IAAgB,KACxC,GAAIi6D,EAAJ,CACE,MAAM53C,GAAMo8C,EAAAA,GAAAA,IAAa5E,GACzBoC,EAAa,CACX55C,MACA48C,OAAQ,CACNV,mBAAmB,IAIzB,MAEA3C,EAAgB,CACdvO,MAAO5D,EAAKvtD,GACZirE,WAAW,OAITqC,IAAkBxpE,EAAAA,EAAAA,IAAgB,KAClCo+D,EACFgC,GAAU,CACRmB,UAAW,wBAGb8Q,QAIE5I,IAAsBzpE,EAAAA,EAAAA,IAAgB,KAC1Ci2D,EAAuB,CAAEQ,MAAO,iBAG5Bgc,IAAwBzyE,EAAAA,EAAAA,IAAgB,KAC5Ci2D,EAAuB,CAAEQ,MAAO,kBAG5Bic,IAA6B1yE,EAAAA,EAAAA,IAAgB,KACjD+qE,OAGI4H,IAAiB3yE,EAAAA,EAAAA,IAAiB4yE,IACtC9H,EAAc,CAAE3P,OAAQyX,EAAIzX,YAGxB0X,IAAc7yE,EAAAA,EAAAA,IAAgB,KAClCH,EAAS,CACP3D,GAAIutD,EAAKvtD,QAIPqjD,IAC6FpoD,EAAAA,EAAAA,KAAQ,IAClG,EAAGkZ,YAAWxT,OAAQ2iD,MAC3B/lD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WACEsC,EAAAA,GAAAA,GACEozE,EDtV85B,WAAxD,WCuVt2BpsB,GAAc,UAGlBlvC,OAAK,EACLqM,QAASjhB,EACTxB,KAAM0xE,EAAsB,OAAS,UACrCvsE,MAAM,cACN9I,QAAS8Z,EACTE,UAAU,eAAc7X,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGd,CAACW,EAAUkwE,IAEd,SAASkH,KACP,OACEv6E,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGyU,GAAQs8C,GAAOt8C,EAAKjR,KAAOutD,EAAIvtD,KAC9BzC,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,OAAOpH,QAASs8E,GAAYn6E,SAAElC,GAAQ,wBAEvDiD,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAAS67E,GAAmB15E,SAAElC,GAAQ,uBAC7D6sE,IACC5pE,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAWpH,QAAS47E,GAA0Bz5E,SAC1DlC,GAAQ,cAGZizD,GAAKspB,cACJt5E,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAMs8D,EAAY,OAAS,UAC3B1jE,QAASi8E,GACTvhE,YAAa1W,QAAQ0/D,GAAWvhE,SAE/BlC,GAAQyjE,EAAY,mBAAqB,iCAKpD,CAEA,SAAS+Y,KACP,OACEv5E,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQovE,GACRgH,OAAQ/G,GACRt6D,IAAKi6D,EACL31E,WAAWsC,EAAAA,GAAAA,GACTozE,EAAsBnzE,GAA2B,oBACjD,yBAEFqzE,kBAAmBA,EACnBE,eAAgBA,GAChBD,eAAgBA,GAChB9uD,WAAS,EACT5f,QAAS+uE,GACTthE,oBAAqBuhE,GAAsB3zE,SAE1Co6E,MAGP,CAiBA,MAAMI,IAAsB16E,EAAAA,GAAAA,GDpaqF,WCsa/G4lE,GDtaw0C,YCyap0C+U,IAAgBh8E,EAAAA,EAAAA,KAAQ,KAC5B,GAAIq0E,EAAqB,MAAO,aAChC,IAAKzL,EAAa,OAClB,MAAM,EAAEqT,EAAC,EAAEC,EAAC,EAAEr0B,IAAMs0B,EAAAA,GAAAA,IAASvT,GACvBwT,GAAOC,EAAAA,GAAAA,IAAa,CAACJ,EAAGC,EAAGr0B,IAEjC,OAD8B,SAAVgY,EAAmB,IAAMuc,EAAOA,GA1WjC,IA2WmB,aAAe,qBACpD,CAACxT,EAAa/I,EAAOwU,IAExB,SAASiI,GAAqBv9E,GAC5B,OACEuD,EAAAA,GAAAA,GAAA,OACEvD,UAAWA,EACX4S,MAAM,KACNK,OAAO,KACP2gE,QAAQ,YACR4J,KAAK,OAAMh7E,UAEXe,EAAAA,GAAAA,GAAA,QACEvD,UD5bqf,WC6brf,YAAU,UACV,YAAU,UACVo8D,EAAE,mCAIV,CAwFA,MAAMnsC,IAAezd,EAAAA,EAAAA,MA2HrB,SAASirE,GAAuBC,GAC9B,OAAOp7E,EAAAA,GAAAA,GAAeq7E,EAAAA,IAA0BD,EAClD,CAiBA,OA7IAE,EAAAA,GAAAA,GAAoB3tD,IAAetpB,GAAUi5D,IAAsB3vC,GAAatd,UA8I9EtQ,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJu2E,UAAWniE,EACX1b,WAAWsC,EAAAA,GAAAA,GD5qBM,WC8qBfozE,GD9qB4D,WC+qB5D9V,GD/qBkI,WCgrBlI6V,GDhrB0J,YCkrB5JqI,YAAapI,EAAsBgB,QAAiBx1E,EACpD68E,cAAe1H,KAAsBzW,GAvBrCv9D,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,UACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,aACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,WACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,YACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,cACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,eACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,iBACvCl6E,EAAAA,GAAAA,GAAA,OAAKvD,UAAWy9E,GAAuB,yBAeuCv8E,EAChFyF,OAAQA,EACR+C,oBAAkB,EAClBvC,QAASg1E,GACTr1E,QA/HAvD,EAAAA,GAAAA,GAAA,OACEmY,IAAKgiB,EAAUl7B,SAEbkzE,EAEGF,GAOPnzE,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,eACA,YAEF4M,OAAOs1C,EAAAA,GAAAA,GACLy4B,IAAiB,8BAA8BA,OAC/Cz6E,SAAA,EAEFe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UD9kB+kC,WC+kB/kCoa,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACLqW,UAAW/Z,GAAQ4nE,EAAsB,OAAS,SAClD7nE,QAASizE,GAAgB9wE,UAEzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWg9E,QArDpB36E,EAAAA,GAAAA,IAAA,OACErC,UDjiB4K,WCkiB5K0b,IAAKuU,GAAaztB,SAAA,CAEjB+yE,GAAM9yE,KAAKi6E,GACVA,EAAI/1E,OAhGZ,WACE,MAAMuI,GAAQs1C,EAAAA,GAAAA,GACZy4B,IAAiB,8BAA8BA,MAC/CpT,GAAe,4BAA4BA,KAE7C,OACExnE,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GACX2M,MAAOA,EAAM1M,SAAA,CAEZ+6E,GAAqBh7E,KACtBF,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GAAiBC,SAAA,EAE5BH,EAAAA,GAAAA,IAAA,OAAKrC,UDndgvB,WCmd9sBwC,SAAA,EACrCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,OACLkG,KAAMqpD,KAERhwD,EAAAA,GAAAA,GAAC8lD,GAAc,CAAClvC,UAAW87D,GAAmBtvE,OAAQovE,QAEvDhS,GAAWia,WAAazqB,GAAKiK,WAC9Bj6D,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,MAChBgB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAWuC,GACX6X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACLqW,UAAW/Z,GAAQ,SACnBD,QAASg8E,GAAe75E,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAqBsC,KAAK,eAG9C04E,GAAqBh7E,MAG5B,CA4DU07E,IAEA16E,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjK,UDziB+wC,WC0iB/wCgE,KAAK,OACLkG,KAAMwyE,EAAInpB,IAEVlzD,QAASA,IAAMo8E,GAAeC,OAInCpH,IAnEHjzE,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GAAwBC,SAAA,CAElC+6E,GAAqBh7E,KACtBF,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GAAiBC,SAAA,EAE5Be,EAAAA,GAAAA,GAAA,OAAKvD,UDrfqrB,WCqfnpBwC,UACrCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAasC,KAAK,UAEpCrE,GAAK,YACN+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,MAChBgB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAWuC,GACX6X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACLqW,UAAW/Z,GAAQ,SACnBD,QAAS+7E,GAAuB55E,UAEhCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAqBsC,KAAK,eAG9C04E,GAAqBh7E,UAmFrBu6E,MAEDz6E,EAAAA,GAAAA,IAAA,OAAKrC,UD1lBkN,WC0lBxLwC,SAAA,EAC3B8yE,IA/EN/xE,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GD7gBi9B,WC+gB19B,WAEF8X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACL3D,QAASm8E,GAA2Bh6E,UAEpCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAasC,KAAK,WAuE/BywE,IACA/xE,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GACTC,GDhmBumC,WCkmBvmC,WAEF6X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACL3D,QAASk8E,GAAsB/5E,UAE/Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAkBsC,KAAK,oBAI5CtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GACTC,GACA,WAEF6X,OAAK,EACLjR,MAAM,cACNnF,KAAK,OACL3D,QAASkzE,GAAoB/wE,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAWuC,GAAkBsC,KAAK,4BA1DKtB,EAAAA,GAAAA,GAACu8D,GAAoB,KAmExEz9D,EAAAA,GAAAA,IAAA,OACErC,UAAU,eACVkP,OAAOs1C,EAAAA,GAAAA,GACLqlB,GAAe,qBAAqBA,IACpCoT,IAAiB,8BAA8BA,OAC/Cz6E,SAAA,EAEFe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW/Z,GAAQ4nE,EAAsB,OAAS,SAClD7nE,QAASizE,GAAgB9wE,UAEzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWg9E,QAElBz5E,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEuhE,GAAWia,WAAazqB,GAAKiK,aACzD8X,IA1PJ/xE,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXhb,WAAWsC,EAAAA,GAAAA,GACTozE,EAAsBnzE,GAA2B,oBACjD,yBAEF0Y,QAASouC,GACTnuC,UAAWw6D,EAAsB,OAAS,QAAQlzE,SAEjDo6E,YAyRH1tE,MAAO,qBAAqBq6D,GAAmB,4BAC/Ct7B,YAAU,EACViwC,iBAAe,EAAA17E,SAAA,CAEdizE,GAAgBqH,KAChBnd,GAAiB0V,GAAa5yE,KAAK0pB,IAClC5oB,EAAAA,GAAAA,GAACyhE,GAAqB,CAEpBh3B,MAAOA,EACPk3B,0BAA2BA,GAC3BC,4BAA6BA,GAC7BF,OAAQtF,EAAcxzC,GACtBi5C,eAAgBqR,IAAcjlD,GAC9B8zC,yBAA0B2Q,GAC1B5Q,oBAAqBqQ,EACrBnQ,YAAakW,IARRtvD,KAWRmpD,IAAwB/xE,EAAAA,GAAAA,GAAC6+D,GAAkB,WCloBlD,IAAeviE,EAAAA,EAAAA,KAnDqBs+E,EAAG5qB,MAAKxvD,OAAMqzD,+BAChD,MAAM,sBAAEgnB,EAAqB,eAAEC,IAAmBz0E,EAAAA,EAAAA,OAE3CytD,EAAgBinB,IAAqBtpE,EAAAA,EAAAA,IAASoiD,IAA4B,GAE3E52D,GAAOD,EAAAA,EAAAA,KAEPg+E,GAAuBx4E,EAAAA,EAAAA,KAAY,KACvCs4E,EAAe,CAAElnB,MAAO5D,EAAKvtD,GAAIqxD,qBAChC,CAACgnB,EAAgBhnB,EAAgB9D,IAE9BirB,GAAwBz4E,EAAAA,EAAAA,KAAY,KACxCq4E,MACC,IAEG12E,EAA0BlH,EAAT,SAATuD,EAAuB,UAAkB,oBACjDwY,GAAOtb,EAAAA,EAAAA,KAAQ,KACnB,OAAQ8C,GACN,IAAK,OACH,OAAOvD,EAAK,0BAA0BgvC,EAAAA,EAAAA,IAAgB+jB,IACxD,IAAK,SACH,OAAO/yD,EAAK,sBAAsBgvC,EAAAA,EAAAA,IAAgB+jB,IAEpD,QACE,OAAO/yD,EAAK,gCAEf,CAAC+yD,EAAKxvD,EAAMvD,IAEf,OACE6B,EAAAA,GAAAA,IAACgnC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQkvD,GAChBpsD,QAASq3E,EACT92E,MAAOA,EACP6hC,eAAgBg1C,EAAqB/7E,SAAA,EAEpC8B,EAAAA,GAAAA,GAAWiY,EAAM,CAAC,oBAClB66C,IACC7zD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAASwoB,EACTltD,OAAO7F,EAAAA,GAAAA,GACL9D,EAAK,sCAAuC+yD,GAAKiK,WACjD,CAAC,oBAEHhG,QAAS8mB,UCQnB,IAAez+E,EAAAA,EAAAA,KAtD6B4+E,EAC1CzwC,YAEA,MAAM,wBAAE0wC,EAAuB,uBAAEC,IAA2B/0E,EAAAA,EAAAA,MACtD2pD,EAAMvlB,GAAOulB,KAEZqrB,EAAeC,IAAoB7pE,EAAAA,EAAAA,KAAS,GAE7CxU,GAAOD,EAAAA,EAAAA,KAEP8zD,GAAgBtuD,EAAAA,EAAAA,KAAY,KAChC24E,EAAwB,CACtBrnB,eAAgBhzD,QAAQkvD,GAAK6D,8BAE9B,CAACsnB,EAAyBnrB,KAG7BzyD,EAAAA,EAAAA,KAAU,KACJyyD,GACFsrB,GAAiB,KAElB,CAACtrB,IAEJ,MAAMurB,GAAW79E,EAAAA,EAAAA,KAAQ,KACvB,MACM89E,EADOv+E,EAAK,mCACCu+E,MAAM,UACnBC,EAAWx+E,EAAK,iCACtB,MAAO,CACLu+E,EAAM,IACNx7E,EAAAA,GAAAA,GAAA,KAAGsX,KAAMokE,EAAAA,IAAkB1pE,OAAO,SAAS2pE,IAAI,sBAAqB18E,SAAEw8E,IACtED,EAAM,MAEP,CAACv+E,IAEJ,OACE6B,EAAAA,GAAAA,IAACgnC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQkvD,GAChBpsD,QAASw3E,EACTj3E,MAAOlH,EAAK,kCACZ+oC,eAAgB8qB,EAChB3rD,mBAAoBk2E,EAAcp8E,SAAA,EAEjC8B,EAAAA,GAAAA,GAAW9D,EAAK,gCAAiC+yD,GAAKyqB,WAAY,CAAC,qBACpEz6E,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAAS+vC,EACTz0E,MAAO20E,EACPtnB,QAASqnB,KAEVv6E,EAAAA,GAAAA,GAAW9D,EAAK,iCAAkC+yD,GAAKyqB,WAAY,CAAC,0BCtB3E,IAAen+E,EAAAA,EAAAA,KAhC0Bs/E,EACvCC,aAEA,MAAM,2BAAEC,EAA0B,iBAAEC,EAAgB,0BAAEC,IAA8B31E,EAAAA,EAAAA,MAC9EpJ,GAAOD,EAAAA,EAAAA,KAEPoG,EAAStC,QAAQ+6E,GAEjBI,GAAkB/iD,EAAAA,EAAAA,GAAsB2iD,IAAWA,EACnDK,EAAeD,GAAiBE,aAEhCC,GAA4B55E,EAAAA,EAAAA,KAAY,KAC5Cs5E,IACII,EACFF,EAA0B,CAAEK,SAAUJ,EAAgBx5E,GAAI65E,wBAAwB,IAElFP,EAAiB,CAAEt5E,GAAIw5E,EAAiBx5E,OAEzC,CAACy5E,EAAcD,IAElB,OACEj8E,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQA,EACRQ,QAASk4E,EACT9iE,KAAqB/b,EAAfi/E,EAAoB,yBAAiC,qBAC3Dn2C,aAAc9oC,EAAK,UACnB+oC,eAAgBo2C,EAChBn2C,sBAAoB,O,wCCzC1B,UAAgB,KAAO,WAAW,KAAO,WAAW,OAAS,WAAW,YAAc,WAAW,KAAO,WAAW,YAAY,WAAW,SAAW,YC4B/Is2C,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WACvDr9E,IAAI26E,GAAAA,IAoCN,IAAev9E,EAAAA,EAAAA,KAlCYkgF,EACzBt4E,OACAu4E,aACAt4E,QACA6U,OACA1a,QACA63B,QACAiV,UACAtuC,cAEA,MAAM4/E,EAAYp+E,EAAQ63B,EAASomD,GAAO19E,OACpC89E,EAASJ,GAAO79E,KAAKsgB,MAAM09D,IAC3BE,EAASL,GAAO79E,KAAKm+E,KAAKH,KAAcC,GACxC,EAAEhD,EAAC,EAAEC,EAAC,EAAEr0B,IAAMu3B,EAAAA,GAAAA,IAAQH,EAAQC,EAAQ,IAEtCl1D,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,IAAUsuC,MAGZ,OACEtsC,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAAC04E,gBAAiB/9E,GAAO+hC,KAAMjkC,QAAS4qB,EAAayd,UAAWroC,EAAQmC,SAAA,CAC9Ew9E,GACCz8E,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM4C,EAAMzH,UAAWuC,GAAOg+E,SAAUrxE,MAAO,qBAAqBguE,KAAKC,KAAKr0B,QAEpFvlD,EAAAA,GAAAA,GAAA,OAAK0J,IAAKxF,EAAMzH,UAAWuC,GAAOkF,KAAMynB,IAAI,GAAGhgB,MAAO,qBAAqBguE,KAAKC,KAAKr0B,KAAMh8C,WAAW,KAExGzK,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOga,KAAK/Z,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOmF,MAAMlF,UAAE8B,EAAAA,GAAAA,GAAWoD,EAAO,CAAC,UAClDnE,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0S,YAAYzS,SAAE+Z,a,gBC7D7C,SAA0C,WAA1C,GAAgH,WC0FhH,IAAe1c,EAAAA,EAAAA,KA1EkB2gF,EAC/Bp+E,SACAgB,SACAq9E,oBAEA,MAAMC,EAAYz+E,KAAKZ,IAAI,EAAGY,KAAKC,IAAIE,EAAS,EAAGgB,EAAS,IACtDu9E,EAAiBD,IAAct+E,EAAS,EAAI,EAC5Cw+E,EAAcF,IAAct+E,EAAS,EACrCy+E,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiB9+E,KAAKC,IAAIE,EAAQ,GAElC4+E,GAAkBj7E,EAAAA,EAAAA,KAAY,KAClC06E,EAAcr9E,EAAS,KACtB,CAACA,EAAQq9E,IAENQ,GAAel7E,EAAAA,EAAAA,KAAY,KAC/B06E,EAAcr9E,EAAS,KACtB,CAACA,EAAQq9E,IAEN/mD,EAAQz3B,KAAKC,IAAI,EAAGE,GAE1B,OACEC,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACIwa,EAAAA,KACAzZ,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAyB,IAAXa,GAAgBb,IACxD4G,MAAM,cACNC,SAAqB,IAAXhG,EACVgX,OAAK,EACL/Z,QAAS4gF,EAAaz+E,UAEtBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAGftB,EAAAA,GAAAA,GAAA,OAAKvD,UDnDY,WCmDYkP,MAAO,iBAAiBwxE,gBAAwBt+E,eAAoBs3B,KAASl3B,SACvGmB,MAAMvB,GAAQo7E,UAAKt8E,GAAWuB,KAAI,CAACgoD,EAAGC,KACrC,MAAM7oD,EAAQ6oD,EACRw2B,EAAUx2B,IAAMg2B,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEQ,EAAaz2B,IAAMg2B,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzEl2B,IAAMg2B,EAAYK,EAAiB,GAAKJ,EACxCS,EAAW12B,IAAMg2B,IAAeG,IAAiBC,EACjDO,EAAe32B,IAAMg2B,EAAY,IAAOG,IAAiBC,GACzDp2B,IAAMg2B,GAAaI,EACnBQ,EAAc52B,EAAIg2B,GAAah2B,GAAKg2B,EAAYK,EACtD,OACEx9E,EAAAA,GAAAA,GAAA,OACElD,QAASA,IAAMogF,EAAc/1B,GAC7B1qD,WAAWsC,EAAAA,GAAAA,GDhEwG,WCkEjHT,IAAUuB,GDlEyL,YCmElM+9E,GAAaE,IDnEuH,YCoEpIH,GAAUE,GAAWE,IDpEkI,WCqExJA,GDrE+K,oBC2EvLtkE,EAAAA,KACAzZ,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAca,IAAWhB,EAAS,GAAKG,GD7Ed,YC8EnD4G,MAAM,cACNiR,OAAK,EACLhR,SAAUhG,IAAWhB,EAAS,EAC9B/B,QAAS2gF,EAAgBx+E,UAEzBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBCnFrB,GAAsnB,WCsDtnB,IAAehF,EAAAA,EAAAA,KAlC4B0hF,EACzCC,YACAC,aACAzhF,YACA0hF,oBACAC,iBAEA,MAAMnhF,GAAOD,EAAAA,EAAAA,KAEb,OACE8B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GD9BG,WC8ByBtC,GAAWwC,SAAA,CACpDk/E,IACCr/E,EAAAA,GAAAA,IAAA,OAAKrC,UDhCiE,WCgCjCwC,SAAA,EACnCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM68E,EAAmB1hF,UDjC6K,cCkC5MuD,EAAAA,GAAAA,GAAA,OAAKvD,UDlC2R,WCkCrPyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEg/E,KACjFj+E,EAAAA,GAAAA,GAAA,OAAKvD,UDnCuI,WCmC/FwC,UAC3Ce,EAAAA,GAAAA,GAAA,OAAKqP,MAAM,KAAKK,OAAO,IAAI2gE,QAAQ,WAAW4J,KAAK,OAAMh7E,UACvDe,EAAAA,GAAAA,GAAA,QAAM64D,EAAE,oLAAoLohB,KAAK,oBAKzMn7E,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GD1CmmB,YC0CzkBC,SAAA,EACvDe,EAAAA,GAAAA,GAAA,OAAKvD,UD3C4V,6BC2ChUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,gBAC1EkhF,IAAqBn+E,EAAAA,GAAAA,GAAA,OAAKvD,UD5CujB,oBC4C3hBwC,SAAEg/E,QAE5Dn/E,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GD9CsnB,YC8C1lB2M,MAAOyyE,EAAWn/E,SAAA,EAC3Ee,EAAAA,GAAAA,GAAA,OAAKvD,UD/C+a,6BC+ClZyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,mBAC7E+C,EAAAA,GAAAA,GAAA,OAAKvD,UDhDogB,6BCgDvewC,SAAEi/E,aChCtCG,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAehiF,EAAAA,EAAAA,KAxB2BiiF,EACxCp6E,QACAuN,cACAusE,YACAC,aACAM,wBAEA,MAAM54E,GAAQlI,EAAAA,EAAAA,KAAQ,IACb2gF,GAAYn/E,KAAI,CAAC8hB,EAAOmmC,KAAMs3B,EAAAA,GAAAA,IAAKz9D,EAAOs9D,GAAUn3B,GAAIq3B,MAC9D,CAACA,IAEJ,OACE1/E,EAAAA,GAAAA,IAAA,OAAKrC,UC/Bc,WD+BSwC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,OAAKvD,UChC+B,WDgCPwC,SAAEkF,KAC/BnE,EAAAA,GAAAA,GAAA,OAAKvD,UCjCwD,WDiC1BwC,SAAEyS,KACrC1R,EAAAA,GAAAA,GAACg+E,GAAoB,CACnBC,UAAWA,EACXC,WAAYA,EACZE,WAAY,mBAAmBx4E,EAAMkkB,KAAK,gB,4BErClD,MC+BM40D,GASDA,EACHj+E,OAAMk+E,YAAW/hC,UACjBgiC,UAAStgF,QAAOugF,YAAW/hF,UAAS6sB,cAEpC,MAAMrb,GAAYL,EAAAA,EAAAA,GAAS,UAAU2wE,EAAQn8E,MACvCq8E,GAAkB7wE,EAAAA,EAAAA,GAAS,UAAU2wE,EAAQn8E,aAE7Cs8E,EAAwB,IAAVzgF,GACb0gF,EAAYC,EAASC,IAAa5hF,EAAAA,EAAAA,GAAQyhF,GAE3CI,EAAa1+E,EAxBS,GAwBFA,EACpB4O,EAAqB,EAAb8vE,EACRzvE,EAAsB,IAAbyvE,EAITC,EAFI9gF,EAAQugF,GAEW,EAAVngF,KAAK2gF,IAClBtyD,EAAQgyD,EAAc,EAAI,IAE1Bn6E,EAAIlG,KAAK4gF,IAAIF,GAAS/vE,EAAqB,IAAb8vE,EAC9Bp6E,EAAIrG,KAAK6gF,IAAIH,GAAS1vE,EAEtBgY,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQ6hF,MAGJ52D,GAAcxhB,EAAAA,EAAAA,IAAgB,KAClC24E,IACAv1D,EAAQg1D,MASV,OANAphF,EAAAA,EAAAA,KAAU,KACJwhF,GACFE,MAED,CAACF,EAAaE,KAGfngF,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACG8/E,IACC/+E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAe,CACdjG,UDjFkG,oBCkFlGmG,OAAQk8E,EACRU,KAAM5iC,EACN6iC,eAAa,EACbz8E,QAAM,EACNvC,KA3DqB,GA2DUA,EAC/BkL,MAAO,aAAa/G,oBAAoBG,UAG5C/E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAe,CACdjG,UD3FoC,WC4FpCmG,OAAQ0L,EACRkxE,KAAM5iC,GAAWoiC,EACjBh8E,QAAM,EACNvC,KArEsB,GAqEQA,EAC9BkL,MAAO,QAAQ/G,aAAaG,mBAAmBgoB,IAC/CjwB,QAAS4qB,EACTiC,QAAS5B,QA4DjB,IAAezrB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLwsE,SAAUxsE,EAAOwsE,SAASC,QAAQD,YAHpBzsE,EAtD6C2sE,EAC/DF,WAAUljF,eAEV,MAAMkwB,GAAezd,EAAAA,EAAAA,OACd6Q,EAAQ+/D,IAAapuE,EAAAA,EAAAA,IAAS,IAC9BhR,EAAMq/E,IAAWruE,EAAAA,EAAAA,IAAS,GAE3BsuE,EAAmBL,GAAUz/B,MAAM,EAnFxB,IAqFXv4B,GAAcnhB,EAAAA,EAAAA,IAAiB4gD,IACnC04B,GAAW14B,MAGPp/B,GAAcxhB,EAAAA,EAAAA,IAAiB4gD,IAEd,KADA64B,EAAAA,GAAAA,GAAcD,EAAiBlhF,OAAQsoD,EAAIrnC,IAGhEtP,YAAW,KACTqvE,GAAWzwE,IACF4wE,EAAAA,GAAAA,GAAcD,EAAiBlhF,OAAQuQ,EAAU,OA9F5C,QA0GlB,OAPA7R,EAAAA,EAAAA,KAAU,KACR,MAAM8N,EAAYqhB,EAAatd,QAC1B/D,GAELy0E,EAAQz0E,EAAU2kB,QAAQ,iBAAkB5P,eAC3C,KAGDpgB,EAAAA,GAAAA,GAAA,OACEvD,UDzIiB,WC0IjB0b,IAAKuU,EAAaztB,SAEjB6B,QAAQL,IAASs/E,GAAkB7gF,KAAI,CAAC0/E,EAASz3B,KAE9CnnD,EAAAA,GAAAA,GAAC0+E,GAAqB,CACpBj+E,KAAMA,EACNm+E,QAASA,EACTD,UAAWx3B,EACX7oD,OAAQ6oD,EAAIrnC,EAASigE,EAAiBlhF,QAAUkhF,EAAiBlhF,OACjEggF,UAAWkB,EAAiBlhF,OAC5B/B,QAAS4qB,EACTiC,QAAS5B,EACT60B,QAASpgD,Y,4BCtJrB,MCuBMyjF,GAAuB,CAC3BC,cAAe,yBACfC,gBAAiB,wBACjBC,cAAe,sBACfC,cAAe,0CACfC,aAAc,8BACdC,gBAAiB,uCACjBC,aAAc,sCAGVC,GAA6B,CACjCP,cAAe,oCACfC,gBAAiB,mCACjBC,cAAe,iCACfC,cAAe,sCACfC,aAAc,yCACdC,gBAAiB,mCACjBC,aAAc,uCAGVE,GAAgD,CACpDR,cAAe,iBACfC,gBAAiB,sBACjBC,cAAe,cACfC,cAAe,QACfC,aAAc,oBACdC,gBAAiB,gBACjBC,aAAc,cAGVG,GAAsBhgC,OAAO0K,KAAK40B,IAElCW,GAAcC,GAAAA,EAAaC,MAAQ,IAAOjnE,EAAAA,EAgEhD,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACL+/C,aAAa3gB,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,kBAHzBhkB,EA5De8tE,EACjC9tB,kBAEA,MAAM+tB,GAAY/xE,EAAAA,EAAAA,MAEZhS,GAAOD,EAAAA,EAAAA,KAEPikF,GAAMC,EAAAA,GAAAA,MAEZ3hE,EAAAA,EAAAA,KAAgB,KACTyhE,EAAU5xE,UAIf+xE,EAAAA,GAAAA,GAAmB,CACjB7xE,OAAQ0xE,EAAU5xE,QAClB3O,KAAMmgF,GAAcK,EACpBG,cApBkB,EAqBlBx7E,MAAO,SACPy7E,kBArBuB,EAsBvBC,iBAAkB,cAClBL,UAED,CAACA,IAEJ,MAAM,aAAEt/B,EAAY,cAAEJ,GAAkBF,KAElCkgC,EAAUX,GAEhB,OACE9hF,EAAAA,GAAAA,IAAA,OAAKrC,UDzFc,WCyFSwC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKrC,UD1FgC,WC0FPwC,SAAA,EAC5Be,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAAC86E,iBAAe,EAAC76E,KAAMssD,EAAaxyD,KAAK,WAChDT,EAAAA,GAAAA,GAAA,UAAQvD,UD5F+C,WC4FrB0b,IAAK6oE,EAAWr1E,MAAO,cAAc41E,oBAA0BA,YAEnGvhF,EAAAA,GAAAA,GAAA,OAAKvD,UD9FuE,WC8F/CwC,SAAEhC,EAAK,sBACpC6B,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GDhGqF,YCgGpDwiD,GDhG8F,WCgG5D,iBAC9EoF,SAAUhF,EAAa1iD,SAAA,CAEtB0hF,GAAoBzhF,KAAI,CAACksC,EAAS9sC,KAE/B0B,EAAAA,GAAAA,GAACw8E,GAAkB,CAEjBr4E,MAAOlH,EAAKgjF,GAAqB70C,IACjCpyB,KAAM/b,EAAKwjF,GAA2Br1C,IACtClnC,KAAMw8E,GAAoBt1C,GAC1BqxC,YAAU,EACVn+E,MAAOA,EACP63B,MAAOwqD,GAAoB9hF,OAC3BusC,QAASA,GAPJA,MAWXprC,EAAAA,GAAAA,GAAA,OAAKvD,UDjH+G,WCiHtFwC,SAAEhC,EAAK,gDCjH7C,IAAgB,KAAO,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,MAAQ,Y,8CC+DpG,IAAeX,EAAAA,EAAAA,KAtCkCykF,EAC/CU,UACAC,qBACAC,SACAC,iBACAtjF,QACA9B,eAEA,MAAM8R,GAAYL,EAAAA,EAAAA,GAAS,WAAWwzE,KAChCI,GAAe3pC,EAAAA,GAAAA,GAAc0pC,EAAe7yE,SAC5CoY,GAAuBixB,EAAAA,GAAAA,GAA6B9pC,GAE1D,OACEtO,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO+hC,KAAK9hC,UAC1BH,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACTC,GAAO8iF,QACPJ,GAAsB1iF,GAAO+iF,QAC7BJ,GAAU3iF,GAAOgjF,MAEnBv/E,GAAI,iCAAiCnE,IAAQW,SAAA,EAE7Ce,EAAAA,GAAAA,GAAA,OAAK0J,IAAKu4E,GAAat2D,IAAI,GAAGlvB,UAAWuC,GAAO6c,MAAOtS,WAAW,KAClEvJ,EAAAA,GAAAA,GAAA,UAAQmY,IAAK0pE,EAAcplF,UAAWuC,GAAO+I,SAC7C/H,EAAAA,GAAAA,GAAC28C,GAAAA,EAAc,CACbC,QAASpgD,EACTC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO+I,MAAOof,GACxCzd,IAAK4E,EACLmX,yBAAuB,EACvB8D,aAAW,EACXnB,OAAK,EACLoB,MAAI,YCxDd,GAAuP,WAAvP,GAA0Q,WAA1Q,GAAge,WAAhe,GAAyf,WCqC5e04D,GAA4D,CACvEC,cAAe,uBACfC,mBAAoB,2BACpBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,iCACnBC,aAAc,4BACdC,aAAc,6BACd3+C,QAAS,wBACT4+C,WAAY,sBACZC,UAAW,yBACXC,gBAAiB,+BACjBC,QAAS,0BAGEC,GAAkE,CAC7EjB,cAAe,kCACfC,mBAAoB,sCACpBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,4CACnBC,aAAc,uCACdC,aAAc,wCACd3+C,QAAS,mCACT4+C,WAAY,iCACZC,UAAW,oCACXC,gBAAiB,0CACjBC,QAAS,8BAGLE,GAAsD,CAC1DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,0BACpBC,oBAAqB,4BACrBC,aAAc,+BAGVC,GAA4D,CAChEX,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,6BACpBC,oBAAqB,+BACrBC,aAAc,kCA6OhB,IAAe1nF,EAAAA,EAAAA,KA7N2B4nF,EACxCC,QACAj/C,iBACAk/C,YACAC,SACAC,oBACAC,qBACAn2D,SACAo2D,uBAEA,MAAMznF,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KACPunF,GAAqBx1E,EAAAA,EAAAA,OACpBy1E,EAAmBC,IAAwBlzE,EAAAA,EAAAA,IAASmzE,EAAAA,IAAyBzlD,QAAQ+F,KACrF2/C,EAA4BC,IAAiCrzE,EAAAA,EAAAA,IAAS,IACtEszE,EAAaC,EAAgBC,IAAiB3nF,EAAAA,EAAAA,MAE9C4nF,EAAiBC,IAAsB1zE,EAAAA,EAAAA,KAAS,IAChD2zE,EAAoBC,IAAyB5zE,EAAAA,EAAAA,KAAS,GAEvD6zE,GAAqBpsD,EAAAA,EAAAA,GAAsBgM,GAE3CqgD,GAAmB7nF,EAAAA,EAAAA,KAAQ,IAC1B4mF,EACEA,EAAkB9jD,QAAQ4K,GAAYw5C,EAAAA,IAAyB7xD,SAASqY,KADhDw5C,EAAAA,KAE9B,CAACN,IAEEkB,GAAyB9nF,EAAAA,EAAAA,KAAQ,KACrC,IAAK6mF,EAAoB,OAEzB,MAAM,OAAE3jF,EAAM,OAAE6kF,EAAM,SAAE5kF,GAAa0jF,EAC/BmB,EAAgBhnF,KAAKsgB,MAAMpe,EAAS6kF,GAE1C,OAAOrB,EACHnnF,EAAK,MACLA,EAAK,qBAAsB,CAAE0oF,OAAOhlF,EAAAA,GAAAA,GAAe1D,EAAMyoF,EAAe7kF,IAAa,CAAEq7C,WAAW,MACrG,CAACkoC,EAAWnnF,EAAMsnF,IAEf78D,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCi+E,EAAiBt/C,MAgCnB,SAAS0gD,EAAmBjhF,GAC1B,MAAM,UAAE24B,EAAS,aAAE1jB,EAAY,aAAEgoC,GAAiBj9C,EAAEkjB,cACpDs9D,EAAmB7nD,GAtFE,IAuFrB+nD,EAAsB/nD,GAAaskB,EAAehoC,EAvF7B,GAwFvB,EAEArc,EAAAA,EAAAA,KAAU,KACR,MAAMsoF,EAAkBpB,EAAmBr1E,QAC3C,IAAKy2E,GAAoBP,IAAuBpgD,EAAiB,OAEjE,MAAM5mC,EAAQinF,EAAiBpmD,QAAQ+F,GACvCy/C,EAAqBrmF,GACrB0mF,KACAc,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBzlE,YAAc9hB,EAAO,GAC3EynF,KAAKd,KACP,CAACP,EAAmBa,EAAkBrgD,EAAgBogD,IAEzD,MAAMU,GAAoBz/E,EAAAA,EAAAA,IAAgB8V,UACxC,MAAMwpE,EAAkBpB,EAAmBr1E,QACtCy2E,IAELlB,EAAqBrmF,GAErB0mF,UACMc,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBzlE,YAAc9hB,EAAO,KACpF2mF,QAGIgB,EAAiBV,EAAiBb,GAClCwB,EAAuC,kBAAnBD,GAAyD,YAAnBA,EAEhE,OACEnnF,EAAAA,GAAAA,IAAA,OAAKrC,UD/Nc,WC+NSwC,SAAA,EAC1Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLhE,WAAWsC,EAAAA,GAAAA,GDnOgI,WCmO9FmnF,GDnO0J,YCoOvMtgF,MAAOsgF,EAAoB,oBAAsB,cACjDppF,QAASsxB,EACTtX,UAAW/Z,EAAQ,QAAQkC,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAGbtB,EAAAA,GAAAA,GAAA,OAAKvD,UD3Okc,cC6OvcuD,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GD7O8M,WC6O/K,gBAAiB4nD,SA3EpE,SAAsBhiD,GACpB,MAAMqN,EAASrN,EAAEkjB,eACX,YAAEzH,EAAa+lE,WAAYC,GAAuBp0E,EAElDm0E,EAAaznF,KAAKmY,MAAMuvE,GAGxBtuE,EADOquE,EAAc/lE,EACFA,EAEnBimE,EAAe3nF,KAAKm+E,MAAMsJ,EAAa,GAAK/lE,GAElD0kE,EAA8BuB,GAE9B,MAAMC,EAAct0E,EAAO9H,cAA8B,mCAAkCm8E,EAAe,IACpGE,EAAiBv0E,EAAO9H,cAA8B,kCAAkCm8E,KAU9F,IARApqE,EAAAA,EAAAA,KAAgB,KACdjK,EAAOrG,MAAMsjC,YAAY,oBAAqBn3B,EAAS0uE,YACvDx0E,EAAOrG,MAAMsjC,YAAY,wBAAyBvwC,KAAKoyB,IAAIhZ,GAAU0uE,YAEjEF,IAAaG,EAAAA,GAAAA,IAAiBH,EAAa,WAAW,GACtDC,IAAgBE,EAAAA,GAAAA,IAAiBF,EAAgB,WAAW,MAG9DxB,EAAa,OACjB,MAAM1iD,EAAQ3jC,KAAKmY,MAAMsvE,EAAa/lE,GACtCukE,EAAqBtiD,EACvB,EAgD4FlqB,IAAKssE,EAAmBxlF,SAE7GsmF,EAAiBrmF,KAAI,CAACksC,EAAS9sC,KAC9B,GAAgB,kBAAZ8sC,EACF,OACEtsC,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GDlPiP,YCkPpNC,SAAA,EAC1De,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GDnP+V,WCmPjUmmF,GDnP2X,YCmPjVjmF,SACpFlC,EAAQmlF,GAAuBC,kBAElCniF,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GDtP0U,WCsPrS,iBAAkB4nD,SAAUi/B,EAAmB3mF,SACjGynF,EAAAA,IAAqBxnF,KAAI,CAAC0zB,EAAOu0B,KAChC,MAAMw/B,EAAetC,IAASzxD,GAAO,GAAG4zD,WAClCI,EAAevC,IAASzxD,GAAO,GAAG4zD,WACxC,OACExmF,EAAAA,GAAAA,GAACu+E,GAAmB,CAClBp6E,MAAOpH,EAAQsmF,GAAczwD,IAC7BlhB,YAAa3U,EAAQknF,GAAoBrxD,GAAQg0D,GACjD3I,UAAW0I,EACXzI,WAAY0I,EACZpI,kBAAmBr3B,GAAKu/B,EAAAA,IAAqB7nF,OAAS,aASpE,GAAgB,qBAAZusC,EACF,OACEtsC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,EAC3Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,UAC3Be,EAAAA,GAAAA,GAAC4/E,GAA6B,CAACpjF,SAAUkoF,IAAsBpmF,OAEjE0B,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBlC,EAAQmlF,GAAuBG,qBAElCriF,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAmBC,UAChC8B,EAAAA,GAAAA,GAAWhE,EAAQqmF,GAA6Bf,kBAAmB,CAAC,YAM7E,GAAgB,YAAZj3C,EACF,OACEprC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GD3RsQ,YC2RxOC,UAC3De,EAAAA,GAAAA,GAAC6mF,GAA4B,MAKnC,MAAM1/B,EAAIg9B,EAAM2C,cAAc3nD,QAAQiM,GACtC,OAAW,IAAP+b,GAEFroD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,EAC3Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,UAC3Be,EAAAA,GAAAA,GAAC+gF,GAA0B,CACzBvkF,SAAUkoF,IAAsBpmF,EAChCmjF,QAAS0C,EAAM4C,OAAO5/B,GAAG1kD,GACzBm/E,eAAgBuC,EAAM4C,OAAO5/B,GAAGhkB,UAChCw+C,OAAQqF,EAAAA,IAAsBj0D,SAASqY,GACvC9sC,MAAOA,EACPojF,mBAAoBpjF,IAAUumF,OAGlC7kF,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBlC,EAAQmlF,GAAuBiC,EAAM2C,cAAc3/B,QAEtDnnD,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAmBC,UAChC8B,EAAAA,GAAAA,GAAWhE,EAAQqmF,GAA6Be,EAAM2C,cAAc3/B,KAAM,CAAC,iBAjBlF,QAyBJroD,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GD5T0f,YC8TlgBqmF,GAA4C,IAAtBV,ID9TsiB,YC+T7jBzlF,SAAA,EAEFe,EAAAA,GAAAA,GAACi9E,GAAU,CACTp+E,OAAQ+lF,EAAAA,IAAyB/lF,OACjCgB,OAAQ6kF,EACRxH,cAAe8I,IAEhBllF,QAAQ0kF,KACPxlF,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GDxUoB,YCyU/BsmC,SAAU++C,EACV7+E,qBAAsB6+E,EACtBtnF,QAASsnF,EAAYh2D,EAAS1G,EAAYzoB,SAEzCumF,aCnPb,IAAelpF,EAAAA,EAAAA,KArEiC2qF,EAC9ClpF,SAAQutC,UAAS47C,oBACjB90E,WAAU3V,YAAW0qF,iBAErB,MAAMpqF,GAAUC,EAAAA,EAAAA,MAEV,OACJyoF,EAAM,OAAE7kF,EAAM,SAAEC,GACd9C,EACE2B,EAAQ,UAAW3B,EAASA,EAAO2B,WAAQ/B,EAC3CypF,EAAW1oF,KAAKsgB,MAAMpe,EAAS6kF,GAC/B4B,EAAoB3nF,EAAQA,EAAQ,OAAI/B,EAExC2pF,GAAW5pF,EAAAA,EAAAA,KAAQ,IAChBwpF,GAAqBA,EAAoBE,EAC5C1oF,KAAKm+E,KAAK,IAAMuK,GAAYF,EAAoB,WAChDvpF,GACH,CAACupF,EAAmBE,IAEjBG,GAAe/kF,EAAAA,EAAAA,KAAamC,IAC5BA,EAAEqN,OAAOs5B,SACXl5B,EAASqzE,KAEV,CAACA,EAAQrzE,IAEZ,OACEtT,EAAAA,GAAAA,IAAA,SACErC,WAAWsC,EAAAA,GAAAA,GACTooF,ECjD+C,WAA7B,WDkDjB77C,IAAY67C,GClDsD,WDmDnE1qF,GAEFyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,EAEvCe,EAAAA,GAAAA,GAAA,SACEvD,UCxDsF,WDyDtF+D,KAAK,QACLc,KAAK,sBACLuF,MAAO4+E,EACPn6C,QAASA,EACTl5B,SAAUm1E,KAEZzoF,EAAAA,GAAAA,IAAA,OAAKrC,UC/DwG,WD+D9EwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UChEyH,WDgEjGwC,SAAA,CAC1B6B,QAAQwmF,KACPxoF,EAAAA,GAAAA,IAAA,QACErC,WAAWsC,EAAAA,GAAAA,GCnE2M,WAA9B,YDoExLoF,MAAOpH,EAAQ,gBAAgBkC,SAAA,CAE9B,IAAI,IAEJqoF,EAAS,OAIbvqF,EAAQ,SAAU0oF,OAErBzlF,EAAAA,GAAAA,GAAA,OAAKvD,UC9E+I,WD8EpHwC,SAC5BkoF,GAAcE,EAAqB,IAAGG,EAAAA,GAAAA,GAAuB5mF,EAAQC,EAAU9D,EAAQk7D,WAAWv4D,IAChG3C,EAAQ,iBAAiByqF,EAAAA,GAAAA,GAAuBJ,EAAUvmF,EAAU9D,EAAQk7D,UAElFj4D,EAAAA,GAAAA,GAAA,OAAKvD,UClFmK,WDkF1IwC,UAC3BuoF,EAAAA,GAAAA,GAAuB5mF,EAAQC,EAAU9D,EAAQk7D,iBEnF5D,GAAghB,W,o2BC+D1gBwvB,GAAoB,EAAI5tE,EAAAA,EAExB6tE,GAAiE,CACrEtjD,QAASujD,GACTxF,cAAeyF,GACfxF,mBAAoByF,GACpBxF,iBAAkByF,GAClBxF,eAAgByF,GAChBxF,OAAQyF,GACRxF,cAAeyF,GACfxF,cAAeyF,GACfxF,gBAAiByF,GACjBxF,YAAayF,GACbxF,yBAA0ByF,GAC1BxF,kBAAmByF,GACnBxF,aAAc6E,GACd5E,aAAcwF,GACdvF,WAAYwF,GACZvF,UAAWwF,GACXvF,gBAAiBwF,GACjBvF,QAASwF,IAqXX,IAAersF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,aACJ6/B,IACEz/B,EAAAA,EAAAA,KAAeJ,GAEb01E,EAAW71C,GAAc81C,YAAav2C,EAAAA,EAAAA,KAAWp/B,EAAQ6/B,EAAa81C,iBAAclrF,EACpFmrF,EAAsBF,GAAUG,YAAc71E,EAAO81E,aAAa//C,KAAK2/C,EAASG,YAAYE,iBAC9FtrF,EACEurF,EAAoBJ,GAAsBK,EAAAA,EAAAA,KAAiBj2E,EAAQ41E,EAAoBM,qBACzFzrF,EAEJ,MAAO,CACLs5B,cAAe/jB,EAAO+jB,cACtBktD,MAAOpxC,GAAcoxC,MACrBkF,UAAWt2C,GAAcs2C,UACzBC,OAAQv2C,GAAcu2C,OACtBC,aAAcx2C,GAAcw2C,aAC5BX,WACAE,sBACAI,oBACAM,OAAQz2C,GAAc02C,UAAWn3C,EAAAA,EAAAA,KAAWp/B,EAAQ6/B,EAAa02C,eAAY9rF,EAC7EunC,eAAgB6N,GAAc7N,eAC9Bk/C,WAAW//C,EAAAA,EAAAA,KAA2BnxB,GACtCw2E,eAAeC,EAAAA,GAAAA,GAAmBz2E,EAAQ,YAC1C02E,cAAcD,EAAAA,GAAAA,GAAmBz2E,EAAQ,iBACzC22E,WAAWF,EAAAA,GAAAA,GAAmBz2E,EAAQ,sBACtC42E,YAAYH,EAAAA,GAAAA,GAAmBz2E,EAAQ,kBACvCmxE,OAAQnxE,EAAOk/B,WAAWiyC,OAC1B0F,YAAa72E,EAAOk/B,WAAW43C,mBAC/BC,mBAAoB/2E,EAAOk/B,WAAW63C,mBACtC3F,kBAAmBpxE,EAAOk/B,WAAWkyC,qBA9BrBrxE,EAxVgCi3E,EAClD9mF,SACA6zB,gBACA2xD,WACAE,sBACAI,oBACA/E,QACAj/C,iBACAk/C,YACAsF,gBACAI,aACAF,eACAC,YACAxF,SACA0F,cACAE,qBACAZ,YACAC,SACAE,SACAD,eACAjF,wBAEA,MAAMhK,GAAYrrE,EAAAA,EAAAA,OACZ,kBACJk7E,EAAiB,YAAEhjB,EAAW,gBAAEijB,EAAe,iBAAEhoB,EAAgB,aAAEioB,EAAY,eAAEC,IAC/EjkF,EAAAA,EAAAA,MAEEtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MACNqtF,EAAgBC,IAAmB/4E,EAAAA,EAAAA,KAAS,IAC5Cw0E,EAAgBwE,IAAqBh5E,EAAAA,EAAAA,IAAwCyzB,IAC7EwlD,EAA4BC,IAAyBl5E,EAAAA,EAAAA,OAE5DlU,EAAAA,EAAAA,KAAU,KACH6F,IACHonF,GAAgB,GAChBC,OAAkB9sF,MAEnB,CAACyF,IAEJ,MAAMwnF,GAAoBrkF,EAAAA,EAAAA,IAAiB6kC,IACzCq/C,EAAkBr/C,MAGdy/C,GAAqBtkF,EAAAA,EAAAA,IAAgB,KACzCkkF,OAAkB9sF,MASdmtF,GAA4BvkF,EAAAA,EAAAA,IAAiB0pD,IAClCqqB,EAAUlrE,UAGrB26E,EACF5iB,EAAY,CACV3mE,KAAM,OACNsoE,KAAMihB,IAECE,IACT7nB,EAAiB,CACf/mD,IAAK,GAAGkuD,EAAAA,MAAkB0gB,WAA4Bh6B,GAAc,YAEtEk6B,SAIEziE,GAAcnhB,EAAAA,EAAAA,IAAgB,KAC9BmkF,EACFI,EAA0BjqC,OAAO6pC,EAA2BjF,SAE5DqF,OAIEC,GAAiCxkF,EAAAA,EAAAA,IAAiBk/E,IACtD,MAAMuF,EAAc7G,GAAOznF,QAAQ8C,MAAMzB,GAAWA,EAAO0nF,SAAWA,IACtEkF,EAAsBK,MAGlBC,GAAe1kF,EAAAA,EAAAA,IAAgB,KACnC,MAAMqqD,EAAS0pB,EAAUlrE,QACzB,GAAKwhD,GACDxtD,EAAQ,CACV,MAAM,IACJojB,EAAG,KAAEhH,EAAI,MAAEnQ,EAAK,OAAEK,GAChBkhD,EAAO1mD,cAAc,kBAAmB2V,wBAC5CuqE,EAAgB,CACd5jE,MACAhH,OACAnQ,QACAK,SACAw7E,WAAW,GAEf,MAGF3tF,EAAAA,EAAAA,KAAU,KACJ8rF,GACF4B,MAED,CAAC5B,EAAW4B,KAEf97E,EAAAA,EAAAA,IAAc,EAAEg8E,MACVA,IAAkB/G,GAEtB6G,MACC,CAAC7G,EAAW6G,IAEf,MAAM1F,GAAmB7nF,EAAAA,EAAAA,KAAQ,IAC1B4mF,EACEA,EAAkB9jD,QAAQ4K,GAAYw5C,EAAAA,IAAyB7xD,SAASqY,KADhDw5C,EAAAA,KAE9B,CAACN,KAEJ/mF,EAAAA,EAAAA,KAAU,KACHurF,IAAuBI,GAC5BmB,EAAa,CACXjB,eAAgBN,EAAoBM,mBAErC,CAACiB,EAAcvB,EAAqBI,KAEvC3rF,EAAAA,EAAAA,KAAU,KACR,MAAO6tF,GAAiBjH,GAAOznF,SAAW,GAC1CiuF,EAAsBS,KACrB,CAACjH,IAEJ,MAAMkH,GAAsB9kF,EAAAA,EAAAA,IAAgB,KACrC2iF,GAELoB,EAAe,CACblB,eAAgBF,OAIdhC,GAAoBxpF,EAAAA,EAAAA,KAAQ,KAChC,MAAM4tF,EAAcnH,GAAOznF,QAAQ8C,MAAMzB,GAA6B,IAAlBA,EAAO0nF,SAC3D,GAAK6F,EAGL,OAAO7iE,OAAO6iE,EAAY1qF,UACzB,CAACujF,IAEEoH,IAAsB7tF,EAAAA,EAAAA,KAAQ,KAClC,IAAKgtF,EACH,OAEF,MAAM,OAAE9pF,EAAM,OAAE6kF,EAAM,SAAE5kF,GAAa6pF,EAC/BhF,EAAgBhnF,KAAKsgB,MAAMpe,EAAS6kF,GAC1C,OAAO9kF,EAAAA,GAAAA,GACL1D,EACAyoF,EACA7kF,KAED,CAAC6pF,EAA4BztF,IAEhC,GAAKknF,KAAU2E,GAAwBI,GAqFvC,OACElpF,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJtH,UDtWiB,WCuWjBmH,QAASumF,EACT/mF,OAAQA,EACRk3E,UAAWA,EAAUr7E,UAErBe,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CAACx+B,KAAK,QAAQy+B,UAAWkmD,EAAiB,EAAI,EAAGxpF,UD3WnB,WC2WgDwC,SACrFgnF,GA4EAjmF,EAAAA,GAAAA,GAACkkF,GAAmB,CAClBh/C,eAAgB+gD,EAChB73D,OAAQy8D,EACR1G,MAAOA,EACPK,iBAAkBsG,EAClB1G,UAAWA,EACXC,OAAQA,EACRC,kBAAmBA,EACnBC,mBAAoBmG,KAnFtB5rF,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GD7W2D,WC6W/B,iBAAkB4nD,SA7MtE,SAAsBhiD,GACpB,MAAM,UAAE24B,GAAc34B,EAAEkjB,cAExB2iE,EAAgBltD,GAAa,IAC/B,EAyM6Fr+B,SAAA,EACnFe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLhE,UDjXiZ,WCkXjZmJ,MAAM,cAEN9I,QAASA,IAAMqtF,IACfrzE,UAAW/Z,EAAQ,SAASkC,UAE5Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEXwnF,IAAwBQ,GACxBtpF,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CACV/uF,UD3X0I,WC4X1IK,QAASuuF,EACTpC,WAAYH,EAAoBrmF,GAChCb,OAAK,EACLnB,KAAMgnF,MAGRznF,EAAAA,GAAAA,GAAA,OAAKvD,UDlYoF,WCkY5DiN,IAAK+hF,GAAa9/D,IAAI,GAAGpiB,WAAW,KAEnEvJ,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GDpYgL,WCoY9ImqF,GDpYmkB,YCoYvhBjqF,SAnHvG,WACE,GAAIqqF,EACF,OAAOvoF,EAAAA,GAAAA,GACL6nF,GAAUnmF,KAAOw0B,EACbl6B,EAAQ,sDAAuD,EAACkvC,EAAAA,EAAAA,IAAgBu9C,GAASD,IACzFxsF,EAAQ,8CAA+C,EAACkvC,EAAAA,EAAAA,IAAgB28C,GAAWW,IACvF,CAAC,kBAAmB,UAIxB,GAAIL,GAAqBN,EAAU,CACjC,MAAM8C,EAAW3uF,EAAQ,kCAAkCs7D,QAAQ,UAAUpsB,EAAAA,EAAAA,IAAgB28C,KACtF+C,EAAOC,GAAUF,EAASlQ,MAAM,UAEjCqQ,EAAQ3C,EAAkB4C,oBAC9B9rF,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CAAC/uF,UDhSuqB,WCgSjoBwsF,WAAYC,EAAkB4C,0BAC/EnuF,EACEouF,GACJjtF,EAAAA,GAAAA,IAAA,QAAMrC,UDnS8oB,WCmS5mBK,QAASuuF,EAAoBpsF,SAAA,CAClE4sF,GACA9qF,EAAAA,GAAAA,GAAWmoF,EAAkB/kF,UAGlC,MAAO,EAACpD,EAAAA,GAAAA,GAAW4qF,GAAQI,GAAMhrF,EAAAA,GAAAA,GAAW6qF,GAC9C,CAEA,OAAO7qF,EAAAA,GAAAA,GACL6nF,EACI7rF,EAAQ,kCAAkCkvC,EAAAA,EAAAA,IAAgB28C,IAC1D7rF,EAAQqnF,EAAY,iCAAmC,mBAC3D,CAAC,kBAAmB,SAExB,CAoFa4H,MAEHhsF,EAAAA,GAAAA,GAAA,OAAKvD,UDvYmN,WCuYrLwC,UAChC8B,EAAAA,GAAAA,GApFPuoF,EACKV,GAAUnmF,KAAOw0B,EACpBl6B,EAAQ,0DAA0DkvC,EAAAA,EAAAA,IAAgBu9C,IAClFzsF,EAAQ,kDAILA,EADLmsF,EACa,0CAGVN,EACK,oCACAxE,EAAY,oCAAsC,2BAwEhB,CAAC,kBAAmB,aAExDA,IAAckF,IAtDtBtpF,EAAAA,GAAAA,GAAA,OAAKvD,UDpVktB,WCoV5qBwC,SACxCklF,GAAOznF,QACLwC,KAAKnB,IACJiC,EAAAA,GAAAA,GAACinF,GAAyB,CACxBxqF,UDxV+uB,WC0V/uBsB,OAAQA,EACRqU,SAAU24E,EACV7D,kBAAmBA,EACnB57C,QAASo/C,GAA4BjF,SAAW1nF,EAAO0nF,QAJlD1nF,EAAO6C,aAkDdZ,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GD3Y2R,WC2Y7PwrF,GD3YkT,YC2Y3QtrF,UACnFe,EAAAA,GAAAA,GAAA,MAAIvD,UD5Y6c,WC4YzawC,SACrClC,EAAQ,wBAGb+B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GDhZ0N,WCgZ9LqlF,GDhZ2O,YCgZ7MnlF,SAAA,CACvEsmF,EAAiBrmF,KAAI,CAACksC,EAAS9sC,KAE5B0B,EAAAA,GAAAA,GAACw8E,GAAkB,CAEjBr4E,MAAOpH,EAAQmlF,GAAuB92C,IACtCpyB,KAAkB,kBAAZoyB,EACFruC,EAAQqmF,GAA6Bh4C,GACrC,CAACs+C,EAAeE,EAAcC,EAAWC,EA1V1C,IA2VC/sF,EAAQqmF,GAA6Bh4C,IACzClnC,KAAMwjF,GAA4Bt8C,GAClC9sC,MAAOA,EACP63B,MAAOovD,EAAiB1mF,OACxBusC,QAASA,EACTtuC,QAAS8tF,GAVJx/C,MAcXtsC,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAeC,GDnasiB,YCoahkBkB,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,EAEvCe,EAAAA,GAAAA,GAAA,KAAAf,UACG8B,EAAAA,GAAAA,GAAWhE,EAAQ,2BAA4B,CAAC,uBAEnDiD,EAAAA,GAAAA,GAAA,KAAAf,UACG8B,EAAAA,GAAAA,GAAWhE,EAAQ,4BAA6B,CAAC,yBAvGlE,WACE,GAAKonF,KAAUmF,GAAUV,GAAUnmF,KAAOw0B,GAI1C,OACEj3B,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAmBkB,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,UACvEwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAMmrE,EAAM8H,WACZC,SAAU/H,EAAMgI,kBAIxB,CA6FaC,OAEDhI,GAAasG,IACb1qF,EAAAA,GAAAA,GAAA,OAAKvD,UDhbilB,WCgbxjBwC,UAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UDjb2C,WCibjB4oC,SAAO,EAAC9/B,qBAAmB,EAACzI,QAAS4qB,EAAYzoB,SAChFlC,EAAQ,qBAAsBwuF,mB,4BC3WjD,MAEMviC,GAAkB,iBAgLxB,IAAe1sD,EAAAA,EAAAA,KA9KI+vF,EACjB5vF,YACA4qC,eACAD,gBACA0f,QACA5f,cACAolD,eACA/0D,YACAg1D,kBACAplD,oBACAqlD,aACA7kD,gBACA8kD,gBACAnlD,qBACAolD,sBACAllD,iBACAmlD,kBACA5lC,gBACG6lC,MAEH,MAAM3vF,GAAOD,EAAAA,EAAAA,KACPg9D,GAAW/qD,EAAAA,EAAAA,MAEXw4B,EAAgBmlD,EAAcnlD,cAC9BolD,EAAuBplD,EAAgBmlD,EAAcC,0BAAuBlvF,EAC5EmvF,EAAyBrlD,EAAgBmlD,EAAcE,4BAAyBnvF,GAEtFJ,EAAAA,EAAAA,KAAU,KACR,IAAK8pC,EAAc,OACnB,MAAM0lD,EAAYx8E,OAAOC,YAAW,MAClCs+B,EAAAA,EAAAA,KAAe,KACbkrB,EAAS5qD,SAASurD,aAnCH,KAuCnB,MAAO,KACLpqD,OAAOL,aAAa68E,MAErB,CAAC1lD,IAEJ,MAAM2lD,GAAiBtvF,EAAAA,EAAAA,KAAQ,IACzB+pC,EACKmlD,EAAcI,eAGhBJ,EAAcK,cAAgB,CAACL,EAAcK,eAAiBjmD,GAAAA,GACpE,CAACS,EAAemlD,EAAcK,cAAeL,EAAcI,iBAExDE,GAA0BxvF,EAAAA,EAAAA,KAAQ,IAAM,IAAIyvF,IAAIN,IAAuB,CAACA,IACxEO,GAA4B1vF,EAAAA,EAAAA,KAAQ,IAAM,IAAIyvF,IAAIL,IAAyB,CAACA,IAE5EO,GAAuB3vF,EAAAA,EAAAA,KAAQ,KACnC,GAAIwpC,EACF,OAAO4f,EAAM5nD,KAAKiU,GAASA,EAAKtM,QAGlC,MAAMymF,EAA2C,GAC3CC,EAAqC,GACrCC,EAA+C,GAYrD,OAVA1mC,EAAMzoD,SAAS8U,IACT+5E,EAAwBO,IAAIt6E,EAAKtM,OACnCymF,EAAqB9uF,KAAK2U,GACjBi6E,EAA0BK,IAAIt6E,EAAKtM,OAC5C2mF,EAAyBhvF,KAAK2U,GAE9Bo6E,EAAe/uF,KAAK2U,MAIjBm6E,EAAqBI,OAAOH,EAAgBC,GAA0BtuF,KAAKiU,GAASA,EAAKtM,UAC/F,CAACqgC,EAAa4f,EAAOomC,EAAyBE,IAE3CO,GAAkBpnF,EAAAA,EAAAA,IAAiBM,IACvC,GAAI4gC,EAAe,CACjB,MAAMmmD,EAAoBZ,EAAe/sC,QACnC3hD,EAAQsvF,EAAkBzuD,QAAQt4B,GAQxC,OAPIvI,GAAS,EACXsvF,EAAkBC,OAAOvvF,EAAO,GAEhCsvF,EAAkBpvF,KAAKqI,QAGzB+lF,EAAckB,yBAAyBF,EAEzC,CAEAhB,EAAcmB,wBAAwBlnF,OAGjCmnF,EAAoBpkC,IAAWC,EAAAA,GAAAA,GACpC9C,EAAYsmC,EAAsBvsF,QAAQ4rF,GAAuBxlD,IAG7D+mD,GAAqB1nF,EAAAA,EAAAA,IAAiB5B,IAC1C,MAAM,MAAEkC,GAAUlC,EAAEkjB,cACpB2f,IAAiB3gC,MAGbqnF,GAAa1rF,EAAAA,EAAAA,KAAaqE,IAC9B,MAAMsM,EAAO2zC,EAAMtnD,MAAM2uF,GAAeA,EAAWtnF,QAAUA,IAC7D,IAAKsM,EAAM,OAEX,MAAM,MAAEvM,EAAK,SAAEwnF,EAAU72D,UAAW82D,GAAkBl7E,EAChDm7E,EAAqBlB,EAA0BK,IAAI5mF,GACnD0nF,EAAmBrB,EAAwBO,IAAI5mF,GAC/C2nF,EAAWF,GAAsBC,EACjCE,EAAYzB,EAAej6D,SAASlsB,GAa1C,OACE7G,EAAAA,GAAAA,GAACssD,GAAAA,EAAU,CAET7vD,WAAWsC,EAAAA,GAAAA,GAAeiqD,GAAiByjC,GAC3CtoF,MAAOyC,EACPxC,SAAUgqF,EACVvoF,SAAU2oF,EACVrpD,SAAUqnD,EACVtpE,QAAM,EACNwrE,aAnBEF,GAAiBxuF,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eACV,UAAlBqmC,GACK3nC,EAAAA,GAAAA,GAAC2uF,GAAAA,EAAK,CAACrjD,QAASmjD,EAAW5oF,SAAU2oF,EAAUj3D,UAAW82D,EAAeO,WAAS,IAErE,aAAlBjnD,GACK3nC,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CAAC1oB,QAASmjD,EAAW5oF,SAAU2oF,EAAUj3D,UAAW82D,EAAeO,WAAS,SAD9F,EAiBE9xF,QAASA,IAAM6wF,EAAgB9mF,GAE/B8lF,gBAAiBA,GAAmB,KAAOA,EAAgB9lF,EAAO0nF,KAX7D1nF,KAcR,CACDigD,EAAOsmC,EAA2BF,EAAyBF,EAAgBR,EAAYG,EACvFhlD,EAAe8kD,IAGjB,OACE3tF,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAAA,EAAOqM,UAAW5O,GAAWwC,SAAA,CACzDooC,IACCrnC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAAA,EAAOuE,OAAQ,iBAAkBrD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAClGe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAI2kC,EACJjvB,IAAK6hD,EACLnzD,MAAOqgC,EACP90B,SAAU67E,EACVrhC,YAAazlB,GAAqBlqC,EAAK,cAK5C+wF,GAAoBnvF,QACnBmB,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACbpqD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAAA,EAAO6vF,WAAYvnD,GAAsBtoC,GAAAA,EAAO8vF,OAAQ,iBAClFhoC,MAAOknC,EACP7gC,aAAc,IAAInE,KAClBjC,WAAY6C,EACZ2iC,gBAAiBA,EAAgBttF,SAEhC+uF,EAAmB9uF,KAAK2H,GAAUqnF,EAAWrnF,OAE7C0wB,IAAay2D,GAAuBA,EAAmBnvF,QAG1DmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAFR/sD,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAAA,EAAO+vF,UAAU9vF,SAAEqtF,GAAgBrvF,EAAK,gCCjP9D,IAAgB,KAAO,WAAW,eAAiB,WAAW,YAAc,WAAW,OAAS,WAAW,OAAS,YCwHpH,IAAeX,EAAAA,EAAAA,KA5F0B0yF,EACvC5rF,SACAQ,UACA+xD,WACA4D,cACA01B,qBAEA,MAAM,iBAAExqD,IAAqBp+B,EAAAA,EAAAA,MAEvBpJ,GAAOD,EAAAA,EAAAA,MAENkyF,EAAoBC,IAAyB19E,EAAAA,EAAAA,IAAmB,IAEjE29E,GADyBl2D,EAAAA,EAAAA,GAAsBg2D,KACIA,EAEnD1oD,GAAe9oC,EAAAA,EAAAA,KAAQ,IACtB67D,EAIEA,EAAY/4B,QAAQ6uD,IAAaA,EAAQ91E,UAA6B,OAAjB81E,EAAQC,OACjEpwF,KAAI,EACHowF,OAAMC,kBACF,CACJ1oF,MAAOyoF,EACP1oF,MAAO2oF,MARF,IAUR,CAACh2B,IAEEi2B,GAA0BjpF,EAAAA,EAAAA,IAAiBkpF,IAC3CR,GAAkBQ,EAAe5wF,OAASowF,EAC5CxqD,EAAiB,CACft8B,QAASlL,EAAK,qCAAsCgyF,KAIxDE,EAAsBM,MAGlBlnD,GAAehiC,EAAAA,EAAAA,IAAgB,KACnCovD,EAASu5B,GACTtrF,OAGF,OACE9E,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAWuC,GAAO+hC,KAClB39B,OAAQA,EACRQ,QAASA,EACTsO,QAASq2B,EAAatpC,SAAA,EAEtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOqM,UAAUpM,UAC/BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO0wF,eAAezwF,SAAA,EACpCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACN9I,QAAS8G,EAAQ3E,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGbtB,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAO2wF,YAAY1wF,SAC/BhC,EAAK,iCAKZ+C,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO4wF,KAAM,iBAAiB3wF,UAC3De,EAAAA,GAAAA,GAACqsF,GAAU,CACT5vF,UAAWuC,GAAO6wF,OAClB/oC,MAAOtgB,EACPwmD,eAAgBkC,EAChBpB,uBAAwB0B,EACxBjD,gBAAiB6C,EACjB3nD,eAAa,EACbE,cAAc,gBAIlB3nC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOwE,OAAOvE,UAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASyrC,EAAatpC,SAErBhC,EAAK,gC,mDCrFhB,MAkHA,IAAeX,EAAAA,EAAAA,KAlHoBwzF,EACjC1sF,SACA2sF,iBACAd,iBACAe,qBACAC,yBACArsF,cAEA,MAAM,iBAAE6gC,IAAqBp+B,EAAAA,EAAAA,MACvBpJ,GAAOD,EAAAA,EAAAA,MAENkzF,EAAkBC,IAAuB1+E,EAAAA,EAAAA,SAA6B9T,IACtE2oC,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,KAChD2+E,EAAoBC,EAAkBC,IAAqBhzF,EAAAA,EAAAA,MAC3D6oC,EAAaoqD,IAAkB9+E,EAAAA,EAAAA,IAAmBu+E,IAEzDzyF,EAAAA,EAAAA,KAAU,KACRgzF,EAAeP,KACd,CAACA,IAEJ,MAAMQ,GAAa9yF,EAAAA,EAAAA,KAAQ,KACzB,MAAMwV,GAAS89B,EAAAA,EAAAA,MACT2Z,EAAYz3C,EAAO03C,MAAM3hB,MACzB,OAAEppC,EAAM,SAAE2tD,GAAat6C,EAAO03C,MAAMwC,QACpCxmB,GAAO/mC,GAAU,IAAI6tF,OAAOlgC,GAAY,IAE9C,OAAO9mB,EAAAA,GAAAA,IAAOE,GAAK1nC,KAAKuD,GAAOkoD,EAAUloD,KACtC+9B,QAAQ9sB,GACPA,KACE8iB,EAAAA,EAAAA,IAAc9iB,KAAS+8E,EAAAA,EAAAA,IAAiB/8E,KACrCA,EAAKjR,KAAOstF,IAChB7wF,KAAKwU,GAASA,EAAKjR,OACvB,CAACstF,IAEEW,GAAsBhzF,EAAAA,EAAAA,KAAQ,KAClC,MAAMizF,EAAkBH,GAAa7pD,EAAAA,GAAAA,IAAmB,CAAEC,IAAK4pD,EAAY3pD,MAAOP,EAAa9lC,KAAM,SAAY,GAEjH,OAAO2tD,EAAAA,GAAAA,GAAYwiC,GACjB,EACAxqD,KACD,CAACqqD,EAAYlqD,EAAaH,IAEvByqD,GAAiCrqF,EAAAA,EAAAA,IAAiBkpF,IACtD,MAAM9kC,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAE9B4nD,EADgBpB,EAAejvD,QAAQ/9B,IAAQ0jC,EAAYpT,SAAStwB,KAC/BjD,MAAMiD,IAC/C,MAAMiR,EAAOi3C,EAAUloD,GACvB,OAAOiR,KAASo9E,EAAAA,EAAAA,IAAap9E,MAG3ByyB,GAAatnC,QAAUowF,EACzBxqD,EAAiB,CACft8B,QAASlL,EAAK,0CAA2CgyF,KAKzD4B,GACFV,EAAoBU,GACpBR,KAEAE,EAAed,MAIbsB,GAAqCxqF,EAAAA,EAAAA,IAAgB,KACrD2pF,GACFK,GAAe7pD,EAAAA,GAAAA,IAAO,IAAIP,EAAa+pD,KAEzCI,OAGIU,GAAqBzqF,EAAAA,EAAAA,IAAgB,KACzC0pF,EAAuB9pD,GACvBviC,OAGF,OACE9E,EAAAA,GAAAA,IAACmG,GAAAA,EAAW,CACV7B,OAAQA,EACRQ,QAASA,EACTO,MAAOlH,EAAK,kCACZwJ,gBAAc,EACdrB,qBAAmB,EACnBC,iBAAe,EACfH,kBAAmBjI,EAAK,QACxBqI,UAAW0rF,EACX9+E,QAAS8+E,EAAmB/xF,SAAA,EAE5Be,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAAS2pD,EACTvqD,YAAaA,EACbe,YAAaZ,EACba,kBAAmBlqC,EAAK,UACxBsqC,oBAAqBqpD,EACrBppD,eAAgBjB,EAChBc,cAAY,EACZC,oBAAkB,EAClBI,YAAU,EACVD,eAAa,EACbE,cAAc,cAEhB3nC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ3hC,MAAOlH,EAAK,kCACZ+b,KAAM/b,EAAK,yCACX8oC,aAAc9oC,EAAK,OACnBmG,OAAQgtF,EACRxsF,QAAS0sF,EACTtqD,eAAgB+qD,UCjDxB,IAAez0F,EAAAA,EAAAA,KA3D0B20F,EACvClzF,SAAQutC,UACRhqC,OAAM0X,OAAM3P,MACZ6nF,SAAQ9+E,WAAU++E,gBAAe10F,YACjC20F,YAAWC,wBAEX,MAAMp0F,GAAOD,EAAAA,EAAAA,KAEb,IAAIs0F,EAAkCr0F,EAAK+b,GACvCk4E,GAAUG,GAAmBxyF,SAC/ByyF,EAAcD,EAAkBxyF,OAAS,EAAIwyF,EAAkBxyF,OAAO2nF,WAAa4K,GAGrF,MAAM7J,GAAehhF,EAAAA,EAAAA,IAAiB5B,IAChCA,EAAEqN,OAAOs5B,SACXl5B,EAASrU,MAIP2pB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClC4qF,SAGF,OACEryF,EAAAA,GAAAA,IAAA,SACErC,WAAWsC,EAAAA,GAAAA,GCrDS,WDqDsBtC,GAC1CyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAC1BmuC,KAAK,SACLD,SAAU,EAAE5sC,SAAA,EAEZe,EAAAA,GAAAA,GAAA,SACEvD,UC3DqC,WD4DrC+D,KAAK,QACLc,KAAK,kBACLuF,MAAO9I,EACPutC,QAASA,EACTl5B,SAAUm1E,EACVzqF,QAAU6H,GAAMA,EAAEwV,qBAEpBrb,EAAAA,GAAAA,IAAA,OAAKrC,UCnEuD,WDmE7BwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OAAKvD,UCpE+J,WDoElIiN,IAAKL,EAAKsiB,IAAI,GAAGpiB,WAAW,KAC9DzK,EAAAA,GAAAA,IAAA,OAAKrC,UCrEmG,WDqExEwC,SAAA,EAC9Be,EAAAA,GAAAA,GAAA,MAAIvD,UCtEqH,WDsE7FwC,SACzBhC,EAAKqE,KAEP4vF,GACCpyF,EAAAA,GAAAA,IAAA,OAAKrC,UC1EoI,WD0E5GK,QAAS4qB,EAAYzoB,SAAA,EAChDe,EAAAA,GAAAA,GAAA,QAAAf,SAAOqyF,KACPtxF,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGbtB,EAAAA,GAAAA,GAAA,QAAMvD,UC/EmL,WD+ErJwC,SAAEqyF,gBEqDlD,IAAeh1F,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAU68E,qBAClD,MAAM/hC,EAAe+hC,GAAiB9hC,EAAAA,EAAAA,KAAmB/6C,EAAQ68E,QAAkBpyF,EACnF,OAAKqwD,EAIE,CACLujC,QAASvjC,EAAaujC,QACtBC,iBAAkBxjC,EAAawjC,kBALxB,CAAC,IAHQv+E,EAhGYw+E,EAC9BruF,SACA6rF,iBACAsC,UACAC,mBACAxB,qBACAC,yBACArsF,cAEA,MAAM,iBAAE6gC,IAAqBp+B,EAAAA,EAAAA,MACvBpJ,GAAOD,EAAAA,EAAAA,MAENspC,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,KAChD00B,EAAaoqD,IAAkB9+E,EAAAA,EAAAA,IAAmBu+E,IAEzDzyF,EAAAA,EAAAA,KAAU,KACRgzF,EAAeP,KACd,CAACA,IAEJ,MAAM0B,GAAYh0F,EAAAA,EAAAA,KAAQ,KACxB,MAAMwV,GAAS89B,EAAAA,EAAAA,OACT,KAAE/H,EAAI,aAAE0oD,GAAiBz+E,EAAOxT,MACtC,IAAK6xF,GAAS1yF,OACZ,MAAO,GAGT,MAAM+yF,EAAcJ,GAAoB,IAAIrE,IAAIxsC,OAAO0K,KAAKmmC,IAEtDhpD,GAAUqpD,EAAAA,EAAAA,IACdN,EAAQryF,KAAI,EAAGwhC,YAAaA,IAC5BuI,EACA0oD,GAGF,OAAOC,EAAcppD,EAAQhI,QAAQE,IAAYkxD,EAAYnE,IAAI/sD,KAAW8H,IAC3E,CAACgpD,EAAkBD,IAEhBO,GAAqBp0F,EAAAA,EAAAA,KAAQ,KACjC,MAAMkqC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAC9B8oD,EAAkBL,GACpB/qD,EAAAA,GAAAA,IAAmB,CAAEC,IAAK8qD,EAAW7qD,MAAOP,EAAa9lC,KAAM,SAAY,GAE/E,OAAO2tD,EAAAA,GAAAA,IAAYznB,EAAAA,GAAAA,IAAOqrD,GAAiBvxD,QAAQE,IACjD,MAAM2R,EAAOzK,EAAUlH,GACvB,OAAK2R,KAIG2/C,EAAAA,EAAAA,IAAU3/C,SAEnB,CAACq/C,EAAWprD,IAET2rD,GAAgC1rF,EAAAA,EAAAA,IAAiBkpF,IACjDA,EAAe5wF,OAASowF,EAC1BxqD,EAAiB,CACft8B,QAASlL,EAAK,iCAAkCgyF,KAIpDsB,EAAed,MAGXuB,GAAqBzqF,EAAAA,EAAAA,IAAgB,KACzC0pF,EAAuB9pD,GACvBviC,OAGF,OACE5D,EAAAA,GAAAA,GAACiF,GAAAA,EAAW,CACV7B,OAAQA,EACRQ,QAASA,EACTO,MAAOlH,EAAK,8BACZwJ,gBAAc,EACdrB,qBAAmB,EACnBC,iBAAe,EACfH,kBAAmBjI,EAAK,QACxBqI,UAAW0rF,EACX9+E,QAAS8+E,EAAmB/xF,UAE5Be,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAAS+qD,EACT3rD,YAAaA,EACbe,YAAaZ,EACba,kBAAmBlqC,EAAK,UACxBsqC,oBAAqB0qD,EACrBzqD,eAAgBjB,EAChBc,cAAY,EACZC,oBAAkB,EAClBI,YAAU,EACVD,eAAa,EACbE,cAAc,mBC9HtB,GAA0a,WAA1a,GAAse,WAAte,GAAigB,WAAjgB,GAA2hB,WAA3hB,GAA+rB,WAA/rB,GAA0tB,WAA1tB,GAA0vB,WAA1vB,GAA+zB,WAA/zB,GAA+1B,WAA/1B,GAA+3B,WAA/3B,GAAu8B,WAAv8B,GAAo+B,WAAp+B,GAA+kC,W,oDCqG/kC,MAIMuqD,GAAqD,CACzD,EAAGC,GACH,EAAGC,GACH,GAAIC,IA+xBN,IAAe/1F,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,cACJo/E,IACEh/E,EAAAA,EAAAA,KAAeJ,GACblM,EAASsrF,GAAetrF,OACxB0M,EAAO1M,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,QAAUrJ,EAC7C44B,EAAY7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GAExC,MAAO,CACL1M,SACAurF,MAAOD,GAAeC,MACtBC,mBAAoBF,GAAejB,kBACnCoB,oBAAqBH,GAAeI,mBACpCC,6BAA8Bz/E,EAAOk/B,WAAWwgD,yBAChDC,mBAAoB3/E,EAAOk/B,WAAWygD,mBACtCC,mBAAoB5/E,EAAOk/B,WAAW2gD,oBACtCC,sBAAuB9/E,EAAOk/B,WAAW6gD,qBACzC15B,YAAarmD,EAAOqmD,YAAY25B,QAChCC,gBAAiBb,GAAea,gBAChC58D,YACA68D,iBAAkBd,GAAee,eApBjBpgF,EA5xB6BqgF,EAC/CtsF,SACAurF,QACAnvF,SACAmzB,YACAi8D,qBACAC,sBACAE,+BAA+BY,EAAAA,IAC/Bh6B,cACA45B,kBACAH,wBAAwBQ,EAAAA,IACxBV,qBAAqBW,EAAAA,IACrBZ,qBACAO,uBAEA,MAAM9Y,GAAYrrE,EAAAA,EAAAA,OACZ,mBACJykF,EAAkB,YAAEvsB,EAAW,iBAAEziC,EAAgB,sBACjDivD,EAAqB,2BAAEC,IACrBvtF,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACN62F,EAAkBC,EAAcC,IAAiBz2F,EAAAA,EAAAA,MACjD02F,EAA0BC,EAAwBC,IAA2B52F,EAAAA,EAAAA,MAC7E8yF,EAAoBC,EAAkBC,IAAqBhzF,EAAAA,EAAAA,MAC3D62F,EAAuBC,EAAqBC,IAAwB/2F,EAAAA,EAAAA,MACpEg3F,EAA0BC,EAAwBC,IAA2Bl3F,EAAAA,EAAAA,KAE9Em3F,EAA6B,CAAC,CAClCnzF,KAAM,gBACN0X,KAAM,0BACNnS,MAAO,mBACPwC,IAAK+oF,GACLxpD,QAAS,wBACTsoD,QAAQ,EACRC,cAAeA,KACbiD,OAIAvB,GACF4B,EAAaj2F,KAAK,CAChB8C,KAAM,gBACN0X,KAAM,0BACNnS,MAAO,iBACPwC,IAAKqrF,GACL9rD,QAAS,sBACTsoD,QAAQ,IAIZ,MAAOyD,EAAkBC,IAAuBnjF,EAAAA,EAAAA,IAAiB6d,KAAKC,MA7DrC,SA8D1Bg7D,EAAgBC,IAAmB/4E,EAAAA,EAAAA,KAAS,IAC5CojF,EAAyBC,IAA8BrjF,EAAAA,EAAAA,IA7DpC,IA8DnBsjF,GAAwBC,KAAqBvjF,EAAAA,EAAAA,IAA0BgjF,EAAa,GAAG5tF,QACvFlK,GAAoBs4F,KAAyBxjF,EAAAA,EAAAA,OAC7CyjF,GAA0BC,KAA+B1jF,EAAAA,EAAAA,IAA0B,QACnF2jF,GAAqBC,KAA0B5jF,EAAAA,EAAAA,OAC/C6jF,GAAiBC,KAAsB9jF,EAAAA,EAAAA,IAAmB,KAC1DihF,GAAoB8C,KAAyB/jF,EAAAA,EAAAA,IAAmB,KAChEy9E,GAAoBC,KAAyB19E,EAAAA,EAAAA,IAA+B,KAC5EgkF,GAAmBC,KAAwBjkF,EAAAA,EAAAA,KAAkB,IAC7DkkF,GAAkBC,KAAuBnkF,EAAAA,EAAAA,KAAkB,IAC3DokF,GAAkBC,KAAuBrkF,EAAAA,EAAAA,SAA6B9T,IACtEo4F,GAAqBC,KAA0BvkF,EAAAA,EAAAA,SAAyC9T,IAE7Fs4F,GAA0BC,KACxBzkF,EAAAA,EAAAA,SAA8C9T,GAE5Cw4F,GAA+C,qBAA3BpB,GACpBqB,GAA6C,mBAA3BrB,GAClBsB,GAAoBF,KACpBb,GAAgBz2F,OAASg2F,EAA0BS,GAAgBz2F,OACnEy3F,GAAgBD,GAAoB1D,EACpC4D,GAAqB55F,IAAoB65F,aAEzCC,IAAqB/4F,EAAAA,EAAAA,KAAQ,IAAM,CACvC,CACEmJ,MAAO,MACPD,MAAO3J,EAAKs5B,EAAY,yBAA2B,sBACnD63D,SAAUc,IAAsBA,GAAmBrwF,OAAS,EACxD5B,EAAK,kCAAmCiyF,GAAmBrwF,QAC3D5B,EAAK,6BAEX,CACE4J,MAAO,MACPD,MAAO3J,EAAKs5B,EAAY,yBAA2B,sBACnD63D,SAAUc,IAAsBA,GAAmBrwF,OAAS,EACxD5B,EAAK,kCAAmCiyF,GAAmBrwF,QAC3D5B,EAAK,+BAEV,CAACs5B,EAAWt5B,EAAMiyF,KAEfwH,GAAgBz5F,EAAK,SAAUm4F,IAC/BuB,GAAmD,kBAA1BxD,GAAiB3yF,KAC1Co2F,GAAqD,aAA1BzD,GAAiB3yF,KAE5Cq2F,IAAen5F,EAAAA,EAAAA,KAAQ,IACpB60F,GAAO/yF,MAAMs3F,GAASA,EAAKrR,SAAW2P,IAAuB0B,EAAKp3F,QAAU22F,MAClF,CAAC9D,EAAO6C,GAAqBiB,KAE1BU,IAAoBr5F,EAAAA,EAAAA,KAAQ,IACzB01F,GAAkB5zF,MAAMs3F,GACtBH,IAA0BG,EAAK94F,QAAWi4F,IAA0Bj4F,SAE5E,CAACi4F,GAA0B7C,EAAkBuD,KAE1CK,IAAgBt5F,EAAAA,EAAAA,KAAQ,IACrB60F,GAAO/xD,QAAQs2D,GAASA,EAAKp3F,QAAU22F,IAAqBS,EAAKj2F,WAAao2F,EAAAA,OACpF,CAAC1E,EAAO8D,KAELnP,IAAoBxpF,EAAAA,EAAAA,KAAQ,KAChC,MAAMw5F,EAAYF,IAAen5F,QAAO,CAACqtD,EAAK4rC,IACrCA,EAAKl2F,OAASsqD,EAAItqD,OAASk2F,EAAO5rC,GACxC8rC,GAAc,IAEjB,OAAOE,GAAax4F,KAAKsgB,MAAMk4E,EAAUt2F,OAASs2F,EAAUzR,UAC3D,CAACuR,KAEEG,IAAmBz5F,EAAAA,EAAAA,KAAQ,KACxBgpC,EAAAA,GAAAA,IAAQ6rD,GAAO/xD,QAAQs2D,GAASA,EAAKj2F,WAAao2F,EAAAA,OACrD/3F,KAAKI,GAAWA,EAAOI,SAAU,IAAK2lD,MAAK,CAACC,EAAGC,IAAMD,EAAIC,KAC5D,CAACgtC,IAEE6E,IAAqB15F,EAAAA,EAAAA,KAAQ,KAC1BgpC,EAAAA,GAAAA,IAAQ/pC,IAAoB4C,SAASL,KAAKI,GAAWA,EAAOI,SAAU,IAAK2lD,MAAK,CAACC,EAAGC,IAAMD,EAAIC,KACpG,CAAC5oD,MAEJY,EAAAA,EAAAA,KAAU,KACJ6F,GAAUmvF,GAAO1zF,SAAW83F,IAC9BtB,GAAuB9C,IAAQ,GAAG9M,UAEnC,CAACriF,EAAQmvF,EAAOoE,MAEnBp5F,EAAAA,EAAAA,KAAU,KACJ6F,GAAUgwF,GAAkBv0F,SAAW+3F,IACzC3B,GAAsB7B,IAAmB,MAE1C,CAAChwF,EAAQgwF,EAAkBwD,MAE9Br5F,EAAAA,EAAAA,KAAU,KACJ6F,GAAUuzF,KACZ7B,EAA2B3B,EAAgBkE,UAC3CnB,GAA4B/C,MAE7B,CAAC/vF,EAAQuzF,GAAwBxD,KAEpC51F,EAAAA,EAAAA,KAAU,KACJ6F,GAAUwzF,KACZ9B,EAA2B3B,EAAgBkE,UAC3CrB,GAAuB7C,GACvBkC,GAAuBlC,EAAgB1N,WAExC,CAACriF,EAAQwzF,GAA0BzD,KAEtC51F,EAAAA,EAAAA,KAAU,KACJi1F,GACF+C,GAAmB/C,KAEpB,CAACA,KAEJj1F,EAAAA,EAAAA,KAAU,KACJk1F,GACF+C,GAAsB/C,KAEvB,CAACA,IAEJ,MAAM6E,IAAqB/wF,EAAAA,EAAAA,IAAgB,KACzCm+B,OAGI3G,IAAcx3B,EAAAA,EAAAA,IAAgB,KAClC2vF,QAA4Bv4F,GAC5Bq4F,QAAuBr4F,GACvBs3F,QAAsBt3F,GACtB03F,QAAuB13F,GACvBm3F,EAxLwB,GAyLxBpB,OAGIhsE,IAAcnhB,EAAAA,EAAAA,IAAgB,KAG9B4gE,EAFAgvB,GACEb,IAAiBz2F,OACP,CACV2B,KAAM,WACN+2F,eAAgBvwF,EAChBwhC,QAAS8sD,GACTz0F,SAAUg2F,GAAch2F,SACxBD,OAAQi2F,GAAcj2F,OACtB7C,OAAQ84F,IAGE,CACVr2F,KAAM,WACNwG,OAAQA,EACRwwF,qBAAsB9E,GACtB+E,wBAAsD,QAA7BvC,GACzBwC,UAAWxI,GACXyI,kBAAmBlC,GACnBI,oBACA+B,UAAWjD,EAAmB,IAC9B9zF,SAAUg2F,GAAch2F,SACxBD,OAAQi2F,GAAcj2F,OACtB7C,OAAQ84F,IAIA,CACVr2F,KAAM,gBACNwG,OAAQA,EACRwwF,qBAAsB9E,GACtB+E,wBAAsD,QAA7BvC,GACzBwC,UAAWxI,GACXyI,kBAAmBlC,GACnBI,oBACA+B,UAAWjD,EAAmB,IAC9B9zF,SAAUlE,GAAoBkE,SAC9BD,OAAQjE,GAAoBiE,OAC5B5C,MAAOrB,GAAoBqB,MAC3B0B,MAAOm1F,IAIX92D,QAGI85D,IAA+BtxF,EAAAA,EAAAA,IAAgB,KAC/CowF,GACF/C,EAA2B,CACzB5sF,OAAQA,EACR8wF,WAAY7B,GAA0BxzF,GACtCs1F,eAAgB,CACdP,qBAAsB9E,GACtBgF,UAAWxI,GACX2G,oBACA8B,kBAAmBlC,GACnBmC,UAAWjD,EAAmB,IAC9B32F,MAAOi4F,GAA0Bj4F,MACjC6C,SAAUk2F,GAAmBl2F,SAC7BD,OAAQm2F,GAAmBn2F,OAC3BlB,MAAOu2F,GAA0BoB,YAIrC1D,EAAsB,CACpB3sF,OAAQA,EACR8wF,WAAY/B,GAAqBtzF,GACjCs1F,eAAgB,CACdP,qBAAsB9E,GACtBgF,UAAWxI,GACX2G,oBACA8B,kBAAmBlC,GACnBmC,UAAWjD,EAAmB,IAC9B9zF,SAAUg2F,GAAch2F,SACxBD,OAAQi2F,GAAcj2F,UAK5B0vF,IACAvyD,QAGIi6D,IAA8BzxF,EAAAA,EAAAA,IAAiB0xF,IACnDnD,EAA2BmD,MAGvBC,IAA0B3xF,EAAAA,EAAAA,IAAiB0xF,IAC/CnD,EAA2BmD,MAGvBE,IAA+B5xF,EAAAA,EAAAA,IAAiB5B,IACpDmxF,GAAoBnxF,EAAEqN,OAAOnL,UAGzBuqF,IAAY1zF,EAAAA,EAAAA,KAAQ,KACxB,MAAMkqC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KACpC,OAAOqsD,IAAiBp2F,KAAKwhC,IAAWuL,EAAAA,EAAAA,IAAgBrE,EAAUlH,MAAU5W,KAAK,QAChF,CAACwrE,KAQE8C,IAA+B7xF,EAAAA,EAAAA,IAAiBM,IACpDsuF,GAA4BtuF,MAGxBwxF,IAAyB9xF,EAAAA,EAAAA,IAAiBM,IAC9CmuF,GAAkBnuF,GAClB0uF,GAAmB,IACnBT,EA7SwB,MAgTpBwD,IAAyB/xF,EAAAA,EAAAA,IAAiByvB,IAC9C4+D,EAAoB5+D,EAAK+gC,WACzBg9B,OAGIwE,IAA+BhyF,EAAAA,EAAAA,IAAiBM,IACpDsoF,GAAsBtoF,MAGlB2xF,IAA8BjyF,EAAAA,EAAAA,IAAiBkpF,IACnD8F,GAAmB9F,GACdA,EAAe5wF,QAClBm2F,GAAkB,uBAIhBpE,IAAiCrqF,EAAAA,EAAAA,IAAiBkpF,IACtD+F,GAAsB/F,MAGlBgJ,IAAgClyF,EAAAA,EAAAA,IAAiB5B,IACrD+wF,GAAqB/wF,EAAEqN,OAAOs5B,YAG1BotD,IAA+BnyF,EAAAA,EAAAA,IAAiB5B,IACpDixF,GAAoBjxF,EAAEqN,OAAOs5B,YAGzBqtD,IAAuBpyF,EAAAA,EAAAA,IAAgB,KAC3C0tF,OAGI2E,IAAkBryF,EAAAA,EAAAA,IAAiBxI,IACvCk3F,GAAsBl3F,MA8FxB,SAAS86F,KACP,OACE/5F,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,6CAGR+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP8gC,UAAQ,EACR1oC,UAAU,wCAAuCwC,UAEjDe,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZh9C,OAAQA,EACRi8C,OAAQhmD,EAAKs5B,EAAY,kCACrB,gCAAiC+/D,IAAiBC,GAAoB,SAI7E7D,IAAoBxzF,KAAKy0C,IAEtB3zC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP6e,QAAM,EAENzmB,UAAU,wCAEVK,QAASA,IA3CvB,SAAmC2F,GACjC,MAAMq2F,EAAqBpG,GAAmBlyD,QAAQmT,GAAcA,IAAclxC,IAClF+yF,GAAsBsD,EACxB,CAwC6BC,CAA0BplD,GACzC2P,cAAetjD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UDjjBumC,aCijBlkCwC,UAEvEe,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZh9C,OAAQ2sC,EAAU6yC,cAPf7yC,KAaV++C,GAAmB7zF,OApdE,IAqdpBmB,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,MACLgf,QAAM,EACNpmB,QAASy3F,EACT93F,UD/jBwlC,WCgkBxlC+H,cDhkBgnC,WCgkB/kCvF,SAEhChC,EAAK,mCAKZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,4BApHZ+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,UAC7Be,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,cACL5E,QAAS+5F,GACTpkF,SAAU6iF,GACV9iF,SAAUgmF,GACVjH,cAAewH,GACfK,kBD5d6iC,WC6d7iC9H,QAAM,UAkHRlxF,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,UACjC8B,EAAAA,GAAAA,GAAW9D,EAAKs5B,EAAY,iCAAmC,sCAGlEz3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAuBC,SAAA,EACrCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBhC,EAAK,uCAGR+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPtlC,MAAO3J,EAAK,oCACZquC,QAASqqD,GACTvjF,SAAUsmF,QAIb/C,KACC72F,EAAAA,GAAAA,IAAA,OAAKrC,UDjmB8+B,WCimB98BwC,SAAA,EACnCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzB41F,KAEH70F,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7V,UDtmBwgC,WCumBxgCoK,MAAOgvF,GACPzjF,SAAU+lF,GACVvxF,MAAO3J,EAAK,0CAMnB04F,GACES,IAAoBO,QAcjBh5F,GAbFqC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,SACjC42F,IAAkBh3F,QAASkC,EAAAA,GAAAA,GAAW9D,EAAK,6CAC1C84F,GACI,CAACA,GAAoBsB,SAAUxB,GAAkBa,IACjD,CAACL,GAAmBR,GAAkBa,SAC1C/4F,EACAy3F,IAAsB,CAAC,qBAAsBr0F,EAAAA,GAAAA,GAAW9D,EAAK,yCAC7D84F,GACI,CAACA,GAAoBsB,SAAUX,IAC/B,CAACL,GAAmBK,SACxB/4F,EACAy3F,IAAsB,CAAC,uBAI7Bp1F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,UACjC8B,EAAAA,GAAAA,GAAW9D,EAAK,yCAIrB+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,UAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAuBC,SAAA,EACrCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBhC,EAAK,kCAGR+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPtlC,MAAO3J,EAAK,oCACZquC,QAASmqD,GACTrjF,SAAUqmF,WAKhBz4F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,UACjC8B,EAAAA,GAAAA,GAAW9D,EAAK,uCAGnB6B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,IAC5B+2F,IAAuBE,IAA4BG,KAAoBp3F,IAA2BC,SAAA,EAEnGe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,mCAGR6B,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACL8V,UAAW7Z,EAAK,sBAChBR,WAAWsC,EAAAA,GAAAA,GDhqB65B,WCgqB33B,gBAC7CmC,QAAM,EACNpE,QAASg3F,EAAa70F,SAAA,EAEtBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBhC,EAAK,yBAEPg8F,EAAAA,GAAAA,IAAuBtE,EAAkB13F,EAAKg7D,cAKzD,CAEA,OACEn5D,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UDhrBiB,WCirBjBmH,QAASm6B,GACT36B,OAAQA,EACRk3E,UAAWA,EACXpoE,QAAU6jF,IAAuBE,GAA4B5F,EAAmB3oE,GAAYzoB,SAAA,EAE5FH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GDtrBuC,WCsrBX,iBAAkB4nD,SA/SlE,SAAsBhiD,GACpB,MAAM,UAAE24B,GAAc34B,EAAEkjB,cAExB2iE,EAAgBltD,GAAa,IAC/B,EA2SyFr+B,SAAA,EACnFe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLhE,UD1rB2Q,WC2rB3QmJ,MAAM,cACN9I,QAASihC,GACTjnB,UAAW7Z,EAAK,SAASgC,UAEzBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UDjsBkE,WCisB1CiN,IAAK+hF,GAAa9/D,IAAI,GAAGpiB,WAAW,KACjEvJ,EAAAA,GAAAA,GAAA,MAAIvD,UDlsBoH,WCksBvFwC,UAC9B8B,EAAAA,GAAAA,GAAW9D,EAAK,8BAEnB+C,EAAAA,GAAAA,GAAA,OAAKvD,UDrsB4I,WCqsB9GwC,UAChC8B,EAAAA,GAAAA,GAAW9D,EAAKs5B,EAAY,uBAAyB,kCAExDv2B,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GDxsBqJ,WCwsBvHwrF,GDxsB4K,YCwsBrItrF,UACnFe,EAAAA,GAAAA,GAAA,MAAIvD,UDzsBuU,WCysBnSwC,SACrChC,EAAK,8BAGR84F,IAAuBE,IACvBn3F,EAAAA,GAAAA,IAAA,OAAKrC,UD9sB8lB,WC8sBrkBwC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,OAAAf,SACGg3F,IACCj2F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAmB0K,IAAKgrF,GAAU/oE,IAAI,MAEtD3rB,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GACX0K,IAAKwoF,GAAkB6D,GAAqBtQ,SAAWyM,GAAkB,GACzEvmE,IAAI,QAIV7sB,EAAAA,GAAAA,IAAA,OAAKrC,UD1tB8mB,WC0tBvlBwC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACzBg3F,GAA2Bh5F,EAAK,+BAAgCg5F,IAA0Bj4F,OACvFf,EAAK,qCAAsC84F,GAAqBsB,aAEtEr3F,EAAAA,GAAAA,GAAA,KAAGvD,UD/tBwpB,WC+tBhoBwC,SACxBg3F,GAA2Bh5F,EAAK,8BAA+Bg5F,IAA0BoB,UACtFp6F,EAAK,wBAAyB84F,IAAqBtQ,cAG3DzlF,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAgBC,UAC9BH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAsBA,IAA2BC,SAAA,EAC9Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAWuC,MAC9BgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAA2BkB,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC5Eg3F,GAA2BA,IAA0BiD,OAClDnD,GAAqBsB,UAAY1E,GAAgCY,EAAAA,gBAM7EvzF,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GD/uBoZ,YC+uBtXC,UAlTjEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,SAC5Bw1F,EAAav1F,KAAKnB,IAEfiC,EAAAA,GAAAA,GAACixF,GAAkB,CAEjB3vF,KAAMvD,EAAOuD,KACb0X,KAAMjb,EAAOib,KACbjb,OAAQA,EAAO8I,MACfwC,IAAKtL,EAAOsL,IACZ+I,SAAUimF,GACV/sD,QAASypD,KAA2Bh3F,EAAO8I,MAC3CqqF,OAAQnzF,EAAOmzF,OACfE,UAAWA,GACXC,kBAAmBiE,GACnBnE,cAAepzF,EAAOozF,eAVjBpzF,EAAOuD,YAmTjB60F,KAAsBb,IAAiBz2F,SACtCC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACI82F,KAAwBE,KACxBn3F,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAgBC,SAAA,EAC9Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,6BAER6B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAsBA,IAA2BC,SAAA,EAC9Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAWuC,MAC9BgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAA2BkB,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC5Eq3F,YAKPt2F,EAAAA,GAAAA,GAACm5F,GAAAA,EAAoB,CACnBC,WAAY/C,GACZgD,MAAOlC,GACP/kF,SAAU4lF,SAIdh4F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,UACjC8B,EAAAA,GAAAA,GAAW9D,EAAK,+BAKtB47F,QAIJzC,KACCt3F,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACIg3F,KAA6BF,KAC7Bj3F,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAgBC,SAAA,EAC9Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,2BAER6B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAsBA,IAA2BC,SAAA,EAC9Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAWuC,MAC9BgB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAA2BkB,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC5Es3F,YAtRnBv2F,EAAAA,GAAAA,GAACzD,GAAAA,EAAmB,CAClBE,UD7gB0qC,WC8gB1qCC,QAAS02F,EACTx2F,kBAAmBi4F,EACnBl4F,mBAAoBA,GACpBG,QAAS87F,SAyRD54F,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GD1yB0gB,YC0yB5dC,UAC1E8B,EAAAA,GAAAA,GAAW9D,EAAK,4BAGnB6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,kCAGR+C,EAAAA,GAAAA,GAACm5F,GAAAA,EAAoB,CACnBC,WAAYvE,EACZwE,MAAOjC,GACPhlF,SAAU8lF,MAGZl4F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAoBC,UACjC8B,EAAAA,GAAAA,GAAW9D,EAAK,4CAMxB47F,SAIH9C,KAAwBE,IAA4BE,KACpDr3F,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAeC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAqBC,SACjChC,EAAK,gCAnWhB+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,SAC5B+3F,IAAe93F,KAAK43F,IACnB92F,EAAAA,GAAAA,GAACinF,GAAyB,CACxBE,YAAU,EAEVppF,OAAQ+4F,EACR5P,kBAAmBA,GACnB57C,QAASwrD,EAAKrR,SAAW2P,GACzBhjF,SAAUijF,IAJLyB,EAAKrR,gBAqWVzlF,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAqBA,IAA2BC,SA1VzF,WACE,MACMq3B,EADOr5B,EAAK,mCACCq8F,MAAM,0BAEzB,GAAKhjE,KAASA,EAAMz3B,OAAS,GAI7B,OACEC,EAAAA,GAAAA,IAAA,KAAGrC,UD7fm5B,WC6fj3BwC,SAAA,CAClCq3B,EAAM,IACPt2B,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAACC,WAAS,EAAC18F,QAASw6F,GAAmBr4F,SAAEq3B,EAAM,KACnDA,EAAM,KAGb,CA4UamjE,QAKN1E,KACC/0F,EAAAA,GAAAA,GAAA,OAAKvD,UDr1Bkc,WCq1BzawC,UAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UDv1B6B,WCw1B7BK,QAAUi5F,IAAuBE,GAA4B5F,EAAmB3oE,GAAYzoB,SAE3FhC,EAAK,iCAKd+C,EAAAA,GAAAA,GAACk1D,GAAa,CACZ9xD,OAAQywF,EACRv+B,cAAY,EACZE,gBAAc,EACd5xD,QAASmwF,EACTp+B,SAAU2iC,GACVnjC,WAAYw/B,EACZl/B,kBAAmBx4D,EAAK,WAE1B+C,EAAAA,GAAAA,GAACgvF,GAAkB,CACjB5rF,OAAQ4wF,EACRpwF,QAASswF,EACT36B,YAAaA,EACb5D,SAAU4iC,GACVtJ,eAAgB+D,KAElBhzF,EAAAA,GAAAA,GAACyxF,GAAuB,CACtBruF,OAAQ+wF,EACRvwF,QAASywF,EACTpE,uBAAwBuI,GACxBxI,mBAAoBsF,GACpBrG,eAAgB6D,EAChB/C,eAAgB/oF,KAElBhH,EAAAA,GAAAA,GAAC8vF,GAA0B,CACzB1sF,OAAQkxF,EACR1wF,QAAS4wF,EACTxE,mBAAoB0C,GACpBzC,uBAAwBW,GACxB3B,eAAgByK,EAAAA,IAChB3J,eAAgB/oF,KAElBhH,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ3hC,MAAOlH,EAAK,qCACZ+b,KAAM/b,EAAK,oCACX8oC,aAAc9oC,EAAK,SACnBmG,OAAQgtF,EACRxsF,QAAS0sF,EACTtqD,eAAgB6xD,YC92BlB8B,GAA2D,CAC/D7V,mBAAoB,4BACpB8V,mBAAoB,uBACpB/V,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,0BACVuW,gBAAiB,0BACjBC,eAAgB,4BAChBC,mBAAoB,+BAGhBC,GAAmE,CACvElW,mBAAoB,kCACpB8V,mBAAoB,6BACpB/V,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,gCACVuW,gBAAiB,gCACjBC,eAAgB,kCAChBC,mBAAoB,qCAGhBE,GAAmE,CACvEnW,mBAAoB,mCACpB8V,mBAAoB,8BACpB/V,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,iCACVuW,gBAAiB,iCACjBC,eAAgB,mCAChBC,mBAAoB,sCAGhBG,GAAsD,CAC1DpW,mBAAoB,aACpB8V,mBAAoB,aACpB/V,cAAe,eACfN,mBAAoB,YACpBC,eAAgB,aAChBF,SAAU,cACVuW,gBAAiB,aACjBC,eAAgB,eAChBC,mBAAoB,aAGhBI,GAA4F,CAChGP,mBAAoBA,CAAC38F,EAAiB4J,IAEtB,MAAVA,EAAuB5J,EAAK,cAAe,KACjC,MAAV4J,EAAuB5J,EAAK,cAAe,MACxComB,EAAAA,GAAAA,IAAepmB,EAAM4J,EAAQuzF,EAAAA,MA8IxC,IAAe99F,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAU0f,YACT,MAAM,OAAEyxD,GAAWnxE,EAAOk/B,WAAa,CAAC,EAClCgyC,GAAY//C,EAAAA,EAAAA,KAA2BnxB,GAE7C,MAAO,CACLmnF,aAAcznE,EAAQyxD,IAASzxD,GAAO,QAAKj1B,EAC3C28F,aAAc1nE,EAAQyxD,IAASzxD,GAAO,QAAKj1B,EAC3C48F,gBAAgBC,EAAAA,EAAAA,KAA+BtnF,GAC/CkxE,eATcnxE,EA7FwCwnF,EAC1DJ,eACAC,eACA1nE,QACAwxD,YACAmW,oBAEA,MAAM,uBAAEG,EAAsB,iBAAEh2D,IAAqBr+B,EAAAA,EAAAA,MAC/CpJ,GAAOD,EAAAA,EAAAA,MAEN29F,EAAWC,EAAcC,IAAev9F,EAAAA,EAAAA,KAEzCoqB,GAAcllB,EAAAA,EAAAA,KAAY,KAC9BkiC,IACAk2D,MACC,CAACl2D,EAAkBk2D,KAEtBr9F,EAAAA,EAAAA,KAAU,MACHq1B,GAAS+nE,GAAWE,MACxB,CAACF,EAAW/nE,EAAOioE,IAEtB,MAAM12F,EAAQlH,EAAK,gBACb69F,EAAiBloE,GAASunE,GAAsBvnE,GAChDlhB,EApER,UAA+B,KAC7BzU,EAAI,UACJ89F,EAAS,UACT3W,EAAS,cACTmW,EAAa,aACbF,EAAY,aACZC,EAAY,eACZQ,IAUA,IAAKC,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAe79F,EAAMo9F,GAAgBA,EAC9EY,EAAwBH,EAAiBA,EAAe79F,EAAMq9F,GAAgBA,EAEpF,OAAIlW,EACKnnF,EAAKg9F,GAA0Bc,GAAYE,GAG7CV,EACHt9F,EAAK08F,GAAkBoB,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjFh+F,EAAK+8F,GAA0Be,GAAYC,EACjD,CAoCsBE,CAAsB,CACxCj+F,OACA89F,UAAWnoE,EACXwxD,YACAmW,gBACAF,eACAC,eACAQ,mBAEI52F,EAAO0uB,GAASsnE,GAAWtnE,GAC3BuoE,EAAaZ,IAAkBnW,EAErC,OACEtlF,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJH,QAASg3F,EACTvpF,oBAAqBqpF,EACrBt3F,OAAQtC,QAAQ8xB,KAAW+nE,EAC3Bx2F,MAAOA,EACP1H,UCtKiB,WDsKMwC,SAAA,EAErBk8F,IACAr8F,EAAAA,GAAAA,IAAA,OAAKrC,UCzKgH,WDyKnFwC,SAAA,EAChCe,EAAAA,GAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,GAAAA,GC1KqM,WD0KpKmF,EAAM,WACrDlE,EAAAA,GAAAA,GAAA,OAAKvD,UC3K+J,WD2KlIwC,SAC/B67F,IACC79F,EAAMmnF,EAAYkW,EAAeD,KAC7BjW,EAAYkW,EAAeD,QAKtCc,IACCn7F,EAAAA,GAAAA,GAACg+E,GAAoB,CACnBvhF,UCrLkE,WDsLlEwhF,UAAW6c,IAAiB79F,EAAMo9F,IAAiBA,GAAc7T,WACjEtI,WAAY4c,IAAiB79F,EAAMq9F,IAAiBA,GAAc9T,WAClErI,kBAAmBj6E,KAIvBlE,EAAAA,GAAAA,GAAA,OAAAf,UACG8B,EAAAA,GAAAA,GAAW2Q,GAAe,GAAI,CAAC,kBAAmB,UAGrD5S,EAAAA,GAAAA,IAAA,OAAKrC,UChMyQ,WDgMzOwC,SAAA,EACnCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAAS89F,EACTh1F,MAAM,UAAS3G,SAEdhC,EAAKk+F,EAAa,SAAW,QAE/BA,IAEGr8F,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAAS4qB,EACT9hB,MAAM,UAAS3G,SAAA,CAEdhC,EAAK,kBACN+C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAAe7E,UClN4P,0B,uCCUpS,MAEM2+F,GAA4B,IAAMtgE,EAAAA,IAGlCugE,GAAe,GAAMxhF,EAAAA,EAEpB,SAASyhF,GACd5uE,EACAyN,EACAohE,EACAhiF,GAEA,MAAMiiF,GAA6BvsF,EAAAA,EAAAA,IAAkB,KAE9CwsF,EAAgBC,IAAqBjqF,EAAAA,EAAAA,IAAiB,IAG3DkqF,QAASC,EACTC,OAAQC,EACRC,SAAUC,IACRC,EAAAA,GAAAA,IAAwB,CAC1BC,QAASxvE,IACPk0B,IACF,MAAMu7C,EAA0BX,EAA2BpsF,QAE3DwxC,EAAQviD,SAAS+9F,IACf,MAAM99F,EAAQmqB,OAAO2zE,EAAMpqF,OAAOvP,GAAG41D,QAAQ,GAAGkjC,KAAa,KAC7DY,EAAwB79F,GAAS89F,EAAMC,kBAGzC,MAAMC,EAAuBH,EAAwBt+F,QAAO,CAAC0+F,EAAaF,EAAgB/9F,IACjF+9F,GAAkB/9F,EAAQi+F,EAAcj+F,EAAQi+F,GACtDC,KAECF,IAAyBE,KAI7Bd,EAAkBY,OAIlBX,QAASc,EACTZ,OAAQa,EACRX,SAAUY,IACRV,EAAAA,GAAAA,IAAwB,CAC1BC,QAASxvE,EACTkwE,WAhDkC,IAiDlCC,OAhDgC,OAoDhClB,QAASmB,IACPb,EAAAA,GAAAA,IAAwB,CAC1BC,QAASxvE,EACTkwE,WAxDkC,IAyDlCC,OAxDgC,OA4DhClB,QAASoB,IACPd,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/hE,IAgCX,OA7BAhrB,EAAAA,EAAAA,IAAc,KACRoK,GACFuiF,IACAY,KAEAlsF,YAAW,KACTmsF,IACAX,MACCZ,MAEJ,CAACU,EAAcY,EAAuBnjF,EAAUyiF,EAAgBW,IAmB5D,CACLlB,iBACAG,4BACAa,qCACAK,qCACAC,+BACA5T,kBAvBuB5iF,EAAAA,EAAAA,IAAiBjI,IACxCo9F,GAAmBtlE,IACjB,MAAM4mE,EAAen1F,SAASk1B,eAAe,GAAGw+D,KAAYj9F,KACtD2+F,EAA6C,IAAnCv+F,KAAKoyB,IAAIsF,EAAe93B,GAUxC,OARA4+F,EAAAA,GAAAA,IAAc,CACZ7xF,UAAWqhB,EAAatd,QACxB2lB,QAASioE,EACTj6E,SAAU,QACV85E,OAAQxB,GACR8B,YAAaF,EArFkB,IACF,KAuFxB3+F,QAYb,C,oDCjHA,MCmIA,IAAehC,EAAAA,EAAAA,KA/FuB8gG,EACpCC,aACA58F,OAAO68F,EAAAA,IACPz5E,SACAwH,gBACAkyE,sBACAC,sBAEA,MAAM,aAAEnT,IAAiBhkF,EAAAA,EAAAA,MACnBqmB,GAAezd,EAAAA,EAAAA,OAEf,aACJwuF,EAAY,cAAEC,EAAa,iBAAEC,EAAgB,eAAEC,EAAc,mBAAE9R,GAC7DuR,GAEE,YAAEQ,IAAgBC,EAAAA,GAAAA,GAAehS,GACjCiS,EAAiBF,GAAaG,mBAC9BC,GAAcC,EAAAA,GAAAA,GAAwBxxE,OAAc/uB,GAAYogG,GAChEI,GAAcC,EAAAA,GAAAA,GAAeH,GAE7B5B,GAAiBgC,EAAAA,GAAAA,IAAkB3xE,EAAc6wE,GACjDe,EAAajC,IAAmBx4E,EAEhC06E,GAA2Bd,GAC3BC,IAAkBc,EAAAA,KAAsBb,IAAqBC,EAC7Da,EAAmBF,GAA2BlB,EAAW3d,WAAW,KACrEgf,EAAAA,EAAAA,IAAoBrB,EAAW3d,SAAS,GAAI,WAC3Cif,GAAwB1wF,EAAAA,EAAAA,GAASwwF,GAAmBpC,GAEpDuC,GAAcnB,IAAiBgB,GAAqBd,IAAqB,aAAaN,EAAW56F,KACjG6L,GAAYL,EAAAA,EAAAA,GAAS2wF,GAAYvC,GACjCp/E,EAAU6uE,GAAsBx9E,GAAaqwF,EAC7Cx3E,GAAuBixB,EAAAA,GAAAA,GAA6Bn7B,GAEpD4hF,GAASC,EAAAA,GAAAA,GAAwBpyE,EAAc8wE,GAUrD,OARAjgG,EAAAA,EAAAA,KAAU,KACJ8+F,IAAmBgB,EAAW3d,UAAU7gF,QAC1CwrF,EAAa,CACXjB,eAAgBiU,MAGnB,CAAChB,EAAgBhS,EAAcgT,KAGhCr9F,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLjwB,WAAWsC,EAAAA,GAAAA,GDnFM,WCmFsB,qBACvC4M,MAAO,YAAYlL,MAASxB,SAE3Bge,EACC6uE,GACE9rF,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CACVvC,WAAY6C,EACZrrF,KAAMA,EACNs+F,8BAA+BxB,EAC/B15E,OAAQA,IAER85E,GACF39F,EAAAA,GAAAA,GAAC0C,GAAAA,EAAe,CACdjG,UAAW0qB,EACXvkB,OAAQ0L,EACR7N,KAAMA,EACN++E,KAAM8e,EACN7e,gBAAgBuf,EAAAA,EAAAA,MAAgChuD,EAAAA,EAAAA,MAAaqsD,GAC7D4B,aAAczB,GAAiBpuF,cAAWzR,EAC1CuhG,mBAAoBL,EACpBM,YAAa9zE,IAEZqyE,IAAkBa,GACrBv+F,EAAAA,GAAAA,GAAC28C,GAAAA,EAAc,CACblgD,WAAWsC,EAAAA,GAAAA,GD3GmB,WC2GUooB,GACxCzd,IAAK4E,EACLsuC,QAAS0hD,EACT3yF,MAAOwyF,EACPthD,WAAYxxB,EACZ7B,MAAI,EACJ/D,yBAAuB,KAGzBzlB,EAAAA,GAAAA,GAAA,OACE0J,IAAK4E,GAAaqwF,EAClBhzF,MAAOwyF,EACP1hG,WAAWsC,EAAAA,GAAAA,GDvHsC,WCuHTooB,GACxCwE,IAAI,GACJpiB,WAAW,KAIf61F,EAAAA,GAAAA,IAAgB/B,EAAWl5F,MAAO,Q,wCC/D1C,MAAMk7F,GAA8B,CAClC,CAAEl7F,MAAO,sBAAuB0C,MAAO,EAAGy4F,IAAK,MAC/C,CAAEn7F,MAAO,sBAAuB0C,MAAO,EAAGy4F,IAAK,MAC/C,CAAEn7F,MAAO,sBAAuB0C,MAAO,EAAGy4F,IAAK,OAC/C,CAAEn7F,MAAO,qBAAsB0C,MAAO,EAAGy4F,IAAK,OAC9C,CAAEn7F,MAAO,qBAAsB0C,MAAO,EAAGy4F,IAAK,SAkShD,IAAehjG,EAAAA,EAAAA,KA/ROijG,EACpB3gB,UACAn+E,OACAojB,SACA1f,QACA1H,YACA+iG,gBACAhzC,kBACAizC,iBACAC,aACAnC,sBACAoC,gCACAC,aACAj9D,uBACAk9D,sBACAC,gBACAtC,kBACAuC,uBACA10E,gBACAvuB,UACAqK,WACA64F,cACAC,gBACAC,sBACAC,oBACAC,qBACAC,qBACAC,gBACAC,mBAEA,MAAM,eAAEjW,EAAc,iBAAE5lD,EAAgB,eAAE87D,IAAmBn6F,EAAAA,EAAAA,MACvD8R,GAAMlJ,EAAAA,EAAAA,MACNmjE,GAAUnjE,EAAAA,EAAAA,MACVhS,GAAOD,EAAAA,EAAAA,KACP+gG,EAAiBnf,EAAQof,mBACzBC,GAAcC,EAAAA,GAAAA,GAAwB/lF,OAAKxa,GAAYogG,IAEvD,GACJt7F,EAAE,eAAE2mF,GACFxK,EAEEwF,GAAcxF,EAAQ6hB,QAAUH,GAAkB1hB,EAAQ8hB,UAC1DC,EAAgB/hB,EAAQ+hB,eAAiBL,EACzC9R,GAAY7rD,GAAwByhD,IAAcyb,EAElDxD,GAAiBgC,EAAAA,GAAAA,IAAkBlmF,EAAKolF,GACxCqD,EAAavE,EACbiC,EAAajC,IAAmBx4E,EAEhCg9E,GAA0BxC,EAAAA,GAAAA,IAAkBlmF,EAAKwnF,IAEjD,kBACJntB,EAAiB,kBAAEC,EAAiB,wBACpCquB,GAAuB,kBAAEpuB,GAAiB,uBAC1CC,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuB16D,GACrB4oF,GAA0BjgG,SAAS0+F,GAAiB/sB,GAEpDJ,IAAoB9rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,UAC9CkjE,IAAiB/rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,QAAS4gB,QAAQ,mCAC5DuiD,IAAiBhsE,EAAAA,EAAAA,IAAgB,IAC9Bk5F,EAAiBrtB,EAAQhjE,QAAU+I,EAAI/I,QAASlF,cAAc,mCAEjE82F,IAAYz6F,EAAAA,EAAAA,IAAgB,KAAM,CAAG06F,WAAYxB,EAAgByB,6BAA6B,OAEpG3jG,EAAAA,EAAAA,KAAU,KACJi1E,EACF2tB,MAEAC,QAED,CAAC5tB,EAAmB4tB,EAAoBD,KAE3C5iG,EAAAA,EAAAA,KAAU,KACH8+F,GAAgB1pB,OACpB,CAACA,GAAwB0pB,IAE5B,MAkBM8E,IAAoB56F,EAAAA,EAAAA,IAAiB5B,IACzCA,EAAEwV,kBACFxV,EAAEkkB,iBAEFq3E,EAAqBthB,MAGjBwiB,IAA4B76F,EAAAA,EAAAA,IAAgB,KAChD25F,EAAqBthB,MAGjByiB,IAAsB96F,EAAAA,EAAAA,IAAgB,KAC1C05F,EAAerhB,MAGX0iB,IAAoB/6F,EAAAA,EAAAA,IAAgB,KACxCy5F,EAAaphB,MAGT2iB,IAAkBh7F,EAAAA,EAAAA,IAAgB,KACtCzJ,IAAUqK,GAAU,MAGhBq6F,IAAsBj7F,EAAAA,EAAAA,IAAgB,KAC1CzJ,IAAUqK,OAAUxJ,GAAW,MAG3B8jG,IAAgBl7F,EAAAA,EAAAA,IAAgB,KACpC+jF,EAAe,CAAElB,sBAGbsY,IAAgCn7F,EAAAA,EAAAA,IAAgB,CAAC5B,EAAyBoY,EAAW,KACzFpY,EAAEkkB,iBACFlkB,EAAEwV,kBAEFw4D,KACA0tB,MACAG,EAAe,CACbzX,YAAa,CAAEvoF,KAAM,UAAWyoF,WAAYrK,EAAQn8E,GAAIk/F,OAAO78D,EAAAA,GAAAA,MAAkB/nB,QAI/E6kF,IAAyBnoF,EAAAA,IAAgBymF,EAEzCvwD,IAAgB5wC,EAAAA,GAAAA,GACpB,gBACAjC,GAAW,cACX8iG,GAAc,WACde,GAAiB,eACjBL,GAAiB,eACjB7jG,GAGIolG,IAAmBnkG,EAAAA,EAAAA,KAAQ,KAC/B,IAAKqjG,IAA2BvB,GAAkBmB,IAAkBlB,EAAiB,MAAO,GAE5F,MAAM34C,EAAqB,GAE3B,OAAI65C,GACFtB,GAA4BhhG,SAAS8U,IACnC2zC,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAAS4kG,GAA+Bv6F,SAAUgM,EAAKmsF,IAAIrgG,SAClEhC,EAAKkW,EAAKhP,MAAOgP,EAAKtM,MAAO,WAK7BigD,IAGLm5C,GACFn5C,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAWpH,QAASukG,GAAoBpiG,SACpDhC,EAAK,mCAKR+iG,GACFl5C,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAWpH,QAASwkG,GAAkBriG,SAClDhC,EAAK,+BAKPuxF,GAAY1xF,IACV0vD,GACH1F,EAAMtoD,MAAKwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAASykG,GAAiBr9F,KAAK,QAAOjF,SAAEhC,EAAK,uBAEpE6pD,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAAS0kG,GAAqBt9F,KAAK,WAAUjF,SACpDhC,EAAKuvD,EAAkB,cAAgB,uBAK1CkzC,GACF54C,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAAS2kG,GAAev9F,KAAK,WAAUjF,SAC9ChC,EAAK,sBAIRijG,GACFp5C,EAAMtoD,MACJwB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAASskG,GAA0BniG,SACxDhC,EAAK,uBAIL6pD,KACN,CACDi6C,GAAyBvB,EAAemB,EAAelB,EAAgBQ,EAAeD,EAAaxR,EACnG1xF,EAAS4iG,EAAYQ,EAAqBwB,GAA+BzkG,EAAMokG,GAC/EC,GAAmB90C,EAAiBg1C,GAAqBD,GAAiBE,GAAeL,KAG3F,OACEtiG,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EACL1b,UAAWkzC,GACXxrC,MAAOA,GAAUy6E,GAASiN,MAC1B,kBAAiBppF,EACjB4qC,YAjIqB1oC,KACvBm9F,EAAAA,GAAAA,GAAoCn9F,GACpCm8F,GAAwBn8F,IAgItB7H,QA/IgB4qB,KACd8qD,IACAgc,EAEA9pD,EADE47D,EACe,CAAEp7D,eAAgB,WAElB,CAAEA,eAAgB,qBAIvCpoC,IAAUqK,KAsIRgiB,cAAeupD,GAAkBzzE,SAAA,CAEhCshG,IAAgBvgG,EAAAA,GAAAA,GAAC+hG,GAAAA,EAAQ,CAACC,OAAO,WACjCnB,IACC7gG,EAAAA,GAAAA,GAACiiG,GAAAA,EAAW,CACVv1E,aAAcvU,EACdymE,QAASA,EACTsjB,SAAO,EACPzhG,KAAMA,EACN0hG,YAAU,EACVC,sBAAoB,EACpBC,QAASzB,EACT/8E,QAASy6E,EACTgE,iBAAe,EACfC,qBAAmB,EACnB/E,gBAAiBA,EACjBuC,qBAAsBA,EACtB9B,YAAaA,EACbkB,YAAa9zE,KAGfy0E,GAAiBtR,IACjBxuF,EAAAA,GAAAA,GAAA,OACEvD,UAAU,iBAAgBwC,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAGbw+F,GAAiB1b,IAAcoK,IAC/BxuF,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WAGdsgG,KACC5hG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVmJ,MAAM,OACNiR,OAAK,EACL2rF,aAAW,EACX1lG,QAASqkG,GAAkBliG,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGdR,QAAQ+gG,GAAiBhjG,UACxBmB,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHnL,IAAKi6D,EACLhvE,OAAQovE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,GAChByuB,UAAWA,GACXvkG,UAAU,uBACV+mB,WAAS,EACTy9E,WAAYxB,EACZ77F,QAAS+uE,GACTthE,oBAAqBuhE,GAAsB3zE,SAE1C4iG,W,wCC9VX,MCmIA,IAAevlG,EAAAA,EAAAA,KA9FqBmmG,EAClCpxD,WACA0Q,qBACA69C,aACA8C,cACAnF,sBACAC,kBACAmF,oBACAt3E,gBACAvuB,UACAqsB,oBAEA,MAAMhR,GAAMlJ,EAAAA,EAAAA,MACN2zF,EAA6B,WAAlBvxD,EAAS7wC,KACpBqiG,GAAoBnlG,EAAAA,EAAAA,KAAQ,IAChCqkD,GAAoBviD,MAAMwpE,IAAcv4B,EAAAA,EAAAA,IAAeu4B,EAAU33B,SAAUA,MAC1E,CAAC0Q,EAAoB1Q,IAClBviC,EAAe+zF,GAAmBC,YAAY3/D,WAAWp0B,QACzDg0F,EAAcF,GAAmBG,iBAAiBvgG,GAClDo8F,GAASC,EAAAA,GAAAA,GAAwB3mF,EAAKqlF,GACtClvF,GAAYL,EAAAA,EAAAA,GAChB40F,GAAmBG,iBAAkBC,EAAAA,EAAAA,IAAqBJ,EAAkBG,gBAAiB,aAAUrlG,GACtGolG,IAGG,kBACJvwB,EAAiB,wBACjBsuB,EAAuB,kBACvBpuB,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuB16D,EAAuB,SAAlBk5B,EAAS7wC,UAAiB7C,OAAWA,OAAWA,GAAW,IAE3FJ,EAAAA,EAAAA,KAAU,KACJi1E,IACFrpD,IAAgBkoB,GAEhBshC,IACAC,OAED,CAACD,EAAwBxpD,EAAeypD,EAAuBJ,EAAmBnhC,IAErF,MAAMzuC,EAA2B,SAAlByuC,EAAS7wC,KAAkBqC,GAAAA,EAAeqgG,aAAe50F,EAClEoZ,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQu0C,MAGJlqB,GAAuBixB,EAAAA,GAAAA,GAA6B9pC,GACpDqhC,GAAgB5wC,EAAAA,GAAAA,GDrFD,WCuFnB6gG,GDvFyC,YCwFxCgD,GAAY,oBAGf,OACE5iG,EAAAA,GAAAA,GAAA,OACEmY,IAAKA,EACL1b,UAAWkzC,EACX7yC,QAAS4qB,EACTvjB,MAAO0+F,GAAmB1+F,MAC1B,kBAAiBy+F,EAAWvxD,EAAS43C,gBAAatrF,EAClD0vC,YAAayzD,EACb33E,cAAeupD,EAAkBzzE,SAEhC2jG,GACC5iG,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CACVrzE,IAAKA,EACL8wE,WAAY53C,EAAS43C,WACrBxoF,KAAM0iG,EAAAA,IACNt/E,QAAS6+E,EACT3D,8BAA+BxB,EAC/BC,gBAAiBA,EACjBmF,kBAAmBA,EACnB5C,sBAAoB,EACpBZ,YAAa9zE,KAGfrrB,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQA,EACRkM,aAAcA,EACd0wE,KAAMkjB,EACN1/F,QAAQ,EACRvC,KAAM0iG,EAAAA,IACN1jB,eAAa,EACbhjF,UAAW0qB,EACX83E,aAAczB,EAAiBpuF,cAAWzR,EAC1CuhG,mBAAoBL,EACpBM,YAAa9zE,S,gBCzCvB,MAyWA,IAAe/uB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMmwF,EAAsBnwF,EAAOowF,0BAA0BC,SAE7D,MAAO,CAAEF,yBAJOpwF,EAnW0BuwF,EAC5CnG,aACAqF,cACApkG,QACAi9F,WACAkI,eACAC,mBACA3hD,qBACAyK,kBACAizC,iBACAkE,mBACAhhE,uBACAihE,mBACAC,uBACAC,sBACAC,wBACAC,iBACAC,mBACAC,gBACAC,iBACA94E,gBACAkyE,sBACAT,qCACAL,qCACA2H,mBACAC,oBACAC,kBACAC,kBACAC,gBACAC,wBACAtE,oBACAC,qBACAC,qBACAgD,0BAEA,MAAM,oBACJqB,EAAmB,uBACnBC,EAAsB,qBACtBC,EAAoB,iBACpBlgE,EAAgB,iBAChBmgE,EAAgB,aAChBxa,IACEhkF,EAAAA,EAAAA,MAEE8R,GAAMlJ,EAAAA,EAAAA,MAENuuF,GAAkBvuF,EAAAA,EAAAA,MAClB0zF,GAAoB1zF,EAAAA,EAAAA,MAEpBhS,GAAOD,EAAAA,EAAAA,MACLqS,MAAO2e,KAAgBE,EAAAA,GAAAA,MACxBkiE,GAAoBC,GAAkBC,KAAqBhzF,EAAAA,EAAAA,MAC5D,SAAE2E,KAAaC,EAAAA,EAAAA,OAEd4iG,GAAaC,KAAkBtzF,EAAAA,EAAAA,IAASuzF,GAAuBh3E,KAEhEquE,IAAiBgC,EAAAA,GAAAA,IAAkBlmF,EAAKolF,GAAuBd,GAC/Dt1E,IAAuBixB,EAAAA,GAAAA,GAA6BikD,IAGpDp1E,GAAew8E,GAAgBpH,GAE/B4I,GAAkBhjG,GAAW,EAAI,EACjCijG,GAAgBjjG,GAAW,EAAI,GAC/BkjG,GAAwBljG,GAAW,EAAI,EACvCmjG,GAAW/H,EAAW56F,KAAO4iG,EAAAA,IAC7BC,GAAsBjI,EAAW56F,KAAO8iG,EAAAA,IACxCC,GAAanI,EAAW56F,KAAOgjG,EAAAA,IAC/BC,GAAYrI,EAAW56F,KAAOkjG,EAAAA,IAC9BC,GAAUvI,EAAWuI,QACrBC,IAAgBT,KAAYU,EAAAA,EAAAA,KAAmBzI,GAE/C0I,IAAoBx/F,EAAAA,EAAAA,IAAgB,KACpCo9F,EACFiB,IACSgB,GACTjB,IAEAD,IAEFpU,QAGI0V,IAAiBz/F,EAAAA,EAAAA,IAAgB,KACjCs/F,KAAiBljE,EACnB+B,EAAiB,CACfQ,eAAgB,mBAGlB2/D,EAAiB,CACfoB,aAAc5I,EAAW56F,QAKzByjG,IAA8B3/F,EAAAA,EAAAA,IAAgB,KAClD+9F,IAAkB,CAChBn3F,UAAW,UACX1K,GAAI0jG,EAAAA,IACJC,UAAU,EACVh5F,SAAS,EACTg8E,eAAgB,CACd3O,UAAW,cAKX4rB,IAA+B9/F,EAAAA,EAAAA,IAAgB,KACnD+9F,IAAkB,CAChBn3F,UAAW,UACX1K,GAAI6jG,EAAAA,IACJF,UAAU,EACVh5F,SAAS,EACTg8E,eAAgB,CACd3O,UAAW,cAKX8rB,GAAWX,GAAUzC,EAAAA,IAAoBqD,EAAAA,IACzC3J,GAAS+I,GAAUV,GAAgBD,GACnCwB,GAAiBb,GAAUT,GAAwBF,GAEnDyB,IAAuBngG,EAAAA,EAAAA,IAAiB8I,GACvCA,EAIE3Q,KAAKsgB,OAAO3P,EAAQwtF,KAAW0J,GAAW1J,KAHxCmI,GAAuBh3E,MAM5BlU,IAAevT,EAAAA,EAAAA,IAAiB61F,IACpC2I,GAAe2B,GAAqBtK,EAAMuK,YAAYt3F,YAGxDu3F,EAAAA,GAAAA,GAAkBzuF,EAAK2B,KAEvBvc,EAAAA,EAAAA,KAAU,KACH4a,EAAI/I,SACT21F,GAAe2B,GAAqBvuF,EAAI/I,QAAQgR,gBAC/C,CAACsmF,MAEJnpG,EAAAA,EAAAA,KAAU,KACJ0pB,KAAiBo2E,EAAW3d,UAAU7gF,SAAWw+F,EAAWr7C,WAAWnjD,QAAUw+F,EAAWwJ,YAC9Fxc,EAAa,CACXjB,eAAgB,CACd3mF,GAAI46F,EAAW56F,GACfokG,WAAYxJ,EAAWwJ,gBAI5B,CAAC5/E,GAAcojE,EAAcgT,IAEhC,MAAM7O,IAAYhiC,IAAoB7pB,GAAwBkjE,KAAiB7B,EAEzE8C,GAAczJ,EAAW0J,gBAAkB1J,EAAW2J,WAEtDC,IAAUH,IAAezJ,EAAW56F,KAAO4iG,EAAAA,KAC5ChI,EAAW56F,KAAOkjG,EAAAA,KAAyBtI,EAAW56F,KAAOykG,EAAAA,KAC7D7J,EAAW56F,KAAO0kG,EAAAA,MAA2BnD,IAAmBC,GAE9DmD,GAAM,CAAGC,KAAU/pG,EAAAA,EAAAA,GAAQ2pG,IAC5BK,GAAkC,EAAdxC,GAAkB,EACtCyC,GAAmB1D,GAAwBE,EAAyB1G,EAAWlnE,MAAQ,EAAIknE,EAAWlnE,MAEtGqxE,GAAajB,GAAWE,GACxBgB,GAAgB/oG,KAAKm+E,KAAKn+E,KAAKC,IAAI2oG,GAAmBC,IAAmBzC,IAC3E0C,GAAaf,GACX/2F,GAAS03F,GAAQK,GAAgB/oG,KAAKm+E,KAAK0qB,GAAkBzC,IAAe0C,GAAaf,GAEzFiB,IAAwBhqG,EAAAA,EAAAA,KAAQ,IACpCgmG,EAAmB,IAAIvW,IAAIuW,EAAiBxkG,KAAI,EAAGuD,QAASA,UAAO9E,GAClE,CAAC+lG,IACEiE,IAAyBjqG,EAAAA,EAAAA,KAAQ,IACrC2lG,EAAsB,IAAIlW,IAAIkW,EAAoBnkG,KAAI,EAAG+pF,gBAAiBA,UAAetrF,GACxF,CAAC0lG,IACEuE,IAAoBhE,IAAqBwB,KAAaE,IACvDM,KAAYF,KAAc1B,KACxB8C,KAAiBnkE,IAAyB6pB,GAC3Cq7C,IAAmBnqG,EAAAA,EAAAA,KAAQ,IAELT,EADtBuxF,GACEsY,GAAyB,4BACjB,SAGF,QACX,CAACtY,GAAUvxF,EAAM6pG,KAEpB,OACEhoG,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EAEL1V,GAAI,GAAG84F,KAAYj9F,IACnB7B,WACEsC,EAAAA,GAAAA,GAAe,aAAcyvF,IAAY,qBAC1CvvF,SAAA,EAEC2kG,IACA9kG,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAmBwC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,KAAGrC,WAAWsC,EAAAA,GAAAA,GAAe,mBAAoB6oG,IAAoB,6BAA6B3oG,SAAA,CAC/FuvF,KAAYxuF,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAAa7E,UAAU,4BAC/CuD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,kBAAiBwC,SAAEo+F,EAAWl5F,SAC5C6/F,GAAkBC,KAClBjkG,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,kBAAiBwC,SAAEhC,EAAK+mG,EAAiB,aAAe,mBAEzE4D,IAAoB9mG,QAAQu8F,EAAW3d,YACtC1/E,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,oBAAmBwC,SAChChC,EAAK2oG,GAAU,aAAe,WAAYvI,EAAW3d,SAAS7gF,OAAQ,UAI5EumG,KACCplG,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UAAU,oBAAoB6E,KAAK,QAAQxE,QAASuzF,KAE3DuX,KACC5nG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACV8I,oBAAqBsgG,KAAiBljE,EACtC7lC,QAASkpG,GACT8B,MAAI,EACJrnG,KAAK,OACLulD,OAAK,EAAA/mD,SAEJ4oG,SAKT/oG,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,+CACAooB,GACAk2E,EAAW56F,KAAOykG,EAAAA,KAAwB,iBAE5Cv7F,MAAO,WAAW+D,QAAYzQ,SAAA,EAE9Be,EAAAA,GAAAA,GAAA,UACEmY,IAAKqlF,EACL/gG,UAAU,gBACVkP,MAAOs7F,GAAS,WAAWQ,aAAqB9pG,KAEhDynG,IAAYI,IAAcyB,MAAWjnG,EAAAA,GAAAA,GAAA,UAAQmY,IAAKwqF,EAAmBlmG,UAAU,kBAChFonG,IACC7jG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,6BACVmJ,MAAM,cACN9I,QAASopG,GAA4BjnG,UAGrCe,EAAAA,GAAAA,GAAA,OAAK0J,IAAKq+F,GAAMp8E,IAAI,QAAQlvB,UAAU,gBAAgB8M,WAAW,KAF7D,sBAKPw6F,IACC/jG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,4CACVmJ,MAAM,cACN9I,QAASupG,GAA6BpnG,UAGtCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UAFP,uBAKP2lB,IAAgBo2E,EAAWr7C,WAAW9iD,KAAKmyC,IAC1C,MAAM22D,GAAar2D,EAAAA,EAAAA,IAAeN,GAC5BuuD,EAAaoI,EAAalE,GAAqB/wE,SAASi1E,QAAcrqG,EAE5E,OACEqC,EAAAA,GAAAA,GAACyiG,GAAa,CAEZpxD,SAAUA,EACVuuD,WAAYA,EACZ8C,YAAaA,EACb3gD,mBAAoBA,EACpBw7C,oBAAqBT,EACrBhgG,QAASsnG,EACTj7E,cAAek7E,EACf7G,gBAAiBA,EACjBmF,kBAAmBA,EACnBt3E,cAAeA,GAVV,GAAGgyE,EAAW56F,MAAMulG,QAc9B/gF,IAAgBo2E,EAAW3d,UAAUz/B,MAAM,EAAGmnD,GAAQE,GAAoBjK,EAAW3d,SAAS7gF,QAC5FK,KAAI,CAAC0/E,EAASz3B,KACb,MAAM8gD,GAAa7C,IAAYI,MAC1BxG,EAAAA,EAAAA,MAAgChuD,EAAAA,EAAAA,MAAa4tC,EAAQwK,gBACpD8e,EAAajB,IAAU9/C,GAAKmgD,IAAsBW,EACpDtF,EACAnF,EACEwK,EAAappB,EAAQ+hB,cAAgB/hB,EAAQn8E,GAAKm8E,EAAQiN,MAC1D+T,EAAaoI,EAAalE,GAAqB/wE,SAASi1E,QAAcrqG,EAEtE4iG,EAAe3hB,EAAQn8E,KAAO8iG,EAAAA,KAC/BoC,IAAwBla,IAAI7O,EAAQn8E,IAEzC,OACEzC,EAAAA,GAAAA,GAACu/F,GAAa,CAEZ3gB,QAASA,EACTn+E,KAAM8lG,GACNhJ,oBAAqBT,EACrB6C,8BAA+BlD,EAC/B54E,QAAS6+E,EACTl2C,gBAAiBA,EACjBizC,eAAgBA,EAChBC,YAAU,EACVF,cAAe2E,EACfxhE,qBAAsBA,EACtBk9D,oBAAqBmE,EACrBxG,gBAAiB0K,EACjBnI,qBAAsBmE,EACtBpnG,QAASwnG,EACTn9F,SAAUy3E,EACVghB,WAAYA,EACZK,cAAeuF,IAAckC,IAAuBja,IAAI7O,EAAQn8E,IAAM8hG,OAAkB5mG,EACxFqiG,YAAc0H,IAAuBja,IAAI7O,EAAQn8E,SAAsB9E,EAAhB6mG,EACvDtE,oBAAqBkF,GAAWX,OAAwB9mG,EACxDwiG,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpBh1E,cAAeA,EACfi1E,cAAejD,EAAW56F,KAAOykG,EAAAA,IACjCpH,cAAen9D,IACT06D,EAAW56F,KAAO0kG,EAAAA,KAA0B9J,EAAW56F,KAAOykG,EAAAA,KACpE3G,aAAcA,GA3BT3hB,EAAQn8E,OA+BpB2kG,IAASG,GAAkBD,KAC1BxoG,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLvE,UAAU,wCACVoa,OAAK,EACLjR,MAAM,cACN9I,QAASuqG,GAAOpoG,SAAA,CAEjB,IAEEsoG,GAAkBD,KAHf,WAQTlC,KACCplG,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ9sB,KAAM/b,EAAK0mG,EAAmB,mCAAqC,mCACnEvgG,OAAQgtF,GACRxsF,QAAS0sF,GACTtqD,eAAgB+/D,GAChB9/D,sBAAoB,MA7JnBo3D,EAAW56F,QA4KtB,SAASuiG,GAAuBh3E,GAC9B,OAAOA,EA/WyB,IAHH,EAoXxBA,EAhXgC,IAFI,EADL,CAsXtC,CC1cA,SAAyC,WAAzC,GAAgE,WAAhE,GAA+I,WAA/I,GAA6K,WAA7K,GAAuM,WAAvM,GAA0P,WCiGpPm6E,GAAsB,IAAMtuF,EAAAA,EAM5BuuF,GAAuB,IAAIjb,IAAI,CAACkY,EAAAA,IAAsBI,EAAAA,IAAwBE,EAAAA,MAC9E0C,GAA6B,IAAIlb,IAAI,CACzCkY,EAAAA,IACAI,EAAAA,IACAE,EAAAA,MAwXF,IAAerpG,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,SAAQy4F,iBAAgBkE,uBACjC,MACEjkB,UACE4oB,SAAUC,GAEZvf,cACE//C,KAAMu/D,EACNC,YAAaC,EACbC,cACEC,OAAQC,IAGZC,mBAAoBC,EACpB/mD,WAAW,mBACTD,EAAkB,gBAClBinD,EAAe,aACfC,EAAY,YACZC,IAEAh2F,EAEEs5C,EAAkB1rD,QAAQkG,IAAUmwB,EAAAA,EAAAA,KAAqBjkB,EAAQlM,IACjEgnD,EAAehnD,GAASinD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,QAAUrJ,EAC7D0lG,EAAsBnwF,EAAOowF,0BAA0BC,SAE7D,MAAO,CACLiF,mBACAO,qBAAuBtJ,OAAwC9hG,EAAvBorG,EACxCF,mBAAoBpJ,EAAiBoJ,OAAqBlrG,EAC1D0lG,oBAAqB5D,EAAiB4D,OAAsB1lG,EAC5D4qG,kBACAY,oBAAqBj2F,EAAO81E,aAAaogB,MAAMC,OAC/CC,YAAYC,EAAAA,EAAAA,KAA4Br2F,GACxCs5C,kBACA7pB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDw1F,yBACAc,oBAAqBt2F,EAAOs2F,oBAC5BC,qBAAsBv2F,EAAOu2F,qBAC7BR,aAActF,EAAmBsF,OAAetrG,EAChDqrG,gBAAiBrF,EAAmBqF,OAAkBrrG,EACtD+rG,eAAgB17C,GAAc27C,UAAUlnG,GACxCmnG,mBAAoBjG,GAAoB31C,GAAc67C,wBACtD9nD,mBAAoB4hD,EAAmB5hD,OAAqBpkD,EAC5DmsG,oBAAqBnG,EAAmBuF,OAAcvrG,KA5CxCsV,EArXiC82F,EACnDttG,YACAutG,sBACAzwF,WACAmpF,cACAyG,sBACAX,mBACAO,uBACAjF,sBACA+E,qBACAxF,sBACAkF,kBACAmB,iBACAT,eACAD,kBACAjnD,qBACAw5C,WA3BwB,mBA4BxBmN,yBACAY,aACA3F,mBACAlE,iBACAyE,gBACA13C,kBACA7pB,uBACAsnE,wBACAT,sBACAC,uBACAK,sBACAF,qBACAM,sBACA9F,mBACAC,oBACAlE,oBACAC,qBACAC,yBAEA,MAAM3zE,GAAezd,EAAAA,EAAAA,MACfkrB,GAAYlrB,EAAAA,EAAAA,MACZuuF,GAAkBvuF,EAAAA,EAAAA,MAClB0zF,GAAoB1zF,EAAAA,EAAAA,OAEpB,SAAEhN,IAAaC,EAAAA,EAAAA,OAEnBy/C,aAAcwoD,EACd5oD,cAAe6oD,GACb/oD,KAEEynD,GAAqBprG,EAAAA,EAAAA,KAAQ,IAC1B+hG,EACHoJ,EACAloD,OAAOsK,QAAOo/C,EAAAA,GAAAA,IAAW7B,EAAmBO,KAC/C,CAACP,EAAkB/I,EAAgBsJ,EAAsBF,IAEtDyB,GAA0B5sG,EAAAA,EAAAA,KAAQ,KACtC,MAAM6sG,EAA4BlH,GAAqBnkG,KAAK+jD,GAAWA,EAAOgmC,aAC9E,OAAOuf,GAAoB+B,GAA2BrrG,KAAKuD,GAAO+lG,EAAiB/lG,KAAK+9B,OAAO1/B,WAC9F,CAAC0nG,EAAkBnF,IAEhBmH,GAAS,GAAGjP,kBACZ,eACJE,GAAc,0BACdG,GAAyB,mCACzBkB,GAAkC,mCAClCL,GAAkC,6BAClCM,GAA4B,iBAC5B5T,IACEmS,GAA0B5uE,EAAcyN,EAAWqwE,GAAQjxF,GAEzDkxF,IAAiBj8D,EAAAA,GAAAA,GAAuBk0D,QAAe/kG,EAAWy9F,EAAAA,KAElEr+F,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,KAEPwtG,GAAiB5pG,QAAQqoG,GAEzBwB,IAAUjtG,EAAAA,EAAAA,KAAQ,KACtB,MAAMktG,EAAkD,GAexD,GAbIjH,GAAoBn3C,GAClBs9C,GAAqBjrG,QACvB+rG,EAAYpsG,KAAK,CACfiE,GAAIooG,EAAAA,IACJhE,WAAY,GACZ1iG,MAAOpH,GAAQ,sBACfilD,UAAW8nD,EACX3zE,MAAO2zE,EAAoBjrG,OAC3B+mG,SAAS,IAKXjC,IAAqBn3C,EAAiB,CACxC,MAAMs+C,EAA2C7B,GAAchpD,MAAM,EAtG/C,KAsG0E,GAC5F2pD,GACFkB,EAAkBC,QAAQ,CAAEvqG,KAAM,SAEhCsqG,GAAmBjsG,QACrB+rG,EAAYpsG,KAAK,CACfiE,GAAIooG,EAAAA,IACJhE,WAAY,GACZ1iG,MAAOpH,GAAQ,aACfilD,UAAW8oD,EACX30E,MAAO20E,EAAkBjsG,OACzB+mG,SAAS,IAIb,MAAMoF,GAAwBhC,GAAmB,IAC9CxoE,QAAQ6Q,IAAcy5D,EAAkBG,MAAMC,IAAgBz6D,EAAAA,EAAAA,IAAey6D,EAAa75D,OAC1F4O,MAAM,EAtHgB,IAuHnBkrD,GAA2BppD,GAAsB,IACpDvhB,QAAO,EAAG4qE,iBAAkBA,IAC5BlsG,KAAI,EAAGmyC,cAAeA,IACtB7Q,QAAQ6Q,IACCy5D,EAAkBG,MAAMC,IAAgBz6D,EAAAA,EAAAA,IAAey6D,EAAa75D,OACtE25D,EAAqBC,MAAMC,IAAgBz6D,EAAAA,EAAAA,IAAey6D,EAAa75D,OAEjF,GAAI85D,GAAyBtsG,QAAUmsG,GAAsBnsG,OAAQ,CACnE,MAAM6mG,GAAasF,GAAsBnsG,OACnCwsG,EAAqBL,EAAqBtd,OAAOyd,GACvDP,EAAYpsG,KAAK,CACfiE,GAAIijG,EAAYC,EAAAA,IAAwBN,EAAAA,IACxCwB,WAAY,GACZ1iG,MAAOpH,GAAQ2oG,EAAY,mBAAqB,kBAChD1jD,UAAWqpD,EACXl1E,MAAOk1E,EAAmBxsG,OAC1B+mG,SAAS,GAEb,CACF,MAAO,GAAInG,EAAgB,CACzB,MAAM6L,EAAyB/C,EAAgBkB,GAC/C,GAAI6B,GAAwB5rB,UAAU7gF,OAAQ,CAC5C,MAAM6gF,GAAW6rB,EAAAA,GAAAA,IAAcD,EAAuB5rB,SACnDz/B,MAAM,EA7ImB,GA8IzBytC,OAAOob,GAAsB,IAAK,MACrC8B,EAAYpsG,KAAK,IACZ8sG,EACH5rB,WACAvpD,MAAOupD,EAAS7gF,OAChB4D,GAAI4iG,EAAAA,IACJlhG,MAAOpH,GAAQ,kBACf6oG,SAAS,GAEb,CACI0E,GAAyBzrG,QAC3B+rG,EAAYpsG,KAAK,CACfiE,GAAI8iG,EAAAA,IACJsB,WAAY,GACZ1wE,MAAOm0E,EAAwBzrG,OAC/B6gF,SAAU4qB,EACVnmG,MAAOlH,GAAK,+BACZ2oG,SAAS,GAGf,MAAO,GAAIqE,EAAuB,CAChC,MAAMuB,EAAwBjD,EAAgBiB,GAC1CgC,EAAsB9rB,UAAU7gF,QAClC+rG,EAAYpsG,KAAK,IACZgtG,EACH/oG,GAAI4iG,EAAAA,IACJlhG,MAAOpH,GAAQ,mBAGrB,MAAW+rG,GAAoBjqG,QAC7B+rG,EAAYpsG,KAAK,CACfiE,GAAI4iG,EAAAA,IACJwB,WAAY,IACZ1iG,MAAOpH,GAAQ,kBACf2iF,SAAUopB,EACV3yE,MAAO2yE,EAAmBjqG,OAC1B+mG,SAAS,IAIb,MAAM6F,EAAa,IAAKtC,GAAuB,IAC3CO,GACF+B,EAAWV,QAAQrB,GAGrB,MAAMgC,GAAkBhlE,EAAAA,GAAAA,IAAO+kE,EAAW/d,OAAOgb,GAA0B,KAErEiD,EAAgBhrD,OAAOsK,QAAOo/C,EAAAA,GAAAA,IAAW9B,EAAiBmD,IAEhE,MAAO,IACFd,KACAe,KAEJ,CACDxC,EAAqBxF,EAAkBlE,EAAgBwK,EAAuBnB,EAC9EJ,EAAwBH,EAAiBU,EAAclnD,EAAoBhlD,GAASisG,EACpFS,EAAsBD,EAAqBh9C,EAAiBs9C,EAAqBJ,EACjFE,EAAoBU,EAAyBrtG,KAGzC2uG,IAAkBluG,EAAAA,EAAAA,KAAQ,IAC9BgtG,IAC4D,IAAzDC,GAAQnqE,QAAQlwB,GAAQA,EAAIovE,UAAU7gF,SAAQA,QAChD,CAAC8rG,GAASD,KAEPmB,IAAmBC,EAAAA,GAAAA,GAAkB,GAAI1Q,EAAAA,KACzC2Q,GAAsBrB,IAAkBmB,KAAqBD,IAEnEvxB,EAAAA,GAAAA,GAAoBlgD,EAAWl4B,IAAa8pG,KAG5CxuG,EAAAA,EAAAA,KAAU,KACR,IAAKmtG,GACH,OAGF,MAAMnnG,EAAS42B,EAAU/qB,QACzB,IAAK7L,EACH,OAGF,MAAMyoG,EAAUvQ,GAAiB0M,IAAuB5kG,EAAOyrC,YAAc,EAAIm5D,GAAsB,IAEvGriB,EAAAA,GAAAA,GAAwBviF,EAAQyoG,KAC/B,CAACtB,GAAgBjP,KAEpB,MAAMwQ,IAAoB1lG,EAAAA,EAAAA,IAAiBslF,IACzCqe,EAAoBre,MAkEhBl8C,IAAgB5wC,EAAAA,GAAAA,GAAe,gBC7YhB,WD6Y8CtC,GAEnE,IAAKsvG,GACH,OACE/rG,EAAAA,GAAAA,GAAA,OAAKvD,UAAWkzC,GAAc1wC,SAC3B2sG,IACC5rG,EAAAA,GAAAA,GAAA,OAAKvD,UAAWyvG,GAA4BjtG,SAAElC,GAAQ,iBAEtDiD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,MAMhB,MAAMpnD,IAAkB5G,EAAAA,GAAAA,GACtBmtG,GACA,gBACC9B,GAAuB8B,IAEpBC,IAAgBptG,EAAAA,GAAAA,GACpBmtG,GDja0F,WCma1FzyF,EAAAA,GAAe,eAAiB,gBAChCuwF,EACAkC,IAGF,OACEptG,EAAAA,GAAAA,IAAA,OAAKrC,UAAWkzC,GAAc1wC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,OACEmY,IAAKgiB,EACL19B,UAAWkJ,GAAgB1G,UAE3BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCe,EAAAA,GAAAA,GAAA,UAAQmY,IAAKqlF,EAAiB/gG,UAAU,mBACxCuD,EAAAA,GAAAA,GAAA,UAAQmY,IAAKwqF,EAAmBlmG,UAAU,kBACzCkuG,GAAQzrG,KAnGjB,SAAqBm+F,EAA8C/+F,GACjE,MAAM8tG,EAAe/O,EAAW3d,WAAW,GACrC3C,GAAkBh+E,EAAAA,GAAAA,GACtBmtG,GACA5tG,IAAUm9F,IClV8B,YDqVpC4Q,EAAmB/tG,EAAQguG,EAAAA,IAC3BC,GAAOvN,EAAAA,EAAAA,MAAgChuD,EAAAA,EAAAA,MAAaqsD,GAE1D,GAAIA,EAAW56F,KAAOooG,EAAAA,IAAtB,CAIA,GAAIxC,GAA2B5a,IAAI4P,EAAW56F,KAAO46F,EAAWI,eAAiB2O,EAAc,CAC7F,MAAMhH,EAAW/H,EAAW56F,KAAO4iG,EAAAA,KAAwBhI,EAAW56F,KAAOkjG,EAAAA,IACvE6G,EAAUpE,GAAqB3a,IAAI4P,EAAW56F,IACpD,OACEzC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAELvE,UAAWsgF,EACXjmE,UAAWumF,EAAWl5F,MACtB0S,OAAK,EACLsvC,MAAOqmD,EACP5mG,MAAM,cAEN9I,QAASA,IAAMqsF,GAAiBic,EAAW,EAAI9mG,GAAOW,SAErDmmG,GACCplG,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEXtB,EAAAA,GAAAA,GAACo9F,GAAe,CACdC,WAAYA,EACZx5E,QAASylF,IAAemB,GACxBp/E,eAAa,EACbkyE,oBAAqBR,GACrBS,gBAAiB6O,EAAoBE,EAAO5J,EAAoBnF,OAAmB7/F,KAjBlF0/F,EAAW56F,GAsBtB,CAEA,OACEzC,EAAAA,GAAAA,GAACu/F,GAAa,CAEZ3gB,QAASwtB,EACT3rG,KAAM68F,EAAAA,IACNn5F,MAAOk5F,EAAWl5F,MAClB1H,UAAWsgF,EACXl5D,QAASylF,IAAemB,GACxBlN,oBAAqBR,GACrByC,eAAa,EACb78D,sBAAoB,EACpB66D,gBAAiB6O,EAAoBE,EAAO5J,EAAoBnF,OAAmB7/F,EACnFoiG,qBAAsBmE,EACtBpnG,QAASqsF,GACThiF,SAAU7I,EACV+sB,eAAa,GAbRgyE,EAAW56F,GAjCpB,CAiDF,UAyCIzC,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLi6B,SAAUwjD,EACV1tG,UAAW0vG,GAAcltG,SAExB0rG,GAAQzrG,KAAI,CAACm+F,EAAYl2C,KACxB,MAAMy8C,EAAmBvG,EAAW56F,KAAOooG,EAAAA,KACrCxN,EAAW56F,KAAO4iG,EAAAA,MAAyB4E,GAAyBxK,GACpEuE,EAAiB3G,EAAW56F,KAAOinG,EAEzC,OACE1pG,EAAAA,GAAAA,GAACwjG,GAAU,CAETnG,WAAYA,EACZqF,YAAa5hG,QAAQwoG,GAAcmB,IACnCnsG,MAAO6oD,EACPo0C,SAAUiP,GACVjN,oBAAqB3B,GACrBkB,mCAAoCA,GACpCL,mCAAoCA,GACpCgH,aAAchI,IAAkBt0C,EAAI,GAAKs0C,IAAkBt0C,EAAI,EAC/DqF,gBAAiBA,EACjBizC,eAAgBA,EAChBkE,iBAAkBA,EAClBC,iBAAkBA,EAClBC,qBAAsBoG,GAAyB5M,EAAW56F,KAAO4iG,EAAAA,IACjEtB,sBAAuBtE,GAAkBpC,EAAW56F,KAAO4iG,EAAAA,IAC3DrB,eAAgBA,EAChBrhE,qBAAsBA,EACtBmhE,oBAAqBA,EACrB/hD,mBAAoBA,EACpBmiD,cAAeA,EACfE,iBAAkBA,EAClBC,kBAAmBA,EACnBC,gBAAiB2H,GACjB9L,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpBh1E,eAAa,GA1BRgyE,EAAW56F,gB,eEhc9B,MCmFA,IAAenG,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACjC,CACLu5F,0BAA2B3rG,QAAQoS,EAAO81E,aAAayf,aAAa5pG,QACpEqlG,eAAewI,EAAAA,EAAAA,KAA+Bx5F,MAH9BD,EAtDgC05F,EAClDvpG,SACAwpG,kBACAH,4BACAvI,gBACA2I,sBACAjpG,cAEA,MAAM,0BAAEkpG,IAA8BzmG,EAAAA,EAAAA,MAEhC0mG,GAAmB99F,EAAAA,EAAAA,OAClB+9F,EAAoBC,EAAsBC,IAA0B5vG,EAAAA,EAAAA,MAC3EC,EAAAA,EAAAA,KAAU,KACRwvG,EAAiB39F,QAAUw9F,EAAgBx9F,QAASyQ,wBAAwB0G,QAC3E,CAACnjB,EAAQwpG,KAEZrvG,EAAAA,EAAAA,KAAU,KACJ6F,IAAWqpG,GACbK,MAED,CAACL,EAA2BrpG,EAAQ0pG,IAEvC,MAAMb,GAAoBzpG,EAAAA,EAAAA,KAAao8E,IACrCiuB,EAAoBjuB,GACpBh7E,MACC,CAACA,EAASipG,IAEb,OACE7sG,EAAAA,GAAAA,GAACmtG,GAAAA,EAAM,CAAAluG,UACLe,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQA,EACRgqG,WAAS,EACTz1F,UAAU,QACV01F,gBD9DsB,WC+DtBzpG,QAASA,EACTmpG,iBAAkBA,EAAiB39F,QACnCk+F,kBAAmBN,EAAmB/tG,UAEtCe,EAAAA,GAAAA,GAAC+pG,GAAiB,CAChBxO,SAAS,oBACTmH,YAAat/F,EACbmW,UAAWnW,EACXq8F,gBAAc,EACdyE,cAAeA,EACf/D,kBAAmB8M,EACnB7M,mBAAoB8M,EACpBhD,oBAAqB+B,EACrB5L,mBAAoBz8F,Y,gBC5E9B,MC+BM2pG,GAAoB,EAAI1zF,EAAAA,EAuG9B,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YAIF,CACLwoB,aAJkB3gB,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,eAK5C+4B,IAJUvlB,GAAOmpB,OAAQthB,EAAAA,EAAAA,KAAWp/B,EAAQu3B,EAAMmpB,YAASj2D,KAH7CsV,EArGSu6F,EAAG/iE,QAAOwoB,cAAajD,UAClD,MAAM,eAAEwwC,EAAc,0BAAEiN,EAAyB,gBAAEC,IAAoBrnG,EAAAA,EAAAA,MAEjEpJ,GAAOC,EAAAA,GAAAA,KAEPkG,EAAStC,QAAQ2pC,GACjBkjE,GAAiBx/D,EAAAA,GAAAA,GAAiB1D,GAElCmjE,GAAqBlwG,EAAAA,EAAAA,KAAQ,KACjC,GAAKu1D,GAAgB06C,EACrB,MAAO,IACF16C,EACH81B,YAAa,CACXvoF,KAAM,UACNyoF,WAAY0kB,EAAexkC,kBAG9B,CAAClW,EAAa06C,IAEXj8F,GAAchU,EAAAA,EAAAA,KAAQ,KAC1B,IAAKiwG,IAAmB39C,EAAK,OAE7B,MAAMkN,GAAUjxB,EAAAA,EAAAA,IAAgB+jB,GAEhC,OAAI29C,EAAe5wF,SACV9f,EAAK,wBAAyB,CACnC+yD,IAAKkN,EACLngD,UAAU8wF,EAAAA,GAAAA,IAAoB5wG,EAAM0wG,EAAe5wF,WAClD,CACDm/B,WAAW,EACX6V,cAAc,IAIX90D,EAAK,qBAAsB,CAAE+yD,IAAKkN,GAAW,CAAEhhB,WAAW,EAAM6V,cAAc,MACpF,CAAC/B,EAAK/yD,EAAM0wG,IAET5vE,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClC,MAAMw+D,EAAY4oC,GAAgB5oC,UAE9BA,GACF2oC,EAAgB,CACd3oC,YACA/yC,MAAO,CACL81C,UAAW,sBACXC,UAAW,CACT3X,MAAO,oBAMfq9C,OAGIK,GAAkBvnG,EAAAA,EAAAA,IAAgB,KACtC,IAAKonG,EAAgB,OAErB,MAAMI,EAAUJ,EAAe5wF,UAAW+nB,EAAAA,GAAAA,MAAkB6oE,EAAe5wF,cAAWpf,EAEtF6iG,EAAe,CACbwN,kBAAmBL,EAAe5oC,UAClCgkB,YAAa,CAAEvoF,KAAM,UAAWyoF,WAAY0kB,EAAexkC,cAAew4B,MAAOoM,KAEnFN,OAGF,OACE3uG,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRU,iBDvGoB,WCwGpBE,wBAAsB,EACtB0B,QAAM,EACN9B,QAASm6B,EAAY9+B,SAAA,CAEpB0uG,IACC3tG,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CACV/uF,UD9GsC,WC+GtCwsF,WAAY0kB,EAAexkC,cAC3B1oE,KAAM8sG,GACNU,UAAW,EACX9O,aAAW,KAGfrgG,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UDtHgF,WCsHxDwC,SAAEhC,EAAK,8BACnC+C,EAAAA,GAAAA,GAAA,KAAGvD,UDvH8D,WCuHhCwC,SAAEyS,OAEpCk8F,IACC5tG,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPmnG,SAAUN,EACV1mG,iBAAe,KAGnBlH,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACP,KAAK,UAAU3D,QAASgxG,EAAgB7uG,SAC7ChC,EAAK,2B,4BChId,SAA2F,WCgV3F,SAASkxG,GAAuBC,EAAwBpnG,GACtD,OAAOonG,EAAS5uG,MAAM6uG,IAAWA,EAAMrnG,UAClConG,EAAS5tE,QAAQ+kB,GAAMv+C,GAAUu+C,EAAEv+C,SAAWA,IAC9Cq+C,MAAK,CAACC,EAAGC,IAAMD,EAAEtvB,KAAOuvB,EAAEvvB,OAAM,EACvC,CAMA,UAAe15B,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM/2B,EAAO+2B,IAAS8H,EAAAA,EAAAA,KAAWr/B,EAAQu3B,GAAOzjC,QAC1CgnD,EAAet6C,IAAQu6C,EAAAA,EAAAA,KAAmB/6C,EAAQQ,EAAKjR,IACvD6rG,EAAa7jE,GAAO2jE,UAAYD,GAAuB1jE,EAAM2jE,SAAU3jE,EAAMzjC,QAGnF,MAAO,CACL0M,OACAs6C,eACAugD,gBALkBD,GAAYtnG,QAASurC,EAAAA,EAAAA,KAAWr/B,EAAQo7F,GAAYtnG,aAAUrJ,EAMhFglC,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MAXnCD,EAhSDu7F,EACjB/jE,QACA/2B,OACAs6C,eACAugD,kBACA5rE,2BAEA,MAAM,WACJ8rE,EAAU,gBACVC,EAAe,gBACftkB,EAAe,iBACf1lD,EAAgB,aAChBiqE,IACEtoG,EAAAA,EAAAA,OAEGuoG,EAAoBC,EAAkBC,IAAqBxxG,EAAAA,EAAAA,MAC3DyxG,EAAkBC,EAAgBC,IAAmB3xG,EAAAA,EAAAA,MACrD4xG,EAAqBC,EAAmBC,IAAsB9xG,EAAAA,EAAAA,KAE/Di5B,EAAY7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GAElCtQ,EAAStC,QAAQ2pC,GAEjB1tC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEbK,EAAAA,EAAAA,KAAU,KACJmW,IAASs6C,GACX2gD,EAAa,CAAE3nG,OAAQ0M,EAAKjR,OAE7B,CAACiR,EAAMs6C,IAEV,MAAMqhD,GAAY3xG,EAAAA,EAAAA,KAAQ,KACxB,GAAKgW,EAIL,OAAO47C,EAAAA,EAAAA,IAAavyD,EAAS2W,KAC5B,CAACA,EAAM3W,IAEJuyG,GAAmB5xG,EAAAA,EAAAA,KAAQ,KAC/B,GAAK6wG,EAIL,OAAOj/C,EAAAA,EAAAA,IAAavyD,EAASwxG,KAC5B,CAACA,EAAiBxxG,KAEf,eACJwyG,EAAc,UACdC,EAAS,MACTnB,EAAK,MACLlqG,EAAK,SACLsrG,EAAQ,UACRC,EAAS,MACT7oG,EAAK,SACLiR,EAAQ,gBACR63F,EAAe,aACfC,IACalyG,EAAAA,EAAAA,KAAQ,KACrB,IAAK+sC,GAAOolE,cAAgBn8F,EAC1B,MAAO,CACL67F,gBAAgB,EAChBprG,MAAOpH,EAAQ,YAInB,MAAM,WACJ+yG,GACErlE,EAAMolE,YAEJvB,EAAa7jE,GAAO2jE,UAAYD,GAAuB1jE,EAAM2jE,SAAU16F,EAAKjR,IAC5EstG,EAA+BtlE,GAAO2jE,WAoNjBA,EApNoD3jE,EAAM2jE,SAoNlCpnG,EApN4C0M,EAAKjR,IAqN/F2rG,EAAS4B,OAAO3B,GAAUA,EAAMrnG,SAAWA,KADpD,IAA+BonG,EAAwBpnG,EAlNnD,MAAM,OACJkyF,EAAM,aACN+W,EAAY,aACZC,EAAY,cACZC,EAAa,gBACbC,EAAe,WACfC,IACEC,EAAAA,GAAAA,GAAqB7lE,EAAMolE,aAAa,GAEtCU,EAAWT,EAEXtwF,EAAOziB,EAAQ,cAAekzG,GAC9B1pF,EAAQ2pF,EAAenzG,EAAQ,cAAekzG,EAAe,QAAKtyG,EAElE6yG,EAAazzG,EAAQ,0BAA2BqzG,GAEhDK,EAAyB1zG,EAAZw5B,EAAoB,eAA0B,cAE3Dm6E,GAA0B1iD,GAAc2iD,oBAAsB,IAAM3iD,GAAc4iD,eAAiB,GAEzG,IAAIl/F,EACJ,GAAI2+F,EACF3+F,EAAc3U,EAAQ,8BACjB,GAAI2zG,EAAyB,KAAMr5E,EAAAA,EAAAA,IAAY3jB,GAAO,CAC3D,MAAMm9F,EAAa9zG,EAAQ,qCAAsC2zG,GACjEh/F,EAAc3U,EAAQ,+BAAgC,CAAC8zG,EAAYxB,GACrE,MACE39F,EAAc3U,EAAQ,qCAAsC,CAACsyG,EAAWmB,IAG1E,MAAO,CACLjB,gBAAgB,EAChBprG,MAAOssG,EACPhB,SAAUjwF,EACVkwF,UAAWnpF,EACX1f,MAAOqyF,EAAO1S,WACd1uE,SAAUq4F,EACVC,kBACAT,gBAAiBj+F,EACjB28F,MAAOC,EACPkB,UAAWe,EACXX,aAAcG,IAAiCM,KAEhD,CAAC38F,EAAM27F,EAAW5kE,EAAO1tC,EAASixD,EAAcz3B,IAE7Cu6E,GAAmBrmE,GAAO2jE,UAAUvvG,QAAU8jC,EAC9CouE,EAAmB1C,GAAOrnG,QAAUqnG,EAAMrnG,SAAWyjC,GAAOzjC,OAE5DgqG,GAAmBzqG,EAAAA,EAAAA,IAAgB,KACvCuoG,IACAL,EAAW,CAAEznG,OAAQ0M,EAAMjR,GAAIwuG,MAAO,CAAC5C,EAAO6C,QAC9C9mB,EAAgB,CAAC,MAGb+mB,GAAuB5qG,EAAAA,EAAAA,IAAgB,KAC3Cm+B,IACA0qE,IACAV,OAGI0C,GAAoB7qG,EAAAA,EAAAA,IAAgB,KACxC,IAAK8nG,EACH,OAAK1rE,OAKL+rE,SAJES,IAQCS,EAKDvB,EAAMtpE,cACRiqE,IAIE+B,EACFlC,IAIFmC,IAdEtC,OAiBE5xC,GAAmBv2D,EAAAA,EAAAA,IAAgB,KACvCmoG,OA0CF,OACE5vG,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRe,MAAOA,EACP1H,UD5QuC,WC6QvCqH,iBD7QoB,WC8QpBF,QAAS8qG,EAAgBzvG,SAAA,CA5CtBswG,GAKHzwG,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACqxG,GAAAA,EAAe,CACd5B,SAAUA,EACVC,UAAWA,EACX53F,SAAUA,EACVw5F,kBAAmBzqG,EACnBs3E,kBAAkB,UAEnBqxB,IACCxvG,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GDhPoE,YCgPnCC,SAC7DlC,EAAQ,qCAAsCsyG,MAGnDrvG,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAmBC,UAChC8B,EAAAA,GAAAA,GAAW4uG,EAAiB,CAAC,kBAAmB,aAEnD7wG,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBoJ,SAAUirG,EAAiBh0G,QAASs0G,EAAkBnyG,SACpG2wG,GACC9wG,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UACVvE,EAAQw5B,EAAY,4BAA8B,4BAEnDx5B,EAAQ,SAEdiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAASggE,EAAiB79D,SACxElC,EAAQ,mBA9BRiD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,CAACtwD,UDnO4C,aCiR3Ds0G,GAAoBzB,IACnBxwG,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQwrG,EACRnyG,UDpR+I,WCqR/IqH,iBDrRgL,WCsRhLF,QAASkrG,EAAkB7vG,SAAA,EAE3BH,EAAAA,GAAAA,IAAA,OAAKrC,UDxRwM,WCwRtKwC,SAAA,EACrCH,EAAAA,GAAAA,IAAA,OAAKrC,UDzRqP,WCyRpNwC,SAAA,EACpCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAM4nG,EAAiB9tG,KAAK,WACpCT,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cAAc7E,UD3RwP,iBC6RnRuD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UD7R4M,cC8R9NuD,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAM+M,EAAMjT,KAAK,cAE3BT,EAAAA,GAAAA,GAAA,OAAAf,UACG8B,EAAAA,GAAAA,GACChE,EAAQ,4BAA6B,CAACuyG,EAAkBD,IAAa,CAAC,kBAAmB,aAG7FvwG,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAASk0G,EAAiB/xG,SACxElC,EAAQ,cAEXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAASgyG,EAAkB7vG,SACzElC,EAAQ,kBAKhB+D,QAAQutG,GAAOtpE,iBACd/kC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ2rG,EACRwC,eAAa,EACbxrE,aAAchpC,EAAQ,MACtBoH,MAAOpH,EAAQ,yCACf6G,QAASqrG,EACTjpE,eAAgBipE,EAAgBhwG,UAE/B8B,EAAAA,GAAAA,GACChE,EACE,wCACA8wG,EAAAA,GAAAA,IAAoB5wG,EAAMoxG,EAAMtpE,eAAgBD,EAAAA,GAAAA,QAElD,CAAC,kBAAmB,aAIxBnC,IACA3iC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ8rG,EACRnpE,aAAchpC,EAAQ,cACtBoH,MAAOpH,EAAQ,iBACf6G,QAASwrG,EACTppE,eAAgBmrE,EAAqBlyG,UAEpC8B,EAAAA,GAAAA,GAAWhE,EAAQ,4BAA6B,CAAC,kBAAmB,mB,4BCzU/E,SAAkD,WC0HlD,IAAeT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM,QAAEtiC,GAAYsiC,GAAS,CAAC,EACxB+mE,EAAcrpG,IAAWuvB,EAAAA,EAAAA,KAAkBxkB,EAAQ/K,EAAQnB,OAAQmB,EAAQmU,WAC3EiwB,EAASilE,IAAer8E,EAAAA,EAAAA,KAAajiB,EAAQs+F,GAEnD,MAAO,CACLv6E,cAAe/jB,EAAO+jB,cACtB/B,cAAeqX,KARDt5B,EA1FEw+F,EACpBx6E,gBACAwT,QACAvV,oBAEA,MAAM,mBACJw8E,EAAkB,cAAEC,EAAa,aAAEp8E,IACjClvB,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KACPoG,EAAStC,QAAQ2pC,GAEjBmnE,IAAWnnE,GAAO/Q,KAAKm4E,MAAQpnE,GAAO/Q,KAAKm4E,OAAS56E,GAAmBwT,GAAO/Q,KAAKo4E,QAEnFC,GAAqBxrG,EAAAA,EAAAA,IAAgB,KACpCkkC,GAAUA,EAAM/Q,KAAKs4E,oBAC1Bz8E,EAAa,CACXvuB,OAAQyjC,EAAM/Q,KAAKqa,OACnBz3B,UAAWmuB,EAAM/Q,KAAKs4E,oBAExBN,QAGIN,GAAoB7qG,EAAAA,EAAAA,IAAgB,KACpCqrG,EACFD,EAAc,CAAE7oC,KAAMr+B,EAAOq+B,OAG/B4oC,OAGIO,GAAYv0G,EAAAA,EAAAA,KAAQ,KACxB,IAAK+sC,EAAO,OACZ,MAAM,KAAEq+B,EAAI,KAAEpvC,GAAS+Q,EAEjBsJ,EAASra,EAAKqa,QAAU7e,GAAezyB,GAiC7C,MAAO,CACLc,QA/BAzE,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAK0J,IAAK+hF,GAAa9/D,IAAI,GAAGlvB,UDtE8B,cCuE5DuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAgBC,UAAE8B,EAAAA,GAAAA,GAAW9D,EAAK,uBAAwB,CAAC,uBACzE+C,EAAAA,GAAAA,GAACkyG,GAAAA,EAAS,CAAC/tG,MAAM,mBAAmB4nF,KAAM,GAAGxiB,EAAAA,gBAAoCT,SA6BnF/iE,UAzBgB,CAChB,CAAC9I,EAAK,gBAAiB82C,EAAS,CAAE/sC,OAAQ+sC,GAAW92C,EAAK,wBAC1D,CAACA,EAAK,cAAey8B,EAAKm4E,KAAO,CAAE7qG,OAAQ0yB,EAAKm4E,MAAS50G,EAAK,wBAC9D,CAACA,EAAK,gBAAiBA,EAAK,6BAA8BA,EAAK,SAAUy8B,EAAK+rD,OAAQ,OACtF,CAACxoF,EAAK,mBACJ+C,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAe26B,EAAKs4E,mBDjFjB,YCiFyDl1G,QAASi1G,EAAmB9yG,SACtGy6B,EAAKy4E,iBAAmBz4E,EAAKm4E,KAAO50G,EAAK,8BACtCA,EAAKy8B,EAAKy4E,eAAiB,mBAAqB,8BAGxD,CAACl1G,EAAK,iBAAiBg8F,EAAAA,GAAAA,IAAmC,IAAZv/D,EAAK1D,KAAa/4B,EAAKg7D,MAAM,KAgB3Ez0D,QAZAxD,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAgBC,UAC9B8B,EAAAA,GAAAA,GACC24B,EAAKo4E,OAAS70G,EAAK,wBAAwBg8F,EAAAA,GAAAA,IAAqC,IAAdv/D,EAAKo4E,OAAe70G,EAAKg7D,MAAM,IAC7Fh7D,EAAK,4BACT,CAAC,yBAUN,CAACA,EAAMi4B,GAAezyB,GAAIgoC,IAE7B,GAAKwnE,EAEL,OACEjyG,EAAAA,GAAAA,GAAC8F,GAAAA,EAAc,CACb1C,OAAQA,EACRe,MAAOlH,EAAK,uBACZ8I,UAAWksG,EAAUlsG,UACrBxC,OAAQ0uG,EAAU1uG,OAClBC,OAAQyuG,EAAUzuG,OAClBC,WAAqBxG,EAAT20G,EAAc,kBAA0B,SACpD/tG,cAAeutG,EACfxtG,QAAS8tG,QCtHR,SAASU,GAAgBC,EAAexrG,GAC7C,OAAOwrG,EAAIx0G,QAAO,CAACqhE,EAAMozC,IAChB5zG,KAAKoyB,IAAIwhF,EAAOzrG,GAASnI,KAAKoyB,IAAIouC,EAAOr4D,GAASyrG,EAAOpzC,GAEpE,CCHA,MC2GA,IAAe5iE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM,wBAAE8nE,GAA4B9nE,GAAS,CAAC,EAE9C,MAAO,CACL8nE,6BALct/F,EAjFOu/F,EACzB/nE,QACA8nE,8BAEA,MAAM,mBACJb,EAAkB,wBAAEe,EAAuB,cAAEC,IAC3CrsG,EAAAA,EAAAA,MACEpJ,GAAOC,EAAAA,GAAAA,KACPkG,EAAStC,QAAQ2pC,IAEhBkoE,EAAgBC,IAAqBnhG,EAAAA,EAAAA,MAEtCohG,GAAetsG,EAAAA,EAAAA,IAAiBM,GAdjB,GAeZ4hB,OAAO5hB,KAGVisG,GAAwBp1G,EAAAA,EAAAA,KAAQ,KACpC,GAAK60G,EACL,OAAOH,GAAgBW,EAAAA,IAAqBR,EApBzB,IAoBmE/rB,aACrF,CAAC+rB,KAEJh1G,EAAAA,EAAAA,KAAU,KACJu1G,GACFF,EAAkBE,KAEnB,CAACA,IAEJ,MAAMp2G,GAA8CgB,EAAAA,EAAAA,KAAQ,IACnDq1G,EAAAA,IAAoB7zG,KAAKumF,IAAM,CACpC5+E,MAAOg6C,OAAO4kC,GACd7+E,MAAO3J,EAAK,SAAU,CAAEk5B,MAAOsvD,GAAU,CAAEtoB,YAAa,SAEzD,CAAClgE,IAEEsqF,GAAehhF,EAAAA,EAAAA,IAAiBM,IACpC+rG,EAAkB/rG,MAGdm/B,GAAiBz/B,EAAAA,EAAAA,IAAgB,KAChCosG,GACLD,EAAc,CAAEM,KAAMH,EAAaF,QAG/BM,GAAiB1sG,EAAAA,EAAAA,IAAgB,KACrCksG,OAGF,OACE3zG,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRe,MAAOlH,EAAK,qBACZ2G,QAAS8tG,EACTj1G,UD9EiB,WC8EMwC,SAAA,EAEvBe,EAAAA,GAAAA,GAAA,KAAAf,SAAIhC,EAAK,sCACT+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT1V,UAAU,wBACV6E,KAAK,0BACL5E,QAASA,EACT2V,SAAUsgG,EACVvgG,SAAUm1E,EACV2rB,UAAQ,KAEVp0G,EAAAA,GAAAA,IAAA,OACErC,UAAU,sBAAqBwC,SAAA,EAE/Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASkpC,EAAe/mC,SAEvBhC,EAAK,WAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,SAASnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAASm2G,EAAeh0G,SACrFhC,EAAK,sB,4BCpGhB,UAAgB,YAAc,WAAW,iBAAiB,WAAW,cAAgB,WAAW,gBAAgB,WAAW,aAAe,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,eAAiB,WAAW,QAAU,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,eAAe,WAAW,YAAc,YCiI5a,IAAeX,EAAAA,EAAAA,KA1GuB62G,EAAGC,SAAQv3B,aAC/C,MAAM,mBAAEw3B,EAAkB,mBAAEC,IAAuBjtG,EAAAA,EAAAA,MAE7CpJ,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MAETu2G,EAAiBC,IAAsB/hG,EAAAA,EAAAA,IAAmB2hG,EAAOK,gBAElEC,EAAgB5yG,QAAQsyG,EAAOK,eAAe50G,QAC9C80G,EAAyC,IAAjCP,EAAOQ,eAAe/0G,OAC9Bg1G,EAAgBH,EAAgBN,EAAOK,eAAe50G,OAAS,EAC/D8+D,EAAY41C,EAAgB10G,OAAS00G,EAAgB10G,OAAO2nF,gBAAa7oF,EAEzEgyG,EAAkBgE,EAAQ12G,EAAK,yBACjC42G,EAAgB52G,EAAK,wBAAyB,CAC9C2tD,MAAO3tD,EAAK,6BAA8B,CAAEk5B,MAAO09E,GAAiB,CAAE12C,YAAa02C,IACnF1vG,OAAOspC,EAAAA,GAAAA,IAAuB,CAC5Bz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,qBAE/B,CACD73D,WAAW,EACX6V,cAAc,IACX90D,EAAK,6BAENm0G,GAAoB5uG,EAAAA,EAAAA,KAAY,KACpC6wG,IAEKE,EAAgB10G,QAErBy0G,EAAmB,CACjBF,SACAp0D,QAASu0D,MAEV,CAACH,EAAQG,IAENS,GAAwBxxG,EAAAA,EAAAA,KAAY,KACxC,MAAMyxG,EAAiBV,EAAgB10G,SAAWu0G,EAAOK,eAAe50G,OACxE20G,EAAmBS,EAAiB,GAAKb,EAAOK,kBAC/C,CAACL,EAAOK,eAAgBF,EAAgB10G,SAE3C,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOqY,QAAQpY,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0S,YAAYzS,UAChC8B,EAAAA,GAAAA,GAAW4uG,EAAiB,CAAC,kBAAmB,aAEnD7wG,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOk1G,cAAe,iBAAiBj1G,SAAA,CACnE6B,QAAQsyG,EAAOK,eAAe50G,UAC7BC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOm1G,aAAal1G,SAAA,EAClCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOo1G,iBAAiBn1G,SACrClC,EAAQ,4BAA6Bw2G,EAAgB10G,OAAQ,QAEhEmB,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GAAOq1G,gBAClBvoE,KAAK,SACLD,SAAU,EACV/uC,QAASk3G,EAAsB/0G,SAE9Bs0G,EAAgB10G,SAAWu0G,EAAOK,eAAe50G,OAC9C9B,EAAQ,eAAiBA,EAAQ,mBAGzCiD,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASqsE,EAAOK,eAChBlsE,oBAAqBisE,EACrBrtE,YAAaotE,EACb9rE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAIpB3nC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOm1G,aAAal1G,UAClCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOo1G,iBAAiBn1G,SACrClC,EAAQ,gCAGbiD,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASqsE,EAAOQ,eAChB3sE,kBAAmBmsE,EAAOQ,eAC1BztE,YAAaitE,EAAOQ,eACpBnsE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlB3nC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASs0G,EAAkBnyG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOyE,WAAWxE,SAAA,EAC9Bs0G,EAAgB10G,QAAU9B,EAAQ,MACnC+D,QAAQyyG,EAAgB10G,UACvBC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGlC,EAAQ,6BAA8Bw2G,EAAgB10G,OAAQ,MAC/DmB,EAAAA,GAAAA,GAACs0G,GAAAA,EAAK,CAAC73G,UAAWuC,GAAOu1G,YAAav7F,KAAM2kD,EAAW62C,kBAAgB,kBC1BrF,IAAel4G,EAAAA,EAAAA,KAxEsBm4G,EACnC54B,SACA64B,mBAAmB1tE,GAAAA,MAEnB,MAAM,mBAAEqsE,EAAkB,cAAEsB,IAAkBtuG,EAAAA,EAAAA,MAExCpJ,GAAOD,EAAAA,EAAAA,MAENu2G,EAAiBC,IAAsB/hG,EAAAA,EAAAA,IAAmB,IAE3DksD,EAAY41C,EAAgB10G,OAAS00G,EAAgB10G,OAAO2nF,gBAAa7oF,EAEzEq2G,GAAwBxxG,EAAAA,EAAAA,KAAY,KACxC,MAAMyxG,EAAiBV,EAAgB10G,SAAW61G,EAAiB71G,OACnE20G,EAAmBS,EAAiB,GAAKS,KACxC,CAACA,EAAkBnB,EAAgB10G,SAEhCuyG,GAAoB5uG,EAAAA,EAAAA,KAAY,KACpC6wG,IACAsB,EAAc,CAAEt4B,SAAUR,EAAOp5E,GAAIu8C,QAASu0D,MAC7C,CAAC13B,EAAOp5E,GAAI8wG,IAEf,OACEz0G,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOqY,QAAQpY,SAAA,CAC5B6B,QAAQ4zG,GAAkB71G,UACzBC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0S,YAAYzS,UAChC8B,EAAAA,GAAAA,GAAW9D,EAAK,4BAA6B,CAAC,kBAAmB,aAEpE6B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOk1G,cAAe,iBAAiBj1G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOm1G,aAAal1G,SAAA,EAClCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOo1G,iBAAiBn1G,SACrChC,EAAK,4BAA6Bs2G,EAAgB10G,OAAQ,QAE7DmB,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GAAOq1G,gBAClBvoE,KAAK,SACLD,SAAU,EACV/uC,QAASk3G,EAAsB/0G,SAE9Bs0G,EAAgB10G,SAAW61G,EAAiB71G,OAAS5B,EAAK,eAAiBA,EAAK,mBAGrF+C,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAAS2tE,EACTntE,oBAAqBisE,EACrBrtE,YAAaotE,EACb9rE,eAAa,EACbC,YAAU,EACVC,cAAc,oBAKtB3nC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASs0G,EAAkBnyG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOyE,WAAWxE,SAAA,EAC9Bs0G,EAAgB10G,QAAU5B,EAAK,0BAChC6D,QAAQyyG,EAAgB10G,UACvBC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGhC,EAAK,gCACN+C,EAAAA,GAAAA,GAACs0G,GAAAA,EAAK,CAAC73G,UAAWuC,GAAOu1G,YAAav7F,KAAM2kD,EAAW62C,kBAAgB,kBCUrF,IAAel4G,EAAAA,EAAAA,KAzEmBs4G,EAAGxB,aACnC,MAAM,mBAAEC,EAAkB,mBAAEC,IAAuBjtG,EAAAA,EAAAA,MAE7CpJ,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MACTu2G,EAAiBC,IAAsB/hG,EAAAA,EAAAA,IAAmB2hG,EAAOp0D,SAElE61D,GAAYn3G,EAAAA,EAAAA,KAAQ,KACxB,MAAMitD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KACpC,OAAOmqE,EAAOp0D,QAAQxe,QAAQ/9B,IAAQkoD,EAAUloD,GAAIqyG,gBACnD,CAAC1B,EAAOp0D,UAEL+1D,EAAgBxB,EAAgB10G,OAASg2G,EAAUh2G,OAEnD8+D,EAAYo3C,EAAgBA,EAAcvuB,gBAAa7oF,EAEvDyzG,GAAoB5uG,EAAAA,EAAAA,KAAY,KACpC6wG,IAEAC,EAAmB,CACjBF,SACAp0D,QAASu0D,MAEV,CAACH,EAAQG,IAENS,GAAwBxxG,EAAAA,EAAAA,KAAY,KACxC,MAAMyxG,EAAiBV,EAAgB10G,SAAWu0G,EAAOp0D,QAAQngD,OACjE20G,EAAmBS,EAAiBY,EAAYzB,EAAOp0D,WACtD,CAACo0D,EAAOp0D,QAAS61D,EAAWtB,EAAgB10G,SAE/C,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOqY,QAAQpY,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0S,YAAYzS,SAChChC,EAAK,4BAER6B,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOk1G,cAAe,iBAAiBj1G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOm1G,aAAal1G,SAAA,EAClCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOo1G,iBAAiBn1G,SACrClC,EAAQ,4BAA6Bg4G,EAAe,QAEvD/0G,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GAAOq1G,gBAClBvoE,KAAK,SACLD,SAAU,EACV/uC,QAASk3G,EAAsB/0G,SAE9Bs0G,EAAgB10G,SAAWu0G,EAAOp0D,QAAQngD,OAAS9B,EAAQ,eAAiBA,EAAQ,mBAGzFiD,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASqsE,EAAOp0D,QAChB/X,kBAAmB4tE,EACnBttE,oBAAqBisE,EACrBrtE,YAAaotE,EACb9rE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlB3nC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLlE,QAASs0G,EACT3wG,KAAK,UACLoF,UAAW0tG,EAAgB10G,OAAOI,UAElCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOyE,WAAWxE,SAAA,CAC/BhC,EAAK,wBACN+C,EAAAA,GAAAA,GAACs0G,GAAAA,EAAK,CAAC73G,UAAWuC,GAAOu1G,YAAav7F,KAAM2kD,EAAW62C,kBAAgB,eC0CjF,IAAel4G,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM,OAAE2oE,EAAM,QAAE4B,GAAYvqE,GAAS,CAAC,EAChC4xC,EAAW24B,GAAS34B,WAAa+2B,GAAU,aAAcA,EAASA,EAAO/2B,cAAW1+E,GAG1F,MAAO,CACLk+E,OAHaQ,GAAW44B,EAAAA,EAAAA,KAAiB/hG,EAAQmpE,QAAY1+E,KAJ/CsV,EAtGmCiiG,EACrDzqE,QACAoxC,aAEA,MAAM,mBAAEw3B,IAAuBhtG,EAAAA,EAAAA,MAEzBpJ,GAAOD,EAAAA,EAAAA,KAEPoG,EAAStC,QAAQ2pC,GACjB0qE,GAAgBj8E,EAAAA,EAAAA,GAAsBuR,IAAUA,EAChDwxC,GAAkB/iD,EAAAA,EAAAA,GAAsB2iD,IAAWA,EAEnD13E,GAAQzG,EAAAA,EAAAA,KAAQ,KACpB,GAAKy3G,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,EACfA,EAAOK,eAAe50G,OAAS5B,EAAK,2BAA6BA,EAAK,0BAExEA,EAAK,qBACd,CACA,OAAIk4G,EAAcH,QACT/3G,EAAK,8BADd,CARoC,IAanC,CAACA,EAAMk4G,IAEJC,GAAuB13G,EAAAA,EAAAA,KAAQ,IAC/Bu+E,GACKxuC,EAAAA,GAAAA,IAAuB,CAC5Bz0B,KAAMijE,EAAgB93E,MAAM6U,KAC5BkzE,SAAUjQ,EAAgB93E,MAAM+nF,SAChC4nB,sBAAuB73B,EAAgB83B,oBAGvCoB,GAAe/B,QAAU,UAAW+B,EAAc/B,QAC7C3lE,EAAAA,GAAAA,IAAuB,CAC5Bz0B,KAAMm8F,EAAc/B,OAAOjvG,MAAM6U,KACjCkzE,SAAUipB,EAAc/B,OAAOjvG,MAAM+nF,SACrC4nB,sBAAuBqB,EAAc/B,OAAOW,yBAJhD,GAQC,CAAC93B,EAAiBk5B,IAEfE,GAAkB33G,EAAAA,EAAAA,KAAQ,KAC9B,GAAKy3G,GAAe/B,OACpB,MAAI,mBAAoB+B,EAAc/B,OAAe+B,EAAc/B,OAAOK,eAAe50G,YAAzF,IAEC,CAACs2G,IAoBEG,GAAgB9yG,EAAAA,EAAAA,KAAY,KAChC,GAAK2yG,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,GACfpzG,EAAAA,GAAAA,GAACmzG,GAAe,CAACC,OAAQA,EAAQv3B,OAAQI,KAG3Cj8E,EAAAA,GAAAA,GAAC40G,GAAW,CAACxB,OAAQA,GAC9B,CAEA,OAAI+B,EAAcH,SACTh1G,EAAAA,GAAAA,GAACy0G,GAAc,CAAC54B,OAAQI,EAAkBy4B,iBAAkBS,EAAcH,QAAQN,wBAD3F,CAVoC,IAenC,CAACz4B,EAAiBk5B,IAErB,OACEr2G,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRe,MAAOA,EACPP,QAASyvG,EACT3tG,QAAM,EACNe,gBAAc,EAAAxH,SAAA,CAEbm2G,IA5CkBG,EA4CoBH,GA1CvCp1G,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOw2G,eAAev2G,UACpCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOy2G,QAAQx2G,SAAA,EAC7Be,EAAAA,GAAAA,GAAC01G,GAAAA,EAAG,CAACj5G,UAAWuC,GAAO68E,OAAQ13E,MAAOlH,EAAK,4BAC3C+C,EAAAA,GAAAA,GAAC01G,GAAAA,EAAG,CACFj5G,UAAWuC,GAAO68E,OAClBr/E,UAAQ,EACRm5G,WAAYN,EACZO,eAAa,EACbzxG,MAAOoxG,KAETv1G,EAAAA,GAAAA,GAAC01G,GAAAA,EAAG,CAACj5G,UAAWuC,GAAO68E,OAAQ13E,MAAOlH,EAAK,kCAiC9Cq4G,OA7CL,IAAuBC,M,gBChFzB,UAAgB,QAAU,WAAW,MAAQ,WAAW,iBAAmB,WAAW,aAAe,WAAW,YAAc,WAAW,QAAU,YCyGnJ,IAAej5G,EAAAA,EAAAA,KAhFSu5G,EAAGprE,YACzB,MAAM,iBAAEqrE,EAAgB,qBAAEC,EAAoB,iBAAEtxE,IAAqBp+B,EAAAA,EAAAA,MAC/D2vG,GAAkB/mG,EAAAA,EAAAA,MAElBhS,GAAOD,EAAAA,EAAAA,KAEPi5G,GAAYC,EAAAA,GAAAA,GAAYzrE,IACxB,KAAE0rE,EAAI,WAAEC,GAAe3rE,GAASwrE,GAAa,CAAC,GAC9C,MACJI,EAAK,YAAEC,EAAW,eAAEC,EAAc,kBAAEC,EAAiB,MAAE1uG,EAAK,gBAAE2uG,GAC5DL,GAAc,CAAC,EAEbr4E,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCwvG,OAGIW,GAAenwG,EAAAA,EAAAA,IAAgB,KACnCuvG,EAAiB,CAAEK,KAAMA,IAEzB1xE,EAAiB,CACft8B,QAAuBlL,EAAdq5G,EAAmB,sCAA8C,uCAG5Ev4E,OAGI44E,EAAgBL,EAAc,qBAAuB,YACrDM,EAAuBN,EAAc,sCACvC,oCAEEO,GAAan5G,EAAAA,EAAAA,KAAQ,KACzB,GAAK04G,EAEL,OAAOU,EAAAA,EAAAA,IAAwBV,KAC9B,CAACA,IAEEW,GAAer5G,EAAAA,EAAAA,KAAQ,KAC3B,IAAK64G,EACH,OAGF,MAAMrjG,GAAS89B,EAAAA,EAAAA,MACf,OAAOulE,EAAer3G,KAAKuD,IAAO6vC,EAAAA,EAAAA,KAAWp/B,EAAQzQ,KAAK+9B,OAAO1/B,WAChE,CAACy1G,IAIJ,OAFAl8B,EAAAA,GAAAA,GAAoB27B,GAAkBvrE,IAAUssE,IAG9Cj4G,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQtC,QAAQ2pC,GAChB3mC,iBAAkB9E,GAAOqY,QACzB3R,QAAM,EACN9B,QAASm6B,EACT7rB,QAASwkG,EAAaz3G,SAAA,CAErB43G,IAAc72G,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,QAAQqH,MAAOA,EAAOnB,KAAMkwG,EAAYG,WAAS,IAC5EH,IAAc72G,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC9vD,UAAWuC,GAAOmF,MAAOwC,KAAMkwG,IAC5DR,IAASr2G,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAOq3G,MAAMp3G,SAAEo3G,KACvCr2G,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAOi4G,iBAAiBh4G,SACnChC,EAAKq5G,EAAc,cAAgB,UAAWE,EAAmB,OAEnEO,IACC/2G,EAAAA,GAAAA,GAAA,OAAKmY,IAAK69F,EAAiBv5G,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO+3G,aAAc,gBAAgB93G,SACvF83G,EAAa73G,KAAKg4G,IACjBl3G,EAAAA,GAAAA,GAAC69D,GAAAA,EAAS,CAACphE,UAAWuC,GAAOk4G,YAAavwG,KAAMuwG,EAAal+F,MAAMizB,EAAAA,EAAAA,IAAgBirE,UAIzFp4G,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAe,iBAAkBC,GAAOsrE,SAASrrE,SAAA,EAC/De,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAAS45G,EAAaz3G,SACpEhC,EAAKw5G,EAAkBG,EAAuBD,MAEjD32G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAASihC,EAAY9+B,SACnEhC,EAAK,qB,uCClGhB,SAA0C,WAA1C,GAAmE,WCiLnE,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMikG,EAAwBjkG,EAAOk/B,WAAWglE,2BAEhD,MAAO,CACLD,2BALclkG,EAlJEokG,EAAG5sE,QAAO0sE,4BAC9B,MAAM,mBAAEG,IAAuBjxG,EAAAA,EAAAA,MAEzBkxG,GAActoG,EAAAA,EAAAA,MAEd7L,EAAStC,QAAQ2pC,GACjBkjE,GAAiBx/D,EAAAA,GAAAA,GAAiB1D,IAClC,UACJ+sE,EAAS,SAAEp5E,EAAQ,eAAEq5E,EAAc,YAAEC,GACnC/J,GAAkB,CAAC,EACjBgK,EAAwBH,EAExBI,GAAuBzpE,EAAAA,GAAAA,GAAiBwpE,GAExC56G,GAAUC,EAAAA,EAAAA,KAEV66G,GAAmBn6G,EAAAA,EAAAA,KAAQ,KAE7BoB,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,uCACbiD,EAAAA,GAAAA,GAAA,KAAAf,UAAI8B,EAAAA,GAAAA,GAAWhE,EAAQ,oCAAqC,CAAC,UAC7DiD,EAAAA,GAAAA,GAAA,KAAAf,UAAI8B,EAAAA,GAAAA,GAAWhE,EAAQ,oCAAqC,CAAC,UAC7DiD,EAAAA,GAAAA,GAAA,KAAAf,UAAI8B,EAAAA,GAAAA,GAAWhE,EAAQ,oCAAqC,CAAC,UAC7DiD,EAAAA,GAAAA,GAAA,KAAAf,UACEe,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CACPz8F,IAAKte,EAAQ,qCACbic,KAAMjc,EAAQ,0CAGlBiD,EAAAA,GAAAA,GAAA,KAAAf,UAAI8B,EAAAA,GAAAA,GAAWhE,EAAQ,oCAAqC,CAAC,aAGhE,CAACA,KAEE,kBACJy1E,EAAiB,kBAAEC,EAAiB,kBACpCC,EAAiB,uBAAEC,EAAsB,sBAAEC,IACzCC,EAAAA,GAAAA,GAAuB0kC,GAAcK,GAEnC75E,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClC+wG,IACA3kC,IACAC,OAGIq/B,GAAYv0G,EAAAA,EAAAA,KAAQ,KACxB,GAAK0F,EA2CL,MAAO,CACLG,QAzCAzE,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SAAElC,EAAQ,6BACtCiD,EAAAA,GAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,GAAAA,GAAeC,GDlF6E,YCkFvCC,SAChElC,EAAQ,qCAEXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLmX,IAAKo/F,EACL1gG,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACNnJ,UD1FiF,WC2FjFK,QAAS41E,EAAkBzzE,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cA6Bf+B,aAxBmB,CACnB,CAAC,OAAQtG,EAAQ,gCACfgE,EAAAA,GAAAA,GAAWhE,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,gBAAiBA,EAAQ,gCACxBgE,EAAAA,GAAAA,GAAWhE,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,YAAaA,EAAQ,gCACpBgE,EAAAA,GAAAA,GAAWhE,EAAQ,iCAAkCo6G,GAAwB,CAAC,sBAmBhF3zG,QAfA1E,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,UAAE8B,EAAAA,GAAAA,GAAWhE,EAAQ,+BAAgC,CAAC,uBAClF+B,EAAAA,GAAAA,IAAA,KAAGrC,UAAWuC,GAAmBC,SAAA,EAC9B8B,EAAAA,GAAAA,GAAWhE,EAAQ,kCAAmC,IAAK,CAAC,qBAC7DiD,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CACPz8F,IAAKte,EAAQ,cACbic,KAAMjc,EAAQ,6BAWrB,CAACqG,EAAQrG,EAAS21E,EAAmBykC,IAExC,OAAIS,GAEA94G,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACmD,GAAAA,EAAe,CACdC,OAAQA,EACRC,aAAc4uG,GAAW5uG,aACzBC,eAAe,UACfK,eAAa,EACbJ,OAAQ0uG,GAAW1uG,OACnBC,OAAQyuG,GAAWzuG,OACnBC,WAAY1G,EAAQ,+BACpB6G,QAASm6B,IAEV00C,GAAqBr0C,IACpBp+B,EAAAA,GAAAA,GAAC+3G,GAAAA,EAAoC,CACnC30G,OAAQovE,EACRgH,OAAQ/G,EACRulC,WAAYT,EACZn5E,SAAUA,EACVq5E,eAAgBA,EAChBD,UAAWA,EACXE,YAAaA,EACbO,iBAAe,EACfC,YAAan6E,EACbn6B,QAAS+uE,EACTthE,oBAAqBuhE,QAQ7B9zE,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACR3G,UDlKiB,WCmKjBqH,iBDnKiI,WCoKjIF,QAASm6B,EAAY9+B,SAAA,CAEpB44G,GACD73G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASihC,EAAY9+B,SAEpBlC,EAAQ,wCC3KjB,GAAwB,WCwGxB,IAAeT,EAAAA,EAAAA,KApF8B67G,EAC3C/0G,SACAQ,cAEA,MAAM7G,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEPk7G,GAAiB16G,EAAAA,EAAAA,KAAQ,KAC7B,MAAM+9E,EAAW1+E,EAAQ,aACzB,OAAOE,EACL,4BACA,CACE8uF,MACEjtF,EAAAA,GAAAA,IAACg5G,GAAAA,EAAQ,CAACz8F,IAAKte,EAAQ,2BAA4Bic,KAAMyiE,EAASx8E,SAAA,CAC/Dw8E,GACDz7E,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAIjB,CACE46C,WAAW,MAGd,CAACj/C,EAAMF,IAEJs7G,GAAoB36G,EAAAA,EAAAA,KAAQ,IACzBT,EACL,gCACAU,EACA,CACEu+C,WAAW,EACXo8D,mBAAoB,CAAE,MAAMt4G,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAAC3E,UDnD4B,WCmDD6E,KAAK,gBAGrE,CAACrE,IAEEg1G,GAAYv0G,EAAAA,EAAAA,KAAQ,KACxB,GAAK0F,EAsBL,MAAO,CACLG,QApBAvD,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SAAElC,EAAQ,kCAqBtCsG,aAlBmB,CACnB,CAAC,UAAWtG,EAAQ,uCAClBgE,EAAAA,GAAAA,GAAWhE,EAAQ,mCAAoC,CAAC,qBAC1D,CAAC,gBAAiBA,EAAQ,0CACxBgE,EAAAA,GAAAA,GAAWhE,EAAQ,iCAAkC,CAAC,qBACxD,CAAC,cAAeA,EAAQ,wCACtBgE,EAAAA,GAAAA,GAAWhE,EAAQ,oCAAqC,CAAC,sBAa3DyG,QATA1E,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SAAEo5G,KAC9Br4G,EAAAA,GAAAA,GAAA,KAAGvD,UD3EsC,WC2ERwC,SAAEm5G,UAStC,CAACh1G,EAAQrG,EAASs7G,EAAmBD,IAExC,GAAKnG,EAIL,OACEjyG,EAAAA,GAAAA,GAACmD,GAAAA,EAAe,CACdC,OAAQA,EACRC,aAAc4uG,EAAU5uG,aACxBC,eAAe,cACfK,eAAa,EACbJ,OAAQ0uG,EAAU1uG,OAClBC,OAAQyuG,EAAUzuG,OAClBC,WAAY1G,EAAQ,+BACpB6G,QAASA,O,gBCnGf,SAA4C,WCwF5C,IAAetH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACEqlG,eACEC,KAAMC,IAENvlG,EAEJ,MAAO,CACLulG,kBATcxlG,EA9DkBylG,EACpCjuE,QACAguE,mBAEA,MAAM,mCACJE,EAAkC,mCAAEC,EAAkC,wCAAEC,IACtExyG,EAAAA,EAAAA,MAEEjD,EAAStC,QAAQ2pC,GAEjBkjE,GAAiBx/D,EAAAA,GAAAA,GAAiB1D,GAElCxtC,GAAOC,EAAAA,GAAAA,MAEN47G,EAAoBC,IAAyBtnG,EAAAA,EAAAA,KAAS,GAEvD82B,GAAehiC,EAAAA,EAAAA,IAAiByyG,IAC/BrL,GACLkL,EAAwC,CACtCryG,OAAQmnG,EAAe3mG,OACvBiyG,gBAAiBD,OAIfE,GAAmB3yG,EAAAA,EAAAA,IAAgB,KACvCqyG,OAGI76E,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCoyG,OAGF,OACE34G,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACRqD,gBAAc,EACdtC,MAAOlH,EAAK,sBACZR,UD/DiB,WCgEjBqH,iBAAkB9E,GAClB4E,QAASm6B,EAAY9+B,UAErBe,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgB,gDAAgDC,UAC7Fe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,qBAAoBwC,UACjCe,EAAAA,GAAAA,GAACm5G,GAAAA,EAAY,CACXC,kBAAgB,EAChBxsD,YAAa3vD,EAAK,4BAClBmzD,MAAOu9C,GAAgB0L,UAAYp8G,EAAKq8G,YAAY3L,EAAe0L,UACnE3nG,YAAazU,EAAK,4BAClBs8G,WAAYL,EACZ3hF,UAAWo2E,GAAgBp2E,UAC3BihF,KAAMC,EACN92G,kBAAmBm3G,EACnBU,iBAAkBp2G,EAClBq2G,2BAA4BV,EAC5BpjD,SAAUptB,cChFtB,IAAgB,QAAU,WAAW,SAAW,YCkMhD,IAAejsC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM+/C,GAAc3gB,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,eACxCmtD,GAAY//C,EAAAA,EAAAA,KAA2BnxB,GAI7C,MAAO,CACL+/C,cACAoqC,WALiBnqF,EAAOu2F,sBAAuBtgB,EAAAA,EAAAA,KAAiBj2E,EAAQA,EAAOu2F,2BAAwB9rG,EAMvGymF,YACAlwC,iBANsBC,EAAAA,EAAAA,KAA0BjhC,MALlCD,EA3JsCymG,EACxDjvE,QACAwoB,cACAoqC,aACAjZ,YACAlwC,sBAEA,MAAM,4BACJylE,EAA2B,gCAC3BC,EAA+B,gBAC/BlM,EAAe,iBACfhpE,EAAgB,uBAChBm1E,IACExzG,EAAAA,EAAAA,MAEEjD,EAAStC,QAAQ2pC,GAEjB1tC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEPwvB,GAAezd,EAAAA,EAAAA,OAEd6qG,EAAoBC,IAAyBtoG,EAAAA,EAAAA,IAAiB,IAErElU,EAAAA,EAAAA,KAAU,MACJ6F,GAAWi6F,GAAY3d,UAAaxrC,GACtC2lE,MAED,CAACz2G,EAAQi6F,EAAYnpD,IAExB,MAAM05D,GAAqBlwG,EAAAA,EAAAA,KAAQ,KACjC,GAAKu1D,GAAgBoqC,GAAY3d,SACjC,MAAO,IACFzsB,EACH81B,YAAa,CACXvoF,KAAM,UACNyoF,WAAYoU,EAAW3d,SAASo6B,GAAoBr3G,OAGvD,CAACwwD,EAAaoqC,EAAYyc,IAEvBE,EAAa3c,GAAY3d,UAAU7gF,QACzCw5E,EAAAA,GAAAA,IACE,KACO2hC,GACLD,GAAuBE,IAAeA,EAAY,GAAKD,MAEzDA,EAjDa,UAiDWr8G,GAG1B,MAAMu8G,GAAmB3zG,EAAAA,EAAAA,IAAgB,KAErCvG,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPG,iBAAe,EACfzK,UAAWuC,GAAOm7G,SAClB1tB,cAAeztF,GAAOo7G,SACtBlM,SAAUN,MAKV5nE,GAAiBz/B,EAAAA,EAAAA,IAAgB,KAChCkkC,GAAOulB,KAAKvtD,KACjBk3G,IACIlvE,GAAOs6B,YACLqf,GACFspB,EAAgB,CACd3oC,UAAWt6B,EAAMs6B,UACjB/yC,MAAO,CACL81C,UAAW,gCACXC,UAAW,CACT9kB,OAAQ,cAId22D,EAAgC,CAAEhmD,MAAOnpB,EAAMulB,IAAIvtD,GAAIirE,WAAW,EAAM2sC,yBAAyB,MAEjG31E,IACAgpE,EAAgB,CACd3oC,UAAWt6B,EAAMs6B,UACjB/yC,MAAO,CACL81C,UAAW,gCACXC,UAAW,CACT9kB,OAAQ,sBAQdgwD,GAAiB1sG,EAAAA,EAAAA,IAAgB,KAChCkkC,GAAOulB,KAAKvtD,KACjBk3G,IACIlvE,GAAOs6B,WACT2oC,EAAgB,CACd3oC,UAAWt6B,EAAMs6B,UACjB/yC,MAAO,CACL81C,UAAW,gCACXC,UAAW,CACT9kB,OAAQ,gBAKZmhC,GACFw1B,EAAgC,CAAEhmD,MAAOnpB,EAAMulB,IAAIvtD,GAAIirE,WAAW,QAIhE4sC,GAAmB/zG,EAAAA,EAAAA,IAAgB,KACvC,GAAKkkC,GAAOulB,IACZ,OAAO/yD,EAAK,wBAAyB,CACnCqE,MAAM2qC,EAAAA,EAAAA,IAAgBxB,GAAOulB,MAC5B,CACD9T,WAAW,EACX6V,cAAc,OAIlB,OACEjzD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,WAAWsC,EAAAA,GAAAA,GAAe,WAC1B+E,iBAAkB9E,GAAOqY,QACzBjU,OAAQA,EACRQ,QAASqvG,EAAeh0G,SAAA,CAEvBi7G,KACDp7G,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACGq7G,KACDx7G,EAAAA,GAAAA,IAAA,OACErC,UAAU,sBACV0b,IAAKuU,EAAaztB,SAAA,EAElBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASkpC,EACTpgC,MAAM,UAAS3G,SAEdlC,EAAQ,kCAEXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASm2G,EAAeh0G,SAEvBhC,EAAK,yBC7BlB,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAGQ,CACL+/C,aAHkB3gB,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO+jB,kBAF9BhkB,EA7HmCsnG,EACrD9vE,QACAwoB,kBAEA,MAAM,yBACJunD,EAAwB,6BAAEC,EAA4B,gBAAE/M,IACtDrnG,EAAAA,EAAAA,MAEEjD,EAAStC,QAAQ2pC,GAEjB1tC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEPwvB,GAAezd,EAAAA,EAAAA,MAEf+2B,GAAiBz/B,EAAAA,EAAAA,IAAgB8V,UACrC,MAAMovD,QAAwBC,EAAAA,EAAAA,OACxB,YAAEtG,GAAgBqG,EACnBhhC,GAAOulB,KAAKvtD,KACjB+3G,IACI/vE,GAAOs6B,YACT01C,EAA6B,CAC3B7mD,MAAOnpB,EAAMulB,IAAIvtD,GACjB4iE,iBAAiB,IAEnBqoC,EAAgB,CACd3oC,UAAWt6B,EAAMs6B,UACjB/yC,MAAO,CACL81C,UAAW,qBACXC,UAAW,CACTiB,WAAW,EACX6C,SAAUzG,GAAayG,SACvBC,UAAW1G,GAAa0G,UACxBC,SAAU3G,GAAa2G,SACvBC,OAAQ5G,GAAa6G,QACrBC,MAAO9G,GAAa8G,MACpBC,oBAAqB/G,GAAagH,SAClCC,kBAAmBjH,GAAagH,kBAOpC6mC,GAAiB1sG,EAAAA,EAAAA,IAAgB,KAChCkkC,GAAOulB,KAAKvtD,KACjB+3G,IACI/vE,GAAOs6B,YACT01C,EAA6B,CAC3B7mD,MAAOnpB,EAAMulB,IAAIvtD,GACjB4iE,iBAAiB,IAEnBqoC,EAAgB,CACd3oC,UAAWt6B,EAAMs6B,UACjB/yC,MAAO,CACL81C,UAAW,qBACXC,UAAW,CACTiB,WAAW,WAOf0xC,GAAan0G,EAAAA,EAAAA,IAAgB,KACjC,GAAKkkC,GAAOulB,IACZ,OACElxD,EAAAA,GAAAA,IAAA,OAAKrC,UCnGe,WDmGWwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,QACLkG,KAAMssD,KAERjzD,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UCxGmB,cDyGrCuD,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,QACLkG,KAAM8jC,EAAMulB,YAMdsqD,GAAmB/zG,EAAAA,EAAAA,IAAgB,KACvC,GAAKkkC,GAAOulB,IACZ,OAAO/yD,EAAK,yBAA0B,CACpCqE,MAAM2qC,EAAAA,EAAAA,IAAgBxB,GAAOulB,MAC5B,CACD9T,WAAW,EACX6V,cAAc,OAIlB,OACEjzD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,WAAWsC,EAAAA,GAAAA,GAAe,WAC1BqE,OAAQA,EACRQ,QAASqvG,EAAeh0G,SAAA,CAEvBy7G,KACD57G,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACGq7G,KACDx7G,EAAAA,GAAAA,IAAA,OACErC,UAAU,sBACV0b,IAAKuU,EAAaztB,SAAA,EAElBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASkpC,EACTpgC,MAAM,UAAS3G,SAEdlC,EAAQ,kCAEXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASm2G,EAAeh0G,SAEvBhC,EAAK,yBErJlB,GAAwB,WC8JxB,IAAeX,EAAAA,EAAAA,KAnIOq+G,EACpBlwE,YAEA,MAAM,gBACJmwE,EAAe,mBAAEC,EAAkB,0BAAEC,IACnCz0G,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KACPoG,EAAStC,QAAQ2pC,GAEjBswE,GAAgB9rG,EAAAA,EAAAA,MAEhB+rG,GAAoBz0G,EAAAA,EAAAA,IAAgB,CAAC5B,EAAG5G,KAC5C,MAAM,OAAEiJ,EAAM,SAAEo3B,GAAaqM,EAC7BmwE,EAAgB,CAAEp0G,OAAQQ,EAAQo3B,WAAUrgC,eAGvCk9G,EAAkBC,IAAkBx9G,EAAAA,EAAAA,KAAQ,KACjD,IAAK+sC,EAAO,MAAO,MAAC9sC,EAAW,GAC/B,MAAMw9G,EAAe1wE,EAAM2wE,SAASv8G,OAAS,EAC7C,MAAO,CAAC4rC,EAAM2wE,SAASD,GAAeA,KACrC,CAAC1wE,IAEEslC,GAAkBxpE,EAAAA,EAAAA,IAAgB,KACjC20G,EAKLJ,IAJED,OAOEQ,GAAa39G,EAAAA,EAAAA,KAAQ,KACzB,IAAK+sC,EAAO,OACZ,MACMnU,EADWr5B,EAAK,uCACCu+E,MAAM,UAC7B,MAAO,CACLllD,EAAM,IACNt2B,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CACP9+F,KAAM/b,EAAK,sCACXoe,IAAKpe,EAAK,uBAEZq5B,EAAM,MAEP,CAACr5B,EAAMwtC,IAEJlnC,GAAS7F,EAAAA,EAAAA,KAAQ,KACrB,IAAK+sC,EACH,OAGF,MAAM6wE,EAAcx6G,QAAQm6G,GAAkB72G,UAE9C,OACEtF,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAwBwC,SAAA,EACrCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAKi+G,EAAiB,OAAS,SAC1Cp+G,QAASizE,EAAgB9wE,UAEzBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM45G,EAAiB,aAAe,aAE9Cp8G,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAe,cD1F2B,WC0FOu8G,GD1FiK,YC0F3Hr8G,SAAA,EACrGe,EAAAA,GAAAA,GAAA,MAAIvD,UD3FgM,WC2FxKwC,SAAEhC,EAAK,cAClCq+G,IACCt7G,EAAAA,GAAAA,GAAA,QAAMvD,UD7F8O,WC6FnNwC,SAAEg8G,EAAiB72G,mBAK3D,CAACnH,EAAMwtC,EAAOywE,EAAgBD,GAAkB72G,YAEnD7G,EAAAA,EAAAA,KAAU,KACR,IAAKktC,EAAO,OACZ,MAAMpI,EAAQx6B,SAASqC,cAA2B,IAAIqxG,GAAAA,SAA8Bv8G,MACpF,IAAKqjC,EAAO,OAEZ,MAAM3yB,EAAS2yB,EAAMuf,cACrB3lC,EAAAA,EAAAA,KAAgB,KACd8+F,EAAc3rG,QAASzD,MAAM+D,OAAS,GAAGA,EAtFzB,YAwFjB,CAAC+6B,IAEJ,MAAM+wE,GAAuBj1G,EAAAA,EAAAA,IAAgB,KAC3C,MAAM87B,EAAQx6B,SAASqC,cAA2B,IAAIuxG,GAAAA,SAA0Bz8G,OAEhF8vC,EAAAA,EAAAA,KAAe,KACb,MAAMp/B,EAAS2yB,EAAMuf,cACrB3lC,EAAAA,EAAAA,KAAgB,KACd8+F,EAAc3rG,QAASzD,MAAM+D,OAAS,GAAGA,EAhG3B,gBAqGpB,OACE1P,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACRqD,gBAAc,EACdhK,UD9HoC,WC+HpC8G,OAAQA,EACRK,QAASi3G,EAAmB57G,UAE5BH,EAAAA,GAAAA,IAACghC,GAAAA,GAAU,CACTx+B,KAAK,QACL7E,UDpIgR,WCqIhR0b,IAAK4iG,EACLh7E,UAAWm7E,EACXlhE,QAASwhE,EAAqBv8G,SAAA,EAE9BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,EAC3Be,EAAAA,GAAAA,GAAA,MAAIvD,UD1IoJ,WC0IrHwC,SAAEg8G,GAAkB92G,QACtD82G,GAAkBv+G,QAAQwC,KAAKnB,IAC9BiC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNC,cAAc,OACdl/G,UD/IgG,WCgJhGsgF,gBDhJ0H,WCiJ1H51E,SAAUpJ,EAAOA,OACjBjB,QAASk+G,EAAkB/7G,UAE3Be,EAAAA,GAAAA,GAAA,OAAKvD,UDpJuE,WCoJ1CwC,SAAElB,EAAOib,eAIjDhZ,EAAAA,GAAAA,GAAA,KAAGvD,UDxJgL,WCwJlJwC,SAAEo8G,Y,gBCxJ3C,SAAwB,WC0OxB,IAAe/+G,EAAAA,EAAAA,KA3MKs/G,EAClBnxE,YAEA,MAAM,eACJoxE,EAAc,YAAEt0D,EAAW,iBAAEu0D,EAAgB,wBAAEC,IAC7C11G,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KACPoG,EAAStC,QAAQ2pC,GAEjBswE,GAAgB9rG,EAAAA,EAAAA,OAEf+J,EAAMgjG,IAAWvqG,EAAAA,EAAAA,IAAS,IAE3BupG,GAAoBz0G,EAAAA,EAAAA,IAAgB,CAAC5B,EAAG5G,KAC5C,MAAM,WACJkZ,EAAU,QAAEglG,EAAO,OAAEz1G,EAAM,OAAEQ,GAC3ByjC,EACJ,GAAKxzB,EACL,OAAQglG,GACN,IAAK,UACHJ,EAAe,CAAE70G,OAAQA,EAASiQ,aAAYlZ,WAC9C,MACF,IAAK,QACHwpD,EAAY,CACV1hB,QAAS5uB,EAAW,GAAIzQ,OAAQA,EAASzI,gBAM1Ck9G,EAAkBC,IAAkBx9G,EAAAA,EAAAA,KAAQ,KACjD,IAAK+sC,EAAO,MAAO,MAAC9sC,EAAW,GAC/B,MAAMw9G,EAAe1wE,EAAM2wE,SAASv8G,OAAS,EAC7C,MAAO,CAAC4rC,GAAO2wE,SAASD,GAAeA,KACtC,CAAC1wE,IAEEslC,GAAkBxpE,EAAAA,EAAAA,IAAgB,KACtCw1G,OAGIj/C,GAAmBv2D,EAAAA,EAAAA,IAAgB,KACvCu1G,OAGIv4G,GAAS7F,EAAAA,EAAAA,KAAQ,KACrB,IAAK+sC,EACH,OAGF,MAAM6wE,EAAcx6G,QAAQm6G,GAAkB72G,UAE9C,OACEtF,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAwBwC,SAAA,CACpCi8G,GACCl7G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAK,QAChBH,QAASizE,EAAgB9wE,UAEzBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAGbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAK,SAChBH,QAASggE,EAAiB79D,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGfxC,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAe,cDzGgD,WCyGdu8G,GDzGgO,YCyG1Lr8G,SAAA,EACrGe,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GD1G8N,WC0GjMm8G,GD1GuN,YC0GpLj8G,SAC5Eg8G,GAAkBv+G,QACfO,EAAwB,UAAnBwtC,GAAOwxE,QAAsB,cAAgB,UAAYhB,GAAkB92G,QAErFm3G,IACCt7G,EAAAA,GAAAA,GAAA,QAAMvD,UD/G6S,WC+GlRwC,SAAEg8G,EAAiB72G,mBAK3D,CAACnH,EAAMwtC,EAAOywE,EAAgBD,GAAkBv+G,QAASu+G,GAAkB72G,SAAU62G,GAAkB92G,QAEpG+3G,GAAmB31G,EAAAA,EAAAA,IAAiB5B,IACxCq3G,EAAQr3G,EAAEqN,OAAOnL,WAGnBtJ,EAAAA,EAAAA,KAAU,KACR,IAAKktC,EAAO,OACZ,MAAMpI,EAAQx6B,SAASqC,cAA2B,IAAIqxG,GAAAA,SAA8Bv8G,MACpF,IAAKqjC,EAAO,OAEZ,MAAM3yB,EAAS2yB,EAAMuf,cACrB3lC,EAAAA,EAAAA,KAAgB,KACd8+F,EAAc3rG,QAASzD,MAAM+D,OAAS,GAAGA,WAE1C,CAAC+6B,IAEJ,MAAM+wE,GAAuBj1G,EAAAA,EAAAA,IAAgB,KAC3C,MAAM87B,EAAQx6B,SAASqC,cAA2B,IAAIuxG,GAAAA,SAA0Bz8G,OAEhF8vC,EAAAA,EAAAA,KAAe,KACb,MAAMp/B,EAAS2yB,EAAMuf,cACrB3lC,EAAAA,EAAAA,KAAgB,KACd8+F,EAAc3rG,QAASzD,MAAM+D,OAAS,GAAGA,EAlH3B,gBAuHdysG,GAAiC51G,EAAAA,EAAAA,IAAgB,KACrDy1G,EAAQ,IACRF,OAGIM,GAA2B71G,EAAAA,EAAAA,IAAgB,KAC/C,MAAM,WACJ0Q,EAAU,QAAEglG,EAAO,OAAEz1G,EAAM,OAAEQ,GAC3ByjC,EACJ,OAAQwxE,GACN,IAAK,UACHJ,EAAe,CACb70G,OAAQA,EAASiQ,aAAYlZ,OAAQk9G,GAAkBl9G,OAAQ2T,YAAasH,IAE9E,MACF,IAAK,QACHuuC,EAAY,CACV1hB,QAAS5uB,IAAa,GAAIzQ,OAAQA,EAASzI,OAAQk9G,GAAkBl9G,OAAQ2T,YAAasH,IAIhGmjG,OAGF,OACEn8G,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACRG,OAAQA,EACRK,QAASu4G,EACTr4G,iBD7KyD,WC8KzDrH,WAAWsC,EAAAA,GAAAA,GD9KyB,WC8KsB,UAAnB0rC,GAAOwxE,SAAuB,wBAAwBh9G,UAE7Fe,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAK,QACL7E,UDlL+U,WCmL/U0b,IAAK4iG,EACLh7E,UAAWm7E,EACXlhE,QAASwhE,EAAqBv8G,UAE9BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,CAC1Bg8G,GAAkBv+G,SACfsD,EAAAA,GAAAA,GAAA,MAAIvD,UDzLyL,WCyL1JwC,SAAEg8G,GAAkB92G,aAAcxG,EACxEs9G,GAAkBv+G,SAASwC,KAAKnB,IAC/BiC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNlqE,gBAAc,EACdmqE,cAAc,OACdl/G,UD/LyI,WCgMzIsgF,gBDhMmK,WCiMnK51E,SAAUpJ,EAAOA,OACjBjB,QAASk+G,EAAkB/7G,UAE3Be,EAAAA,GAAAA,GAAA,OAAKvD,UDpMgH,WCoMnFwC,SAAElB,EAAOib,WAG9CiiG,GAAkBl9G,QACjBe,EAAAA,GAAAA,IAAA,OAAKrC,UDxMyV,WCwMjUwC,SAAA,EAC3Be,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAew5G,OACvB57G,KAAM,IACNhE,UD5M0Y,WC6M1Y+0C,gBAAc,EACd2tD,aAAW,EACXn8F,QAAQ,KAEVhD,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACP75G,GAAG,SACHhG,UDnNkX,WCoNlXmK,MAAOq0G,EAAiBsB,WAAat/G,EAAK,0BAA4BA,EAAK,kBAC3EmV,SAAU8pG,EACVr1G,MAAOmS,EACP6lE,UA/LQ,IAgMR29B,oBAhMQ,IAgM+BxjG,EAAKna,QAAQ2nF,WACpDi2B,mBAAiB,KAEnBz8G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASs/G,EACTv2G,SAAWo1G,EAAiBsB,gBAA4B5+G,GAAdqb,EAAKna,OAAmBI,SAEjEhC,EAAK,wBAGRU,Y,4BCnOd,MC8KA,IAAerB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YACT,MAAM8yB,GAAQuD,EAAAA,EAAAA,KAAY5tD,IAExBwpG,UAAWC,EAAmB,aAC9BC,EACAC,WAAYC,EAAgB,gBAC5B92C,IACE+2C,EAAAA,EAAAA,KAAkB7pG,EAAQqqD,IAAU,CAAC,EAGzC,MAAO,CACLA,QACAo/C,sBACAC,eACAE,mBACA92C,kBACAhW,IARUvlB,GAAQ6H,EAAAA,EAAAA,KAAWp/B,EAAQu3B,GAAOmpB,YAASj2D,EASrDs5B,cAAe/jB,EAAO+jB,iBAlBRhkB,EAvIoC+pG,EACtDvyE,QACA8yB,QACAo/C,sBACAC,eACAE,mBACA92C,kBACAhW,UAEA,MAAM,gCACJitD,EAA+B,gBAAEvP,EAAe,8BAAEwP,IAChD72G,EAAAA,EAAAA,MACEpJ,GAAOC,EAAAA,GAAAA,KACPkG,EAAStC,QAAQ2pC,IAEjB,UAAEs6B,EAAS,QAAE58D,EAAO,MAAEyrD,GAAUnpB,GAAS,CAAC,EAE1C/d,GAAezd,EAAAA,EAAAA,MAEfkuG,GAAwBC,EAAAA,GAAAA,GAAoB7/C,EAAOu/C,GAEnDO,GAAkB92G,EAAAA,EAAAA,IAAgB,KAClCw+D,GAAanR,GAASzrD,IACxB+0G,EAA8B,CAC5Bn4C,YACA58D,YAEF80G,QAIEngD,GAAmBv2D,EAAAA,EAAAA,IAAgB,KACvC02G,IACIl4C,GACF2oC,EAAgB,CACd3oC,YACA/yC,MAAO,CACL81C,UAAW,0BACXC,UAAW,CAAE3X,MAAO,uBAMtB7sD,GAAS7F,EAAAA,EAAAA,KAAQ,KACrB,GAAK+sC,EAIL,OACE3rC,EAAAA,GAAAA,IAAA,OAAKrC,UDzFoG,WCyF3EwC,SAAA,EAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAK,SAChBH,QAASggE,EAAiB79D,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GAAe,cDnG8B,YCmGIE,SAC7DhC,EAAK,0BAIX,CAACA,EAAMwtC,IAEJ6yE,GAAe5/G,EAAAA,EAAAA,KAAQ,KAC3B,GAAKk2D,GAAUzrD,GAAY48D,EAC3B,OAAOw4C,EAAAA,EAAAA,IAAiC3pD,EAAOzrD,KAC9C,CAACyrD,EAAOzrD,EAAS48D,IAEdy4C,GAAcz+G,EAAAA,GAAAA,GD/GkK,WAAkF,WCkHtQ+9G,GDlH+M,WCmH/M92C,GDnH0O,WCoH1O82C,GAAoBH,GDpHuQ,YCuH7R,OACE79G,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJu2E,UAAW5tD,EACXtpB,OAAQA,EACRG,OAAQA,EACRK,QAASk5D,EACTrgE,UD7HiB,WC8HjBqH,iBD9HsC,WC8HL7E,SAAA,EAEjCH,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GDjI2H,WCiIlF,eAEpD0+G,OAAK,EACL9xG,OAAOs1C,EAAAA,GAAAA,GACL,oBAAoB27D,IACpB52C,GAAmB,6BAA6BA,KAChD/mE,SAAA,EAEFe,EAAAA,GAAAA,GAAA,OACEvD,UAAW+gH,EACX7xG,MAAOwxG,EAAwB,wBAAwBA,SAA0Bx/G,IAElF2/G,IACCt9G,EAAAA,GAAAA,GAAC09G,GAAAA,EAAO,CAENv1G,QAASm1G,EACTxpG,SAAUupC,EAAAA,GACVzoC,gBAAgB,SAChB+oG,YAAU,EACVC,WAAS,EACTC,gBAAiB,EACjBC,aAAa,EACbC,gBAAc,EACdC,eAAa,EACbC,cAAc,EACdC,wBAAwB,EACxBC,uBAAuB,GAZlBvqD,OAgBX90D,EAAAA,GAAAA,IAAA,OAAKrC,UD/JgF,WC+JpDwC,SAAA,EAC/Be,EAAAA,GAAAA,GAAA,KAAGvD,UDhKqJ,WCgK9HwC,SACvBhC,EAAK,yBAA0B,CAAEo1C,MAAMpG,EAAAA,EAAAA,IAAgB+jB,QAE1DhwD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASugH,EAAgBp+G,SAExBhC,EAAK,oC,4BC9HhB,MAkIA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMG,GAAWC,EAAAA,EAAAA,KAAeJ,IAC1B,kCAAEkgC,GAAsC//B,EAG9C,MAAO,CACL+/B,oCACAgrE,aAJmBlrG,EAAOlV,OAAOqgH,QAAQz9G,QAAU,EAKnD09G,wBAJ8Bx9G,QAAQuS,EAASkrG,sBALjCtrG,EAlIyCurG,EAC3D/zE,QAAO2I,oCAAmCkrE,0BAAyBF,mBAEnE,MAAM,+BACJK,EAA8B,oBAC9BC,EAAmB,gBACnBhR,EAAe,iBACfjpE,EAAgB,wCAChBk6E,IACEt4G,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KACPoG,EAAStC,QAAQ2pC,IAEhB/B,EAASsmB,EAAaC,IAAiB3xD,EAAAA,EAAAA,MAE9CC,EAAAA,EAAAA,KAAU,KACJ6F,GACF4rD,MAED,CAAC5rD,EAAQ4rD,IAEZ,MAAM,QACJ7mD,EAAO,OAAEq4B,EAAM,UAAEukC,EAAS,gBAAE65C,GAC1Bn0E,GAAS,CAAC,GAER,oBACJo0E,GACED,GAAmB,CAAC,GAGtBE,mBAAoBC,EACpBC,cAAeC,EACfC,kBAAmBC,EACnBC,eAAgBC,EAChBC,uBAAwBC,IACtBC,EAAAA,GAAAA,GAA2BX,GAAuB,EAAGP,EAAyBF,GAE5ErgF,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCk4G,IACI15C,GACF2oC,EAAgB,CACd3oC,YACA/yC,MAAO,CACL81C,UAAW,0BACXC,UAAW,CAAE3X,MAAO,uBAMtBqvD,GAAal5G,EAAAA,EAAAA,IAAgB,CAAC9D,EAAYqR,KAC9C,GAAI3L,GAAW48D,EAAW,CACxB,MAAM7xD,GAAS89B,EAAAA,EAAAA,MACTrqC,GAAOywB,EAAAA,EAAAA,KAAWlkB,EAAQzQ,GAChCi8G,EAAoB,CAClB13G,OAAQvE,EACRqR,SAAUA,GAAYupC,EAAAA,GACtB56C,GAAI0F,EAAQjK,OAAOuE,GACnB01E,QAAShwE,EAAQjK,OAAOi6E,UAErB0mC,GACHp6E,EAAiB,CACft8B,QAASlL,EAAK,kBAAkB25B,EAAAA,GAAAA,IAAa35B,EAAM0J,MAGvD+mG,EAAgB,CACd3oC,YACA/yC,MAAO,CACL81C,UAAW,2BAGf22C,IACAE,EAAwC,CAAEljG,UAAM9d,GAClD,KAGIuxD,GAAwB3oD,EAAAA,EAAAA,IAAgB,CAAC9D,EAAYqR,KACzD6qG,EAAwC,CAAEljG,KAAM,CAAEjV,OAAQ/D,EAAIqR,iBAG1D4rG,GAAoCn5G,EAAAA,EAAAA,IAAgB,KACpDq4G,GACFW,EAAoCE,EAAYb,EAAgBp4G,OAAQo4G,EAAgB9qG,aAItF6rG,GAAyCp5G,EAAAA,EAAAA,IAAgB,KAC7Dw4G,IACAJ,EAAwC,CAAEljG,UAAM9d,QAGlDJ,EAAAA,EAAAA,KAAU,KACJqhH,GACFc,MAED,CAACd,IAEJ,MAAM1rG,GAAS89B,EAAAA,EAAAA,MACTrqC,EAAOi4G,GAAkBxnF,EAAAA,EAAAA,KAAWlkB,EAAQ0rG,EAAgBp4G,aAAU7I,EACtEiiH,EAAWj5G,GAAOiwB,EAAAA,GAAAA,IAAa35B,EAAM0J,QAAQhJ,EAEnD,GAAKyF,GAAWslC,EAIhB,OACE5pC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC0tD,GAAe,CACdtqD,OAAQA,EACR+lD,kBAAmBlsD,EAAK,UACxBujC,OAAQA,EACRotB,kBAAmBsB,EACnBtrD,QAASm6B,EACT1sB,oBAAqB49C,EACrB9oD,oBAAkB,KAEpBnG,EAAAA,GAAAA,GAAC6/G,GAAAA,EAA2B,CAC1Bz8G,OAAQgwC,EACRxvC,QAAS+7G,EACTG,SAAUF,EACVG,oBAAqBlB,GAAuB,EAC5CmB,cAAe,EACfd,kBAAmBC,EACnBC,eAAgBC,EAChBr5E,eAAgBi5E,WChKlBgB,GAAsD,CAC1D,aACA,YACA,aACA,aACA,kBACA,aACA,aACA,WACA,eACA,YAEIC,GAAgD,IAAID,GAAmB,aAE9D,SAASE,GAAqBC,GAC3C,MAAOC,EAAaC,IAAkB7uG,EAAAA,EAAAA,IAA8B,CAAC,IAC9D8uG,EAAuBC,IAA4B/uG,EAAAA,EAAAA,KAAS,IAC5D8lB,EAAWkpF,IAAgBhvG,EAAAA,EAAAA,KAAS,IAE3ClU,EAAAA,EAAAA,KAAU,KACR+iH,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,GACzBhwG,YAAW,KACTiwG,GAAa,KAxB0B,OA0BxC,CAACL,IAEJ,MAAMM,GAAyBl+G,EAAAA,EAAAA,KAAamC,IAC1C,MAAQrD,KAAMq/G,GAAeh8G,EAAEqN,OAEzB1Q,EAAOq/G,EAEb,SAASC,EAA0B/5G,GACjC,OAAOA,QAAQlJ,CACjB,CAEA,MAAMkjH,EAAiBR,EAEvB,IAAIS,EAAsC,IACrCD,EACH,CAACv/G,GAAOs/G,EAA0BC,EAAev/G,OACpC,iBAATA,GAA2B,CAC7By/G,SAAUH,EAA0BC,EAAev/G,MAIvD,MAAM0/G,EAAaA,KACjB,MAAMC,EAAmBhB,GAAkB/gH,KAAK0pB,GAAQk4F,EAAel4F,KACnEq4F,EAAiBhW,MAAMiW,IAAOA,IAChCJ,EAAiB,IACZA,EACHK,eAAWxjH,GAEJsjH,EAAiBjR,MAAMlvG,WAChCggH,EAAiB,IACZA,EACHK,WAAW,KAKJ,cAAT7/G,EACF0/G,IAEAF,EAAiB,IACZA,KACCb,GAAkBpiH,QAAO,CAACqtD,EAAKtiC,IACjC+3B,OAAOygE,OAAOl2D,EAAK,CAAE,CAACtiC,GAAMk4F,EAAeK,aAC1C,CAAC,IAKK,eAAT7/G,IAA0Bw/G,EAAeO,YAAcP,EAAeQ,YACxER,EAAiB,IACZA,EACHO,YAAY,IAIH,cAAT//G,IAAyBw/G,EAAeO,YAAcP,EAAeQ,YACvER,EAAiB,IACZA,EACHQ,eAAW3jH,IAIF,cAAT2D,GACF0/G,IAGF,MAAMO,EAAerB,GAAoBlQ,OAAOpnF,GAAQk4F,EAAel4F,KACvEk4F,EAAiB,IACZA,EACHS,eAAcA,QAAsB5jH,GAGtC2iH,EAAeQ,GAEfN,GAA0BJ,GAAsBz/D,OAAO0K,KAAKy1D,GAAgB7V,MAAM75E,IAChF,MAAMxI,EAAMwI,EACZ,OAAOtwB,QAAQs/G,EAAmBx3F,MAAU9nB,QAAQggH,EAAel4F,UAEpE,CAACw3F,EAAoBC,IAElBmB,GAAmBh/G,EAAAA,EAAAA,KAAY,KACnC89G,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,KACxB,CAACJ,IAEJ,MAAO,CACLC,cACA9oF,YACAgpF,wBACAG,yBACAD,eACAe,mBAEJ,CCtFA,MAAMC,GAAmD,CACvD,aAAc,aAAc,eAC5B,aAAc,WAAY,aAAc,kBAAmB,aAAc,aAsP3E,IAAenlH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,EAAO1M,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,QAAUrJ,EAC7C+jH,EAAWhuG,IAAQu6C,EAAAA,EAAAA,KAAmB/6C,EAAQQ,EAAKjR,IAGzD,MAAO,CACLiR,OACAiuG,cAJoB7gH,QAAQ4gH,GAAUE,iBAJxB3uG,EAnPsC4uG,EACxDnuG,OACAouG,sBACAC,yBACAJ,gBACAtB,cACAK,yBACAjkH,YACAulH,mBACAC,oBACAC,eACAC,uBACAC,sBAEA,MAAM,iBACJ39E,IACEp+B,EAAAA,EAAAA,OAEE,QAAEqlD,GAAYh4C,GAAQ,CAAC,EAEvBzW,GAAOD,EAAAA,EAAAA,KAEP4zC,GAAWlzC,EAAAA,EAAAA,KAAQ,IAAMgW,IAAQo9E,EAAAA,EAAAA,IAAap9E,IAAO,CAACA,IACtD2uG,EAAwCV,GAAiB/wE,EAEzD0xE,GAA0B5kH,EAAAA,EAAAA,KAAQ,IAC/B+jH,GAAkB5jH,QAAO,CAACs4B,EAAOvN,KACjCy3F,EAAYz3F,KACfuN,GAAS,GAEJA,IACN,IACF,CAACkqF,IAEEkC,GAA0Bh8G,EAAAA,EAAAA,IAAiB5B,KAC/C8E,EAAAA,EAAAA,GAAU9E,GACVo9G,GAAwBD,MAGpBU,GAAsBj8G,EAAAA,EAAAA,IAAgB,KAC1Ck+B,EAAiB,CAAEt8B,QAASlL,EAAK,0CAGnC,OACE6B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,YACLgqC,SAAU+0E,EAAYiB,UACtB16G,MAAO3J,EAAK,wBACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,kBAG3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,YACLgqC,SAAU+0E,EAAYc,UACtBv6G,MAAO3J,EAAK,6BACZylH,UAAW,GAAGJ,KAA2Bb,GAAkB5iH,SAC3D4jH,UAAQ,EACRL,gBAAiBA,EACjBO,UAAWb,EAAsB,KAAO,OACxC1vG,SAAUsuG,EACVkC,aAAcL,EACd18G,SAAUs8G,GAAwBA,EAAqB,kBAG3DniH,EAAAA,GAAAA,GAAA,OAAKvD,UAAWwlH,EAAkBhjH,UAChCH,EAAAA,GAAAA,IAAA,OACErC,UAAWA,EAAUwC,SAAA,EAErBe,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAYwC,WACtBj8G,MAAO3J,EAAK,8BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,mBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAYyC,WACtBl8G,MAAO3J,EAAK,8BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,mBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,eACLgqC,SAAU+0E,EAAY0C,eAAiB1C,EAAYU,SACnDn6G,MAAO3J,EAAK,gCACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,qBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAY2C,WACtBp8G,MAAO3J,EAAK,6BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,mBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,WACLgqC,SAAU+0E,EAAY4C,SACtBr8G,MAAO3J,EAAK,6BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,iBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAY6C,WACtBt8G,MAAO3J,EAAK,8BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,mBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,kBACLgqC,SAAU+0E,EAAY8C,gBACtBv8G,MAAO3J,EAAK,6BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,wBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAYgB,WACtBz6G,MAAO3J,EAAK,8BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,mBAI3DniH,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,YACLgqC,SAAU+0E,EAAY+C,UACtBx8G,MAAO3J,EAAK,6BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,uBAK/DrjH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWulH,EAAiB/iH,SAAA,EAC/Be,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,SAAU+0E,EAAYgD,YACtBz8G,MAAO3J,EAAK,+BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,oBAG3DniH,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBACtDplH,QAASulH,EAAwCG,OAAsB7kH,EAAUsB,UAEjFe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,SAAU+0E,EAAYiD,YACtB18G,MAAO3J,EAAK,+BACZ4I,SAAUs8G,EAAuBA,EAAqB,eAClDE,EACJI,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,OAGd1gH,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBACtDplH,QAASulH,EAAwCG,OAAsB7kH,EAAUsB,UAEjFe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,SAAU+0E,EAAYkD,WACtB38G,MAAO3J,EAAK,8BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBv8G,SAAUs8G,EAAuBA,EAAqB,cAClDE,EACJjwG,SAAUsuG,MAGbh1D,IACC1rD,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,WAAYmjH,GAAgB,iBAAiBjjH,UAC1Ee,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,eACLgqC,SAAU+0E,EAAYmD,aACtB58G,MAAO3J,EAAK,0BACZwlH,UAAQ,EACRL,gBAAiBA,EACjBhwG,SAAUsuG,EACV76G,SAAUs8G,GAAwBA,EAAqB,8B,gBCpRrE,SAAqI,WAArI,GAAuL,WCgevL,IAAe7lH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,mBACJuwG,IACEnwG,EAAAA,EAAAA,KAAeJ,GACb+D,EAAawsG,GAAoBxsG,WACjCjQ,EAASy8G,GAAoBz8G,QAC7B,gBAAE08G,IAAoBC,EAAAA,EAAAA,KAAgCzwG,EAAQ+D,GAC9DvD,EAAO1M,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,QAAUrJ,EAC7CqwD,EAAet6C,IAAQu6C,EAAAA,EAAAA,KAAmB/6C,EAAQQ,EAAKjR,IACvDm/G,EAAe5zD,GAAc4zD,aAC7BrrF,EAAYz1B,QAAQ4S,KAAS8iB,EAAAA,EAAAA,IAAc9iB,GAC3CkwG,EAAe9iH,QAAQ4S,KAAS+8E,EAAAA,EAAAA,IAAiB/8E,GACjDwD,EAAausG,GAAoBvsG,WACjC5R,EAAYm+G,GAAoBn+G,UAChCu+G,EAAcnwG,IAAQV,EAAAA,EAAAA,IAASU,EAAKjR,KACtC4sD,EAAAA,EAAAA,KAAuB/c,EAAAA,EAAAA,KAAWp/B,GAAQ4wG,EAAAA,EAAAA,IAAqBpwG,UAC/D/V,EACEomH,EAAUjjH,QAAQ4S,KAASswG,EAAAA,EAAAA,IAAYtwG,EAAKjR,MAAOwhH,EAAAA,EAAAA,KAAU/wG,EAAQQ,EAAKjR,KAC1E+uF,EAAmBxjC,GAAcwjC,iBACjC0yB,EAAcxwG,IAAQywG,EAAAA,EAAAA,IAAiBzwG,EAAM,YAC7C0wG,EAAY1wG,GAAM0wG,UAClBC,EAAgB3wG,GAAO4wG,EAAAA,EAAAA,KAAoBpxG,EAAQQ,QAAQ/V,EAC3D4mH,EAAgC7wG,IAAQ8wG,EAAAA,EAAAA,IAAiB9wG,KAAUgwG,GAAoBW,EACvFI,EAAmB/wG,KAAS+8E,EAAAA,EAAAA,IAAiB/8E,IAAS6iB,GAE5D,MAAO,CACL7iB,OACA6iB,YACAqtF,eACA3sG,aACAggB,cAAe/jB,EAAO+jB,cACtBysF,iBAAkBxsG,GAAcwsG,EAChCG,cACAU,+BACAE,mBACAjzB,mBACAuyB,UACAG,cACAtC,eACA1qG,aACAktG,YACA9+G,eA1Cc2N,EAlZkCyxG,EACpDthH,SACAsQ,OACA6iB,YACAqtF,eACA1sG,aACA+f,gBACAhgB,aACAmtG,YACAV,kBACAG,cACAU,+BACAE,mBACAn/G,YACAy+G,UACAvyB,mBACA0yB,cACAtC,mBAEA,MAAM,wBACJ+C,EAAuB,eACvBC,EAAc,kBACdC,EAAiB,iBACjBC,EAAgB,wBAChBC,EAAuB,sBACvBC,EAAqB,6BACrBC,EAA4B,yBAC5BC,IACE7+G,EAAAA,EAAAA,MAEEyvD,GAAa58B,EAAAA,EAAAA,GAAsB91B,GAEnCrG,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEP,YACJmjH,EAAW,sBAAEE,EAAqB,uBAAEG,EAAsB,iBAAEc,GAC1DrB,GAAqBzsG,GAAMyxG,sBAExBC,EAAoBC,IAAyB5zG,EAAAA,EAAAA,IAAmB,KAChE6zG,EAAcC,IAAmB9zG,EAAAA,EAAAA,IAAmB,KACpD+zG,EAAqBC,IAA0Bh0G,EAAAA,EAAAA,IAAmB,KAClEqwG,EAAqBC,IAA0BtwG,EAAAA,EAAAA,KAAS,IACxDi0G,EAA4BC,IAAiCl0G,EAAAA,EAAAA,KAAS,IACtEm0G,EAAoBC,IAAyBp0G,EAAAA,EAAAA,KAAS,GAEvDq0G,GAAWpoH,EAAAA,EAAAA,KAAQ,KACvB,GAAI64B,IAActf,IAAevD,EAC/B,OAAOszB,GAAAA,EAET,MAAM9zB,GAAS89B,EAAAA,EAAAA,MACT+0E,GAAcC,EAAAA,EAAAA,KAA+B9yG,EAAQQ,EAAKjR,GAAIwU,GACpE,OAAO8uG,GAAcr/E,EAAAA,GAAAA,IAAOq/E,GACzBvlF,QAAQ75B,GAASA,GAAMlE,KAAOiR,GAAMjR,IAAMkE,GAAMlE,KAAOm/G,IAAgB56E,GAAAA,IACzE,CAACtzB,EAAM6iB,EAAWqrF,EAAc3qG,IAE7BgvG,IAAmC1/G,EAAAA,EAAAA,IAAgB,IAChDu/G,EAAS5mH,KAAKgnH,IACZ,CACLr/G,MAAOq/G,EAAOzjH,GACdmE,OAAOgwB,EAAAA,GAAAA,IAAa35B,EAAMipH,IAAW,GACrC9gF,aAAaplC,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,QAAQkG,KAAMu/G,UAKxCC,IAAsBzoH,EAAAA,EAAAA,KAAQ,IAC3BooH,EAAStlF,QAAQ75B,GAASA,EAAKlE,KAAOm/G,GAAgBj7G,EAAKlE,KAAOw0B,KACxE,CAAC6uF,EAAU7uF,EAAe2qF,IAEvBwE,IAAuB1oH,EAAAA,EAAAA,KAAQ,IAC5BooH,EAAStlF,QAAQ75B,GAASA,EAAKlE,KAAOw0B,GAAiBtwB,EAAKlE,KAAOm/G,KACzE,CAACkE,EAAU7uF,EAAe2qF,IAEvByE,IAAgB3oH,EAAAA,EAAAA,KAAQ,KAC5B,MAAM4oH,EAAsBR,EAAS7a,MAAMtkG,GAASA,EAAKlE,KAAOw0B,IAGhE,OAF2BitF,GAAeoC,EAGjCt/E,GAAAA,EAGF8+E,EAAStlF,QAAQ75B,IACtB,MAAM4/G,EAAU/0B,IAAmB7qF,EAAKlE,IACxC,OAAO2hH,IAAcmC,OAEtB,CAACT,EAAU1B,EAAWntF,EAAeitF,EAAa1yB,IAM/Cg1B,IAJ8B9oH,EAAAA,EAAAA,KAAQ,IACnCoD,QAAQqlH,GAAoBtnH,QAAUunH,GAAqBvnH,QAAUwnH,GAAcxnH,SACzF,CAACsnH,GAAqBC,GAAsBC,OAGzC3C,IAAoBxsG,GAAc0sG,EAElC6C,IAAY/oH,EAAAA,EAAAA,KAAQ,KACnBooH,GAAY5uG,EAAmB,CAAC,GAC9BwvG,EAAAA,GAAAA,IAA0BZ,GAAWn/G,GAAS,CAACA,EAAKlE,IAAIm0B,EAAAA,GAAAA,IAAa35B,EAAM0J,OACjF,CAACuQ,EAAYja,EAAM6oH,IAEhBa,IAAqCjpH,EAAAA,EAAAA,KAAQ,IAC1C,CACL,CACEmJ,MAAOoQ,GAAc6uG,EAASjnH,QAAU,EAAI,OAASinH,IAAW,IAAIrjH,GACpEmE,MAAO7J,EAAQ,mBACf6pH,cAAe3vG,GAAc6uG,EAASjnH,QAAU,EAAI,IAC/ConH,KAAmCzlF,QAAQ/gC,GAAQA,EAAIoH,QAAU+6G,GAC/DniH,EAAIoH,QAAUowB,UACjBt5B,KAGP,CAACsZ,EAAY6uG,EAAU/oH,EAAS6kH,EAAc3qF,IAE3C4vF,IAAuCnpH,EAAAA,EAAAA,KAAQ,IAC5C,CACL,CACEmJ,MAAOoQ,GAAc6uG,EAASjnH,QAAU,EAAI,aAAeinH,IAAW,IAAIrjH,GAC1EmE,MAAOqQ,GAAc6uG,EAASjnH,QAAU,EACpC9B,EAAQ,sBACRA,EAAQ,gBAAiB4jD,OAAOsK,OAAOw7D,IAAW,IACtDG,cAAe3vG,GAAc6uG,EAASjnH,QAAU,EAAI,IAC/ConH,KAAmCzlF,QAAQ/gC,GAAQA,EAAIoH,QAAU+6G,GAC/DniH,EAAIoH,QAAUowB,UACjBt5B,KAGP,CAACsZ,EAAY6uG,EAAU/oH,EAAS0pH,GAAW7E,EAAc3qF,IAEtD6vF,IAAoCppH,EAAAA,EAAAA,KAAQ,IACzC,CACL,CACEmJ,MAAOoQ,GAAc6uG,EAASjnH,QAAU,EAAI,MAAQinH,IAAW,IAAIrjH,GACnEmE,MAAOqQ,GAAc6uG,EAASjnH,QAAU,EACN9B,EAA7B2oH,EAAqC,sBAAiC,kBACtEA,EAA6B3oH,EAAQ,sBACpCA,EAAQ,YAAa4jD,OAAOsK,OAAOw7D,IAAW,IACpDG,cAAe3vG,GAAc6uG,EAASjnH,QAAU,EAAI,IAC/ConH,WACDtoH,KAGP,CAAC+nH,EAA4B3oH,EAASka,EAAY6uG,EAAUW,KAEzDM,IAA0BxgH,EAAAA,EAAAA,IAAgB,KAC9Co/G,GAA+BzmD,IAAUA,OAGrC8nD,IAA0BzgH,EAAAA,EAAAA,IAAgB,CAACy4C,EAAmBioE,KAClE,IAAKvzG,EAAM,OAAOszB,GAAAA,EAClB,MAAM9zB,GAAS89B,EAAAA,EAAAA,MACf,OAAOi2E,EAAsBzmF,QAAQ0mF,IACnC,MAAM36E,GAAS46E,EAAAA,EAAAA,KAAwBj0G,EAAQQ,EAAKjR,GAAIykH,GACxD,OAAO36E,GAAUyS,EAAQjsB,SAASwZ,EAAO9pC,UAIvC2kH,IAAmB7gH,EAAAA,EAAAA,IAAiB8gH,IACxC1mE,OAAOC,QAAQymE,GAAiBhpH,SAAQ,EAAEqiC,EAAQ4mF,MAC5CA,EAAczoH,QAChBgmH,EAAkB,CAChB0C,cAAe7mF,EACf15B,OAAQ0M,EAAMjR,GACdwU,WAAYqwG,UAMdE,IAAuBjhH,EAAAA,EAAAA,IAAiBkhH,IAC5C7C,EAAe,CAAE3tG,WAAYwwG,EAAuB7B,oBAAoB,OAGpE8B,IAA8BnhH,EAAAA,EAAAA,IAAiBohH,IAC9Cj0G,GACLi0G,EAAWtpH,SAASmI,IAClB0+G,EAAyB,CAAE1+G,SAAQQ,OAAQ0M,EAAKjR,WAI9CmlH,IAAqBrhH,EAAAA,EAAAA,IAAiBshH,IAC1CA,EAAmBxpH,SAASqiC,IAC1BokF,EAAiB,CAAE99G,OAAQ0M,EAAMjR,GAAIi+B,iBAInConF,IAAqCvhH,EAAAA,EAAAA,IAAiBshH,IAC1DA,EAAmBxpH,SAASqiC,IAC1BukF,EAA6B,CAC3Bj+G,OAAQ0M,EAAMjR,GACdi+B,SACAqnF,aAAc1H,UAKd2H,IAA0BzhH,EAAAA,EAAAA,IAAgB,KAC9C,GAAKmN,GAASuD,EAAd,CAGA,GADA3R,MACI4R,EACF6tG,EAAwB,CAAE9tG,oBACrB,GAAIuvG,GAAkB,CAC3B,GAAIhB,EAAqB,CACvB,MAAMtyG,GAAS89B,EAAAA,EAAAA,MACT22E,EAAanC,EAAoBhlF,QAAQziC,IAAY0qB,OAAOw/F,MAAMx/F,OAAO1qB,MACzEizD,EAAc/5C,EAAWpZ,QAAiC,CAACqtD,EAAKg8D,KACpE,MAAMvgH,GAAOwgH,EAAAA,EAAAA,KAAwBj0G,EAAQQ,EAAKjR,GAAIykH,GAOtD,OANIvgH,GAAQghH,EAAW50F,SAASpsB,EAAKlE,MAC9ByoD,EAAIvkD,EAAKlE,MACZyoD,EAAIvkD,EAAKlE,IAAM,IAEjByoD,EAAIvkD,EAAKlE,IAAIjE,KAAKiqB,OAAOy+F,KAEpBh8D,IACN,CAAC,GAEJk8D,GAAiBp2D,EACnB,CAEA,GAAIo0D,EAAoB,CACtB,MAAMuC,EAAavC,EAAmB5kF,QAAQziC,IAAY0qB,OAAOw/F,MAAMx/F,OAAO1qB,MAC9E2pH,GAA4BC,EAC9B,CAEA,GAAIrC,IAAiB/E,EAAuB,CAC1C,MAAMoH,EAAarC,EAAa9kF,QAAQziC,IAAY0qB,OAAOw/F,MAAMx/F,OAAO1qB,MACxE6pH,GAAmBD,GACnB,MAAMF,EAAwBT,GAAwBW,EAAY1wG,GAClEuwG,GAAqBC,EACvB,CAEA,GAAInC,GAAgB/E,EAAuB,CACzC,MAAMoH,EAAarC,EAAa9kF,QAAQziC,IAAY0qB,OAAOw/F,MAAMx/F,OAAO1qB,MACxE+pH,GAAmCH,EACrC,CAEKnC,GAAwBJ,GAAuBE,GAClDV,EAAe,CAAE3tG,aAAY2uG,sBAEjC,MACEhB,EAAe,CAAE3tG,aAAY2uG,uBAG/BjB,IACAK,GAhDgC,KAmD5B/R,IAAiB1sG,EAAAA,EAAAA,IAAgB,KACrCo+G,OAuFF,OApFApnH,EAAAA,EAAAA,KAAU,MACH6F,GAAU0yD,IACb2vD,EAAuB,IACvBJ,EAAsB,IACtBE,EAAgB,IAChBM,GAAsB,GACtB9D,GAAuB,GACvB4D,GAA8B,GAC9BnE,OAED,CAACp+G,EAAQ0yD,EAAY0rD,KA2EtBxhH,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASqvG,GACT/gG,QAASwxG,OAAkB/lH,EAAYqqH,GACvCvrH,UDlamC,WCkaZwC,UAEvBH,EAAAA,GAAAA,IAAA,OAAKrC,UDpaY,WCoaWwC,SAAA,EA7E5BH,EAAAA,GAAAA,IAAA,OACErC,UAAW+pH,IDxV6C,WCyVxDtmH,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,CAEtCunH,KACCxmH,EAAAA,GAAAA,GAACsxC,GAAAA,EAAU,CACT7wC,KAAK,QACL8wC,MAAOu0E,KAGX9lH,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GAAeynH,GDjW6C,WAAyB,YCiWhBvnH,SACjFlC,EAAQ,kCAAmCka,GAAYpY,aAoEzD2nH,KACC1nH,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAmBC,SAAElC,EAAQ,8BA9DjD+B,EAAAA,GAAAA,IAAA,OAAKrC,UD1WiM,WC0WvKwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACkoH,GAAAA,EAAa,CACZxrH,QAASiqH,GACTv0G,SAAUqzG,EACVpzG,SAAUmzG,EACV2C,eAAgBlxG,GAAc6uG,EAASjnH,QAAU,IAElDsnH,IAAqBtnH,OAAS,IAC7BmB,EAAAA,GAAAA,GAACkoH,GAAAA,EAAa,CACZxrH,QAASmqH,GACTz0G,SAAUizG,EACVhzG,SAAU+yG,EACV+C,eAAgBlxG,GAAc6uG,EAASjnH,QAAU,IAGpDwnH,IAAexnH,OAAS,IACvBmB,EAAAA,GAAAA,GAACkoH,GAAAA,EAAa,CACZxrH,QAASoqH,GACT10G,SAAUmzG,EACVlzG,SAAUizG,EACV6C,eAAgBlxG,GAAc6uG,EAASjnH,QAAU,QASvDC,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GDvYyS,WCwYvT2mH,GDxY6V,YCwY9RzmH,SAAA,EAE/De,EAAAA,GAAAA,GAAA,MAAIvD,WAAWsC,EAAAA,GAAAA,GAAeC,GD1Y6H,YC0YhFC,SACxElC,EAAQ,6BAA8B+oH,EAASjnH,WAElDmB,EAAAA,GAAAA,GAAC6hH,GAAsB,CACrBK,cAAY,EACZl7G,OAAQ0M,GAAMjR,GACdq/G,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb5jH,WAAWsC,EAAAA,GAAAA,GDpZiN,WCsZ1N+iH,GDtZuX,iBC4arXwD,GAAgBpB,GACdplH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EACN3+B,gBAAiB/9E,GACjBlC,QAASiqH,GAAwB9nH,SAAA,CAEhClC,EAAQ2oH,EAA6B,uBAAyB,8BAC/D1lH,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAMokH,EAA6B,KAAO,OAC1CjpH,WAAWsC,EAAAA,GAAAA,GAAeC,GAAe,aAG3C2mH,GAA8B,OAItCjC,GAAmBK,IAAYyC,MAC/B1nH,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,KAAAf,SACGgY,GAAcA,EAAWpY,OAAS,EAC/B5B,EAAK,+BAAiCA,EAAK,mCAEhDsnH,IACCvkH,EAAAA,GAAAA,GAAA,KAAAf,SAAIlC,EAAQ,8BAA+B,EAAG,OAE/C0nH,IACCzkH,EAAAA,GAAAA,GAAA,KAAAf,SAAIlC,EAAQ,+BAAgC,EAAG,UAIpD2mH,IACC1jH,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACVmK,MAAOi9G,GAAc9iH,EAAAA,GAAAA,GAAWhE,EAAQ,2BAA4B8mH,IAChE9mH,EAAQ,0CACZuuC,QAASs6E,EACT3xD,QAAS4xD,KAGb/mH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAe,iBAC7B+iH,EDpduP,WAA4B,YCod/M7iH,SAAA,EAEpEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,SAASnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAASkrH,GAAwB/oH,SAC9FunH,GAAmBzpH,EAAQ,oBAAsBE,EAAK,aAEzD+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAASm2G,GAAeh0G,SAAElC,EAAQ,wBCjX7F,IAAeT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAMohH,GAAgBp1G,EAAAA,EAAAA,IAAShM,GACzBkwB,GAAiBC,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAC9C0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1BuvB,EAAYz1B,QAAQ4S,KAAS8iB,EAAAA,EAAAA,IAAc9iB,GAC3C+iB,EAAU31B,QAAQ4S,KAAS8wG,EAAAA,EAAAA,IAAiB9wG,GAC5CkwG,EAAe9iH,QAAQ4S,KAAS+8E,EAAAA,EAAAA,IAAiB/8E,GAMvD,MAAO,CACL00G,gBACAlxF,iBACAX,YACAE,UACAmtF,eACAyE,aAXoBD,IAAkBlxF,GAAmB0sF,GAAgBntF,EAYzEotF,YAXkBnwG,IAAQV,EAAAA,EAAAA,IAASU,EAAKjR,KACtC4sD,EAAAA,EAAAA,KAAuB/c,EAAAA,EAAAA,KAAWp/B,GAAQ4wG,EAAAA,EAAAA,IAAqBpwG,UAC/D/V,KAXYsV,EAnEIq1G,EACtBllH,SACA4D,SACAsV,YACAia,YACAE,UACAmtF,eACAyE,eACAxE,cACAjgH,cAEA,MAAM,WAAE2kH,IAAeliH,EAAAA,EAAAA,OAEhBmiH,EAAiBC,IAAsBh3G,EAAAA,EAAAA,KAAS,GAEjDi3G,GAAmBniH,EAAAA,EAAAA,IAAgB,KACvCgiH,EAAW,CACTvhH,SACAsV,YACAqsG,SAAS,EACTC,WAAYJ,EACZK,UAAWL,IAEb5kH,OAGI3G,GAAOD,EAAAA,EAAAA,KAcb,OACE8B,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTnH,UAAU,MACV0H,MAAOlH,EAAK,wBAAwBgC,SAAA,EAEpCe,EAAAA,GAAAA,GAAA,KAAAf,SAjBOhC,EADLs5B,EACU,yBAGVE,GAAWmtF,EACD,kBAGF,yBAWTyE,IACCroH,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACVmK,MAAOi9G,GAAc9iH,EAAAA,GAAAA,GAAW9D,EAAK,8BAA+B4mH,IAChE5mH,EAAK,oDACTquC,QAASk9E,EACTv0D,QAASw0D,KAGb3pH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS4rH,EAAiBzpH,SACxEhC,EAAK,gBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,sBCzDjF,IAAeX,EAAAA,EAAAA,KA1B6BwsH,EAC1C1lH,SACA2lH,sBAAsB,EACtBnlH,UACAolH,cAEA,MAAM/rH,GAAOD,EAAAA,EAAAA,KAEb,OACE8B,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTnH,UAAU,YACV0H,MAAOlH,EAAK,8BAA8BgC,SAAA,EAE1Ce,EAAAA,GAAAA,GAAA,KAAAf,SAAIhC,EAAK,oCAAqC8rH,EAAqB,QACnEjqH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sBAAqBwC,SAAA,EAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAASksH,EAAQ/pH,SAC/DhC,EAAK,kBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,qB,eC/BjF,MC4OA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMG,GAAWC,EAAAA,EAAAA,KAAeJ,IAC1B,mBAAE+1G,IAAuBj4C,EAAAA,GAAAA,GAAqB99D,GAC9CQ,GAAOC,EAAAA,EAAAA,KAAkBT,IAEvB1S,KAAMoU,EAAe,OAAE5N,IAAW6M,EAAAA,EAAAA,KAAyBX,IAAW,CAAC,EACzEgE,EAAiC,cAApBtC,GACb,UAAEP,IAAcsvG,EAAAA,EAAAA,KAAgCzwG,GAChDskG,EAAY12G,SAASoW,IAAcgyG,EAAAA,EAAAA,KAAgCh2G,IACnE2wB,GAAcslF,EAAAA,EAAAA,KAAkCj2G,IAC9C+D,WAAYmyG,GAAuB/1G,EAASg2G,kBAAoB,CAAC,EACnEC,IAAsBtiH,IAASuiH,EAAAA,EAAAA,KAA0Br2G,EAAQlM,EAAQoiH,GACzEz4E,IAAcz5B,IAAclQ,KAASwiH,EAAAA,EAAAA,KAAyBt2G,EAAQlM,EAAQoiH,GAC9EK,KAAUL,IAAsBpiH,KAAS0iH,EAAAA,EAAAA,KAAax2G,EAAQlM,EAAQoiH,GACtEO,EAA0Bt2G,EAASu2G,yBACnCC,EAAiB/oH,QAAQ6oH,GAA2Bt2G,EAASm8C,gBAC9Dn8C,EAASw8C,0BAA4Bx8C,EAASy2G,2BAA6Bz2G,EAAS6/B,aACpF7/B,EAASowG,oBAEd,MAAO,CACL/vG,OACAwD,aACA6yG,uBAAuBC,EAAAA,EAAAA,KAA4B92G,GACnD+2G,kBAAmB51G,EACnB61G,kBAAmB1S,EACnB2S,oBAAqBtmF,EACrBumF,mBAAoBz5E,EACpBy4E,qBACAE,sBACAO,iBACAZ,qBACAQ,aAhCcx2G,EAzLoCo3G,EACtD32G,OACA42G,UACA9tH,WACAoY,kBACAsC,aACA6yG,wBACAE,oBACAC,oBACAC,sBACAC,qBACAd,sBACAO,iBACAT,qBACAH,qBACAQ,cAEA,MAAM,sBACJzE,EAAqB,mCACrBuF,EAAkC,yBAClCC,EAAwB,qBACxBC,EAAoB,iBACpBhmF,EAAgB,eAChBo3E,EAAc,uBACdjmG,EAAsB,uBACtB80G,IACErkH,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KD9EkBR,KAC/B,SAASmuH,EAAWhmH,GAClBA,EAAEkkB,kBACFxiB,EAAAA,EAAAA,MAAaokH,sBACf,EAEAG,EAAAA,GAAAA,IAAWltH,EAAAA,EAAAA,KAAQ,IAAOlB,EAAW,CACnC,QAASmuH,QACPhtH,GAAY,CAACnB,MCwEjBquH,CAAwBruH,GAExB,MAAOsuH,EAAiBC,EAAeC,IAAkB1tH,EAAAA,EAAAA,MAClD2tH,EAAuBC,IAA4Bz5G,EAAAA,EAAAA,KAAS,GAE7D05G,GAA8B5kH,EAAAA,EAAAA,IAAgB,KAClDy+G,OAGIoG,GAAe7kH,EAAAA,EAAAA,IAAgB,KAC9B6iH,GAAuB11G,GAC5BkC,EAAuB,CACrB5O,OAAQ0M,EAAKjR,GACbwU,WAAYmyG,EACZlyG,mBAIJ3Z,EAAAA,EAAAA,KAAU,IACDf,IAAaqtH,GAChB9uE,EAAAA,GAAAA,GAAyB,CACzBswE,YAAapB,EAAoBmB,OAAeztH,EAChDq3C,SAAUi1E,EAAoBmB,OAAeztH,EAC7C2tH,MAAOH,SAEPxtH,GACH,CACDnB,EAAU4uH,EAAcD,EAA6BtB,EACrDI,IAGF,MAAMU,GAAapkH,EAAAA,EAAAA,IAAgB,KACjCkkH,IACAhmF,EAAiB,CACft8B,QAASlL,EAAK,uBAEhB+nH,OAGIlpE,GAAiBv1C,EAAAA,EAAAA,IAAgB,KACrCikH,IACAxF,OAGIuG,GAAwBhlH,EAAAA,EAAAA,IAAgB,KACxC0iH,GAAsBQ,EACxBsB,IAIFjvE,OAGI0vE,GAAmBjlH,EAAAA,EAAAA,IAAgB,KACvCmkH,EAAuB,CAAEzB,oBAAqBgC,IAC9CD,IACAlvE,OAGI2vE,GAA4BvyF,EAAAA,EAAAA,GAAsB6wF,QAAyBpsH,GAAW,GAGtF+tH,EAAyBzuH,EAAK,kCAFGT,EAAWutH,EAAwB0B,EAE6B,KAEjG3jE,GAAoBvhD,EAAAA,EAAAA,IAAgB,KACnC6iH,GAAuB11G,IAC5BmoG,EAAe,CACb70G,OAAQ0M,EAAKjR,GACbwU,WAAYmyG,IAEdpE,QAGIvoH,GAAYsC,EAAAA,GAAAA,GAChB,uBACAurH,GAAW,gBACX9tH,GAAY,SAGRmvH,EAAeA,CACnBznH,EAAgB0C,EAAe9J,EAA4B0a,KAGzDxX,EAAAA,GAAAA,GAAA,OACE8rC,KAAK,SACLD,SAAU,EACVpvC,WAAWsC,EAAAA,GAAAA,GACT,aACA,OACAyY,GAAe,eAEjB1a,QAASA,EACTqH,MAAOyC,EACP,aAAYA,EAAM3H,UAElBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM4C,MAKlB,OACEpF,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWA,EAAUwC,UACxBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,6BAA4BwC,SAAA,EACzCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNiR,OAAK,EACL/Z,QAASquH,EACTr0G,UAAU,mBAAkB7X,UAE5Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,6BAA6B0H,MAAOunH,EAAuBzsH,SACxEysH,IAGF5qH,QAAQipH,KACPjrH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+BAA8BwC,SAAA,CACtB,cAApB2V,GAAmCw1G,GAClCuB,EACE,UAAW1uH,EAAK,4BAA6BstH,GAGhDL,GACCyB,EAAa,OAAQ1uH,EAAK,+BAAgC6qD,GAE3DqiE,IAAwBb,GACvBqC,EAAa,WAAY1uH,EAAK,sBAAuBsuH,IAErDjC,GACAqC,EAAa,OAAQ1uH,EAAK,mCAAoC0tH,GAE/DV,GACC0B,EAAa,SAAU1uH,EAAK,gCAAiCmuH,GAAc,YAMrFtsH,EAAAA,GAAAA,IAACgnC,GAAAA,EAAa,CACZ1iC,OAAQ0nH,EACRlnH,QAASonH,EACThlF,eAAgBwlF,EAAiBvsH,SAAA,CAEhChC,EAAK,2BACN+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACV6uC,QAAS2/E,EACTrkH,MAAO3J,EAAK,2BACZg3D,QAASi3D,cCtInB,IAAe5uH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAElM,EAAM,UAAEsV,IAAchJ,EAAAA,EAAAA,KAAeJ,GAAQ04G,aAAe,CAAC,EACrE,OAAK5kH,GAAWsV,EAIT,CACLuvG,aAAan0F,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQsV,IAAYuvG,aAJpD,CAAC,IAJM54G,EAxEpB,UAAqB,OACnB7P,EAAM,YACNyoH,IAEA,MAAM,SACJzlH,EAAQ,iBACR0lH,IACEzlH,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEP+uH,GAAuB59E,EAAAA,GAAAA,GAAiB09E,GAAa,GACrDn6B,GAAYh0F,EAAAA,EAAAA,KAAQ,KACxB,IAAKquH,EACH,OAGF,MAAM7tH,EAASyiD,OAAO0K,KAAK0gE,GAG3B,OAFA7tH,EAAOmnD,MAAK,CAAC2mE,EAAQC,IAAYF,EAAqBE,GAAWF,EAAqBC,KAE/E9tH,IACN,CAAC6tH,IAEErkG,GAAcnhB,EAAAA,EAAAA,IAAiBm6B,IACnCorF,IAEAt7G,YAAW,KACTpK,EAAS,CAAE3D,GAAIi+B,MA7BY,QAiCzBwrF,GAAyB3lH,EAAAA,EAAAA,IAAgB,KAC7CulH,OAGF,OACEhtH,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASkoH,EACTrvH,WAAWsC,EAAAA,GAAAA,GClEO,WDkEsB,UACxCoF,MAAO,WAAWutF,GAAW7yF,eAAeI,SAAA,EAE5Ce,EAAAA,GAAAA,GAAA,OAAKE,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtCyyF,GAAaA,EAAUxyF,KAAKwhC,IAC3B1gC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,6CAEVK,QAASA,IAAM4qB,EAAYgZ,GAAQzhC,UAEnCe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQA,EACRqjB,kBAAgB,EAChBd,QAAQE,EAAAA,GAAAA,GAAiBlmD,EAAsC,IAAhC8uH,EAAsBrrF,IACrDqiB,WAAW,kBATRriB,QAcX1gC,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASovH,EAAuBjtH,SAE/BhC,EAAK,eAKhB,K,gBEjGA,SAAkE,WAAlE,GAAoF,WAApF,GAA+H,WC8BzHkvH,GAA2BlgG,EAAAA,EAAqB6O,EAAAA,IA4GtD,IAAex+B,EAAAA,EAAAA,KACb2W,EAAAA,EAAAA,KAAsBC,IACpB,MAAM,OAAElM,EAAM,WAAEolH,IAAe94G,EAAAA,EAAAA,KAAeJ,GAAQm5G,4BAA8B,CAAC,EAGrF,MAAO,CAAEh6E,KAFIrrC,GAASsrC,EAAAA,EAAAA,KAAWp/B,EAAQlM,QAAUrJ,EAEpCyuH,gBAJjBn5G,EA3GiCq5G,EAAGlpH,SAAQgpH,aAAY/5E,WACxD,MAAMp1C,GAAOD,EAAAA,EAAAA,MACP,4BACJuvH,EAA2B,iBAC3B7nF,EAAgB,gCAChB8nF,EAA+B,iBAC/B/nF,EAAgB,qBAChBgoF,EAAoB,SACpBC,IACErmH,EAAAA,EAAAA,MACEy5G,GAAWzwD,EAAAA,EAAAA,IAAuBhd,GAElCs6E,GAAqBpmH,EAAAA,EAAAA,IAAgB,KACzCgmH,EAA4B,CAAEK,qBAAqB,IACnDJ,IAEAh8G,YAAW,KACTi0B,EAAiB,CAAEt8B,QAASlL,EAAK,sBAChCkvH,OAGCU,GAAqBtmH,EAAAA,EAAAA,IAAgB,KACzCkmH,EAAqB,CACnBK,WAAY,WACZ/jF,WAAY,YACZgkF,UAAWA,IAAML,EAAS,CAAEhsF,OAAQ2R,EAAM5vC,OAE5C+pH,IAEAh8G,YAAW,KACTi0B,EAAiB,CAAEt8B,QAASlL,EAAK,0BAChCkvH,OAGCa,GAAoBzmH,EAAAA,EAAAA,IAAgB,KACxCimH,IAEAh8G,YAAW,KACTk0B,EAAiB,CAAEQ,eAAgB,gBAClCinF,OAGCpuF,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCimH,OAGF,OACExsH,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CAAC2B,QAAM,EAACtC,OAAQA,EAAQQ,QAASm6B,EAAY9+B,UACjDH,EAAAA,GAAAA,IAAA,OAAKrC,UDhFiB,WCgFYyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EACpEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UDlF8I,WCmF9ImJ,MAAM,cACNiR,OAAK,EACLpW,KAAK,UACL3D,QAASihC,EACTjnB,UAAU,QAAO7X,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQwpH,EAAavpH,GAAAA,EAAeoqH,SAAWpqH,GAAAA,EAAeqqH,SAC9DzsH,KAAM,GACNhE,UD9FoC,WC+FpC+0C,gBAAc,EACdxuC,QAAM,KAERhD,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAcC,SAC1BhC,EAAKmvH,EAAa,qBAAuB,6BAE5CpsH,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAYC,UACvB8B,EAAAA,GAAAA,GACC9D,EACEmvH,EAAa,mBAAqB,6BAClCtM,GAEF,CAAC,uBAGL9/G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACL3D,QAASsvH,EAAaO,EAAqBE,EAC3CpwH,UAAWuC,GAAcC,SAExBhC,EAAKmvH,EAAa,qBAAuB,6BAE5CpsH,EAAAA,GAAAA,GAACyE,GAAAA,EAAS,CAAChI,UDrHwF,WCqH5DwC,SAAEhC,EAAK,gBAC9C+C,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAcC,SAAEhC,EAAK,yBACpC+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAYC,UACvB8B,EAAAA,GAAAA,GACC9D,EAAKmvH,EAAa,mBAAqB,uBAAwBtM,GAC/D,CAAC,uBAGL9/G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLuE,qBAAmB,EACnB9E,KAAK,UACL3D,QAASkwH,EACTvwH,UAAWuC,GAAcC,SAExBhC,EAAK,qCCsIhB,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAElM,EAAM,UAAEsV,IAAchJ,EAAAA,EAAAA,KAAeJ,GAAQi6G,cAAgB,CAAC,EAChEhlH,EAAUnB,GAAUsV,GAAYob,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQsV,QAAa3e,EAErF,MAAO,CACLqJ,SACAsV,YACA0lC,UAAW75C,GAAS65C,UACpBorE,SAAUjlH,GAASilH,SACnBvB,YAAa1jH,GAAS0jH,YACtB9pE,mBAAoB7uC,EAAO8uC,UAAUD,sBAXvB9uC,EAtNgCo6G,EAClDjqH,SACAgqH,WACAprE,YACAh7C,SACAsV,YACAuvG,cACA9pE,yBAEA,MAAM,aACJurE,EAAY,sBACZC,EAAqB,SACrBnnH,IACEC,EAAAA,EAAAA,MAGEskD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAC9BrB,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAE9BlsC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MACNy9F,EAAWC,EAAcC,IAAev9F,EAAAA,EAAAA,IAAQ,IAChDkwH,EAAWC,IAAgBh8G,EAAAA,EAAAA,SAAkC9T,GAC9D+vH,EAAiBN,GAAYprE,GAAaorE,EAASj3F,OAnCnB,IAoCjC6rB,EAAU2rE,QAAQ9uH,OAAS,EAC1B+uH,GAAY3+G,EAAAA,EAAAA,OAElB1R,EAAAA,EAAAA,KAAU,KACJ6F,IAAWu3F,IACbizB,EAAUx+G,aAAUzR,GAGlBg9F,IAAcv3F,IAChBy3F,IACA4yB,OAAa9vH,MAEd,CAACg9F,EAAWv3F,EAAQy3F,IAEvB,MAAMgzB,GAA0BtnH,EAAAA,EAAAA,IAAgB,KAC1CqnH,EAAUx+G,SACZhJ,EAAS,CAAE3D,GAAImrH,EAAUx+G,UAE3Bm+G,OAGIxvF,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCq0F,OAGIlzE,GAAcnhB,EAAAA,EAAAA,IAAiBm6B,IACnCktF,EAAUx+G,QAAUsxB,EACpB3C,OAGI8nB,GAAiBt/C,EAAAA,EAAAA,IAAgB,KACrC+mH,EAAa,CACXtmH,OAAQA,EACRsV,UAAWA,OAITwxG,GAAepwH,EAAAA,EAAAA,KAAQ,KAC3B,MAAMqwH,EAAiC,GAMvC,OALAX,GAAUprE,WAAW3jD,SAAQ,EAAGgzC,eACzB08E,EAAgB9iB,MAAMtxB,IAAMlpC,EAAAA,EAAAA,IAAekpC,EAAGtoC,MACjD08E,EAAgBvvH,KAAK6yC,MAGlB08E,IACN,CAACX,IAEEpuE,GAAUthD,EAAAA,EAAAA,KAAQ,KACtB,GAAI8vH,EACF,OAAOJ,GAAUprE,UACdxhB,QAAO,EAAG6Q,eAAeZ,EAAAA,EAAAA,IAAeY,EAAUm8E,KAClDtuH,KAAI,EAAGsH,YAAaA,IAGzB,MAAMwnH,EAAgBrtE,OAAO0K,KAAKwgE,GAAe,CAAC,GAElD,OAAOnlF,EAAAA,GAAAA,IAAO0mF,GAAUprE,UAAU9iD,KAAI,EAAGsH,YAAaA,IAAQknF,OAAOsgC,GAAiB,KAAO,MAC5F,CAACR,EAAWJ,EAAUvB,KAElBliE,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BhE,EAAgB7G,EAASouE,QAAoCzvH,IAAxByvH,EAASnpE,YAOhD,OAJA1mD,EAAAA,EAAAA,KAAU,KACRqsD,IAAU,CAAEj6B,UAAWyvC,EAAAA,GAAkBC,cACxC,CAACzV,KAGF9qD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,IAAWu3F,EACnB/2F,QAASm6B,EACTthC,UAAU,0BACV0H,MAAOpH,EAAQ,aACfsU,oBAAqBw8G,EAAwB5uH,SAAA,CAE5CyuH,IACC5uH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,YAAYyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,EAChEH,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,IAAgByuH,GAAa,UACxC/sH,KAAK,OACLyiB,QAAM,EAENpmB,QAASA,IAAM2wH,OAAa9vH,GAAWsB,SAAA,EAEvCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UACVR,QAAQssH,GAAUj3F,SAAUynC,EAAAA,GAAAA,IAAqB3gE,EAAMmwH,EAASj3F,UAElE23F,EAAa5uH,KAAKmyC,IACjB,MAAMlb,EAAQ6rB,GAAW2rE,QACtBnuH,MAAM+wC,IAAmBE,EAAAA,EAAAA,IAAeF,EAAec,SAAUA,MAAYlb,MAChF,OACEr3B,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CAELvE,WAAWsC,EAAAA,GAAAA,IAAe0xC,EAAAA,EAAAA,IAAe+8E,EAAWn8E,IAAa,UACjE5wC,KAAK,OACLyiB,QAAM,EAENpmB,QAASA,IAAM2wH,EAAap8E,GAAUpyC,SAAA,EAEtCe,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAClBlS,SAAUA,EACV50C,UAAU,wBACVslD,mBAAoBA,IAErBjhD,QAAQq1B,KAAUynC,EAAAA,GAAAA,IAAqB3gE,EAAMk5B,MAZzCwb,EAAAA,EAAAA,IAAeN,WAmB9BrxC,EAAAA,GAAAA,GAAA,OAAKE,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAWlB,UAAU,uBAAsBwC,SAC1E0qD,GAAa9qD,QACZmB,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACbpqD,UAAU,6BACVqqD,MAAO6C,EACP5C,WAAY6C,EAAQ3qD,SAEnB0qD,GAAaskE,SACXznH,IACC,MAAMG,EAAOihC,EAAUphC,IAAWmkD,EAAUnkD,GAEtC0nH,EAAgBd,GAAUprE,UAAUxhB,QAAQ2tF,GAAYA,EAAQ3nH,SAAWA,IAC3EsgD,EAA2B,GAC3BsnE,EAAavC,IAAcrlH,GAiDjC,OA/CA0nH,GAAe7vH,SAASs7E,IAClB6zC,KAAc/8E,EAAAA,EAAAA,IAAekpC,EAAEtoC,SAAUm8E,IAE7C1mE,EAAMtoD,MACJM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,UAAU,yCAEVK,QAASA,IAAM4qB,EAAYlhB,GAAQvH,SAAA,EAEnCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAMA,EAAMlG,KAAK,YACzB3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,EACnBe,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC5lD,KAAMA,EAAMO,iBAAe,KAC1CpI,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,SAASyD,IAAI,OAAMjB,SAAA,EACjCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAAgB7E,UAAU,iBACpC0mD,EAAAA,GAAAA,GAAiBpmD,EAAuB,IAAd48E,EAAE00C,iBAGhC10C,EAAEtoC,WACDrxC,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAClB9mD,UAAU,sBACV40C,SAAUsoC,EAAEtoC,SACZ0Q,mBAAoBA,MAjBnB,GAAGv7C,MAAUmrC,EAAAA,EAAAA,IAAegoC,EAAEtoC,iBAwBpCm8E,GAAcU,GAAervH,QAChCioD,EAAMtoD,MACJwB,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,6CAEVK,QAASA,IAAM4qB,EAAYlhB,GAAQvH,UAEnCe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQl6B,EACRu9C,kBAAgB,EAChBuqE,WAAW,SACXrrE,OAAQmrE,GAAajrE,EAAAA,GAAAA,GAAiBpmD,EAAsB,IAAbqxH,QAAqBzwH,EACpEolD,WAAW,kBAVR,GAAGv8C,cAePsgD,QAIX9mD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,OAEd/sD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASihC,EAAY9+B,SAEpBlC,EAAQ,kBC/IjB,IAAeT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUq7G,6BACT,MAAMC,OAA2D7wH,IAA1C4wH,EAAuBC,iBACzCC,EAAAA,EAAAA,KAA0Bv7G,EAAQq7G,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAe/rH,QAAK9E,KAL1CsV,EAlFyC07G,EAC3DD,oBACAH,6BAEA,MAAM,2BAAEK,IAA+BvoH,EAAAA,EAAAA,OAEhCwoH,EAAUC,IAAexxH,EAAAA,EAAAA,IAAQ,IACjC8f,EAAW2xG,IAAgBzxH,EAAAA,EAAAA,IAAQ,GACpCyS,GAAad,EAAAA,EAAAA,MAEb+/G,GAAOzoH,EAAAA,EAAAA,IAAgB,KAC3BuoH,IACI/+G,EAAWX,SACbc,aAAaH,EAAWX,SAE1BoB,YAAW,KACTo+G,EAA2B,CAAEnsH,GAAI8rH,EAAuB9rH,OApB9B,QAwBxBwsH,GAAwB1oH,EAAAA,EAAAA,IAAiB5B,IACvCA,EAAEqN,QAAwBge,QAAQ,mBACtCg/F,QAIJzxH,EAAAA,EAAAA,KAAU,KACRsK,SAASmS,iBAAiB,aAAci1G,GACxCpnH,SAASmS,iBAAiB,YAAai1G,GACvCpnH,SAASmS,iBAAiB,YAAai1G,GACvCpnH,SAASmS,iBAAiB,QAASi1G,GAE5B,KACLpnH,SAASoS,oBAAoB,aAAcg1G,GAC3CpnH,SAASoS,oBAAoB,YAAag1G,GAC1CpnH,SAASoS,oBAAoB,YAAag1G,GAC1CpnH,SAASoS,oBAAoB,QAASg1G,MAEvC,CAACA,KAEJ1vG,EAAAA,EAAAA,KAAgB,KACd,MAAM2vG,GAAoBr0F,EAAAA,EAAAA,MAE1B9qB,EAAWX,QAAUoB,YAAW,KAC9Bw+G,IACAE,MAhDmB,OAkDpB,CAACF,IAEJ,MAAMG,EAAaT,GAAqB,UAAUA,IAC5CU,GAAenhH,EAAAA,EAAAA,GAASkhH,GAAaT,GAE3C,IAAKH,EAAuBc,UAC1B,OAGF,MAAMtiG,GAASwhG,EAAuBc,WAAa,GA1DjC,IA4DlB,OACErvH,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACT,4BACA8vH,GAAY,SACZzxG,GAAa,UACbmxG,EAAuBe,YAAc,YAEvC3jH,MAAO,YAAYohB,iBAAqBwhG,EAAuB3pH,mBAAmB2pH,EAAuBxpH,OAAO9F,UAEhHe,EAAAA,GAAAA,GAAC0C,GAAAA,EAAe,CAEdjC,KAxEY,IAyEZmC,OAAQwsH,EACR5vC,MAAI,EACJ+vC,QAAS90G,EAAAA,GAAa,QAAM9c,EAC5BwhG,aAAW,EACXn8F,QAAM,EACNC,OAAQ8rH,GAPH,UAAUL,WC4CvB,IAAepyH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAElM,EAAM,UAAEsV,IAAchJ,EAAAA,EAAAA,KAAeJ,GAAQs8G,mBAAqB,CAAC,EAErEC,GAAsBC,EAAAA,EAAAA,KAAmBx8G,GAO/C,MAAO,CACLlM,SACAsV,YACAqzG,0BATgC3oH,EAC9BsV,GACEszG,EAAAA,EAAAA,KAA0C18G,EAAQlM,EAAQsV,IAC1DuzG,EAAAA,EAAAA,KAAuC38G,EAAQlM,QACjDrJ,EAMF8xH,yBAfcx8G,EAzGiC68G,EACnD1sH,SACA4D,SACAsV,YACAqzG,4BACAF,0BAEA,MAAM,0BACJM,EAAyB,uBACzBC,EAAsB,iBACtBC,EAAgB,uBAChBC,IACE7pH,EAAAA,EAAAA,OAEGogD,EAAQoH,IAAap8C,EAAAA,EAAAA,IAAS,IAC/BxU,GAAOD,EAAAA,EAAAA,KAEPmzH,GAAe5pH,EAAAA,EAAAA,IAAiB6pH,IAC/BppH,IAEDsV,EACFyzG,EAA0B,CAAE/oH,SAAQvE,GAAI6Z,EAAW+zG,eAAgBD,KAEnEH,EAAiB,CAAEK,oBAAqBF,IACxCF,EAAuB,CAAElpH,SAAQqpH,eAAgBD,KAGnDJ,QAGIO,GAAehqH,EAAAA,EAAAA,IAAiB5B,IACpCkpD,EAAUlpD,EAAEqN,OAAOnL,UAGf2pH,GAAqB9yH,EAAAA,EAAAA,KAAQ,IAAM+yH,EAAAA,IAAgCvxH,KAAKkxH,IAOrE,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAACnB,GAAsB,CAAEjvH,KAAM,aACtCqwH,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAE5vH,KAAM,aAC7BqwH,GAAGT,QAOpC,CAACX,KAELlyH,EAAAA,EAAAA,KAAU,KACH6F,GAAQyqD,EAAU,MACtB,CAACzqD,IAEJ,MAAM2tH,GAA6BrzH,EAAAA,EAAAA,KAAQ,IACpC+oD,EAAOwjB,OAILumD,EAAmBhwF,QAAO,EAAG4vF,WAAUM,iBAAgBI,kBAC5DJ,EAAe1lE,cAAcj4B,SAAS0zB,EAAOuE,gBAC1C8lE,EAAa9lE,cAAcj4B,SAAS0zB,EAAOuE,gBAC3ColE,EAASplE,cAAcj4B,SAAS0zB,EAAOuE,iBANnCwlE,GAQR,CAACA,EAAoB/pE,IAExB,OACE3nD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UC5GiB,WD6GjBiJ,QAAM,EACNtC,OAAQA,EACRqD,gBAAc,EACdtC,MAAOlH,EAAK,YACZ2G,QAASosH,EAAuB/wH,SAAA,EAEhCe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CAERzL,MAAO4/C,EACPr0C,SAAUm+G,EACV3jE,YAAa3vD,EAAK,UAClByuC,2BAAyB,GAJrB,WAMN1rC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GC1H8G,WD0H7E,iBAAiBE,SAC/D8xH,EAA2B7xH,KAAI,EAAGkxH,WAAUU,eAAcJ,qBACzD5xH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,WAAWsC,EAAAA,GAAAA,GC9H6C,WD8Hb,WAC3C48G,cAAegU,IAA8BS,EAAW,aAAUzyH,EAClEkI,SAAU8pH,IAA8BS,EACxC7rH,WAAS,EACTm3G,QAAM,EAEN5+G,QAASA,IAAMqzH,EAAaC,GAAUnxH,SAAA,EAEtCe,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAe,QCtI2C,YDsIpBE,UACpD8B,EAAAA,GAAAA,GAAW+vH,EAAc,CAAC,aAAc,CAAEE,UAAWvqE,OAExDzmD,EAAAA,GAAAA,GAAA,QAAMvD,WAAWsC,EAAAA,GAAAA,GAAe,WCzIiE,YDyIpCE,UAC1D8B,EAAAA,GAAAA,GAAW2vH,EAAgB,CAAC,aAAc,CAAEM,UAAWvqE,QAbrD2pE,c,4BE7HjB,UAAgB,QAAU,WAAW,YAAc,WAAW,KAAO,WAAW,MAAQ,WAAW,YAAc,YCkJjH,IAAe9zH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,YAAEqmD,GAAgBrmD,EAExB,MAAO,CACLomD,cAAeC,EAAYC,cALbvmD,EA5GoCg+G,EACtDxmF,QACA6uB,oBAEA,MAAM,0BACJ43D,EAAyB,SACzB9qH,EAAQ,QACR0yB,EAAO,iBACP2L,IACEp+B,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KAEPm0H,EAA6B,aAAhB1mF,GAAOjqC,KAEpBu9B,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClC2qH,OAGI5qH,GAAiBC,EAAAA,EAAAA,IAAgB,KACrCH,EAAS,CAAE3D,GAAIgoC,EAAOjkC,SACtBu3B,OAGIqzF,GAAgB7qH,EAAAA,EAAAA,IAAgB,KACpCuyB,EAAQ,CACNzd,IAAKovB,EAAOpvB,IACZg2G,iBAAiB,IAEnBtzF,OAGI4sF,GAAapkH,EAAAA,EAAAA,IAAgB,KACjC,MAAMyS,EAAOm4G,GAAaG,EAAAA,GAAAA,GAAe7mF,EAAM8mF,cAC3Cz2D,EAAAA,GAAAA,IAA0BxB,EAAe7uB,EAAO8mF,cACpDC,EAAAA,GAAAA,IAAoBx4G,GACpByrB,EAAiB,CACft8B,QAASlL,EAAKk0H,EAAa,iBAAmB,iBAEhDpzF,OAGI55B,GAAQzG,EAAAA,EAAAA,KAAQ,KACpB,IAAK+sC,EAAO,OACZ,MAAM7hB,EAAMuoG,EAAa,wBAA0B,qBAC7CM,EAAuBN,GACzBG,EAAAA,GAAAA,GAAe7mF,EAAM8mF,cACrBz2D,EAAAA,GAAAA,IAA0BxB,EAAe7uB,EAAM8mF,aACnD,OAAOt0H,EAAK2rB,EAAK6oG,KAChB,CAAChnF,EAAO0mF,EAAY73D,EAAer8D,IAEhCyU,GAAchU,EAAAA,EAAAA,KAAQ,KAC1B,IAAK+sC,EAAO,OACZ,MAAM7hB,EAAMuoG,EAAa,0BAA4B,uBAC/Cn7F,GAAOmtB,EAAAA,GAAAA,GAAiBlmD,EAA2B,IAArBwtC,EAAMinF,cACpC7wH,GAAW2mF,EAAAA,GAAAA,GAAuB/8C,EAAM7pC,OAAQ6pC,EAAM5pC,SAAU5D,EAAKg7D,MACrE05D,GAAiBnqC,EAAAA,GAAAA,GAAuB/8C,EAAMmnF,aAAcnnF,EAAMknF,eAAgB10H,EAAKg7D,MAE7F,OAAOh7D,EAAK2rB,EAAK,CAACoN,EADL,GAAG27F,MAAmB9wH,SAElC,CAAC4pC,EAAO0mF,EAAYl0H,IAEvB,OACE6B,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQtC,QAAQ2pC,GAChB/kC,QAAM,EACN5B,iBAAkB9E,GAAOqY,QACzBzT,QAASstH,EAA0BjyH,SAAA,EAEnCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLhE,UAAWuC,GAAO2rC,YAClB7zB,UAAW7Z,EAAK,SAChBH,QAASihC,EAAY9+B,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOkF,KAAKjF,UAC1Be,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQuuH,EAAatuH,GAAAA,EAAegvH,QAAUhvH,GAAAA,EAAeivH,SAC7DrxH,KAlFY,QAqFhBT,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAOmF,MAAMlF,SACzBkF,IAASpD,EAAAA,GAAAA,GAAWoD,EAAO,CAAC,uBAE/BnE,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPtK,UAAWuC,GAAO+yH,KAClBvrH,OAAQikC,GAAOjkC,OACfS,eAAa,EACbE,SAAUsjC,GAAOjkC,OACjB1J,QAASwJ,KAEXtG,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAO0S,YAAYzS,SAC9ByS,IAAe3Q,EAAAA,GAAAA,GAAW2Q,EAAa,CAAC,uBAE3C5S,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yCAAwCwC,SAAA,EACrDe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwBK,QAASs0H,EAAcnyH,SAC9DhC,EAAK,2BAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACzE,UAAU,wBAAwBK,QAAS6tH,EAAW1rH,SAClEhC,EAAKk0H,EAAa,uBAAyB,iC,4BCrH/C,SAASa,GAAsBxxH,GACpC,MAAO,CAAC0S,EAAqB++G,KAC3B,MAAM5+G,GAAWC,EAAAA,EAAAA,KAAeJ,IACxB+1B,KAAM0hB,GAAcz3C,EAAO03C,OAC3B3hB,KAAMrB,GAAc10B,EAAOxT,OAC7B,eACJ++D,EAAc,cAAEnmC,EAAa,OAAEtxB,GAC7BqM,EAASkrD,cAEP,mBAAE0qD,IAAuBj4C,EAAAA,GAAAA,GAAqB99D,GAK9Cg/G,EAAuB,UAAT1xH,EAAmBA,EAAQyxH,GAAOE,QAAU,QAAU,SAElEC,SAAUC,GAA2Bn/G,EAAOo/G,SAC9Cn6F,EAAWG,IAAgB45F,IAAc/5F,SAEzClkB,EAAkBZ,EAASY,gBAEjC,MAAO,CACLspD,OAAOuD,EAAAA,EAAAA,KAAY5tD,GACnBqkB,eAAwB55B,IAAbw6B,KACLsmC,GAAiB39D,QAAQ29D,EAAe7T,OAAS6T,EAAe6zD,UACtE3nE,YACA/iB,YACAyqF,yBACAl6F,WACAo6F,aAAcvrH,EACdiN,kBACAE,gBAAiBnN,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,IAAS+M,iBAAcpW,EACpEsrH,sBAGN,C,wCC5BA,MAAM5qD,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAoHjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,IAClB++G,GAAsB,SADJ/+G,EAlH4Bu/G,EAC9Cj1D,QACA40D,UACA7rF,cACA/O,YACAozB,YACA/iB,YACAyqF,yBACAl6F,WACAlkB,sBAEA,MAAM,qBACJw+G,EAAoB,aACpBl9F,EAAY,gBACZm9F,IACErsH,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KACPk1H,EAAcC,EAAU,QAAU,QAClCtsE,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAM0xH,SAKX,CAACA,EAAaO,EAAsBnsF,IAEjCqsF,GAAgBj1H,EAAAA,EAAAA,KAAQ,IACvBy6B,GAAak6F,EAIXl6F,EAASj5B,KAAKuD,IACnB,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAEjD,OAAO4vH,EAAuBrrH,IAASiiC,KAAK3sB,MAC3CkkB,OAAO1/B,SAPDkmC,GAAAA,GAQR,CAACqrF,EAAwBl6F,IAEtB06F,GAAqBrwH,EAAAA,EAAAA,KAAa2F,IACtCotB,EAAa,CAAEvuB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,OACzD,CAAC8yB,IAEEu9F,GAAkBtwH,EAAAA,EAAAA,KAAY,CAAC8Z,EAAmBtV,KACtD0rH,EAAgB,CAAE1rH,SAAQsV,gBACzB,CAACo2G,IA2CEK,GAAoBjnB,EAAAA,GAAAA,GAAkB,CAACxlE,GAAc80D,EAAAA,OAA+B7jE,EAE1F,OACEv3B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAU,8CACVqqD,MAAOisE,EAAoBJ,OAAgBh1H,EAC3CopD,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,EAER8zH,IAAqB/yH,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAC9BgmE,KAAuB56F,GAAgC,IAApBA,EAASt5B,UAC3CmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrB81H,GAAqB56F,GAAYA,EAASt5B,OAAS,GAzDjD8zH,EAAczzH,KAAI,CAACiJ,EAAS7J,KACjC,MACM20H,EADoB,IAAV30H,IAEX40H,EAAAA,GAAAA,IAAY/qH,EAAQ6tB,SAAUk9F,EAAAA,GAAAA,IAAYP,EAAcr0H,EAAQ,GAAG03B,MAElE1uB,GAAQ6rH,EAAAA,EAAAA,IAA4BhrH,GAC1C,OACErJ,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGg0H,IACCjzH,EAAAA,GAAAA,GAAA,KACEvD,UAAU,kBAEVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAEnCm0H,EAAAA,GAAAA,IAAmBn2H,EAAM,IAAIqyB,KAAoB,IAAfnnB,EAAQ6tB,QAHtC7tB,EAAQ6tB,OAMjBh2B,EAAAA,GAAAA,GAAA,OACEvD,UAAU,sBAAqBwC,UAG/Be,EAAAA,GAAAA,GAACqzH,GAAAA,GAAK,CAEJ91D,MAAOA,EACPp1D,QAASA,EACTa,OAAQsqH,EAAAA,GAAYC,OACpB58F,aAAa68F,EAAAA,GAAAA,GAAcv2H,EAAMkL,EAASwiD,EAAW/iB,GACrD5R,KAAM7tB,EAAQ6tB,KACdv5B,UAAU,cACVitB,OAAQopG,EACRW,YAAaZ,EACbhvF,aAAc8mB,EAAUxiD,EAAQnB,SAAS+M,cAAgB5L,EAAQ4L,YACjEiC,eAAeC,EAAAA,EAAAA,IAAiBhC,EAAiB3M,IAV5Ca,EAAQ1F,KAHV0F,EAAQ1F,mB,4BCpGzB,MAuBA,GAtBE4jC,IAEA,MAAMqtF,GAAYzkH,EAAAA,EAAAA,MAEZ0Z,GAAgBnmB,EAAAA,EAAAA,KAAamC,IACnB,UAAVA,EAAEikB,KACY8qG,EAAUtkH,UAAYvH,SAAS8rH,eAG/CttF,MAED,CAACA,IAQJ,OANA9oC,EAAAA,EAAAA,KAAU,KACRgT,OAAOyJ,iBAAiB,UAAW2O,GAAe,GAE3C,IAAMpY,OAAO0J,oBAAoB,UAAW0O,GAAe,KACjE,CAACA,IAEG+qG,G,4BCqBT,MA+GA,IAAep3H,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAKhC,MAAO,CACL0M,OACA2+B,MANWC,EAAAA,EAAAA,KAAWp/B,EAAQlM,GAO9ByiC,UANemqF,EAAAA,EAAAA,KAAmB1gH,EAAQlM,GAO1C2a,QANcjO,IAAQmgH,EAAAA,GAAAA,IAAengH,GAAMogH,EAAAA,EAAAA,KAAqB5gH,IAAS6gH,EAAAA,EAAAA,KAAsB7gH,EAAQQ,EAAKjR,KAO5GuxH,gBAAiBlzH,QAAQoS,EAAO+gH,YAAY7/E,YAAYv1C,WAZ1CoU,EA/GoCihH,EACtDltH,SACAmtH,eACAzgH,OACA2+B,OACA5I,WACA9nB,UACAqyG,kBACAI,oBACAt3H,cAEA,MAAM,mBAAEwgE,IAAuBj3D,EAAAA,EAAAA,MACzBtJ,GAAUC,EAAAA,EAAAA,MAETq3H,EAAiBC,EAAeC,IAAkBj3H,EAAAA,EAAAA,MAClDk3H,EAAuBC,EAAqBC,IAAwBp3H,EAAAA,EAAAA,MACpEq3H,EAA6BC,EAA2BC,IAA+Bv3H,EAAAA,EAAAA,MACvFw3H,EAAuBC,EAAqBC,IAAyB13H,EAAAA,EAAAA,KAEtE23H,GAAyBzyH,EAAAA,EAAAA,KAAY,KACzCoyH,IACAH,MACC,CAACG,EAA2BH,IAEzBS,GAAa1yH,EAAAA,EAAAA,KAAY,KAC7BuyH,IACAT,MACC,CAACS,EAAqBT,IAEnB9xE,GAAiB2yE,EAAAA,GAAAA,GAAsB,CAC3CzhH,OACA2+B,OACA5I,WACA9nB,UACAqyG,kBACAkB,aACAD,2BACC,GAEGvtG,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQkK,MAGJouH,GAAgB7uH,EAAAA,EAAAA,IAAiB5B,IACrCA,EAAEwV,kBAEF,MAAMojD,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB1J,MAAO5sD,EACPR,OAAQQ,EACRu2D,aAIEm2D,EAAY2B,GAAmB3tG,GAErC,OACE5oB,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,oCACVK,QAAS4qB,EACT86B,eAAgBA,EAChBkxE,UAAWA,EAAUz0H,SAAA,EAEpB+T,EAAAA,EAAAA,IAAShM,IACRhH,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQ15B,EACRmtH,aAAcA,EACdl3E,WAAS,EACTqxE,WAAW,SACXgH,kBAAmB10F,EAAAA,GAAkBh2B,gBAGvC5K,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZh9C,OAAQA,EACRmtH,aAAcA,EACd7F,WAAW,SACXrxE,WAAS,EACTq4E,kBAAmB10F,EAAAA,GAAkBh2B,eAGxCwpH,GAAqB/hF,GAAMkjF,iBAC1Bv1H,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,oBACVqrG,MAAI,EACJ9hD,OAAK,EACLvlD,KAAK,OACL3D,QAASs4H,EAAcn2H,SAEtBlC,EAAQ,aAGZ+3H,IACC90H,EAAAA,GAAAA,GAACw1H,GAAAA,EAAa,CACZpyH,OAAQixH,EACRzwH,QAAS2wH,EACTljH,oBAAqB2jH,EACrBhuH,OAAQA,IAGX2tH,IACC30H,EAAAA,GAAAA,GAACy1H,GAAAA,EAAe,CACdryH,OAAQoxH,EACR5wH,QAAS8wH,EACTrjH,oBAAqBwjH,EACrB7tH,OAAQA,WChHZq3D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAwGjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAMqrD,GAAejrD,EAAAA,EAAAA,KAAeJ,GAAQqrD,aACtCpmC,EAAWomC,EAAaC,gBAAgBxf,QAE9C,MAAO,CACLznB,WAAYY,GAAYomC,EAAaE,gBAAgBC,QACrDvmC,WACAwmC,aAAczrD,EAAO0rD,WAAWp2B,WAPhBv1B,EAtG6ByiH,EAC/CpvF,cACA/O,YACAY,WACAwmC,mBAEA,MAAM,qBACJK,EAAoB,iBACpB0D,IACEr8D,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MAEfhS,GAAOD,EAAAA,EAAAA,MAEN8hE,EAAoBC,IAAyBttD,EAAAA,EAAAA,KAAkB,GAEhE0tD,GAAmBzhE,EAAAA,EAAAA,KAAQ,KAC/B,IAAKy6B,EAAU,MAAO,GACtB,MAAMw9F,EAAY,IAAIxoC,IAAIxuB,GACpBi3D,EAAgBz9F,EAASqI,QAAQ/9B,IAAQkzH,EAAUloC,IAAIhrF,KAE7D,OAAOkkC,EAAAA,GAAAA,IAAmB,CAAEC,IAAKgvF,EAAe/uF,MAAOP,EAAa9lC,KAAM,WACzE,CAAC23B,EAAUwmC,EAAcr4B,IAEtBuvF,GAAkBtvH,EAAAA,EAAAA,IAAiB9D,IACvCigE,EAAiB,CAAEjgE,KAAIqzH,sBAAsB,OAGzCjwE,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXW,SAGH,IAEGC,GAA2B14D,EAAAA,EAAAA,IAAgB,KAC/Cw4D,GAAuBG,IAAUA,OAG7B6zD,GAAoBjnB,EAAAA,GAAAA,GAAkB,CAACxlE,GAAc80D,EAAAA,OAA+B7jE,EAE1F,OACEv3B,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,sBAAqBwC,UACrDH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAU,+BACVqqD,MAAOisE,EAAoB5zD,OAAmBxhE,EAC9CopD,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,EAER8zH,IAAqB/yH,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAC9BgmE,IAAsB5zD,GAAkBtgE,SACvCmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrB81H,IAAsBzsF,GAAexlC,QAAQ69D,GAAc9/D,UAC1DC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIrC,UAAU,kBAAiBwC,SAAA,CAC5B0/D,EAAa9/D,OAhEG,IAiEfmB,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAAC98F,UAAU,OAAOK,QAASmiE,EAAyBhgE,SACtDhC,EAAK6hE,EAAqB,2BAA6B,8BAG3D7hE,EAAK,qBAEP0hE,EAAaz/D,KAAI,CAACuD,EAAInE,KACrB,GAAKwgE,KAAsBxgE,GAxEV,GA4EjB,OACE0B,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBltH,OAAQvE,EACR3F,QAAS+4H,EACTzB,mBAAiB,UAM1BrB,GAAqBjyH,QAAQq+D,GAAkBtgE,UAC9CC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAAEhC,EAAK,uBACrCkiE,EAAiBjgE,KAAKuD,IAEnBzC,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBltH,OAAQvE,EACR3F,QAAS+4H,EACTzB,mBAAiB,kBCfnC,SAAS2B,GACP94H,EAAiBkL,EAAqByG,EAAkB03B,EAAsB0vF,GAE9E,IAAKpnH,EACH,OAAOqnH,EAAAA,EAAAA,GAAqBh5H,EAAMkL,OAASxK,EAAW2oC,GAGxD,MAAM4vF,GAAYC,EAAAA,EAAAA,IAAoBhuH,GAEtC,OACErJ,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,gBAAewC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OACE0J,IAAKkF,EACL+c,IAAI,GACJlvB,WACEsC,EAAAA,GAAAA,GAAe,uBAAwBi3H,GAAgB,QAASE,GAAa,yBAE/E3sH,WAAW,KAEZ6sH,EAAAA,EAAAA,IAAgBjuH,KAAYnI,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UACvC20H,EAAAA,EAAAA,GAAqBh5H,EAAMkL,GAAS,EAAMm+B,KAGjD,CAEA,UAAehqC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAChC,IAAK0M,EACH,MAAO,CAAC,EAGV,MAAM2iH,GAAoBvS,EAAAA,EAAAA,IAAqBpwG,GACzC4iH,EAAkBD,GAAoB/jF,EAAAA,EAAAA,KAAWp/B,EAAQmjH,QAAqB14H,EAEpF,MAAO,CACL+V,UACI2iH,GAAqB,CAAEC,sBAZbrjH,EAxF2BsjH,EAC7CpuH,UACAm+B,cACAt/B,SACA0M,OACA4iH,sBAEA,MAAM,aAAE/gG,IAAiBlvB,EAAAA,EAAAA,OAEnB,SAAEpE,IAAaC,EAAAA,EAAAA,MACfs0H,GAAkBC,EAAAA,EAAAA,IAAkBtuH,QAAkDxK,GAAvC+4H,EAAAA,EAAAA,IAA4BvuH,GAC3EwuH,GAAe1oH,EAAAA,EAAAA,IAAS2oH,EAAAA,EAAAA,IAAoBzuH,EAAS,UACrD6tH,EAAel1H,SAAQ+1H,EAAAA,EAAAA,IAAqB1uH,IAE5Cuf,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCgvB,EAAa,CAAEvuB,SAAQsV,UAAWnU,EAAQ1F,GAAIqzH,sBAAsB,OAGhE74H,GAAOD,EAAAA,EAAAA,KAEP02H,EAAY2B,GAAmB3tG,GAErC,IAAKhU,EACH,OAGF,MAAM/M,EAAO2vH,GAAmB5iH,EAEhC,OACE5U,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,kCACVymB,QAASjhB,EACTnF,QAAS4qB,EACTgsG,UAAWA,EAAUz0H,SAAA,EAErBe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAMA,EACN6lD,gBAAiB8pE,GAAiBzqE,UAEpC/sD,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,EACnBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,WAAUwC,SAAA,EACvBe,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CACZ5lD,KAAMA,EACNO,iBAAe,EACfslD,gBAAiBxlD,IAAWsvH,GAAiB7zH,IAAM6zH,GAAiBzqE,UAEtE7rD,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,eAAcwC,UAC3Be,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAAC98F,UAAU,OAAMwC,UACnB63H,EAAAA,GAAAA,IAAoB75H,EAAqB,IAAfkL,EAAQ6tB,cAKzCh2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAAUyD,IAAI,OAAMjB,SAChC82H,GAAc94H,EAAMkL,EAASwuH,GAAgBH,EAAgBlwF,EAAa0vF,iBC7CvF,IAAe15H,EAAAA,EAAAA,KA5CmBy6H,EAChCC,aAAY3wF,eAEZ,MAAM4wF,GAAcv5H,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCs5H,GAE9B,GADgBA,EAAW19B,MAAM,0BACpB,CACX,MAAMtjE,EAAO,IAAI1G,KAAK0nG,GACtB,MAAO,CAAC,CAAEhhG,OAAMhd,MAAMg/C,EAAAA,GAAAA,GAAmBhiC,IAC3C,CAEA,MAAMkhG,EAAa,GACbC,EAAc,IAAI7nG,KAClBunC,EAAcsgE,EAAY9gE,cAC1B+gE,EAAaD,EAAYpgE,UAAa,IAAIznC,KAAK,GAAGunC,KAAemgE,KAAejgE,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAI1P,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMnxB,EAAO,IAAI1G,KAAK,GAAG8nG,EAAajwE,KAAK6vE,KAC3CE,EAAW14H,KAAK,CAAEw3B,OAAMhd,MAAMg/C,EAAAA,GAAAA,GAAmBhiC,IACnD,CAEA,OAAOkhG,CACT,CAvCoCG,CAAuBL,IAAa,CAACA,IACvE,OACEh3H,EAAAA,GAAAA,GAAA,WAASvD,UAAU,4CAA2CwC,SAC3Dg4H,EAAY/3H,KAAI,EAAG82B,OAAMhd,WAEtBla,EAAAA,GAAAA,IAAA,OACEhC,QAASA,IAAMupC,EAASrQ,GACxBv5B,UAAU,YAAWwC,SAAA,EAGrBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cACXtB,EAAAA,GAAAA,GAAA,QAAAf,SAAO+Z,MAHFA,UCFX+vC,GAAkB,EAAIlvC,EAAAA,EAmC5B,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,SAAQgmD,cAGV,CACL7B,OAHYmsE,EAAAA,EAAAA,KAAYpkH,EAAQlM,EAAQgmD,MAF1B/5C,EAjCqCskH,EACvDvqE,UACA7B,QACAruD,cAEA,MAAM4qB,GAAcllB,EAAAA,EAAAA,KAAY,KAC9B1F,EAAQkwD,KACP,CAACA,EAASlwD,IAEP42H,EAAY2B,GAAmB3tG,GAErC,GAAKyjC,EAIL,OACErsD,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,oCACVK,QAAS4qB,EACTq1D,gBAAgB,aAChB22C,UAAWA,EAAUz0H,SAAA,EAErBe,EAAAA,GAAAA,GAACitD,GAAAA,EAAS,CACRxsD,KAAMsoD,GACNoC,MAAOA,EACP1uD,UAAU,aACVywD,gBAAgB,uBAElBltD,EAAAA,GAAAA,GAAA,OAAKE,IAAI,OAAOzD,UAAU,WAAUwC,UAAE8B,EAAAA,GAAAA,GAAWoqD,EAAMhnD,gBChBvDk6D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAgIjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAQ+1B,KAAM0hB,GAAcz3C,EAAO03C,OAC7B,cAAE3zB,EAAeq7F,UAAYF,SAAUC,IAA6Bn/G,GACpE,eACJurD,EAAc,cAAEnmC,EAAa,cAAEk/F,EAAexwH,OAAQurH,IACpDj/G,EAAAA,EAAAA,KAAeJ,GAAQqrD,cAErB,SAAEpmC,GAAcG,GAAetf,MAAS,CAAC,EAE/C,MAAO,CACLie,gBACAkB,WACAk6F,yBACA1nE,YACA8T,iBACA+4D,gBACAjF,kBAjBct/G,EA9HkCwkH,EACpDnxF,cACAoxF,kBACAv/F,WACAk6F,yBACA1nE,YACA8T,iBACA+4D,gBACAjF,eACAoF,qBACAl4D,cAEA,MAAM,qBAAEgzD,EAAoB,WAAEmF,IAAevxH,EAAAA,EAAAA,MAEvCpJ,GAAOD,EAAAA,EAAAA,MACP,SAAEiF,IAAaC,EAAAA,EAAAA,MAEf2jD,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAM,cAKX,CAAC8lC,IAEEuxF,GAAmBr1H,EAAAA,EAAAA,KACtBC,IACM8vH,IACLqF,EAAW,CAAE5wH,OAAQurH,EAAcz+G,SAAUrR,EAAIqzH,sBAAsB,IAElE7zH,GACHw9D,OAGJ,CAAC8yD,EAActwH,EAAUw9D,IAGrBkzD,GAAgBj1H,EAAAA,EAAAA,KAAQ,IACvBy6B,GAAgC,IAApBA,EAASt5B,OAInBs5B,EACJj5B,KAAKuD,IACJ,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAEjD,OAAO4vH,IAAyBrrH,IAASiiC,KAAK3sB,MAE/CkkB,OAAO1/B,SACPukD,MAAK,CAACC,EAAGC,IAAMA,EAAEvvB,KAAOsvB,EAAEtvB,OAVpBgR,GAAAA,GAWR,CAAC7O,EAAUk6F,IAmBRyF,EAAer5D,IAAmBA,EAAe7T,QAAU6T,EAAe6zD,WAAaK,EAAc9zH,SACrG24H,GAAe34H,OAErB,OACEmB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAU,yCACVqqD,MAAO6rE,EACP5rE,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,CAETy4H,IACC13H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1Ce,EAAAA,GAAAA,GAAC+2H,GAAW,CACVC,WAAYU,EACZrxF,SAAUsxF,MAIfG,IACC93H,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrB6D,QAAQ02H,GAAe34H,UACtBC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,EACnBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uCAAuCyD,IAAKjD,EAAKkD,MAAQ,YAASxC,EAAUsB,SACvFhC,EAAK,YAEPu6H,EAAct4H,KAAKuD,IAEhBzC,EAAAA,GAAAA,GAACu3H,GAAqB,CACpBvwH,OAAQurH,EACRvlE,QAASvqD,EACT3F,QAAS+6H,SAMlB/2H,QAAQ6xH,EAAc9zH,UACrBC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,EACnBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uCAAuCyD,IAAKjD,EAAKkD,MAAQ,YAASxC,EAAUsB,SACvFhC,EAAK,oBAEP01H,EAAczzH,KA/DzB,SAA4BiJ,GAC1B,MAAM6Q,GAAOi9G,EAAAA,EAAAA,GAAqBh5H,EAAMkL,GAClCuL,EAAOi3C,EAAUxiD,EAAQnB,QAE/B,GAAKgS,GAAStF,EAId,OACE1T,EAAAA,GAAAA,GAACu2H,GAAW,CACVvvH,OAAQmB,EAAQnB,OAChBmB,QAASA,EACTm+B,YAAaA,GAGnB,gB,4BClFF,MAsFA,IAAehqC,EAAAA,EAAAA,KAtFiCy7H,EAC9CC,gBACAz6B,0BAEA,MAAMplF,GAAMlJ,EAAAA,EAAAA,OACN,eAAE4pB,EAAc,cAAEo/F,EAAa,SAAE7xH,IAAaC,EAAAA,EAAAA,MAC9CpJ,GAAOC,EAAAA,GAAAA,MAEP,OACJsJ,EAAM,SAAE43B,EAAQ,eAAEq5E,EAAc,YAAEC,GAChCsgB,GAEJE,EAAAA,GAAAA,IAAe//G,EAAKolF,GAAsBnB,IACR,IAA5BA,EAAM+7B,mBACRF,EAAc,CAAE75F,gBAIpB,MAAM1W,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCsyB,EAAe,CAAEuF,aACjBh4B,EAAS,CAAE3D,GAAI+D,QAGX,kBACJgsE,EAAiB,kBAAEC,EAAiB,wBACpCquB,EAAuB,kBAAEpuB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB16D,IAGzBuP,YAAa0wG,EACbnrF,gBAAiBorF,IACfnrF,EAAAA,GAAAA,IAAcvoC,IAChBA,EAAEwV,kBACFu4D,EAAkB/tE,MAGd+uH,EAAY2B,GAAmB3tG,GAErC,OACE5oB,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP8T,IAAKA,EACL1b,UAAU,oCACVK,QAAS4qB,EACT2lB,YAAayzD,EACb33E,cAAeupD,EACfghD,UAAWA,EAAUz0H,SAAA,EAEpB+T,EAAAA,EAAAA,IAASxM,IACRxG,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQl6B,EACR2tH,cAAY,EACZl3E,WAAS,EACTqxE,WAAW,SACXgH,kBAAmB10F,EAAAA,GAAkBh2B,gBAGvC5K,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZh9C,OAAQR,EACR2tH,cAAY,EACZ7F,WAAW,SACXrxE,WAAS,EACTq4E,kBAAmB10F,EAAAA,GAAkBh2B,gBAGzC9L,EAAAA,GAAAA,IAACw5H,GAAAA,EAAW,CAAC77H,UAAU,yBAAyB4wC,YAAagrF,EAAsBv7H,QAASs7H,EAAiBn5H,SAAA,CAC1GhC,EAAK,uBACN+C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEZmxE,IACCzyE,EAAAA,GAAAA,GAAC+3G,GAAAA,EAAoC,CACnC30G,OAAQovE,EACRgH,OAAQ/G,EACRulC,WAAY7/F,EACZimB,SAAUA,EACVq5E,eAAgBA,EAChBD,WAAS,EACTE,YAAaA,EACb9zG,QAAS+uE,EACTthE,oBAAqBuhE,UCvEzBvU,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAO,GA8FnD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAQs1B,QAAS+vF,GAAerlH,EAAOslH,SACjC5wF,EAAY10B,EAAOxT,MAAMupC,MACzB,qBAAEwvF,GAAyBvlH,EAEjC,MAAO,CACLqlH,aACA3wF,YACA6wF,0BATcxlH,EA5F8BylH,EAChDH,aACA3wF,YACA6wF,uBACAh5D,cAEA,MAAM,aACJk5D,EAAY,SAAEvyH,EAAQ,uBACtBwyH,EAAsB,wBAAEC,IACtBxyH,EAAAA,EAAAA,MAEEyyH,GAAc7pH,EAAAA,EAAAA,OAIpB1R,EAAAA,EAAAA,KAAU,KACR8gE,IAAa,KACXs6D,SAED,CAACA,KAEJt+C,EAAAA,GAAAA,GAAoBy+C,GAAcP,GAElC,MAAM7wG,GAAcllB,EAAAA,EAAAA,KAAaC,IAC/B2D,EAAS,CAAE3D,KAAIqzH,sBAAsB,IACrCr2D,IACAjvD,YAAW,KACTooH,EAAuB,CAAEn2H,SAhCC,OAkC3B,CAAC2D,EAAUwyH,EAAwBn5D,IAEhCs5D,GAAgCv2H,EAAAA,EAAAA,KAAY,KAChDq2H,MACC,CAACA,IAEE57H,GAAOD,EAAAA,EAAAA,KAEb,OACE8B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+BAA8BwC,SAAA,CAC1Cs5H,IACCv4H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,oBAAoByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UACrEe,EAAAA,GAAAA,GAAA,OAAKmY,IAAK2gH,EAAar8H,UAAU,YAAWwC,SACzCs5H,EAAWr5H,KAAKwhC,IACf5hC,EAAAA,GAAAA,IAAA,OAEErC,UAAU,gBACVK,QAASA,IAAM4qB,EAAYgZ,GAC3BxgC,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAEpCe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAMihC,EAAUlH,MACxB1gC,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAewC,UAAE8B,EAAAA,GAAAA,IAAWsuD,EAAAA,EAAAA,IAAuBznB,EAAUlH,KAtD/E,SAgDQA,SAYd+3F,IACC35H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sBAAqBwC,SAAA,EAClCH,EAAAA,GAAAA,IAAA,MACErC,WAAWsC,EAAAA,GAAAA,GACT,4CACCw5H,GAAc,kBAEjBr4H,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,CAEnChC,EAAK,WAEN+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,qBACVoa,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACNkR,UAAW7Z,EAAK,SAChBH,QAASi8H,EACT54H,MAAOlD,EAAKkD,MAAMlB,UAElBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAGdm3H,EAAqBv5H,KAAKuD,IACzBzC,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBltH,OAAQvE,EACR2xH,mBAAiB,EACjBt3H,QAAS4qB,gBC7CjB22C,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAuajD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAU8lH,oBACT,MAAQxwF,QAAS/B,GAAevzB,EAAO81B,aAAe,CAAC,GACjD,cACJ/R,EAAa,SAAEq7F,GACbp/G,EAEJ,IAAKuzB,EACH,MAAO,CAAC,EAGV,MAAM,eACJg4B,EAAc,cAAEw6D,EAAa,aAAEC,EAAY,cAAE5gG,EAAa,cAAE0/F,IAC1D1kH,EAAAA,EAAAA,KAAeJ,GAAQqrD,cACnBvf,QAASm6E,GAAkBF,GAAiB,CAAC,GAC7Cj6E,QAASo6E,GAAmBF,GAAgB,CAAC,GAC7C9G,SAAUC,GAA2BC,EACvCn6F,EAAWG,IAAgB0gG,EAAgB,WAAa,SAAS7gG,UACjE,kBAAEkhG,IAAsBC,EAAAA,EAAAA,KAAwBpmH,EAAQqmH,EAAAA,MAAiC,CAAC,EAEhG,MAAO,CACLtiG,gBACAwP,aACA2yF,iBACAD,gBACAhhG,WACAk6F,yBACA5zD,iBACAu5D,gBACAwB,oBAAqBH,KA7BPpmH,EAra2BwmH,EAC7CT,gBACA1yF,cACA0wF,aACAU,kBACAzgG,gBACAwP,aACA2yF,iBACAD,gBACAhhG,WACAk6F,yBACA5zD,iBACA+6D,sBACAxB,gBACAv4D,UACAk4D,yBAEA,MAAM,SACJvxH,EAAQ,uBAAEwyH,EAAsB,qBAAEnG,EAAoB,sBACtDiH,EAAqB,2BAAEC,IACrBtzH,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MACf2qH,GAAmB3qH,EAAAA,EAAAA,MAEnBlS,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEP,SAAE+E,IAAaC,EAAAA,EAAAA,OACd23H,EAAqBC,IAA0BroH,EAAAA,EAAAA,KAAkB,IACjEsoH,EAAsBC,IAA2BvoH,EAAAA,EAAAA,KAAkB,IACnEwoH,EAAeC,IAAoBzoH,EAAAA,EAAAA,IAAkC,OACtE0G,GAAMlJ,EAAAA,EAAAA,OAEZmJ,EAAAA,GAAAA,IAAc,KACR4gH,GAAeW,EAA2B,CAAC,MAGjD,MAAM9zE,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAMw4H,EAAgB,WAAa,OACnCmB,QAASF,SAKd,CAAC3zF,EAAa2zF,IAEXpE,GAAkBrzH,EAAAA,EAAAA,KACrBC,IACC2D,EAAS,CAAE3D,KAAIqzH,sBAAsB,IAEjCrzH,IAAOw0B,GACT2hG,EAAuB,CAAEn2H,OAGtBR,GACHw9D,MAGJ,CAACr5D,EAAU6wB,EAAeh1B,EAAU22H,EAAwBn5D,IAGxD26D,GAAwB53H,EAAAA,EAAAA,KAAaC,IACzCi3H,EAAsB,CAAEj3H,SACvB,CAACi3H,IAEJ,SAASW,EAAwBF,GAC/B,OAAgCl9H,EAAhB,UAAZk9H,EAAiC,4BACrB,WAAZA,EAAkC,0BACtB,aAAZA,EAAoC,wBAC5B,wBACd,CAEA,MAAM,kBACJ3nD,EAAiB,kBAAEC,EAAiB,kBAAEC,EAAiB,uBACvDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB16D,GAErBm6D,GAAiB/rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,UAC3CmjE,GAAiBhsE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,QAASlF,cAAc,qCAClEmoE,GAAoB9rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,QAASlF,cAAc,kBAErEowH,IAAqB/zH,EAAAA,EAAAA,IAAiB5B,IAC1C+tE,EAAkB/tE,MAGd41H,IAAuBx7H,EAAAA,GAAAA,GAAe,OAAQ,mBAqD9Cm6H,IAAex7H,EAAAA,EAAAA,KAAQ,KAC3B,IAAKs7H,KAAmB1yF,GAAgBA,EAAYk0F,WAAW,MAAQl0F,EAAYznC,OAAS,GAC1F,OAAOmoC,GAAAA,EAIT,MAAM2jB,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAG9BwxF,IADiBC,EAAAA,GAAAA,IAAcC,EAAAA,MAAkB,IAChBn6F,QAAQ/9B,IAC7C,IAAKu2H,EAAe,OAAO,EAC3B,MAAMtlH,EAAOi3C,EAAUloD,GACvB,OAAOiR,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MAEzBknH,GAAej0F,EAAAA,GAAAA,IAAmB,CAAEC,IAAK6zF,EAAiB5zF,MAAOP,EAAa9lC,KAAM,SAE1F,GAAIw4H,EAAe,OAAO4B,EAE1B,MAAMC,EAAmB,IACnB5jG,EAAgB,CAACA,GAAiB,MAClCwP,GAAc,IAOdq0F,EAAe,KAJGn0F,EAAAA,GAAAA,IAAmB,CACzCC,IAAKi0F,EAAkBh0F,MAAOP,EAAa9lC,KAAM,YAK9Co6H,GAGL,OAAOl0F,EAAAA,GAAAA,IAAO,KACTynB,EAAAA,GAAAA,GAAY2sE,OAAcn9H,EAAWs5B,EAAgB,CAACA,QAAiBt5B,OACvEwwD,EAAAA,GAAAA,GAAYirE,GAAkB,QAElC,CAAC9yF,EAAarP,EAAewP,EAAY2yF,EAAgBJ,KAE5D3+C,EAAAA,GAAAA,GAAoBu/C,GAAmBV,GAAar6H,QAAUm6H,GAAe,GAE7E,MAAMC,IAAgBv7H,EAAAA,EAAAA,KAAQ,KAC5B,IAAK4oC,GAAeA,EAAYznC,OA7LO,IA6LyCs6H,EAC9E,OAAOnyF,GAAAA,EAIT,MAAM2jB,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAE9B8xF,EAAc5B,EAAc34F,QAAQ/9B,IACxC,IAAKu2H,EAAe,OAAO,EAC3B,MAAMtlH,EAAOi3C,EAAUloD,GACvB,OAAOiR,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MAG/B,OAAOy6C,EAAAA,GAAAA,GAAY4sE,GAAa,KAC/B,CAAC5B,EAAeH,EAAe1yF,IAE5BqsF,IAAgBj1H,EAAAA,EAAAA,KAAQ,KAC5B,IAAM4oC,IAAgB0wF,IAAgB7+F,GAAgC,IAApBA,EAASt5B,OACzD,OAAOmoC,GAAAA,EAIT,MAAM2jB,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAEpC,OAAO9Q,EACJj5B,KAAKuD,IACJ,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAC3CiR,EAAOi3C,EAAU3jD,GACvB,GAAK0M,KACDslH,IAAkBxiG,EAAAA,EAAAA,IAAc9iB,IAEpC,OAAO2+G,IAAyBrrH,IAASiiC,KAAK3sB,MAE/CkkB,OAAO1/B,WACT,CAACwlC,EAAa0wF,EAAY7+F,EAAU6gG,EAAe3G,KAEtD90H,EAAAA,EAAAA,KAAU,KACH+oC,GACLmsF,EAAqB,CACnBjyH,KAAMw4H,EAAgB,WAAa,OACnCmB,QAASF,EACTe,0BAA0B,EAC1BC,mCAAmC,MAGpC,CAAChB,IAEJ,MAAMiB,IAA2B14H,EAAAA,EAAAA,KAAY,KAC3Cs3H,GAAwBD,KACvB,CAACA,IAEEsB,IAA4B34H,EAAAA,EAAAA,KAAY,KAC5Cw3H,GAAyBD,KACxB,CAACA,IAqBEqB,GAAiBzI,GAEjBmF,GAAiC,QAAlBmC,GAA2Bx7D,IAAmBA,EAAe7T,QAAU6T,EAAe6zD,WACrG4G,GAAar6H,SAAWo6H,GAAcp6H,SAAWu8H,GAAev8H,OAChEw8H,GAAqB58D,GAAgB6zD,SAErCgJ,IAAwBh1F,IAAgB0wF,IAAegC,GAEvD,QAAEr9B,KAAYM,EAAAA,GAAAA,IAAwB,CAC1CC,QAASxvE,EACTkwE,WA/Q0B,IAgR1B/sF,YAAayrH,KAGf,GAAIA,GACF,OAAOt7H,EAAAA,GAAAA,GAAC04H,GAAc,CAACj5D,QAASA,IAGlC,MAAM87D,GAAgD,QAAlBtB,GAA0Bn5H,QAAQs6H,GAAev8H,QAErF,OACEC,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACb1uC,IAAKuU,EACLjwB,UAAU,oCACVqqD,MAAOs0E,GACPr0E,WAAYlB,EAEZ21E,sBAAoB,EACpBj8D,YAAU,EAAAtgE,SAAA,CAETy4H,IACC13H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1Ce,EAAAA,GAAAA,GAAC+2H,GAAW,CACVC,WAAYU,EACZrxF,SAAUsxF,MAIfG,KACC93H,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAMjc,EAAQ,6BACd2U,YAAa3U,EAAQ,0CAGxB+D,QAAQo4H,GAAar6H,UAAYm6H,IAChCh5H,EAAAA,GAAAA,GAAA,OACEvD,UAAU,8BACVyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAC7Bwa,IAAKyhH,EAAiB36H,SAErBi6H,GAAah6H,KAAKuD,IACjBzC,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPP,OAAQ/D,EACRhG,UAAU,+BACVK,QAASs9H,EACTjzH,SAAU1E,QAKjB3B,QAAQo4H,GAAar6H,UACpBC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIrC,UAAU,kBAAkByD,IAAKnD,EAAQoD,MAAQ,YAASxC,EAAUsB,SAAA,CACrEi6H,GAAar6H,OArUK,IAsUjBmB,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAAC98F,UAAU,OAAOK,QAASo+H,GAAyBj8H,SACtDlC,EAAQ88H,EAAsB,2BAA6B,8BAG/D98H,EAAQi8H,EAAgB,mBAAqB,sCAE/CE,GAAah6H,KAAI,CAACuD,EAAInE,KACrB,GAAKu7H,KAAuBv7H,GA7UT,GAiVnB,OACE0B,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBE,mBAAiB,EACjBptH,OAAQvE,EACR3F,QAAS+4H,UAMlB/0H,QAAQm4H,GAAcp6H,UACrBC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIrC,UAAU,kBAAkByD,IAAKnD,EAAQoD,MAAQ,YAASxC,EAAUsB,SAAA,CACrEg6H,GAAcp6H,OA9VI,IA+VjBmB,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAAC98F,UAAU,OAAOK,QAASq+H,GAA0Bl8H,SACvDlC,EAAQg9H,EAAuB,2BAA6B,8BAGhEh9H,EAAQ,qCAEVi7H,IACCh4H,EAAAA,GAAAA,GAAC+3H,GAAyB,CAACC,cAAeA,EAAez6B,oBAAqB5B,KAE/Es9B,GAAc/5H,KAAI,CAACuD,EAAInE,KACtB,GAAKy7H,KAAwBz7H,GAzWV,GA6WnB,OACE0B,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBltH,OAAQvE,EACR0xH,cAAY,EACZr3H,QAAS+4H,UAMlB/0H,QAAQ04H,GAAqB36H,UAAYynC,IACxCxnC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAkByD,IAAKnD,EAAQoD,MAAQ,YAASxC,EAAUsB,SACrElC,EAAQ,+BAEVy8H,EAAoBt6H,KAAKuD,IAEtBzC,EAAAA,GAAAA,GAACk0H,GAAoB,CACnBltH,OAAQvE,EACR0xH,cAAY,EACZr3H,QAAS+4H,UAMnB/2H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,YAAY0b,IAAKA,EAAIlZ,SAAA,EArSpCe,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQovE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChB91E,UAAU,yBACVmH,QAAS+uE,EACTthE,oBAAqBuhE,EACrBpvD,WAAS,EAAAvkB,UAETH,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAwB,QAAlB+1H,EAA0B,aAAUt8H,EAC1C89H,WAA8B,QAAlBxB,GAA0Bj6H,EAAAA,GAAAA,GAAA,KAAGvD,UAAW89H,UAA2B58H,EAE/Eb,QAASA,IAAMo9H,EAAiB,OAAOj7H,SAEtCo7H,EAAwB,UAE3Br6H,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAwB,UAAlB+1H,EAA4B,aAAUt8H,EAC5C89H,WAA8B,UAAlBxB,GAA4Bj6H,EAAAA,GAAAA,GAAA,KAAGvD,UAAW89H,UAA2B58H,EAEjFb,QAASA,IAAMo9H,EAAiB,SAASj7H,SAExCo7H,EAAwB,YAE3Br6H,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAwB,WAAlB+1H,EAA6B,aAAUt8H,EAC7C89H,WAA8B,WAAlBxB,GAA6Bj6H,EAAAA,GAAAA,GAAA,KAAGvD,UAAW89H,UAA2B58H,EAElFb,QAASA,IAAMo9H,EAAiB,UAAUj7H,SAEzCo7H,EAAwB,aAE3Br6H,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAwB,aAAlB+1H,EAA+B,aAAUt8H,EAC/C89H,WAA8B,aAAlBxB,GAA+Bj6H,EAAAA,GAAAA,GAAA,KAAGvD,UAAW89H,UAA2B58H,EAEpFb,QAASA,IAAMo9H,EAAiB,YAAYj7H,SAE3Co7H,EAAwB,mBA6P5BkB,KACCz8H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIrC,UAAU,kBAAkByD,IAAKnD,EAAQoD,MAAQ,YAASxC,EAAUsB,SAAA,EACpE+5H,IACAl6H,EAAAA,GAAAA,IAACy6F,GAAAA,EAAI,CAAC98F,UAAU,gCAAgCK,QAASw9H,GAAmBr7H,SAAA,CACzEhC,EAAK,uBAAwB,CAC5BuD,KAAM65H,EAAwBJ,IAC7B,CACD/9E,WAAW,KAGbp9C,EAAAA,GAAAA,IAACghC,GAAAA,GAAU,CACTx+B,KAAK,OACLo6H,eAAa,EACb37F,UAAWtX,OAAO4yG,IAClB5+H,UAAU,gBACVuuC,eAAe,qBAAoB/rC,SAAA,CAElCo8H,KAAuBr7H,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAC9BsuE,KAAsBr7H,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAIxCvE,EAAQ,qBAEVq+H,GAAel8H,KA/K1B,SAA4BiJ,GAC1B,MAAMwiD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAE9BjwB,GAAOi9G,EAAAA,EAAAA,GAAqBl5H,EAASoL,GACrCuL,EAAOi3C,EAAUxiD,EAAQnB,QAE/B,GAAKgS,GAAStF,EAId,OACE1T,EAAAA,GAAAA,GAACu2H,GAAW,CACVvvH,OAAQmB,EAAQnB,OAChBmB,QAASA,EACTm+B,YAAaA,GAGnB,iB,gBC9SF,MAAMq1F,GAAe,YAGft9D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAoHjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,IAClB++G,GAAsB2J,IADJ1oH,EAlH2B2oH,EAC7Ct1F,cACA/O,YACAozB,YACA/iB,YACAyqF,yBACAl6F,WACAlkB,kBACAg1G,yBAEA,MAAM,qBACJwJ,EAAoB,aACpBl9F,IACElvB,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MAEfhS,GAAOD,EAAAA,EAAAA,MAEL2+F,QAASkgC,IAAgC5/B,EAAAA,GAAAA,IAAwB,CACvEC,QAASxvE,EACTkwE,WAzB0B,MA4BtB/2C,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAMm7H,UAKX,CAACr1F,IAEEqsF,GAAgBj1H,EAAAA,EAAAA,KAAQ,IACvBy6B,GAAak6F,EAIXl6F,EAASj5B,KAAKuD,IACnB,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAC3C0F,EAAUkqH,EAAuBrrH,IAASiiC,KAAK3sB,GAErD,OAAOnU,IAAW2zH,EAAAA,EAAAA,IAAmB3zH,GAAWA,OAAUxK,KACzD6iC,OAAO1/B,SARDkmC,GAAAA,GASR,CAACqrF,EAAwBl6F,IAEtB06F,GAAqBrwH,EAAAA,EAAAA,KAAa2F,IACtCotB,EAAa,CAAEvuB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,OACzD,CAAC8yB,IAyCEw9F,GAAoBjnB,EAAAA,GAAAA,GAAkB,CAACxlE,GAAc80D,EAAAA,OAA+B7jE,EAE1F,OACEv3B,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,sBAAqBwC,UACrDH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAU,8CACVqqD,MAAOisE,EAAoBJ,OAAgBh1H,EAC3CopD,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,EAER8zH,IAAqB/yH,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAC9BgmE,KAAuB56F,GAAgC,IAApBA,EAASt5B,UAC3CmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrB81H,GAAqB56F,GAAYA,EAASt5B,OAAS,GAvDjD8zH,EAAczzH,KAAI,CAACiJ,EAAS7J,KACjC,MACM20H,EADoB,IAAV30H,IAEX40H,EAAAA,GAAAA,IAAY/qH,EAAQ6tB,SAAUk9F,EAAAA,GAAAA,IAAYP,EAAcr0H,EAAQ,GAAG03B,MACxE,OACEl3B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGg0H,IACCjzH,EAAAA,GAAAA,GAAA,KACEvD,UAAU,kBACVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAGnCm0H,EAAAA,GAAAA,IAAmBn2H,EAAM,IAAIqyB,KAAoB,IAAfnnB,EAAQ6tB,QAFtC7tB,EAAQ6tB,OAKjBh2B,EAAAA,GAAAA,GAAA,OACEvD,UAAU,sBAAqBwC,UAG/Be,EAAAA,GAAAA,GAAC+7H,GAAAA,EAAQ,CACPl0H,UAAUi0H,EAAAA,EAAAA,IAAmB3zH,GAC7BA,QAASA,EACT6zH,UAAQ,EACRC,SAAU9zH,EAAQ6tB,KAClBkmG,SAAO,EACP3vF,QAAQinF,EAAAA,GAAAA,GAAcv2H,EAAMkL,EAASwiD,EAAW/iB,GAChDnrC,UAAU,cACVuZ,eAAeC,EAAAA,EAAAA,IAAiBhC,EAAiB9L,EAAQkP,QAAQxP,UACjEohH,mBAAoBA,EACpB1rB,oBAAqBs+B,EACrBpI,YAAaZ,KAbV1qH,EAAQ1F,mB,gBC5EzB,MAAMk5H,GAAe,QAGft9D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GA8GjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,IAClB++G,GAAsB2J,IADJ1oH,EA5G2BkpH,EAC7C71F,cACA/O,YACAozB,YACA/iB,YACAyqF,yBACAl6F,WACAhkB,sBAEA,MAAM,qBACJs+G,EAAoB,aACpBl9F,IACElvB,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MAEfhS,GAAOD,EAAAA,EAAAA,MAEL2+F,QAASkgC,IAAgC5/B,EAAAA,GAAAA,IAAwB,CACvEC,QAASxvE,EACTkwE,WAxB0B,MA2BtB/2C,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAMm7H,UAKX,CAACr1F,IAEEqsF,GAAgBj1H,EAAAA,EAAAA,KAAQ,IACvBy6B,GAAak6F,EAIXl6F,EAASj5B,KAAKuD,IACnB,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAEjD,OAAO4vH,EAAuBrrH,IAASiiC,KAAK3sB,MAC3CkkB,OAAO1/B,SAPDkmC,GAAAA,GAQR,CAACqrF,EAAwBl6F,IAEtB06F,GAAqBrwH,EAAAA,EAAAA,KAAa2F,IACtCotB,EAAa,CAAEvuB,OAAQmB,EAAQnB,OAAQsV,UAAWnU,EAAQ1F,OACzD,CAAC8yB,IAqCEw9F,GAAoBjnB,EAAAA,GAAAA,GAAkB,CAACxlE,GAAc80D,EAAAA,OAA+B7jE,EAE1F,OACEv3B,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,sBAAqBwC,UACrDH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAU,8CACVqqD,MAAOisE,EAAoBJ,OAAgBh1H,EAC3CopD,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,EAER8zH,IAAqB/yH,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAC9BgmE,KAAuB56F,GAAgC,IAApBA,EAASt5B,UAC3CmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrB81H,GAAqB56F,GAAYA,EAASt5B,OAAS,GAnDjD8zH,EAAczzH,KAAI,CAACiJ,EAAS7J,KACjC,MACM20H,EADoB,IAAV30H,IAEX40H,EAAAA,GAAAA,IAAY/qH,EAAQ6tB,SAAUk9F,EAAAA,GAAAA,IAAYP,EAAcr0H,EAAQ,GAAG03B,MACxE,OACEl3B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGg0H,IACCjzH,EAAAA,GAAAA,GAAA,KACEvD,UAAU,kBAEVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAEnCm0H,EAAAA,GAAAA,IAAmBn2H,EAAM,IAAIqyB,KAAoB,IAAfnnB,EAAQ6tB,QAHtC7tB,EAAQ6tB,OAMjBh2B,EAAAA,GAAAA,GAAA,OACEvD,UAAU,sBACVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAGpCe,EAAAA,GAAAA,GAACo8H,GAAAA,EAAO,CAENj0H,QAASA,EACTwuB,aAAa68F,EAAAA,GAAAA,GAAcv2H,EAAMkL,EAASwiD,EAAW/iB,GACrD7zB,YAAaI,GAAmBhM,EAAQ4L,YACxCwpF,oBAAqBs+B,EACrBQ,eAAgBxJ,GALX1qH,EAAQ1F,KAHV0F,EAAQ1F,mB,gBC3EzB,MAAMk5H,GAAe,QAGft9D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GAiHjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,IAClB++G,GAAsB2J,IADJ1oH,EA/G4BqpH,EAC9Ch2F,cACA/O,YACA86F,yBACAl6F,WACAhkB,sBAEA,MAAM,qBACJs+G,EAAoB,gBACpB98G,IACEtP,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MAEfhS,GAAOD,EAAAA,EAAAA,MAEL2+F,QAASkgC,IAAgC5/B,EAAAA,GAAAA,IAAwB,CACvEC,QAASxvE,EACTkwE,WAtB0B,MAyBtB/2C,GAAiBrjD,EAAAA,EAAAA,KAAY,EAAGmtB,gBAChCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,IAAa,KACXo0D,EAAqB,CACnBjyH,KAAMm7H,UAKX,CAAClJ,EAAsBnsF,IAEpBqsF,GAAgBj1H,EAAAA,EAAAA,KAAQ,IACvBy6B,GAAak6F,EAIXl6F,EAASj5B,KAAKuD,IACnB,MAAOuE,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBnwH,GAEjD,OAAO4vH,EAAuBrrH,IAASiiC,KAAK3sB,MAC3CkkB,OAAO1/B,SAPDkmC,GAAAA,GAQR,CAACqrF,EAAwBl6F,IAEtBokG,GAAoB/5H,EAAAA,EAAAA,KAAY,CAACC,EAAYuE,KACjD2O,EAAgB,CACd3O,SACAsV,UAAW7Z,EACXuG,OAAQc,EAAAA,GAAkBc,iBAE3B,CAAC+K,IA6BEo9G,GAAoBjnB,EAAAA,GAAAA,GAAkB,CAACxlE,GAAc80D,EAAAA,OAA+B7jE,EACpFilG,EAAczJ,GAAqB56F,GAAYA,EAASt5B,OAAS,IAAMynC,EACvEm2F,EAAgB1J,GAAqB56F,GAAYA,EAASt5B,OAAS,GAAKynC,EAExEpsB,GAAanb,EAAAA,GAAAA,GACjB,+BACA09H,GAAiB,aAGnB,OACEz8H,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,wCAAuCwC,UACvEH,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACbpqD,UAAWyd,EACX4sC,MAAOisE,EAAoBJ,OAAgBh1H,EAC3CwvD,aAAe7mB,EAAyB,YAAX,SAC7BygB,WAAYlB,EACZ0Z,YAAU,EAAAtgE,SAAA,EAER8zH,IAAqB/yH,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAC9BgmE,KAAuB56F,GAAgC,IAApBA,EAASt5B,UAC3CmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXh6G,KAAM/b,EAAK,6BACXyU,YAAazU,EAAK,0CAGrBu/H,IAlDHx8H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAayD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC7D0zH,EAAczzH,KAAKiJ,IAClBnI,EAAAA,GAAAA,GAAC08H,GAAAA,EAAK,CAEJnhC,SAAS,eACTpzF,QAASA,EACT4L,YAAaI,GAAmBhM,EAAQ4L,YACxCwpF,oBAAqBs+B,EACrB/+H,QAASy/H,GALJ,GAAGp0H,EAAQnB,UAAUmB,EAAQ1F,UAgDrCg6H,GAnCE9J,EAAczzH,KAAKiJ,IACxBnI,EAAAA,GAAAA,GAACu2H,GAAW,CAEVvvH,OAAQmB,EAAQnB,OAChBmB,QAASA,GAFJA,EAAQ1F,eC1Dfk6H,GAAkB,CACtB,CAAEn8H,KAAMo8H,EAAAA,GAAoB57F,SAAUpY,IAAK,kBAC3C,CAAEpoB,KAAMo8H,EAAAA,GAAoBC,YAAaj0G,IAAK,qBAC9C,CAAEpoB,KAAMo8H,EAAAA,GAAoBE,QAASl0G,IAAK,iBAC1C,CAAEpoB,KAAMo8H,EAAAA,GAAoBF,MAAO9zG,IAAK,kBACxC,CAAEpoB,KAAMo8H,EAAAA,GAAoBG,MAAOn0G,IAAK,kBACxC,CAAEpoB,KAAMo8H,EAAAA,GAAoBI,MAAOp0G,IAAK,kBACxC,CAAEpoB,KAAMo8H,EAAAA,GAAoBK,MAAOr0G,IAAK,kBACxC,CAAEpoB,KAAMo8H,EAAAA,GAAoBM,MAAOt0G,IAAK,mBAGpCu0G,GAAuB,CAC3B,CAAE38H,KAAMo8H,EAAAA,GAAoB57F,SAAUpY,IAAK,wBACxC+zG,GAAK18E,MAAM,IAmHhB,IAAe3jD,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEkqH,EAAc,OAAEp2H,IAAWsM,EAAAA,EAAAA,KAAeJ,GAAQqrD,aAE1D,MAAO,CAAE6+D,iBAAgBp2H,YAJTiM,EAhH0BoqH,EAC5C/2F,cACA0wF,aACAx6H,WACA4gI,iBAAiBR,EAAAA,GAAoB57F,SACrCh6B,SACAy4D,cAEA,MAAM,uBACJ69D,EAAsB,oBACtBC,IACEl3H,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,MACNsgI,EAAWC,IAAgBhsH,EAAAA,EAAAA,IAAS2rH,GACrC1F,GAAkBh6H,EAAAA,EAAAA,KAAQ,KAAMggI,EAAAA,GAAAA,IAAgBp3F,IAAc,CAACA,IAE/D0rC,GAAOt0E,EAAAA,EAAAA,KAAQ,KACPsJ,EAASm2H,GAAYR,IACtBz9H,KAAKi6E,IAAG,IACdA,EACHh1E,MAAOlH,EAAKk8E,EAAIvwD,UAEjB,CAAC5hB,EAAQ/J,IAEN0gI,GAAkBp3H,EAAAA,EAAAA,IAAiBjI,IACvC,MAAM66E,EAAMnH,EAAK1zE,GACjBg/H,EAAuB,CAAEjmH,QAAS8hE,EAAI34E,OACtCi9H,EAAan/H,MAGTs/H,GAAyBr3H,EAAAA,EAAAA,IAAiBM,IAC9C02H,EAAoB,CAAEvnG,KAAMnvB,EAAMkwD,UAAY,UAGhD5oC,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM/yC,GAAezd,EAAAA,EAAAA,MACf0Z,GAAgB8iC,EAAAA,GAAAA,GAA0B/+B,EAAclwB,OAAUmB,EAAW,oBAAoB,GAEvG,OACEmB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAa0b,IAAKuU,EAAcigC,UAAWhkC,EAAc1pB,SAAA,EACtEe,EAAAA,GAAAA,GAAC69H,GAAAA,EAAO,CAACL,UAAWA,EAAWxrD,KAAMA,EAAM8rD,YAAaH,KACxD39H,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAMrE,EAAKkD,MAAQ,oBAAsB,iBACzC49H,YAAa/rD,EAAKnzE,OAClBkhC,UAAWq9F,EAAen+H,SAEzB,MACC,OAAQm+H,GACN,KAAKR,EAAAA,GAAoB57F,SACzB,KAAK47F,EAAAA,GAAoBC,YACvB,OAAI71H,GAEAhH,EAAAA,GAAAA,GAACy3H,GAAkB,CACjBnxF,YAAaA,EACboxF,gBAAiBA,EACjBj4D,QAASA,EACTk4D,mBAAoBiG,KAKxB59H,EAAAA,GAAAA,GAACy5H,GAAW,CACVT,cAAeoE,IAAmBR,EAAAA,GAAoBC,YACtDv2F,YAAaA,EACb0wF,WAAYA,EACZU,gBAAiBA,EACjBj4D,QAASA,EACTk4D,mBAAoBiG,IAG1B,KAAKhB,EAAAA,GAAoBF,MACvB,OAAO18H,EAAAA,GAAAA,GAACs8H,GAAY,CAACh2F,YAAaA,IACpC,KAAKs2F,EAAAA,GAAoBG,MACvB,OAAO/8H,EAAAA,GAAAA,GAACm8H,GAAW,CAAC71F,YAAaA,IACnC,KAAKs2F,EAAAA,GAAoBI,MACvB,OAAOh9H,EAAAA,GAAAA,GAAC47H,GAAW,CAACt1F,YAAaA,IACnC,KAAKs2F,EAAAA,GAAoBK,MACvB,OACEj9H,EAAAA,GAAAA,GAACwyH,GAAY,CAEXlsF,YAAaA,GADT,SAIV,KAAKs2F,EAAAA,GAAoBM,MACvB,OACEl9H,EAAAA,GAAAA,GAACwyH,GAAY,CAEXL,SAAO,EACP7rF,YAAaA,GAFT,SAKV,KAAKs2F,EAAAA,GAAoBE,QACvB,OACE98H,EAAAA,GAAAA,GAAC01H,GAAa,CAEZpvF,YAAaA,GADT,WAIV,QACE,OAEL,EAvDA,Y,gBCpGT,MAAM03F,GAA4B,CAChC/kB,gBAAiB,GACjBD,SAAU,GACVR,KAAM,GACNylB,MAAO,IAGHC,GAAuDA,CAC3DlhE,EACAp1D,KAEA,OAAQA,EAAOpH,MACb,IAAK,qBACH,MAAO,IACFw8D,EACHi8C,gBAAiBrxG,EAAOu2H,SAG5B,IAAK,cACH,MAAO,IACFnhE,EACHg8C,SAAUpxG,EAAOu2H,SAGrB,IAAK,UACH,MAAO,IACFnhE,EACHw7C,KAAM5wG,EAAOu2H,SAGjB,IAAK,WACH,MAAO,IACFnhE,EACHihE,MAAOr2H,EAAOu2H,SAGlB,IAAK,QACH,OAAOH,GAET,QACE,OAAOhhE,I,oDClBb,MAqIA,IAAe1gE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLkrH,UAAUC,EAAAA,GAAAA,GAAmBnrH,EAAQ,yBAHvBD,EArI0CqrH,EAC5DC,OACAvhE,QACAwhE,WACAhiI,WACAijE,UACAg/D,eACAL,eAEA,MAAMnhI,GAAOD,EAAAA,EAAAA,MAEP,sBAAE0hI,IAA0Br4H,EAAAA,EAAAA,OAE5B,WAAEs4H,GAAe3hE,GACjB,gBAAE4hE,EAAe,kBAAEC,IAAsBnhI,EAAAA,EAAAA,KAAQ,KAAMohI,EAAAA,GAAAA,GAAkB9hE,EAAOuhE,GAAM,IAAO,CAACA,EAAMvhE,IACpG+hE,EAAqB,aAATR,EAAsBS,GAAAA,GAAkCC,GAAAA,IAEnEC,EAAWC,IAAgB1tH,EAAAA,EAAAA,KAAS,GAErC2tH,GAAsBC,EAAAA,GAAAA,IAA8B1E,EAAAA,KACpD2E,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KAEzDC,EAAsBxiE,EAAM6e,OAAO4jD,YAEzCliI,EAAAA,EAAAA,KAAU,KACHf,GACH2iI,GAAa,KAEd,CAAC3iI,IAEJ,MAAMgqC,GAAe9oC,EAAAA,EAAAA,KAAQ,KAC3B,MAAMgiI,EAAU,IAAIN,GAAuB,MAAOE,GAA4B,IAC9E,OAAO54F,EAAAA,GAAAA,IAAO,KACTC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK84F,EAAS74F,MAAO83F,EAAYn+H,KAAM,aAEhE,CAAC4+H,EAAqBE,EAA0BX,IAE7C1wC,GAAqB1nF,EAAAA,EAAAA,IAAiBo5H,IAC1CnB,EAAS,CACPh+H,KAAM,gBACN29H,QAASwB,IAEXR,GAAa,MAGT3vC,GAA0BjpF,EAAAA,EAAAA,IAAiBqgC,IAC/C,GAAa,aAAT23F,EAAqB,CACvB,GAAI33F,EAAI/nC,QAAUu/H,EAIhB,YAHAM,EAAsB,CACpB9rG,MAAO,uBAIX4rG,EAAS,CACPh+H,KAAM,oBACN29H,QAAS,IAAKnhE,EAAM4iE,eAAgBC,gBAAiBj5F,IAEzD,MACE43F,EAAS,CACPh+H,KAAM,oBACN29H,QAAS,IAAKnhE,EAAM8iE,eAAgBC,gBAAiBn5F,KAGzDu4F,GAAa,MAGTa,GAAgCz5H,EAAAA,EAAAA,IAAiB8kD,IACrD,MAAM40E,EAAsC,CAAC,EAC7C50E,EAAKhtD,SAASuqB,IACZq3G,EAAWr3G,IAAO,KAIlB41G,EADW,aAATD,EACO,CACP/9H,KAAM,oBACN29H,QAAS,CACP0B,gBAAiBjB,KACdqB,IAIE,CACPz/H,KAAM,oBACN29H,QAAS,CACP4B,gBAAiBnB,KACdqB,KAITd,GAAa,MAQf,OALAhxG,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGLj5B,GAKH1nC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTo5F,WAAYV,OAAsB7hI,EAAYohI,EAC9Ch4F,QAASP,EACTL,YAAay4F,EACbuB,mBAAoBtB,EACpB33F,YAAay3F,EACbx3F,kBAAmBlqC,EAAK,UACxBmjI,uBAAuB,kBACvBh5F,cAAc,0BACdC,cAAY,EACZC,oBAAkB,EAClB+4F,eAAa,EACb54F,eAAa,EACbE,cAAc,WACdJ,oBAAqBioD,EACrB8wC,2BAA4BN,EAC5Bx4F,eAAgBymD,KAGlBjuF,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw2F,EACTpiI,QAAS2hI,EACT3nH,UAAW7Z,EAAK,QAAQgC,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBA7BRtB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,QCzENwzE,GAAiB,0CACjBC,GAAiB,8BA6U9B,IAAelkI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAU8pD,YACT,MAAM,QAAE5P,GAAYl6C,EAAO03C,OACrB,KAAE3hB,EAAI,QAAEw3F,GAAYvtH,EAAO+gH,YAC3ByM,EAAgB//E,OAAOsK,OAAOhiB,GAAMprC,QAAO,CAACqtD,EAAKy1E,IAAOz1E,GAAOy1E,EAAGlB,WAAa,EAAI,IAAI,GAE7F,MAAO,CACLmB,oBAAqBxzE,EAAQvtD,OAC7BghI,sBAAuBzzE,EAAQI,SAC/BizE,QAASzjE,EAAMqf,SAAYokD,EAAQzjE,EAAMqf,WAAar1C,GAAAA,OAAoBrpC,EAC1EmjI,eAA8BnjI,IAAnBq/D,EAAMqf,WAA2BpzC,EAAK+zB,EAAMqf,UACvD0kD,gBAAgB1C,EAAAA,GAAAA,GAAmBnrH,EAAQ,mBAC3C8tH,cAAc3C,EAAAA,GAAAA,GAAmBnrH,EAAQ,kBACzCwtH,mBAbcztH,EA3UmCguH,EACrDjkE,QACAwhE,WACA0C,qBACAC,qBACAC,gBACAC,eACA7kI,WACAijE,UACAqhE,YACA1yG,SACAwyG,sBACAU,gBACAT,wBACAJ,UACAM,iBACAC,eACAN,gBACAa,mBAEA,MAAM,oBACJC,EAAmB,sBACnB9C,EAAqB,iBACrBj6F,IACEp+B,EAAAA,EAAAA,MAEEo7H,EAA4B,WAAfzkE,EAAMuhE,KACnBmD,EAAoB1kE,EAAM6e,OAAO4jD,YAEhCkC,EAA6BC,IAAkCnwH,EAAAA,EAAAA,KAAS,IACxEowH,EAA6BC,IAAkCrwH,EAAAA,EAAAA,KAAS,IAE/ElU,EAAAA,EAAAA,KAAU,KACJujI,GACFrhE,MAED,CAACqhE,EAAWrhE,KAEfliE,EAAAA,EAAAA,KAAU,KACJf,GAAYwgE,EAAMqf,UAAYrf,EAAM6e,OAAO4jD,YAC7C+B,EAAoB,CAAEnlD,SAAUrf,EAAMqf,aAEvC,CAAC7/E,EAAUwgE,EAAM6e,OAAO4jD,WAAYziE,EAAMqf,WAE7C,MACEuiD,gBAAiBiB,EACjBhB,kBAAmBkD,IACjBrkI,EAAAA,EAAAA,KAAQ,KAAMohI,EAAAA,GAAAA,GAAkB9hE,EAAO,aAAa,CAACA,KAEvD4hE,gBAAiBmB,EACjBlB,kBAAmBmD,IACjBtkI,EAAAA,EAAAA,KAAQ,KAAMohI,EAAAA,GAAAA,GAAkB9hE,EAAO,aAAa,CAACA,KAEzDz/D,EAAAA,EAAAA,KAAU,KACRqkI,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC9kE,EAAMqf,WAEV,MAAO4lD,EAAwBC,IAA0BxkI,EAAAA,EAAAA,KAAQ,KAC/D,MAAMykI,EAAoB,IAAIh1C,IAAI,IAC5ByzC,GAAuB,MACvBC,GAAyB,KAGzBuB,GAAwBC,EAAAA,GAAAA,IAAwBxC,EAAiBsC,GACjEG,GAAwBD,EAAAA,GAAAA,IAAwBtC,EAAiBoC,GAEvE,MAAO,CACLR,EACIS,EACAA,EAAsBniF,MAAM,EA3EV,EA2EmC8hF,EAAkBljI,QAC3EgjI,EACIS,EACAA,EAAsBriF,MAAM,EA9EV,EA8EmC+hF,EAAkBnjI,WAE5E,CACDkhI,EAAiBF,EAAiBkC,EAAmBC,EACrDH,EAA6BF,EAC7Bf,EAAqBC,IAGjB5jI,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,WAGF,MAAMm5D,GAAe/kF,EAAAA,EAAAA,KAAawvB,IAChC,MAAM,cAAEnK,GAAkBmK,EAC1BwsG,EAAS,CAAEh+H,KAAM,WAAY29H,QAASt2G,EAAchhB,MAAMojE,WACzD,CAACu0D,IAEEj2F,GAAe/lC,EAAAA,EAAAA,KAAY,KAC/Bg8H,EAAS,CAAEh+H,KAAM,eAAgB29H,SAAS,IAE1CoD,GAAa,KACX/wH,YAAW,KACTivD,MAzGe,UA4GlB,CAAC++D,EAAU+C,EAAc9hE,IAEtB8iE,GAA0B//H,EAAAA,EAAAA,KAAY,KACrCi+H,GAQA+B,EAAAA,EAAAA,MAAqBxxF,EAAAA,EAAAA,MAAagsB,EAAMqf,UAKzCqkD,GAAiBM,IAAiBhkE,EAAM6e,OAAO4jD,WACjDf,EAAsB,CACpB9rG,MAAO,mBAKP6tG,EAAQ5hI,OAASkiI,EACf/jE,EAAMkiE,UACRqC,EAAaH,GAEbA,IAKJ1C,EAAsB,CACpB9rG,MAAO,oBArBP6R,EAAiB,CAAEt8B,QAASlL,EAAK,oDAR7BwkI,GACFF,EAAaH,KA8BhB,CACDX,EAASzjE,EAAMqf,SAAUrf,EAAMkiE,UAAWwB,EAAeK,EAAgBU,EAAYF,EACrFH,EAAenkI,EAAM+jI,EAAchkE,EAAM6e,OAAO4jD,aAG5CgD,GAAwBjgI,EAAAA,EAAAA,KAAY,CAACmC,EAAkC0W,KACvE2hD,EAAMkiE,UACRqC,GAAa,IAAMF,EAAahmH,KAEhCgmH,EAAahmH,KAEd,CAACkmH,EAAcF,EAAcrkE,EAAMkiE,YA0BtC,SAASwD,EAAYnE,GACnB,MAAMM,EAA6B,aAATN,EAAsBwD,EAAoBC,EAC9DW,EAA0B,aAATpE,EAAsB0D,EAAyBC,EAEhEt0F,EAAsB,aAAT2wF,EAAsBoD,EAA8BE,EAEjEe,GADsB,aAATrE,EAAsBsB,EAAkBE,GACzBlhI,OAAS8jI,EAAe9jI,OACpDgkI,EAAwB,aAATtE,EACjB,IAAMqD,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACEhjI,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACG4/H,EAAkB3/H,KAAK0pB,GArC9B,SAAwBA,EAAa21G,GACnC,MAAMuE,EAAoB,aAATvE,EACbS,GAAAA,GAAgCx/H,MAAK,EAAGgB,KAAMuiI,KAAcA,IAAYn6G,IACxEq2G,GAAAA,GAAgCz/H,MAAK,EAAGgB,KAAMuiI,KAAcA,IAAYn6G,IAE5E,GAAKk6G,EAIL,OACE9iI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,kCACVi/G,QAAM,EACNv2E,UAAQ,EAAAlmC,UAERe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdyqE,WAAW,QACXzX,WAAYisB,KAPTA,EAAStiI,KAWpB,CAesCwiI,CAAep6G,EAAK21G,KACnDoE,EAAezjI,KAAKuD,IACnBzC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,kCACVi/G,QAAM,EACNv2E,UAAQ,EAAAlmC,UAEP+T,EAAAA,EAAAA,IAASvQ,IACRzC,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CAACyqE,WAAW,QAAQ5tF,OAAQj+B,KAE5CzC,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CAACsqE,WAAW,QAAQtnH,OAAQvE,SAI7CmrC,GAAcg1F,EAAiB,IAChC5iI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,6BACVi/G,QAAM,EAEN5+G,QAAS+lI,EACT3+H,KAAK,OAAMjF,SAEVhC,EAAK,sBAAuB2lI,EAAgB,MAPzC,eAYd,CAEA,OACE9jI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2CAA0CwC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtB3iG,KAAMwiI,EAAAA,IACNrgI,OAAQC,GAAAA,EAAeqgI,WACvB1jD,KAAM3+B,OAAOmc,EAAMqf,UACnB5/E,UAAU,0BAGXglI,IACCzhI,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC/EhC,EAAK,wBAIV+C,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7V,UAAU,OACVmK,MAAO3J,EAAK,kBACZ4J,MAAOm2D,EAAM6e,OAAO13E,MAAM6U,KAC1B5G,SAAUm1E,EACVn3B,MAAO4M,EAAM5M,OAAS4M,EAAM5M,QAAUmwE,GAAiBA,QAAiB5iI,QAI1E2jI,IACAxiI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,CAC3B+9D,EAAM5M,OAAS4M,EAAM5M,QAAUowE,KAC9BxgI,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,8CAA8CyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC5FhC,EAAK+/D,EAAM5M,UAIhBpwD,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,oBAErF+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,2CACVyH,KAAK,MACLw3G,QAAM,EACN5+G,QAASokI,EAAmBjiI,SAE3BhC,EAAK,oBAGPylI,EAAY,gBAIfpB,IAAkBI,IAClB5iI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,oBAErF+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,2CACVyH,KAAK,MACLw3G,QAAM,EACN5+G,QAASqkI,EAAmBliI,SAE3BhC,EAAK,oBAGPylI,EAAY,gBAIjB5jI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC3EhC,EAAK,6BAGR+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,2CACVyH,KAAK,MACLw3G,QAAM,EACN5+G,QAASylI,EAAwBtjI,SAEhChC,EAAK,kCAGPwjI,GAASvhI,KAAKk0G,IACbt0G,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,6BACVyH,KAAK,OACLw3G,QAAM,EACNn3G,WAAS,EACTzH,QAAS2lI,EACTt7H,SAAUisG,EAAO/3F,IAAIpc,SAAA,EAErBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAQyD,IAAI,OAAMjB,SAAEm0G,EAAOjvG,OAASivG,EAAO/3F,OAC3Drb,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SACvBhC,EAAK,oCAAqCm2G,EAAOp0D,QAAQngD,OAAQ,mBAQ5EmB,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAAS5nC,QAAQk8D,EAAMkiE,WACvBr5H,SAAUm3D,EAAMzlC,UAChBz6B,QAASyrC,EACTzxB,UAA0B,SAAfkmD,EAAMuhE,KAAkB,eAAiB,gBAAgBt/H,SAEnE+9D,EAAMzlC,WACLv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mB,gBCnVrB,MACM6hI,IAAiCppH,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAO,GAgUrE,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACEkhC,WAAYgvF,EACZn6F,KAAMo6F,EACNC,YAAaC,GACXrwH,EAAO+gH,YAEX,MAAO,CACLmP,YACAC,cACAj/C,WAAW//C,EAAAA,EAAAA,KAA2BnxB,GACtCqwH,yBACAC,YAAYnF,EAAAA,GAAAA,GAAmBnrH,EAAQ,oBAbzBD,EA9TmCwwH,EACrDjnI,WACAknI,iBACAC,eACAlkE,UACA2jE,YACAC,cACAj/C,YACAm/C,yBACAC,iBAEA,MAAM,2BACJI,EAA0B,cAC1BC,EAAa,sBACbnF,EAAqB,0BACrB1iD,EAAyB,gBACzB8nD,IACEz9H,EAAAA,EAAAA,OAEG22D,EAAO+mE,IAAYtyH,EAAAA,EAAAA,IAAoB,CAC5CuyH,iBAAkBZ,EAClBa,aAAcb,EACdc,kBAAcvmI,IAGVwmI,GAAgBjrG,EAAAA,EAAAA,GAAsBkqG,IAG5C7lI,EAAAA,EAAAA,KAAU,KACJ4mI,IAAkBf,GACpBW,EAAS,CACPC,iBAAkBZ,EAClBa,aAAcb,EACdc,kBAAcvmI,MAGjB,CAACwmI,EAAef,EAAWpmE,EAAMgnE,kBAAkBnlI,UAItDtB,EAAAA,EAAAA,KAAU,KACR4lI,IAA+B,KAC7BS,SAED,CAACA,IAEJ,MAAMQ,GAAqB5hI,EAAAA,EAAAA,KAAY,KACjCm+C,OAAO0K,KAAKg4E,GAAaxkI,QAAU2kI,EAAa,EAClD9E,EAAsB,CACpB9rG,MAAO,kBAMX8wG,MACC,CAACL,EAAaG,EAAYE,EAAgBhF,IAEvCzhI,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM4kE,GAAuBC,EAAAA,GAAAA,MACvBC,GAAc7mI,EAAAA,EAAAA,KAAQ,KAC1B,GAAK0lI,EAIL,OAAIA,EAAUvkI,QAAU,EACfmoC,GAAAA,EAGFo8F,EAAUlkI,KAAKuD,IACpB,MAAMo5E,EAASwnD,EAAY5gI,GAE3B,OAAIA,IAAOk4H,EAAAA,IACF,CACLl4H,KACA0B,MAAO,CACL6U,KAAM/b,EAAK,kBACXivF,SAAU,KAKT,CACLzpF,GAAIo5E,EAAOp5E,GACX0B,MAAO03E,EAAO13E,MACdC,UAAUogI,EAAAA,EAAAA,IAAyBvnI,EAAM4+E,EAAQwoD,EAAqBxoD,EAAOp5E,KAC7Eg9H,WAAY5jD,EAAO4jD,WACnB1rB,kBAAmBl4B,EAAOk4B,wBAG7B,CAACqvB,EAAWC,EAAapmI,EAAMonI,IAE5BI,GAAoCjiI,EAAAA,EAAAA,KAAaq5E,IACjDl7B,OAAO0K,KAAKg4E,GAAaxkI,QAAU2kI,EAAa,EAClD9E,EAAsB,CACpB9rG,MAAO,kBAMXixG,EAAc,CAAEhoD,aACf,CAACwnD,EAAaG,EAAYK,EAAenF,IAEtCvnD,GAAa30E,EAAAA,EAAAA,KAAY,CAACkiI,EAAuCjiI,KACrE,MAAM4xB,EAAQ31B,KAAKmY,MAAM6tH,EAAY3/H,EAlHhB,IAmHfzG,EAAQ0+D,EAAMgnE,kBAAkB7kG,QAAQ18B,IAAiB,EACzDwhI,EAAejnE,EAAMgnE,kBAAkBxjG,QAAQ67C,GAAaA,IAAa55E,IAE1EwhI,IAAiBvzG,EAAAA,GAAAA,IAAUpyB,EAAQ+1B,EAAO,EAAG+uG,GAAWvkI,QAAU,KAIvEolI,EAAap2C,OAAOvvF,EAAQ+1B,GAAS+vD,EAAY,EAAI,GAAI,EAAG3hF,GAC5DshI,GAAU30H,IAAO,IACZA,EACH80H,aAAc5lI,EACd2lI,sBAED,CAACb,GAAWvkI,OAAQulF,EAAWpnB,EAAMgnE,mBAElCW,GAAgBniI,EAAAA,EAAAA,KAAY,KAChCuhI,GAAU30H,IACR00H,EAAgB,CAAEV,UAAWh0H,EAAQ60H,eAE9B,IACF70H,EACH40H,iBAAkB50H,EAAQ60H,aAC1BC,kBAAcvmI,QAGjB,CAACmmI,IAEEc,GAAqBlnI,EAAAA,EAAAA,KAAQ,KACzB0mF,GAAazjC,OAAO0K,KAAKg4E,GAAaxkI,OAAS2kI,EAAa,GACnE,CAACH,EAAaj/C,EAAWo/C,IAE5B,OACE1kI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2CAA0CwC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtB3iG,KAAMwiI,EAAAA,IACNrgI,OAAQC,GAAAA,EAAegiI,WACvBpoI,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,yBAGP2nI,IACC9lI,EAAAA,GAAAA,IAACkC,EAAAA,EACD,CACEvE,UAAU,4BACVmJ,MAAM,UACNnF,KAAK,UACLqnG,MAAI,EACJ9hD,OAAK,EACLlpD,QAASsnI,EACTjkI,MAAOlD,EAAKkD,MAAMlB,SAAA,EAElBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QACVrE,EAAK,0BAKZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,cAErF+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA8BkP,MAAO,WAnLnC,IAmL+Cy3H,GAAWvkI,QAAU,OAA0BI,SAC5GslI,GAAa1lI,OAAS0lI,EAAYrlI,KAAI,CAAC28E,EAAQ10B,KAC9C,MAAM29E,EAAY39E,EAAIq8E,EAAa,EAC7BuB,EAAY/nE,EAAMknE,eAAiB/8E,EACnC69E,EAvLO,IAuLOhoE,EAAMgnE,kBAAkB7kG,QAAQ08C,EAAOp5E,KAAO,GAC5D+jB,EAxLO,IAwLAw2C,EAAMinE,cAAc9kG,QAAQ08C,EAAOp5E,KAAO,GAEvD,OAAIo5E,EAAOp5E,KAAOk4H,EAAAA,KAEd36H,EAAAA,GAAAA,GAACilI,GAAAA,EAAS,CAERxiI,GAAIo5E,EAAOp5E,GACXme,OAAQu2D,EACR+tD,UAAWP,EACXh5H,MAAO,QAAQo5H,EAAYC,EAAax+G,OACxC2+G,WAAcloI,EAAKkD,MAAQ,OAAS,SAAzB,cACX0P,YAAau0E,IAAc5nF,EAASyC,UAEpCH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,UAAU,2CACVi/G,QAAM,EACNv2E,UAAQ,EACR5gC,WAAS,EACTD,UAAQ,EACR8gI,gBAAc,EAAAnmI,SAAA,EAEde,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,UACpBwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,uBAGlC/zG,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEhC,EAAK,2BAf5B4+E,EAAOp5E,KATTo5E,EAAOp5E,KA+BhBzC,EAAAA,GAAAA,GAACilI,GAAAA,EAAS,CAERxiI,GAAIo5E,EAAOp5E,GACXme,OAAQu2D,EACR+tD,UAAWP,EACXh5H,MAAO,QAAQo5H,EAAYC,EAAax+G,OACxC2+G,WAAcloI,EAAKkD,MAAQ,OAAS,SAAzB,UACX0P,WAAYi1H,IAActoI,EAASyC,UAEnCH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,2CACVi/G,QAAM,EACNC,cAAc,OACdp3G,WAAS,EACTi+C,eAAgB,CACd,CACEK,QAASA,KACPm5B,EAA0B,CAAEK,SAAUR,EAAOp5E,MAE/C+U,aAAa,EACbrT,MAAOlH,EAAK,UACZiH,KAAM,WAIVpH,QAASA,KACHgoI,EACFpG,EAAsB,CACpB9rG,MAAO,kBAGT+wG,EAAaN,EAAYxnD,EAAOp5E,MAElCxD,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,QAAOwC,SAAA,EACpBwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,oBAE/B+wB,IAAa9kI,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAAa7E,UAAU,sCAElDqC,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,WAAUwC,SAAA,CACvB48E,EAAO4jD,aAAcz/H,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UAAU,SACjDo/E,EAAOz3E,gBA5CPy3E,EAAOp5E,OAiDb8hI,IAAgBA,EAAY1lI,QAC/BmB,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAC,8BAGvDe,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,SAIdw2E,GAA0BziI,QAAQyiI,EAAuB1kI,UACzDC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC3EhC,EAAK,uBAGPsmI,EAAuBrkI,KAAK28E,IAC3B77E,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EAEN5+G,QAASA,IAAM2nI,EAAkC5oD,GAAQ58E,UAEzDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,UACpBwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,uBAGlC/zG,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAE48E,EAAOnqE,kBAGrC1R,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,OACVmJ,MAAM,UACNnF,KAAK,OACLqnG,MAAI,EACJ9hD,OAAK,EACL7lD,MAAOlD,EAAKkD,MAAMlB,SAEjBhC,EAAK,0B,eC5TxB,MAsKA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAEmpE,EAAQ,IAAEhhE,EAAG,UAAEkc,IAAcjkB,EAAAA,EAAAA,KAAeJ,GAAQmyH,mBAAqB,CAAC,EAC5ExpD,EAASQ,GAAW44B,EAAAA,EAAAA,KAAiB/hG,EAAQmpE,QAAY1+E,EACzDy1G,EAAS/2B,EAAWnpE,EAAO+gH,YAAYwM,QAAQpkD,IAAW78E,MAAM2nD,GAAMA,EAAE9rC,MAAQA,SAAO1d,EAE7F,MAAO,CACL0+E,WACAR,SACAxgE,MACAkc,YACAynB,QAASo0D,GAAQp0D,WAXH/rC,EAtKqCqyH,EACvD9oI,WACAijE,UACA4c,WACAR,SACA78B,UACA3jC,MACAkc,gBAEA,MAAM,qBACJguG,EAAoB,qBAAEC,EAAoB,mBAAEC,EAAkB,iBAAEhhG,IAC9Dp+B,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MAETkiI,EAAWC,IAAgB1tH,EAAAA,EAAAA,KAAS,IAE3C0c,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAGVliE,EAAAA,EAAAA,KAAU,KACHg6B,GACH4nG,GAAa,KAEd,CAAC5nG,KAEJh6B,EAAAA,EAAAA,KAAU,MACH8d,GAAOghE,GAAY7/E,GACtB+oI,EAAqB,CAAElpD,eAExB,CAACA,EAAU7/E,EAAU6e,IAExB,MAAMqqH,GAAen/H,EAAAA,EAAAA,IAAgB,KAC9B8U,GAAQghE,IAEbmpD,EAAqB,CAAEnpD,WAAUhhE,QACjCokD,QAGI14B,GAAUrpC,EAAAA,EAAAA,KAAQ,KACdm+E,GAAQgkD,iBAAmB,IAAInyC,OAAO7R,GAAQ8pD,eAAiB,KACtE,CAAC9pD,GAAQgkD,gBAAiBhkD,GAAQ8pD,iBAE9BC,EAAax/F,IAAa1oC,EAAAA,EAAAA,KAAQ,KACvC,MAAMwV,GAAS89B,EAAAA,EAAAA,MACf,OAAO60F,EAAAA,GAAAA,IAAU9+F,GAAUtkC,IAAOqjI,EAAAA,EAAAA,KAAsB5yH,EAAQzQ,OAC/D,CAACskC,KAEGZ,EAAaoqD,IAAkB9+E,EAAAA,EAAAA,IAAmButC,GAAW,IAE9D+mF,GAAmB92H,EAAAA,EAAAA,KAAO,IAChCm5B,EAAAA,GAAAA,IAAsB,EAAE49F,MAClBA,IAAY3qH,IACd0qH,EAAiB32H,SAAU,GAExB22H,EAAiB32H,UACtB22H,EAAiB32H,SAAU,EACtBiM,EAEM2jC,GACTuxC,EAAevxC,GAFfuxC,EAAeq1C,MAIhB,CAACvqH,EAAKuqH,EAAa5mF,IAEtB,MAAMinF,GAAsB1/H,EAAAA,EAAAA,IAAiB9D,IAC3C,MAAMyQ,GAAS89B,EAAAA,EAAAA,MACTqB,GAAOC,EAAAA,EAAAA,KAAWp/B,EAAQzQ,GAC1BiR,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQzQ,GAC5B4vC,IAAQ2/C,EAAAA,EAAAA,IAAU3/C,GACpB5N,EAAiB,CACft8B,QAASpL,EAAQ,8CAEVs1C,EACT5N,EAAiB,CACft8B,QAASpL,EAAQ,+CAEV2W,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GAC/B+wB,EAAiB,CACft8B,QAASpL,EAAQ,wDAGnB0nC,EAAiB,CACft8B,QAASpL,EAAQ,yDAKjByyF,GAA0BjpF,EAAAA,EAAAA,IAAiBqgC,IAC/C2pD,EAAe3pD,GACfu4F,GAAa,MAGT52F,GAAehiC,EAAAA,EAAAA,IAAgB,KAC9B81E,GAAahhE,GAAQ6jH,GAC1BuG,EAAmB,CAAEppD,WAAUr9B,QAAS7Y,EAAa9qB,WAGjD6qH,EAAa//F,EAAYtnC,OACzBgR,GAAcq2H,GAAc3uG,EAElC,OACEz4B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sEAAqEwC,SAAA,EAClFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCe,EAAAA,GAAAA,GAACmmI,GAAAA,EAAY,CACX1lI,KAAMwiI,EAAAA,IACNrgI,OAAQC,GAAAA,EAAeujI,aACvB3pI,UAAU,0BAGXo/E,IACC77E,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,6BAA8B,CAClC4+E,QAAQpuC,EAAAA,GAAAA,IAAuB,CAC7Bz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,oBAEhCnpD,MAAO3tD,EAAK,kCAAmC,CAAEk5B,MAAO+vG,GAAc,CAAE/oE,YAAa+oE,KACpF,CACDn0E,cAAc,EACd7V,WAAW,UAMnBl8C,EAAAA,GAAAA,GAACkyG,GAAAA,EAAS,CACRz1G,UAAU,gBACVsvF,KAAO1wE,GAAMte,EAAQ,WACrBspI,WAAS,EACTC,SAAUZ,EACV71H,YAAaq2H,GAAchH,KAG7Bl/H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,qCAAoCwC,UACjDe,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASA,EACTw/F,oBAAqBngG,EACrBmB,oBAAqBioD,EACrBrpD,YAAaA,EACbwmD,gBAAiBs5C,EACjBx+F,eAAa,EACbC,YAAU,EACVC,cAAc,gBAIlB3nC,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASnR,GAAa2nG,EACtBr5H,SAAUgK,EACV/S,QAASyrC,EACTzxB,UAAU,eAAc7X,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBCyBrB,IAAehF,EAAAA,EAAAA,KAzMuBkqI,EACpCC,gBACAC,cACA1pE,QACAwhE,WACAhiI,WACAijE,cAEA,MAAM,yBACJknE,EAAwB,eACxBC,EAAc,cACd/C,EAAa,mBACbgD,IACExgI,EAAAA,EAAAA,MAEEygI,GAActkI,EAAAA,EAAAA,KAAY,KAE5BikI,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErC32H,YAAW,KACTguH,EAAS,CAAEh+H,KAAM,YAlCG,KAuCtBimI,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvC5nE,IARqB,WAAfzC,EAAMuhE,KACRsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,sBAMhD,CAACjqE,EAAMuhE,KAAMC,EAAUiI,EAAehnE,IAEnCgiE,EAA4B,WAAfzkE,EAAMuhE,KAEnBgJ,GAAY/kI,EAAAA,EAAAA,KAAaglI,IAC7B,MAAM,MAAErjI,GAAUqjI,EAAS3rD,OAE3B,IAAK13E,EAEH,OADAq6H,EAAS,CAAEh+H,KAAM,WAAY29H,QAASoC,MAC/B,EAGT,MACE3B,gBAAiBiB,EACjBhB,kBAAmBkD,IACjBjD,EAAAA,GAAAA,GAAkB0I,EAAU,YAEhC,OAAK3H,EAAgBhhI,QAAW8hD,OAAO0K,KAAK02E,GAAmBljI,QAK1D4iI,EAGHoC,EAAc,CAAEhoD,OAAQ2rD,EAAS3rD,SAFjC+qD,EAAe,CAAEnkI,GAAI+kI,EAASnrD,SAAWorD,aAAcD,EAAS3rD,SAKlE2iD,EAAS,CAAEh+H,KAAM,WAAY29H,aAASxgI,IACtC6gI,EAAS,CAAEh+H,KAAM,eAAgB29H,SAAS,KAEnC,IAbLK,EAAS,CAAEh+H,KAAM,WAAY29H,QAASqC,MAC/B,KAaR,CAAChC,EAAUiD,IAERiG,GAAmBllI,EAAAA,EAAAA,KAAa87D,IAC/BipE,EAAUvqE,IAGfsB,QACC,CAACipE,EAAWvqE,IAET2qE,GAAmBnlI,EAAAA,EAAAA,KAAY,KACnC,MAAMglI,EAAWhJ,EAAS,CAAEh+H,KAAM,gBAClCsmI,IACAS,EAAUC,KACT,CAAChJ,EAAUsI,EAAaS,IAErBnD,GAAqB5hI,EAAAA,EAAAA,KAAY,KACrCg8H,EAAS,CAAEh+H,KAAM,UACjBqmI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,wBAC5C,CAACxI,IAEEoJ,GAAmBplI,EAAAA,EAAAA,KAAaq5E,IACpC2iD,EAAS,CAAEh+H,KAAM,aAAc29H,QAAStiD,IACxCgrD,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,sBAC5C,CAACzI,IAEEqJ,GAAyBrlI,EAAAA,EAAAA,KAAY,KACzCg8H,EAAS,CAAEh+H,KAAM,uBACjBqmI,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBK,yBAErB,CAACX,EAAejI,IAEbuJ,GAAyBvlI,EAAAA,EAAAA,KAAY,KACzCg8H,EAAS,CAAEh+H,KAAM,uBACjBqmI,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBM,yBAErB,CAACZ,EAAejI,IAEbyJ,GAAoBzlI,EAAAA,EAAAA,KAAY,KACpCmkI,EAAyB,CAAEtqD,SAAUrf,EAAMqf,SAAW6rD,qBAAqB,IAC3E1J,EAAS,CAAEh+H,KAAM,gBAAiB29H,SAAS,IAC3C0I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,iBAC5C,CAAC5H,EAAUxhE,EAAMqf,WAEd8rD,GAAmB3lI,EAAAA,EAAAA,KAAa6Y,IACpCsrH,EAAyB,CAAEtqD,SAAUrf,EAAMqf,SAAWhhE,MAAK6sH,qBAAqB,IAChFrB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,iBAC5C,CAACppE,EAAMqf,WAEV,OAAQoqD,GACN,KAAKM,EAAAA,GAAgBqB,QACnB,OACEpoI,EAAAA,GAAAA,GAACyjI,GAAmB,CAClBC,eAAgBU,EAChBT,aAAciE,EACdprI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChBt0G,SAAS2zG,GACXjnE,QAASA,IAGf,KAAKsnE,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACEnnI,EAAAA,GAAAA,GAACihI,GAAmB,CAClBjkE,MAAOA,EACPwhE,SAAUA,EACV0C,mBAAoB2G,EACpB1G,mBAAoB4G,EACpB3G,cAAe6G,EACf5G,aAAc8G,EACd1oE,QAASqnE,EACTtqI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChBt0G,SAAS2zG,GACXpF,cAAemF,IAAkBM,EAAAA,GAAgBI,yBACjD/4G,OAAQqxC,EACR8hE,aAAcmG,IAGpB,KAAKX,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACnB,OACE9nI,EAAAA,GAAAA,GAACs+H,GAA0B,CACzBC,KAAK,WACLvhE,MAAOA,EACPwhE,SAAUA,EACV/+D,QAASqnE,EACTrI,aAAckJ,EACdnrI,SAAUA,IAGhB,KAAKuqI,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACEhoI,EAAAA,GAAAA,GAACs+H,GAA0B,CACzBC,KAAK,WACLvhE,MAAOA,EACPwhE,SAAUA,EACV/+D,QAASqnE,EACTrI,aAAckJ,EACdnrI,SAAUA,IAIhB,KAAKuqI,EAAAA,GAAgBX,aACnB,OACEpmI,EAAAA,GAAAA,GAACslI,GAAqB,CACpB9oI,SAAUA,EACVijE,QAASqnE,IAIf,QACE,W,2BC1MN,MAiEA,IAAexqI,EAAAA,EAAAA,KA/D4B+rI,EACzC7rI,WACAijE,UACArP,QACA74B,YACA+wG,+BACAC,mBACA37E,cAAc,mBACd4rD,OACAzgD,cACAwhD,aACA5jD,eAEA,MAAO6yE,EAAiBC,IAAsBh3H,EAAAA,EAAAA,IAAiB,KACxDqnG,EAAoBC,IAAyBtnG,EAAAA,EAAAA,KAAS,GAEvD82B,GAAe/lC,EAAAA,EAAAA,KAAakmI,IAC5BH,GAAoBG,IAAgBH,EACtCE,EApBuB,6BAsBvB9yE,EAAS+yE,KAEV,CAAC/yE,EAAU4yE,IAERrvB,GAAmB12G,EAAAA,EAAAA,KAAY,KAC/B+2G,GACFA,IAEFkvB,EAAmB,MAClB,CAAClvB,IAEEt8G,GAAOD,EAAAA,EAAAA,KAOb,OALAmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+CAA8CwC,SAAA,EAC3De,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,oCAAmCwC,UAChDe,EAAAA,GAAAA,GAAC0B,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBm3G,OAG3C94G,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,+BAA8BwC,UAC3Ce,EAAAA,GAAAA,GAACm5G,GAAAA,EAAY,CACX/oD,MAAOo4E,GAAmBp4E,EAC1BooD,KAAMA,EACN5rD,YAAaA,EACb07E,6BAA8BA,EAC9BvwE,YAAaA,GAAe96D,EAAK,QACjCs8G,WAAYL,EACZ3hF,UAAWA,EACX51B,kBAAmBm3G,EACnBU,iBAAkBh9G,EAClBi9G,2BAA4BV,EAC5BpjD,SAAUptB,YC7BpB,IAAejsC,EAAAA,EAAAA,KAnCuCqsI,EACpDnsI,WAAUijE,cAEV,MAAMxiE,GAAOD,EAAAA,EAAAA,KAEP4rI,GAAYpmI,EAAAA,EAAAA,KAAY,KAC5Bi9D,GAAQ,KACP,CAACA,IAIJ,OAFAtxC,EAAAA,GAAAA,GAAe,CAAE3xB,WAAU4xB,OAAQqxC,KAGjC3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gDAA+CwC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACmmI,GAAAA,EAAY,CACX1lI,KAAMooI,EAAAA,IACNjmI,OAAQC,GAAAA,EAAeimI,gBACvBrsI,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAC,sBAGzDe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAC,+EAK3De,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,+BAA8BwC,UAC3Ce,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAAS8rI,EAAU3pI,SAAEhC,EAAK,kB,gBCzB1C,MA2CA,IAAeX,EAAAA,EAAAA,KA3C+BysI,EAC5CvsI,WAAUijE,cAEV,MAAM,mBAAEonE,IAAuBxgI,EAAAA,EAAAA,MACzBpJ,GAAOD,EAAAA,EAAAA,KAIb,OAFAmxB,EAAAA,GAAAA,GAAe,CAAE3xB,WAAU4xB,OAAQqxC,KAGjC3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gDAA+CwC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAemmI,KACvBC,WAAYC,GACZzoI,KAAM,IACNhE,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAC,mCAK3DH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OAELpH,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBoC,gCAAiClqI,SAE5FhC,EAAK,sBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,eAELpH,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqC,kBAAmBnqI,SAE9EhC,EAAK,+BCJhB,IAAeX,EAAAA,EAAAA,KAjC6B+sI,EAC1C7sI,WAAUijE,UAASzlB,cAEnB,MAAM/8C,GAAOD,EAAAA,EAAAA,KAIb,OAFAmxB,EAAAA,GAAAA,GAAe,CAAE3xB,WAAU4xB,OAAQqxC,KAGjC3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gDAA+CwC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAemmI,KACvBC,WAAYC,GACZzoI,KAAMooI,EAAAA,IACNpsI,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,4BAA4ByD,IAAI,OAAMjB,SAAC,uIAIpDe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAC,4GAK3De,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,+BAA8BwC,UAC3Ce,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAASk9C,EAAQ/6C,SAAEhC,EAAK,4BC8KxC,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOo2H,YADnBr2H,EAlMgCs2H,EAClDD,WACA7C,gBACAC,cACAt2E,QACA5zD,WACA+6B,YACAiyG,gBACA/pE,cAEA,MAAM,YACJgqE,EAAW,cACXC,EAAa,iBACbC,EAAgB,mBAChBC,EAAkB,mBAClB/C,IACExgI,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEP6sI,GAAoBrnI,EAAAA,EAAAA,KAAY,KACpCgnI,EAAc,IACd3C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+C,wBAC5C,CAACN,IAEEO,GAAoBvnI,EAAAA,EAAAA,KAAaqE,IACrC2iI,EAAc3iI,GACdggI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiD,+BAC5C,CAACR,IAEES,GAA2BznI,EAAAA,EAAAA,KAAY,KAC3CinI,EAAY,CAAEH,aACdE,EAAc,IACd3C,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmD,4BAC5C,CAACV,EAAeF,IAEba,GAA8B3nI,EAAAA,EAAAA,KAAa4nI,IAC/CZ,EAAc,KACda,EAAAA,GAAAA,IAAeD,GAAiBrkD,MAAK,KACnC8gD,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuD,+BAC5C,KACDX,EAAiB,CACfv5E,MAAOnzD,EAAK,2CAGf,CAACA,EAAMusI,IAEJe,GAA0B/nI,EAAAA,EAAAA,KAAaqE,IAC3C2iI,EAAc3iI,GACdggI,EAAmB,CAAES,OAAQP,EAAAA,GAAgByD,kCAC5C,CAAChB,IAEEiB,GAAgBjoI,EAAAA,EAAAA,KAAa4nI,KACjCC,EAAAA,GAAAA,IAAeD,GAAiBrkD,MAAK,KACnC2jD,IACA7C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2D,aAC5C,KACDf,EAAiB,CACfv5E,MAAOnzD,EAAK,2CAGf,CAACA,IAEJ,OAAQwpI,GACN,KAAKM,EAAAA,GAAgB4D,iBACnB,OACE3qI,EAAAA,GAAAA,GAACqpI,GAAqB,CACpBrvF,QAAS6vF,EACTrtI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB+C,oBAChB/C,EAAAA,GAAgBiD,2BAChBjD,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB+C,oBACnB,OACE9pI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5B17E,YAAa3vD,EAAK,oBAClB86D,YAAa96D,EAAK,YAClB04D,SAAUo0E,EACVvtI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBiD,2BAChBjD,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBiD,2BACnB,OACEhqI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5BC,iBAAkBe,EAClB18E,YAAa3vD,EAAK,uBAClB86D,YAAa96D,EAAK,YAClBs6B,UAAWA,EACXo+B,SAAUs0E,EACVztI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBmD,wBACnB,OACElqI,EAAAA,GAAAA,GAAC2oI,GAA+B,CAC9BnsI,SAAUA,EACVijE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB8D,gBACnB,OACE7qI,EAAAA,GAAAA,GAAC+oI,GAAuB,CACtBvsI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBoC,8BAChBpC,EAAAA,GAAgBuD,0BAChBvD,EAAAA,GAAgByD,8BAChBzD,EAAAA,GAAgBmD,wBAChBnD,EAAAA,GAAgBqC,iBAChBr2G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBoC,8BACnB,OACEnpI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5Bl4E,MAAOA,EACPmpD,WAAYqwB,EACZh9E,YAAa3vD,EAAK,0CAClB04D,SAAUw0E,EACV3tI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBuD,0BAChBvD,EAAAA,GAAgByD,8BAChBzD,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBuD,0BACnB,OACEtqI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5B17E,YAAa3vD,EAAK,+BAClB04D,SAAU40E,EACV/tI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgByD,8BAChBzD,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgByD,8BACnB,OACExqI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5BC,iBAAkBe,EAClB18E,YAAa3vD,EAAK,kDAClBs6B,UAAWA,EACXo+B,SAAUs0E,EACVztI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBmD,yBAChBn3G,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBqC,gBACnB,OACEppI,EAAAA,GAAAA,GAAC4qI,GAAoB,CACnBtC,8BAA4B,EAC5Bl4E,MAAOA,EAAQnzD,EAAKmzD,QAASzyD,EAC7B47G,WAAYqwB,EACZh9E,YAAa3vD,EAAK,0CAClB04D,SAAU80E,EACVjuI,SAAUA,EACVijE,QAASA,IAIf,QACE,YChMAqrE,GAAiB,CAAC,GAAI,IAAK,IAAK,IAAM,IAAM,IAAM,KAgFxD,SAASC,GAAYC,EAAkBnkI,GACrC,MAAMokI,EAAaD,EAAOE,WAAWh5E,GAAUrrD,GAASqrD,IAClDi5E,EAAYH,EAAOC,EAAa,IAAM,EACtCG,EAAYJ,EAAOC,IAAeD,EAAOA,EAAOnsI,OAAS,GAE/D,OAAOosI,GADWpkI,EAAQskI,IAAcC,EAAYD,EAEtD,CAEA,SAASjzH,GAAS8yH,EAAkBlzH,GAClC,MAAMmzH,EAAavsI,KAAKsgB,MAAMlH,GACxBqzH,EAAYH,EAAOC,EAAa,IAAM,EAEtCI,EAAaF,IADDH,EAAOC,IAAeD,EAAOA,EAAOnsI,OAAS,IACnBssI,IAAcrzH,EAAWmzH,GACrE,OAAOI,EAAa,IAAM3sI,KAAKmY,MAAMw0H,GAA4C,GAA9B3sI,KAAKmY,MAAMw0H,EAAa,GAC7E,CAEA,UAAe/uI,EAAAA,EAAAA,KA9FyBgvI,EACtC3sI,MAAM,EACNb,MACA+I,QACAhB,WACA0lI,WACAnoH,OACA3mB,YACA49F,eACAjoF,WACAo5H,iCAEA,MAAMvuI,GAAOC,EAAAA,GAAAA,KAEP8tI,GAASttI,EAAAA,EAAAA,KAAQ,KACrB,MAAMQ,EAAS,GACf,IAAK,IAAIipD,EAAI,EAAGA,EAAI2jF,GAAejsI,OAAQsoD,IAKzC,GAJI2jF,GAAe3jF,GAAKrpD,GACtBI,EAAOM,KAAKssI,GAAe3jF,IAGzB2jF,GAAe3jF,IAAMrpD,EAAK,CAC5BI,EAAOM,KAAKV,GACZ,KACF,CAGF,OAAOI,IACN,CAACJ,IAEEypF,GAAehhF,EAAAA,EAAAA,IAAiByrB,IACpC,MAAMimE,EAAWxvE,OAAOuJ,EAAMnK,cAAchhB,OAC5CuL,EAAS8F,GAAS8yH,EAAQ/yC,OAGtBwzC,GAAgB1sI,EAAAA,GAAAA,GACpBtC,EACA,cACAoJ,GAAY,WACZ0lI,GAAY,WACZnoH,GAAQ,QAgBV,OACEtkB,EAAAA,GAAAA,IAAA,OAAKrC,UAAWgvI,EAAcxsI,SAAA,EAZ5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAiByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAClEe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,YAAYyD,IAAI,OAAMjB,SAAEhC,EAAKyuI,OAAO/sI,MACpDG,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,uBAAsBwC,SAAA,EAClCusI,IAA+BxrI,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAC3CqqI,EAAAA,GAAAA,GAAkB1uI,EAAMib,GAAS8yH,EAAQD,GAAYC,EAAQnkI,SAEhE7G,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,YAAYyD,IAAI,OAAMjB,SAAEhC,EAAKyuI,OAAO5tI,SAQtDgB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,OACEvD,UAAU,oBACVkP,MAAO,UAAWo/H,GAAYC,EAAQnkI,GAASmkI,EAAOnsI,OAAU,UAElEmB,EAAAA,GAAAA,GAAA,SACErB,IAAK,EACLb,IAAKktI,EAAOnsI,OACZw7F,aAAc0wC,GAAYC,EAAQ3wC,GAClCuxC,KAAK,MACLprI,KAAK,QACL/D,UAAU,qBACV2V,SAAUm1E,aCEpB,IAAejrF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM24H,EAA4B34H,EAAOk/B,WAAWy5F,0BAC9CC,EAAuBD,EAA4BA,EAA4B,IAAO,EACtFE,EAA2C74H,EAAOk/B,WAAW45F,mCAInE,MAAO,CACLA,mCAJyCD,EACvCA,EAA2C,IAAO,IAIpDD,uBACAG,0BAA2B/4H,EAAOk/B,WAAW65F,2BAA6BC,EAAAA,OAX5Dj5H,EApEpB,UAA0B,qBACxB64H,EAAoB,0BACpBG,EAAyB,mCACzBD,EAAkC,2BAClCR,EAA0B,YAC1BW,EAAW,kBACXC,EAAiB,SACjBh6H,IAEA,MAAM,iBAAEsyB,IAAqBr+B,EAAAA,EAAAA,MAEvBpJ,GAAOC,EAAAA,GAAAA,KAEPmvI,GAAgC9lI,EAAAA,EAAAA,IAAiBM,IACrDuL,IAAWvL,MAGPylI,GAA0B/lI,EAAAA,EAAAA,IAAgB,KAC9Cm+B,EAAiB,CAAEQ,eAAgB,uBAGrC,OACEpmC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,sCAER+C,EAAAA,GAAAA,GAACsrI,GAAiB,CAChBjxC,aAAc+xC,EACdztI,IAAK4tI,EAAAA,IACLzuI,IAAKmuI,EACLplI,MAAOulI,EACPh6H,SAAUi6H,EACVb,2BAA4BA,EAC5BD,UAAWC,KAEXA,IACAxrI,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,UACNogD,OAAK,EACLvlD,KAAK,UACLU,mBAAiB,EACjB1E,UAAU,yBACVK,QAASwvI,EAAwBrtI,UAEjCH,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,+BAA8BwC,SAAA,CAC3ChC,EAAK,sBACN+C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAAa7E,UAAU,qCAIvC+uI,IACCxrI,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACjFhC,EAAKkvI,EAAc,2BAA6B,wCAAyC,CACxFK,SAASC,EAAAA,GAAAA,IAAmD,IAArCT,GACvBprI,QAAQ4mF,EAAAA,GAAAA,GACN4kD,EAAoBN,EAAuBE,EAC3C,MACA/uI,EAAKg7D,OAEN,CACD/b,WAAW,QAMvB,K,eC5DA,UAAe5/C,EAAAA,EAAAA,KAvBf,UAA2B,eAAEowI,IAC3B,MAAM,iBAAEhoG,IAAqBr+B,EAAAA,EAAAA,MACvBpJ,GAAOD,EAAAA,EAAAA,KACP2vI,GAAyBpmI,EAAAA,EAAAA,IAAgB,IAAMm+B,EAAiB,CAAEQ,eAAgBwnG,MAExF,OACE5tI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAAC7D,UAAU,0BAA0B+D,KAAK,UAAUC,KAAK,QAC/E3D,QAAS6vI,EAAuB1tI,SAE/BhC,EAAK,6BAER+C,EAAAA,GAAAA,GAAA,KACEvD,UAAU,gDACVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAEnChC,EAAK,0CAId,ICFA,IAAeX,EAAAA,EAAAA,KAlBf,UAA6B,MAAEsK,EAAK,UAAE6nF,IACpC,MAAMxxF,GAAOD,EAAAA,EAAAA,MACP,iBAAEynC,IAAqBp+B,EAAAA,EAAAA,MAE7B,OACEvH,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GCrBM,WDuBf0vF,GCvBiF,YDyBnF3xF,QAASA,IAAM2nC,EAAiB,CAAEt8B,QAASlL,EAAK,kCAAmCgC,SAAA,EAEnFe,EAAAA,GAAAA,GAAA,QAAAf,SAAO2H,KACP5G,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAAa7E,UC5BsC,eD+BpE,IEoMA,IAAeH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MACE0hC,UAAU,QACRrL,IAEAr2B,EACE05H,GAA2BC,EAAAA,EAAAA,KAA+B35H,GAE1D45H,EAA+B55H,EAAO0hC,SAASrL,QAAQwjG,gBAAgB9iG,aAAaprC,QAAU,EAEpG,MAAO,CACLmuI,wCAAwCC,EAAAA,EAAAA,KAAuC/5H,GAC/Eg6H,wBAAyBpsI,QAAQ8rI,GACjCA,yBAA0BA,GAA4BO,EAAAA,IACtDxqG,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDk6H,kCAAmCl6H,EAAOk/B,WAAWg7F,kCACrDC,qBAAsBn6H,EAAOk/B,WAAWk7F,2BACxCR,+BACAvjG,aAlBgBt2B,EAtLpB,UAAyB,SACvBzW,EAAQ,kCACR4wI,EAAiC,qBACjCC,EAAoB,uCACpBL,EAAsC,wBACtCE,EAAuB,yBACvBN,EAAwB,qBACxBjqG,EAAoB,6BACpBmqG,EAA4B,QAC5BrtE,EAAO,QACPl2B,IAEA,MAAM,4BAAEgjF,EAA2B,mBAAEsa,EAAkB,iBAAEpiG,IAAqBp+B,EAAAA,EAAAA,MACxEtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEPqwI,EAAiC5qG,GAAwByqG,EACzD5B,EAA6B7oG,GAAwB0qG,GACpDjB,EAAmBoB,IAAwB/7H,EAAAA,EAAAA,IAAiBm7H,IAC5Da,EAAsBC,IAA2Bj8H,EAAAA,EAAAA,KAAS,GAE3Dw7E,GAAgBvvF,EAAAA,EAAAA,KAAQ,IACxBwvI,EAAgC,sBAChCF,EAA+C,uBAC5C,aACN,CAACE,EAAyBF,KAE7B5kG,EAAAA,GAAAA,IAAsB,EAAEulG,MAEnBF,QAA8C9vI,IAAtBgwI,GACJ,cAAlB1gD,GACAA,IAAkB0gD,IAEkB,cAAnCpkG,EAAQqkG,YAAY7kG,YACtBtE,EAAiB,CACft8B,QAASlL,EAAK,0BACd2K,OAAQ,CACNA,OAAQ,qBACRu2H,QAAS,CAAEmJ,OAAQP,EAAAA,GAAgB8G,oBAErCC,WAAY,CAAEllH,IAAK,UACnB7L,SAAU,MAGwB,cAAlCwsB,EAAQwkG,WAAWhlG,YACrBtE,EAAiB,CACft8B,QAASlL,EAAK,yBACd2K,OAAQ,CACNA,OAAQ,qBACRu2H,QAAS,CAAEmJ,OAAQP,EAAAA,GAAgBiH,mBAErCF,WAAY,CAAEllH,IAAK,UACnB7L,SAAU,MAGd2wH,GAAwB,MAEzB,CAACzgD,EAAeigD,EAAyB3jG,EAAStsC,EAAMwwI,IAE3D,MAAM/wI,GAAUgB,EAAAA,EAAAA,KAAQ,IACf,CACL,CAAEmJ,MAAO,YAAaD,MAAO7J,EAAQ,iBACrC,CACE8J,MAAO,uBACPD,MAAO2mI,EACLxwI,EAAQ,sCAERiD,EAAAA,GAAAA,GAACiuI,GAAmB,CAClBrnI,MAAO7J,EAAQ,qCACf0xF,UAA6B,yBAAlBxB,IAGfihD,QAASX,EACTY,wBAAwB,GAE1B,CACEtnI,MAAO,sBACPD,MAAO4kI,EACLvuI,EAAK,6BAEL+C,EAAAA,GAAAA,GAACiuI,GAAmB,CAClBrnI,MAAO3J,EAAK,4BACZwxF,UAA6B,wBAAlBxB,IAGfihD,QAAS1C,EACT2C,wBAAwB,KAG3B,CAACpxI,EAASE,EAAMswI,EAAgC/B,EAA4Bv+C,IAEzE1F,GAAehhF,EAAAA,EAAAA,IAAiB6nI,IACpC7hB,EAA4B,CAC1BygB,uCAAyD,yBAAjBoB,EAExCxB,yBAA2C,wBAAjBwB,EAAyChC,EAAoB,UAIrFiC,GAA2C9/G,EAAAA,GAAAA,IAAsB1nB,IACrE0lH,EAA4B,CAC1BqgB,yBAA0B/lI,MAE3B,CAAC0lH,GAA8B,KAAK,GAEjC8f,GAAgC7pI,EAAAA,EAAAA,KAAaqE,IACjD2mI,EAAqB3mI,GACrBwnI,EAAyCxnI,KACxC,CAAC2mI,EAAsBa,KAgC1BlgH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM6uE,GAAqB5wI,EAAAA,EAAAA,KAAQ,IACGT,EAAhCiwI,EAAqC,sCAC7B,iDACX,CAACA,EAAyBjwI,IAE7B,OACE6B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzElC,EAAQ,2BAEXiD,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,mBACL5E,QAASA,EACT0V,SAAUm1E,EACVl1E,SAAU46E,KAEZjtF,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACpFqvI,OAGc,wBAAlBrhD,IACCjtF,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gCAA+BwC,UAC5Ce,EAAAA,GAAAA,GAACuuI,GAAgB,CACf/C,2BAA4BA,EAC5BY,kBAAmBA,EACnBh6H,SAAUi6H,MAIfb,GAAgD,wBAAlBv+C,GAjEnC,WACE,MAAMuhD,EAAgB1B,EAClB/vI,EAAQ,QAAS+vI,EAA8B,KADE7vI,EAAK,2BAG1D,OACE6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzEhC,EAAK,qBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNx3G,KAAK,cAELpH,QAASA,KACP+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0H,yBAC7CxvI,UAEFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA0BwC,SAAA,EACvCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,6CAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAEtBuvI,WAOd,CAqC8EE,IACxE/rG,GAA0C,wBAAlBsqD,IACrBjtF,EAAAA,GAAAA,GAAC2uI,GAAiB,CAACjC,eAAe,sBAG7C,KC/Ne,SAASkC,GAAeC,GACrC,MAAMC,EAAWD,EAAQC,SAAS9jF,cAC5B+jF,EAASF,EAAQG,YAAYhkF,cAC7BikF,EAAgBJ,EAAQI,cAAcjkF,cAE5C,OAAI+jF,EAAOh8G,SAAS,QACX,OAGLg8G,EAAOh8G,SAAS,YAAcg8G,EAAOh8G,SAAS,cACzC,SAELg8G,EAAOh8G,SAAS,SACX,QAELg8G,EAAOh8G,SAAS,WACX,UAELg8G,EAAOh8G,SAAS,UACX,SAELg8G,EAAOh8G,SAAS,WACX,UAELg8G,EAAOh8G,SAAS,SACX,QAELg8G,EAAOh8G,SAAS,kBACX,UAEL+7G,EAAS/7G,SAAS,WACb,UAGPg8G,EAAOh8G,SAAS,WACbg8G,EAAOh8G,SAAS,SAChB+7G,EAAS/7G,SAAS,QAClB+7G,EAAS/7G,SAAS,UAClBk8G,EAAcl8G,SAAS,SAEnB,QAEL+7G,EAAS/7G,SAAS,WAAak8G,EAAcl8G,SAAS,UACjD,SAEL+7G,EAAS/7G,SAAS,UAAYk8G,EAAcl8G,SAAS,SAChD,QAEL+7G,EAAS/7G,SAAS,YAAck8G,EAAcl8G,SAAS,WAClD,UAGF,SACT,CCvDA,UAAgB,sBAAwB,WAAW,sBAAwB,WAAW,WAAa,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,MAAQ,WAAW,KAAO,WAAW,KAAO,WAAW,IAAM,WAAW,aAAe,WAAW,WAAa,WAAW,aAAe,YC4IrpC,SAASm8G,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQx/C,SAAS7uD,OAAO1/B,SAASgpB,KAAK,KAChE,CAEA,UAAextB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAUijG,WAC3C,CACL04B,QAAS14B,EAAOjjG,EAAOk8H,eAAeC,OAAOl5B,QAAQx4G,KAFrCsV,EAlHqCq8H,EACvDlsI,SAAQyrI,UAASjrI,cAEjB,MAAM,sBAAE2rI,EAAqB,uBAAEC,IAA2BnpI,EAAAA,EAAAA,MACpDpJ,GAAOD,EAAAA,EAAAA,KAEPyyI,GAAmBthG,EAAAA,GAAAA,GAAiB0gG,GAAS,GAE7Ca,GAA+BltI,EAAAA,EAAAA,KAAY,KAC/C+sI,EAAsB,CACpBp5B,KAAM04B,EAAS14B,KACfw5B,uBAAwBd,EAASc,0BAElC,CAACJ,EAAuBV,IAErBe,GAAyBptI,EAAAA,EAAAA,KAAY,KACzC+sI,EAAsB,CACpBp5B,KAAM04B,EAAS14B,KACf05B,iBAAkBhB,EAASgB,oBAE5B,CAACN,EAAuBV,IAErBiB,GAA8BttI,EAAAA,EAAAA,KAAY,KAC9CgtI,EAAuB,CAAEr5B,KAAM04B,EAAS14B,OACxCvyG,MACC,CAACA,EAASirI,EAASW,IAEtB,GAAKC,EAqBL,OACE3wI,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJR,QAjBAzE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAyByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC1Ee,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAW7Z,EAAK,SAAUH,QAAS8G,EAAQ3E,UAC1Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEhC,EAAK,2BACnC+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,SACN9I,QAASgzI,EACTrzI,WAAWsC,EAAAA,GAAAA,GAAe,sBAAuBC,GAAO+wI,cAAc9wI,SAErEhC,EAAK,wCAQVmG,OAAQA,EACRqD,gBAAc,EACd7C,QAASA,EACTnH,UAAWuC,GAAOswI,sBAAsBrwI,SAAA,EAExCe,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GACdC,GAAOgxI,WACPP,GAAoBzwI,GAAO,eAAe4vI,GAAea,UAG3DzvI,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAOmF,MAAOjE,IAAI,OAAMjB,SAAEwwI,GAAkBT,eAC3DhvI,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOg3B,KAAM,aAAY/4B,EAAK,4BAA4BgC,UACvEg6F,EAAAA,GAAAA,IAAqD,IAA9Bw2C,EAAiBQ,WAAmBhzI,EAAKg7D,SAGnEn5D,EAAAA,GAAAA,IAAA,MAAIrC,UAAWuC,GAAOkxI,IAAIjxI,SAAA,EACxBe,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,yBACV6B,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACGwwI,GAAkB/qE,QAClB,IACA+qE,GAAkBU,WAAW,IAE7B,IACAV,GAAkBX,SAClB,IACAW,GAAkBR,kBAGrBjvI,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,wBACV+C,EAAAA,GAAAA,GAAA,MAAAf,SAAKwwI,GAAkBW,MAEvBpwI,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,8BACV+C,EAAAA,GAAAA,GAAA,MAAAf,SAAKwwI,GAAoBP,GAAYO,SAGvCzvI,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAOqxI,KAAKpxI,SAAEhC,EAAK,4BAEjC+C,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAOsxI,aAAarxI,SAAEhC,EAAK,oCAE1C6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAAS4yI,EAA6BzwI,SAAA,EAC9Ce,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAOuxI,WAAWtxI,SAAEhC,EAAK,mCAC1C+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,iBACHmE,MAAM,KACN0kC,QAASmkG,EAAiBE,4BAG9B7wI,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAAS8yI,EAAuB3wI,SAAA,EACxCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAOuxI,WAAWtxI,SAAEhC,EAAK,kCAC1C+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,eACHmE,MAAM,KACN0kC,QAASmkG,EAAiBI,4BCmJpC,SAASX,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQx/C,SAAS7uD,OAAO1/B,SAASgpB,KAAK,KAChE,CAEA,UAAextB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,GAAuBA,EAAOk8H,gBADbn8H,EA5PsCu9H,EACxDh0I,WACAijE,UACA4vE,SACAoB,gBACAC,cAEA,MAAM,uBACJlB,EAAsB,2BACtBmB,EAA0B,iBAC1BC,IACEvqI,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACN6zI,EAAiCC,EAA+BC,IAAkCzzI,EAAAA,EAAAA,MAClG0zI,EAAmBC,IAAwBx/H,EAAAA,EAAAA,OAC3Ck/C,EAAatnB,EAAWC,IAAchsC,EAAAA,EAAAA,KAEvC4zI,GAAqBxzI,EAAAA,EAAAA,KAAQ,KAEjC,QAAgBC,IAAZ+yI,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,IAKC,CAACA,IAEES,GAAyBzzI,EAAAA,EAAAA,KAAQ,KACrC,MAAMhB,EAAU,CAAC,CACfkK,MAAO3J,EAAK,QAAS,EAAG,KACxB4J,MAAO,KACN,CACDD,MAAO3J,EAAK,SAAU,EAAG,KACzB4J,MAAO,MACN,CACDD,MAAO3J,EAAK,SAAU,EAAG,KACzB4J,MAAO,MACN,CACDD,MAAO3J,EAAK,SAAU,EAAG,KACzB4J,MAAO,QAQT,OANI6pI,GAAWA,GAAW,KACxBh0I,EAAQ8B,KAAK,CACXoI,MAAO3J,EAAK,QAAS,EAAG,KACxB4J,MAAO,QAGJnK,IACN,CAACO,EAAMyzI,IAEJZ,GAA8BttI,EAAAA,EAAAA,KAAa2zG,IAC/Cq5B,EAAuB,CAAEr5B,WACxB,CAACq5B,IAEE4B,GAA6B5uI,EAAAA,EAAAA,KAAY,KAC7CuuI,IACAJ,MACC,CAACI,EAAgCJ,IAE9BU,GAAyB7uI,EAAAA,EAAAA,KAAa2zG,IAC1C86B,EAAqB96B,GACrB9sE,MACC,CAACA,IAEEioG,GAA0B9uI,EAAAA,EAAAA,KAAY,KAC1CyuI,OAAqBtzI,GACrB2rC,MACC,CAACA,IAEEioG,GAAyB/uI,EAAAA,EAAAA,KAAaqE,IAC1C+pI,EAAiB,CAAE59B,KAAMvqF,OAAO5hB,OAC/B,CAAC+pI,IAEEY,GAAiB9zI,EAAAA,EAAAA,KAAQ,KAC7B,MAAM+zI,EAAqBhB,EAAcjxI,MAAM22G,GAASk5B,EAAOl5B,GAAMu7B,YAErE,OAAOD,EAAqBpC,EAAOoC,QAAsB9zI,IACxD,CAAC0xI,EAAQoB,IAENkB,GAAqBj0I,EAAAA,EAAAA,KAAQ,IAC1B+yI,EAAcjwG,QAAQ21E,IAAUk5B,EAAOl5B,GAAMu7B,aACnD,CAACrC,EAAQoB,IACNmB,EAAmB9wI,QAAQ6wI,EAAmB9yI,QA6HpD,OA3HAsvB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KA0HR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wDAAuDwC,SAAA,CACnEuyI,IAxHyB3C,EAwHc2C,GAtHxC1yI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,kCAGR+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACq3G,QAAM,EAACv2E,UAAQ,EAACjhC,KAAM,UAAU0qI,GAAeC,KAAYrqI,cAAc,cAAavF,UAC9FH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA2ByD,IAAI,OAAMjB,SAAA,EAClDe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAQyD,IAAI,OAAMjB,SAAE4vI,EAAQG,eAC5ClwI,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,uBAAsBwC,SAAA,CACnC4vI,EAAQnqE,QACR,IACAmqE,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXnwI,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,WAAUwC,SAAA,CACvB4vI,EAAQuB,GACR,IAAI,IAEJ,IACAlB,GAAYL,WAKlB+C,IACC5xI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,2BACVyH,KAAK,OACLgf,QAAM,EACNw4F,QAAM,EACN5+G,QAASg0I,EAA8B7xI,SAEtChC,EAAK,8BAmFX20I,IA5EwBC,EA4EgBF,GA1EzC7yI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,mBAGP40I,EAAc3yI,KAuBrB,SAAuB4yI,GACrB,MAAMjD,EAAUQ,EAAOyC,GAEvB,OACE9xI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP6e,QAAM,EACNw4F,QAAM,EACNl5D,eAAgB,CAAC,CACfr+C,MAAO,YACPD,KAAM,OACNsT,aAAa,EACbqrC,QAASA,KACPitF,EAA4BjB,EAAQ14B,SAGxCjyG,KAAM,UAAU0qI,GAAeC,KAC/BrqI,cAAc,cACd1H,QAASA,KAAQu0I,EAAuBxC,EAAQ14B,OAASl3G,UAEzDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA2ByD,IAAI,OAAMjB,SAAA,EAClDe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,OAAMwC,UAAE63H,EAAAA,GAAAA,IAAoB75H,EAA2B,IAArB4xI,EAAQoB,eAC1DjwI,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAE4vI,EAAQG,eACjClwI,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,uBAAsBwC,SAAA,CACnC4vI,EAAQnqE,QACR,IACAmqE,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXnwI,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,WAAUwC,SAAA,CACvB4vI,EAAQuB,GACR,IACAlB,GAAYL,UA/BZA,EAAQ14B,KAoCnB,SAzDIr3G,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,gCAGR+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAkCwC,SAAEhC,EAAK,oBACtD+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,cACL5E,QAASy0I,EACT9+H,SAAU6+H,EACV9+H,SAAUm/H,OAsDbK,IACC5xI,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQytI,EACRjtI,QAASmtI,EACT/3H,KAAM/b,EAAK,sBACX8oC,aAAc9oC,EAAK,wBACnB+oC,eAAgBorG,EAChBnrG,sBAAoB,EACpB8rG,oBAAkB,KAGtB/xI,EAAAA,GAAAA,GAACsvI,GAAqB,CAAClsI,OAAQutD,EAAawlD,KAAM66B,EAAmBptI,QAAS0tI,OAzFlF,IAA6BO,EA7CChD,MC7IhC,GAAgF,WCsGhF,IAAevyI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAUijG,WAClD,MAAM04B,EAAU14B,EAAOjjG,EAAO8+H,kBAAkB3C,OAAOl5B,QAAQx4G,EAG/D,MAAO,CACLkxI,UACA7+E,IAJU6+E,EAAU37H,EAAOxT,MAAMupC,KAAK4lG,EAAQj7E,YAASj2D,KAFvCsV,EAzEqCg/H,EACvD7uI,SACAyrI,UACA7+E,MACApsD,cAEA,MAAM,0BAAEsuI,IAA8B7rI,EAAAA,EAAAA,MAChCpJ,GAAOD,EAAAA,EAAAA,KAEPyyI,GAAmBthG,EAAAA,GAAAA,GAAiB0gG,GAAS,GAC7CsD,GAAehkG,EAAAA,GAAAA,GAAiB6hB,GAAK,GAErC8/E,GAA8BttI,EAAAA,EAAAA,KAAY,KAC9C0vI,EAA0B,CAAE/7B,KAAM04B,EAAS14B,OAC3CvyG,MACC,CAACA,EAASirI,EAASqD,IAEtB,GAAKzC,EAqBL,OACE3wI,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJR,QAjBAzE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAyByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC1Ee,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAW7Z,EAAK,SAAUH,QAAS8G,EAAQ3E,UAC1Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEhC,EAAK,uBACnC+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,SACN9I,QAASgzI,EACTrzI,WAAWsC,EAAAA,GAAAA,GAAe,sBD5DwN,YC4D5KE,SAErEhC,EAAK,4BAQVmG,OAAQA,EACRqD,gBAAc,EACd7C,QAASA,EACTnH,UDzEiB,WCyEMwC,SAAA,EAEvBe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjK,UD5EmC,WC6EnCkK,KAAMwrI,EACN1xI,KAAK,UAEN0xI,IAAgBnyI,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC9vD,UDhFwB,WCgFCkK,KAAMwrI,KAC/DnyI,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,SACzBwwI,GAAkB97E,UAGrB70D,EAAAA,GAAAA,IAAA,MAAIrC,UDrFuF,WCqFjEwC,SAAA,EACxBe,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,gCACV+C,EAAAA,GAAAA,GAAA,MAAAf,SACGwwI,GAAkB2C,WAGrBpyI,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,wBACV+C,EAAAA,GAAAA,GAAA,MAAAf,SAAKwwI,GAAkBW,MAEvBpwI,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,8BACV+C,EAAAA,GAAAA,GAAA,MAAAf,SAAKwwI,GAAkBN,aAEzBnvI,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAYC,SAAEhC,EAAK,2CCjGvC,IAAgB,OAAS,WAAW,aAAa,WAAW,UAAY,WAAW,SAAW,YCoK9F,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEm8H,EAAM,cAAEoB,GAAkBv9H,EAAO8+H,kBACzC,MAAO,CACL3C,SACAoB,mBALcx9H,EApIsCo/H,EACxD71I,WACA6yI,SACAoB,gBACAhxE,cAEA,MAAM,0BACJyyE,EAAyB,8BACzBI,IACEjsI,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACN6zI,EAAiCC,EAA+BC,IAAkCzzI,EAAAA,EAAAA,MAClGi1I,EAAmBC,IAAwB/gI,EAAAA,EAAAA,OAC3Ck/C,EAAatnB,EAAWC,IAAchsC,EAAAA,EAAAA,KAEvCm1I,GAA2BjwI,EAAAA,EAAAA,KAAa2zG,IAC5C+7B,EAA0B,CAAE/7B,WAC3B,CAAC+7B,IAEEQ,GAAyBlwI,EAAAA,EAAAA,KAAY,KACzCuuI,IACAuB,MACC,CAACvB,EAAgCuB,IAE9BjB,GAAyB7uI,EAAAA,EAAAA,KAAa2zG,IAC1Cq8B,EAAqBr8B,GACrB9sE,MACC,CAACA,IAEEspG,GAA0BnwI,EAAAA,EAAAA,KAAY,KAC1CgwI,OAAqB70I,GACrB2rC,MACC,CAACA,IAcJ,IAAwBuoG,EAqDxB,IAhEAt0I,EAAAA,EAAAA,KAAU,KACHkzI,EAAc5xI,QACjB4gE,MAED,CAACA,EAASgxE,KAEbtiH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAwDLgxE,EAAc5xI,OAEnB,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,2BACVyH,KAAK,OACLgf,QAAM,EACNw4F,QAAM,EACN5+G,QAASg0I,EAA8B7xI,SAEtChC,EAAK,sCAER+C,EAAAA,GAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,GAAAA,GAAe,4BAA6BC,GAAO4zI,WAAW3zI,SACzEhC,EAAK,mCApEU40I,EAuEJpB,GArEhB3xI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,sBAGP40I,EAAc3yI,KAKrB,SAAuB4yI,GACrB,MAAMjD,EAAUQ,EAAOyC,GACjB9hF,GAAMhf,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAAK4lG,EAAQj7E,OAE3C,OACE90D,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP6e,QAAM,EACNw4F,QAAM,EACNl5D,eAAgB,CAAC,CACfr+C,MAAO,YACPD,KAAM,OACNsT,aAAa,EACbqrC,QAASA,KACP4vF,EAAyB5D,EAAQ14B,SAIrCr5G,QAASA,IAAMu0I,EAAuBxC,EAAQ14B,MAAMl3G,SAAA,EAEpDe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjK,UAAWuC,GAAOyI,OAAQd,KAAMqpD,EAAKvvD,KAAK,UAClD3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA2ByD,IAAI,OAAMjB,SAAA,EAClDe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,OAAMwC,UAAE63H,EAAAA,GAAAA,IAAoB75H,EAA2B,IAArB4xI,EAAQoB,cACzDjgF,IAAOhwD,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC9vD,UAAWuC,GAAOmF,MAAOwC,KAAMqpD,KACtDlxD,EAAAA,GAAAA,IAAA,QAAMrC,WAAWsC,EAAAA,GAAAA,GAAe,WAAY,QAAS,QAASC,GAAO8vI,UAAU7vI,SAAA,CAC5E4vI,EAAQl7E,OAAO,IAEfk7E,EAAQuD,QAAQ,IAEhBvD,EAAQC,aAEXhwI,EAAAA,GAAAA,IAAA,QAAMrC,WAAWsC,EAAAA,GAAAA,GAAe,WAAYC,GAAOoF,UAAUnF,SAAA,CAC1D4vI,EAAQuB,GACR,IACAvB,EAAQM,eA5BRN,EAAQ14B,KAiCnB,SAqBIn2G,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQytI,EACRjtI,QAASmtI,EACT5sI,MAAOlH,EAAK,mCACZ+b,KAAM/b,EAAK,yBACX+oC,eAAgB0sG,EAChBzsG,sBAAoB,KAEtBjmC,EAAAA,GAAAA,GAACiyI,GAAqB,CAAC7uI,OAAQutD,EAAawlD,KAAMo8B,EAAmB3uI,QAAS+uI,WCjEpF,IAAer2I,EAAAA,EAAAA,KApEsBu2I,EACnCx1C,aACAx5E,SACApnB,YACA8gG,sBACAzgG,cAEA,MAAMG,GAAOD,EAAAA,EAAAA,KAEPovG,EAAe/O,GAAY3d,WAAW,GAEtCozD,GAAkBvsI,EAAAA,EAAAA,IAAgB,KAClC6lG,GAActvG,EAAQsvG,MAG5B,GAAK/O,GAAY3d,SAqCjB,OACE5gF,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,WAAWsC,EAAAA,GAAAA,GAAe,iBAAkB,iCAAkCtC,GAC9EkP,MAAO,WAAWonI,EAAAA,SAClB5tG,UAAWinE,EACXtvG,QAASg2I,EAAgB7zI,SAAA,CAtC7B,WACE,GAAKo+F,EACL,OAAIA,EAAWI,eAAiB2O,GAE5BpsG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL8V,UAAWumF,EAAWl5F,MACtByB,MAAM,cACNzF,MAAOlD,EAAKkD,MAAMlB,UAElBe,EAAAA,GAAAA,GAACo9F,GAAe,CACdC,WAAYA,EACZ58F,KAAMuyI,EAAAA,IACNnvH,OAAQA,EACR05E,oBAAqBA,OAMzBv9F,EAAAA,GAAAA,GAACu/F,GAAa,CACZ3gB,QAASwtB,EACT3rG,KAAMuyI,EAAAA,IACN7uI,MAAOk5F,EAAWl5F,MAClB0f,OAAQA,EACR05E,oBAAqBA,EACrBiC,eAAa,EACb78D,sBAAoB,EACpBx7B,cAAUxJ,GAIlB,CASKs1I,IACDn0I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAEo+F,EAAWl5F,SACnCnE,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,SAAEhC,EAAK,2BAA4BogG,EAAWlnE,MAAO,gBCMtF,IAAe75B,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,KACFg+C,EAAAA,GAAAA,IAAKh+C,EAAO0hC,SAASs+F,MAAO,CAC7B,6BAEFC,kBAAmBjgI,EAAO81E,aAAaogB,MAAMC,OAC7Cd,gBAAiBr1F,EAAOwsE,SAAS4oB,SACjC8qC,uBAAuB7pC,EAAAA,EAAAA,KAA4Br2F,MARrCD,EA9DmCogI,EACrD72I,WACA22I,oBACA5qC,kBACA+qC,2BACAF,wBACA3zE,cAEA,MAAM,eAAE6qB,EAAc,iBAAE2lC,IAAqB5pH,EAAAA,EAAAA,MACvCpJ,GAAOD,EAAAA,EAAAA,KAEPu2I,GAAqBtkI,EAAAA,EAAAA,OACnB0sF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASq3C,KAErFplH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM+zE,GAAwBhxI,EAAAA,EAAAA,KAAao8E,IACzC0L,EAAe,CACblB,eAAgBxK,EAAQwK,mBAEzB,CAACkB,IAEEmpD,GAAiCjxI,EAAAA,EAAAA,KAAay1F,IAClDg4B,EAAiB,CAAEqjB,yBAA0Br7C,MAC5C,CAACg4B,IAEEyjB,GAAkBh2I,EAAAA,EAAAA,KAAQ,IAC9By1I,GAAqBxyF,OAAOsK,QAAOiG,EAAAA,GAAAA,IAAKq3C,EAAiB4qC,KACxD,CAACA,EAAmB5qC,IAEvB,OACEvoG,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iCAAgCwC,SAC5Cy0I,IACC50I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,wBACZquC,QAASgoG,EACTr/E,QAASw/E,KAEXzzI,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,OAAO0b,IAAKo7H,EAAmBt0I,SAC3Cy0I,EAAgBx0I,KAAKm+F,IACpBr9F,EAAAA,GAAAA,GAAC6yI,GAAc,CAEbx1C,WAAYA,EACZE,oBAAqBR,EACrBjgG,QAAS02I,EACT3vH,QAASuvH,GAJJ/1C,EAAW56F,SAQtBzC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,UACrD8B,EAAAA,GAAAA,GAAW9D,EAAK,gBAAiB,CAAC,qBC2E/C,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQg+C,EAAAA,GAAAA,IAAKh+C,EAAO0hC,SAASs+F,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,2BAfcjgI,EA9HmC0gI,EACrDn3I,WACAijE,UACAm0E,+BACAC,iCACAC,2BACAC,6BACAC,+BACAC,iCACAC,2BACAC,6BACAC,8BACAC,gCACAC,0BACAC,4BACAC,4BAEA,MAAM,iBAAEvkB,IAAqB5pH,EAAAA,EAAAA,MAEvBpJ,GAAOC,EAAAA,GAAAA,MAEbixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMg1E,GAAyBjyI,EAAAA,EAAAA,KAAaqE,GACnC5J,EAAK,4BAA6B,CACvC21B,MAAO31B,EAAK,aAAc,CAAEk5B,MAAOu+G,EAAAA,IAAgC7tI,QAEpE,CAAC5J,IAEE03I,GAAuBnyI,EAAAA,EAAAA,KAAaqE,IACxCopH,EAAiB,CAAEukB,sBAAuBE,EAAAA,IAAgC7tI,OACzE,CAACopH,IAEJ,SAAS2kB,IACP,MAAM/tI,EAAQ6tI,EAAAA,IAAgCv1G,QAAQq1G,GAEtD,OACEx0I,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,OAAMwC,UACnBe,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CACVvc,MAAO3J,EAAK,2BACZ0B,IAAK,EACLb,IAAK,EACL+I,OAAkB,IAAXA,EAAeA,EAAQ,EAC9BguI,YAAaJ,EACbriI,SAAUuiI,KAIlB,CAEA,SAASG,EACP3wI,EACAykB,EACAmsH,EACAC,EACAC,EACAC,GAEA,OACEp2I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEkF,KAE3EnE,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gCACZquC,QAASypG,EAGT9gF,QAAUw6B,GAAcwhC,EAAiB,CAAE,CAAC,cAAcrnG,iBAAoB6lE,OAEhFzuF,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,oCACZquC,QAAS0pG,EAET/gF,QAAUw6B,GAAcwhC,EAAiB,CAAE,CAAC,cAAcrnG,mBAAsB6lE,OAElFzuF,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,kCACZquC,QAAS2pG,EAEThhF,QAAUw6B,GAAcwhC,EAAiB,CAAE,CAAC,cAAcrnG,aAAgB6lE,OAE5EzuF,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gCACZquC,QAAS4pG,EAETjhF,QAAUw6B,GAAcwhC,EAAiB,CAAE,CAAC,cAAcrnG,eAAkB6lE,MAGrE,SAAR7lE,GAAkBgsH,MAGzB,CAEA,OACE91I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,CAC5C61I,EACC73I,EAAK,2BACL,QACA22I,EACAC,EACAC,EACAC,GAEDe,EACC73I,EAAK,2BACL,QACA+2I,EACAC,EACAC,EACAC,GAEDW,EACC73I,EAAK,0BACL,OACAm3I,EACAC,EACAC,EACAC,UC3JR,IAAgB,KAAO,WAAW,KAAO,YCqBnCY,GAAsC,CAC1C,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KACzD,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MACzD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACvD,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACvD,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACxD,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MACxD,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAC1D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,KAAM,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAC7D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAC5D,KAAM,KAAM,MAAO,MAGfC,GAAsB3kB,EAAAA,IAAgCjwF,QAAQvjC,GAClEk4I,GAAoCpiH,SAAS91B,KAyF/C,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,eACJmiI,GACEniI,EAAO0hC,SAASs+F,MAEpB,MAAO,CACLmC,oBAPcpiI,EA/EsCqiI,EACxD94I,WACA64I,iBACA51E,cAEA,MAAM,iBAAEwwD,IAAqB5pH,EAAAA,EAAAA,MAGvBkvI,GADOv4I,EAAAA,EAAAA,KACSi7D,MAAQ,MACvBu9E,EAAkBC,IAAuBhkI,EAAAA,EAAAA,IAAmB,KAC5D60B,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,IAEjDikI,GAA0Ch4I,EAAAA,EAAAA,KAAQ,KACtD,MAAMhB,EAAU04I,GAAoBl2I,KAAKkxH,IAOhC,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAAC2kB,GAAW,CAAE/0I,KAAM,aAC3BqwH,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAE5vH,KAAM,aAC7BqwH,GAAGT,OAOrC5vF,OAAO1/B,SAAS5B,KAAI,EAAGkxH,WAAUM,iBAAgBI,mBAAmB,CACrElqH,MAAO8pH,EACPtiC,SAAU0iC,EACVjqH,MAAOupH,MAGT,IAAK9pF,EAAY2jC,OAAQ,CACvB,MAAM0rE,EAAwBj5I,EAAQ8C,MAAMzB,GAAWA,EAAO8I,QAAU0uI,IAClEK,EAAkBl5I,EAAQ8jC,QAAQziC,GAAWA,EAAO8I,QAAU0uI,IACpE,OAAOI,EAAwB,CAACA,KAA0BC,GAAmBl5I,CAC/E,CAEA,OAAOA,GAAS8jC,QAAQziC,GAAWA,EAAO6I,MAAMokD,cAAcj4B,SAASuT,EAAY0kB,mBAClF,CAACuqF,EAAUjvG,KAEd8B,EAAAA,GAAAA,IAAsB,EAAEC,EAAcwtG,MACpC,GAAIxtG,IAAiB7rC,GAAYq5I,GAAcr2I,MAAMzB,GAAWA,IAAWw3I,IAAW,OACtF,MAAOljI,IAAYwzH,EAAAA,GAAAA,IAAU6P,GAAsB33I,GAAWs3I,EAAetiH,SAASh1B,EAAO8I,SAC7F4uI,EAAoB,IAAIpjI,EAASnT,KAAKnB,GAAWA,EAAO8I,YACvD,CAACrK,EAAU64I,EAAgBG,EAAiB32I,OAAQ02I,EAAUG,IAEjE,MAAMnuD,GAAehhF,EAAAA,EAAAA,IAAiBkpF,IACpCgmD,EAAoBhmD,GACpBwgC,EAAiB,CACfolB,eAAgB5lD,OASpB,OALAthE,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIRz/D,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO+hC,KAAM,oCAAoC9hC,UAC9Ee,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOmU,MAAMlU,UAC1Ce,EAAAA,GAAAA,GAACqsF,GAAU,CACT5vF,UAAWuC,GAAO6wF,OAClB/oC,MAAO4uF,EACP1oD,eAAgBwoD,EAChB1nD,uBAAwBvG,EACxBrgD,YAAaZ,EACbkB,eAAgBjB,EAChBc,cAAY,EACZI,eAAa,EACbH,oBAAkB,EAClBK,cAAc,WACdP,cAAc,+BC8FxB,IAAe9qC,EAAAA,EAAAA,KAzLuBw5I,EACpC9uI,SACA+uI,YACAC,qBAEA,MAAM,iBACJvxG,EAAgB,eAChBwxG,EAAc,mBACdC,EAAkB,cAClBC,EAAa,kBACbC,IACE/vI,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,MACNq5I,EAAoBC,IAAyB7kI,EAAAA,EAAAA,MAE9C8kI,GAAe74I,EAAAA,EAAAA,KAAQ,IAAMq4I,EAAU72I,KAAI,EAAGs3I,cAAeA,KAAW,CAACT,IACzEU,GAAmBv9G,EAAAA,EAAAA,GAAsBq9G,IAExCv5E,EAAO+mE,IAAYtyH,EAAAA,EAAAA,IAAoB,CAC5CilI,iBAAkBH,EAClBI,mBAAoBJ,EACpBrS,kBAAcvmI,KAIhBJ,EAAAA,EAAAA,KAAU,KACJk5I,IAAqBF,GACvBxS,EAAS,CACP2S,iBAAkBH,EAClBI,mBAAoBJ,EACpBrS,kBAAcvmI,MAGjB,CAAC84I,EAAkBF,IAEtB,MAAMK,GAAqBp0I,EAAAA,EAAAA,KAAaqE,KACtC2qH,EAAAA,GAAAA,IAAoB,IAAI3qH,KACxB49B,EAAiB,CACft8B,QAASlL,EAAK,sBAEf,CAACA,EAAMwnC,IAEJoyG,GAAsBr0I,EAAAA,EAAAA,KAAa+Z,IACnCA,EAAKu6H,WACPd,EAAez5H,EAAKi6H,UAEpBF,EAAsB/5H,KAEvB,CAACy5H,IAEEe,GAA6Bv0I,EAAAA,EAAAA,KAAY,KAC7C8zI,OAAsB34I,KACrB,IAEGq5I,GAAuBx0I,EAAAA,EAAAA,KAAY,KAClC6zI,IAIDrvI,EACFkvI,EAAmB,CACjBlvI,SACAwvI,SAAUH,EAAmBG,SAC7Bh6I,UAAW65I,EAAmB75I,WAGhCy5I,EAAe,CACbO,SAAUH,EAAmBG,SAC7Bh6I,UAAW65I,EAAmB75I,WAGlCu6I,OACC,CAAC/vI,EAAQ+vI,EAA4Bb,EAAoBD,EAAgBI,IAEtEl/D,GAAa30E,EAAAA,EAAAA,KAAY,CAACkiI,EAAuCjiI,KACrE,MAAM4xB,EAAQ31B,KAAKmY,MAAM6tH,EAAY3/H,EA7Ed,IA8EjBzG,EAAQ0+D,EAAM05E,kBAAkBv3G,QAAQ18B,IAAiB,EACzDk0I,EAAqB35E,EAAM05E,kBAAkBl2G,QAAQg2G,GAAaA,IAAa/zI,IAEhFk0I,IAAuBjmH,EAAAA,GAAAA,IAAUpyB,EAAQ+1B,EAAO,EAAGkiH,EAAa13I,UAIrE83I,EAAmB9oD,OAAOvvF,EAAQ+1B,EAAO,EAAG5xB,GAC5CshI,GAAU30H,IAAO,IACZA,EACH80H,aAAc5lI,EACdq4I,4BAED,CAAC35E,EAAM05E,iBAAkBH,EAAa13I,SAEnC8lI,GAAgBniI,EAAAA,EAAAA,KAAY,KAChCuhI,GAAU30H,IACJpI,EACFovI,EAAkB,CAChBpvI,SACA+uI,UAAW3mI,EAAQunI,qBAGrBR,EAAc,CAAEJ,UAAW3mI,EAAQunI,qBAG9B,IACFvnI,EACHsnI,iBAAkBtnI,EAAQunI,mBAC1BzS,kBAAcvmI,QAGjB,CAACqJ,EAAQovI,EAAmBD,IAE/B,OACEr3I,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UClJiB,WDkJWwC,SAAA,EAC/Be,EAAAA,GAAAA,GAAA,MAAIvD,UCnJoC,WDmJVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC/DhC,EAAK,6BAER+C,EAAAA,GAAAA,GAAA,OAAKvD,UCtJ2F,WDsJtDkP,MAAO,WAtH9B,GAsH0CoqI,EAAUl3I,WAAiCI,SACrG82I,EAAU72I,KAAI,CAAC+3I,EAAc9vF,KAC5B,MAAM49E,EAAY/nE,EAAMknE,eAAiB/8E,EACnC69E,EAzHS,IAyHKhoE,EAAM05E,kBAAkBv3G,QAAQ83G,EAAaT,WAAa,GACxEhwH,EA1HS,IA0HFw2C,EAAM25E,oBAAoBx3G,QAAQ83G,EAAaT,WAAa,GACnEpyI,EAAW6yI,EAAaH,WAC1B,qBACCG,EAAaz6I,SAAW,uBAAyB,2BAEtD,OACEwD,EAAAA,GAAAA,GAACilI,GAAAA,EAAS,CAERxiI,GAAIw0I,EAAaT,SACjB51H,OAAQu2D,EACR+tD,UAAWP,EACXh5H,MAAO,QAAQo5H,EAAYC,EAAax+G,OACxC2+G,WAAcloI,EAAKkD,MAAQ,OAAS,SAAzB,UACX0P,YAAaonI,EAAaz6I,SAASyC,UAEnCH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,WAAWsC,EAAAA,GAAAA,GAAe,oBC3K8E,YD4KxG28G,QAAM,EACNC,cAAc,OACdz3G,KAAM+yI,EAAaz6I,SAAW,OAAS,cACvC+H,WAAS,EACTi+C,eAAgB,CACd,CACEK,QAASA,KACP+zF,EAAmBK,EAAaT,WAElCryI,MAAOlH,EAAK,QACZiH,KAAM,SAIVpH,QAASA,KACP+5I,EAAoBI,IACpBh4I,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,QAAOwC,SAAA,CAAC,IAErBg4I,EAAaT,aAEhBx2I,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEhC,EAAKmH,OAxB5B6yI,EAAaT,WATfS,EAAaT,gBAuC1Bx2I,EAAAA,GAAAA,GAAA,KAAGvD,UCxM8D,WDwM/ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACnEhC,EAAK,mCAGV+C,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQtC,QAAQu1I,GAChBzyI,QAASmzI,EACT5yI,MAAOlH,EAAKo5I,GAAoB75I,SAAW,gCAAkC,+BAC7Ewc,KAAM/b,EAAKo5I,GAAoB75I,SAAW,+BAAiC,8BAC3EupC,aAAc9oC,EAAKo5I,GAAoB75I,SACnC,+BACA,8BACJwpC,eAAgBgxG,EAChB/wG,sBAAuBowG,GAAoB75I,iB,gBE3LnD,MAAM06I,GAAoB,sBAEpBC,IAA+B1nH,EAAAA,GAAAA,KAAU6uC,GAAOA,KAAM,KAAK,GA4FjE,IAAehiE,EAAAA,EAAAA,KA1FqB86I,EAClCC,kBACAC,SACA//G,YACAggH,sBACAC,kBACAplI,eAEA,MAAM,cAAEqlI,EAAa,gBAAEC,IAAoBrxI,EAAAA,EAAAA,OACpCmwI,EAAUmB,IAAelmI,EAAAA,EAAAA,IAAS4lI,GAAmB,IAEtDp6I,GAAOD,EAAAA,EAAAA,KACP46I,EAAaN,EAAS,SAAW,WACjC1wI,EAAiB3J,EAATq6I,EAAc,oBAA4B,YAElDO,GAA8B3+G,EAAAA,EAAAA,GAAsBq+G,GACpDO,EAA+BT,IAAoBb,EACpDe,GAAuBM,OAA+Bl6I,EACrDo6I,EAAavB,GAAYa,IAAoBb,GAAYgB,IAAoBhB,GAE5EwB,EAAiBC,IAAiBv6I,EAAAA,EAAAA,KAAQ,IAC1C84I,EAAS33I,OAIV23I,EAAS33I,OAASq5I,GAAAA,GACb,MAACv6I,EAAWV,EAAK,GAAG26I,kBAEzBpB,EAAS33I,OAASs5I,GAAAA,GACb,MAACx6I,EAAWV,EAAK,GAAG26I,iBAExBQ,GAAAA,GAAeC,KAAK7B,QAIY74I,IAAjCm6I,GAA8CC,EACzC,GAIF,CACLD,EAA+B76I,EAAK,GAAG26I,aAAuBhxI,QAASjJ,GACtC,IAAjCm6I,EAAyC76I,EAAK,GAAG26I,eAAqBj6I,GAV/D,MAACA,EAAWV,EAAK,GAAG26I,aAVpB,IAsBR,CAACpB,EAAUsB,EAA8BC,EAAY96I,EAAM26I,EAAYhxI,KAE1ErJ,EAAAA,EAAAA,KAAU,KACRo6I,EAAYN,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMiB,GAAuB91I,EAAAA,EAAAA,KAAamC,IACxC,MAAMkC,EAAQlC,EAAEqN,OAAOnL,MAAMojE,OAE7B,GAAIqtE,IAAWzwI,EAAMyyF,MAAM49C,IAKzB,YAJKrwI,EAAMhI,SACT84I,EAAY,IACZvlI,IAAW,MAIf,MAAMmmI,EAAc1xI,EAAMwxD,QAAQ6+E,GAAmB,IAErDS,EAAYY,IAEoB,KAAhBA,IAA4BC,EAAAA,GAAAA,IAAgBD,GAAa,MAGzEnmI,IAAWmmI,GAEXpB,IAA6B,KACvBoB,IAAgBlB,IACJC,EAASI,EAAkBD,GACnC,CAAEjB,SAAU+B,UAGrB,CAACjB,EAAQI,EAAiBD,EAAeJ,EAAiBjlI,IAE7D,OACEpS,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAO,GAAGywI,EAAS/tE,EAAAA,IAAkB,KAAKitE,IAC1CpkI,SAAUkmI,EACV1xI,MAAOmxI,EAAa96I,EAAK,YAAc2J,EACvCwpD,MAAO6nF,EACPQ,QAAST,EACTzM,SAAUh0G,EACVmU,2BAAyB,O,gBChE/B,MAAM2yB,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAO,GAE7Co6E,GAA2B,iCAwPjC,IAAep8I,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE+jB,GAAkB/jB,GACpB,SACJ4E,EAAQ,oBAAEy/H,EAAmB,gBAAEC,EAAiBpnF,MAAOuoF,IACrDrlI,EAAAA,EAAAA,KAAeJ,GAAQ0lI,aAAe,CAAC,EACrC3lF,EAAch8B,GAAgBqb,EAAAA,EAAAA,KAAWp/B,EAAQ+jB,QAAiBt5B,EAElEk7I,GAAexa,EAAAA,GAAAA,GAAmBnrH,EAAQ,eAEhD,IAAK+/C,EACH,MAAO,CACLn7C,WACA0/H,kBACAD,sBACAoB,oBACAE,gBAIJ,MACE5+E,UAAW6+E,EACX3+E,SAAU4+E,EAAe,UACzBhD,GACE9iF,EACE+lF,EAAsB/hH,GAAgBwb,EAAAA,EAAAA,KAAmBv/B,EAAQ+jB,QAAiBt5B,EAGxF,MAAO,CACLs7I,mBAHwBC,EAAAA,EAAAA,IAAkBjmF,GAI1C6lF,mBACAC,kBACAI,WAAYH,GAAqBI,IACjCthI,WACAy/H,sBACAC,kBACAmB,oBACAE,eACA9C,eAtCc9iI,EAtPmComI,EACrD78I,WACAy8I,oBACAH,mBACAC,kBACAI,aACArhI,WACA0/H,kBACAmB,oBACApB,sBACAsB,eACA9C,YACAt2E,cAEA,MAAM,gBACJ65E,EAAe,cACfC,IACElzI,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEPw8I,GAAwB97I,EAAAA,EAAAA,KAAQ,IAAMq4I,GAAWv2I,MAAK,EAAGs3I,gBAAiBA,KAAa,CAACf,IACxFsB,EAAkBmC,GAAuBhD,UAAY,IACpDiD,EAAmBC,IAAwBjoI,EAAAA,EAAAA,KAAS,IACpDkoI,EAAwBC,IAA6BnoI,EAAAA,EAAAA,KAAS,IAC9D2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,OAEnB3J,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnBwoD,EAAWC,IAAgBzoD,EAAAA,EAAAA,IAASqnI,GAAoB,KACxD3+E,EAAUC,IAAe3oD,EAAAA,EAAAA,IAASsnI,GAAmB,KACrDK,EAAKW,IAAUtoI,EAAAA,EAAAA,IAAS0nI,GAAc,KACtCa,EAAkBC,IAAuBxoI,EAAAA,EAAAA,IAAyB4lI,GAEnE6C,GAAuBjsI,EAAAA,EAAAA,GAASgrI,GAAmB,EAAO/qI,EAAAA,GAAeC,SAEzEopB,EAAYzf,IAAaqiI,EAAAA,GAAoBC,WAC7CC,GAAuC,IAArBL,EAElBnC,GAA8B3+G,EAAAA,EAAAA,GAAsBq+G,GACpDO,EAA+BP,GAAuBM,EACtDyC,EAA8BvE,GAAaA,EAAUl3I,OAAS,EAE9D07I,GAAoB78I,EAAAA,EAAAA,KAAQ,KAC5B28I,IAIGv5I,QAAQgH,IAAU6xI,GAA2BF,IAAsD,IAAjC3B,IACxE,CAACuC,EAAiBvyI,EAAO6xI,EAAwBF,EAAmB3B,KAEvE3pH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAKVliE,EAAAA,EAAAA,KAAU,KACR8gE,IAAa,KACXi7E,SAED,CAACA,KAEJ/7I,EAAAA,EAAAA,KAAU,KACRu8I,OAASn8I,KACR,CAACu8I,KAEJ38I,EAAAA,EAAAA,KAAU,KACR28D,EAAa4+E,GAAoB,IACjC1+E,EAAY2+E,GAAmB,IAC/BgB,EAAOZ,GAAc,MACpB,CAACL,EAAkBC,EAAiBI,KAEvC57I,EAAAA,EAAAA,KAAU,KACR08I,EAAoB5C,GAAmB,MACtC,CAACA,KAEJ95I,EAAAA,EAAAA,KAAU,KACJua,IAAaqiI,EAAAA,GAAoBK,WACnCZ,GAA0B,GAC1BF,GAAqB,GACrBG,OAASl8I,MAEV,CAACma,IAEJ,MAAM2iI,GAAoBj4I,EAAAA,EAAAA,KAAak4I,IACrCZ,EAASY,KACR,IAEG9/E,GAAwBp4D,EAAAA,EAAAA,KAAamC,IACzCu1D,EAAav1D,EAAEqN,OAAOnL,OACtB+yI,GAA0B,KACzB,IAEG7+E,GAAuBv4D,EAAAA,EAAAA,KAAamC,IACxCy1D,EAAYz1D,EAAEqN,OAAOnL,OACrB+yI,GAA0B,KACzB,IAEGe,GAAkBn4I,EAAAA,EAAAA,KAAamC,IACnCo1I,EAAOp1I,EAAEqN,OAAOnL,OAChB+yI,GAA0B,KACzB,IAEGtB,IAAuB91I,EAAAA,EAAAA,KAAaqE,IACxCozI,EAAoBpzI,GACpB6yI,EAAqBrC,IAAoBxwI,KACxC,CAACwwI,IAEEuD,IAAoBp4I,EAAAA,EAAAA,KAAY,KACpC,MAAMq4I,EAAmB5gF,EAAUgQ,OAC7B6wE,EAAkB3gF,EAAS8P,OAC3B8wE,EAAa3B,EAAInvE,OAElB+vE,IAEAa,EAAiBh8I,OAKtB06I,EAAc,CACZzxI,WACI6xI,GAA0B,CAC5B1/E,UAAW4gF,EACX1gF,SAAU2gF,EACV1B,IAAK2B,MAEHtB,GAAqB,CACvBjD,SAAUwD,KAZZH,EAASnB,OAeV,CACD5wI,EACAmyD,EAAWE,EAAUi/E,EAAKO,EAC1BK,EAAkBP,EAClBF,IAkBF,OACEz6I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2CAA0CwC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACbd,qBAAsBA,EACtB9nI,SAAUqoI,EACVt2I,MAAM,0BACN0B,SAAU0xB,KAEZv3B,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOozD,EACP7nD,SAAUwoD,EACVh0D,MAAO3J,EAAK,aACZ4I,SAAU0xB,EACV64B,MAAOA,IAAUsoF,GAA2BtoF,OAAQzyD,KAEtDqC,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOszD,EACP/nD,SAAU2oD,EACVn0D,MAAO3J,EAAK,YACZ4I,SAAU0xB,KAEZv3B,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACPz1G,MAAOuyI,EACPhnI,SAAUuoI,EACV/zI,MAAO3J,EAAK,WACZ4I,SAAU0xB,EACVsnD,UAAWg6D,EACXr8B,mBAAoBq8B,GAAgBA,EAAeO,EAAIv6I,QAAQ2nF,gBAAa7oF,QAIhFqC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAC1E8B,EAAAA,GAAAA,GAAW9D,EAAK,0BAA2B,CAAC,KAAM,0BAIvD6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,eAEhF+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iBAAgBwC,UAC7Be,EAAAA,GAAAA,GAACo3I,GAAa,CACZC,gBAAiBA,EACjB9/G,UAAWA,EACXggH,oBAAqBA,EACrBC,gBAAiBA,EACjBplI,SAAUkmI,OAIbK,IAAsBsC,EAAAA,KAnE/B,WACE,MAAMC,EAAmB,GAAG3xE,EAAAA,MAAkB4xE,EAAAA,MAE9C,OACEn7I,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACzEhC,EAAK,mCACJo7D,QAAQ,SAAU,mBAClBmjB,MAAM,KACNt8E,KAAK0oD,GACU,kBAANA,GAAwB5nD,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CAACz8F,IAAK6/H,EAAkBliI,KAAM,IAAImiI,EAAAA,QAA0BvzF,KAI/G,CAsD0DwzF,IAClDp7I,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UAC1E8B,EAAAA,GAAAA,GAAW9D,EAAK,gBAAiB,CAAC,KAAM,sBAE1C+8I,IACCl7I,EAAAA,GAAAA,IAAA,KAAGrC,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,CAC1EhC,EAAK,sBACN+C,EAAAA,GAAAA,GAAA,UACAlB,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,gBAAewC,SAAA,CAC5BsqE,EAAAA,IACAywE,WAMRM,IACCt6I,EAAAA,GAAAA,GAAC81I,GAAe,CACdC,UAAWA,EACXC,eAAgBiE,QAKtBj6I,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAAS6xG,EACTz9I,QAAS89I,GACT/0I,SAAU0xB,EACVzgB,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mB,4BChQrB,MA4IA,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,yBACJmoI,EAAwB,yBACxBC,EAAwB,uBACxBC,EAAsB,2BACtBC,IACExqE,EAAAA,GAAAA,GAAqB99D,GAEzB,MAAO,CACLmoI,2BACAC,2BACAC,yBACAC,gCAbcvoI,EA5IoCwoI,EACtDj/I,WACAijE,UACA47E,2BACAC,2BACAC,yBACAC,iCAEA,MAAM,gBAAEpxD,EAAe,uBAAEsgC,EAAsB,YAAEgxB,IAAgBr1I,EAAAA,EAAAA,MAE3Ds1I,GAAgB1sI,EAAAA,EAAAA,OACf2sI,EAAuBC,IAA4BpqI,EAAAA,EAAAA,KAAS,GAE7DxU,GAAOD,EAAAA,EAAAA,MAEN8+I,EAAqBC,IAA0BtqI,EAAAA,EAAAA,KAAS,IAC/DlU,EAAAA,EAAAA,KAAU,KACRgT,OAAOyrI,UAAUC,yBAAyBl2D,KAAKg2D,KAC9C,KAEH5tH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMy8E,GAAoB31I,EAAAA,EAAAA,IAAgB,KACxC,MAAM41I,EAAO,IAAIC,KAAK,EAACC,EAAAA,GAAAA,OAAiBC,EAAAA,IAAoB,CAAE97I,KAAM,eAC9D6a,EAAMkhI,IAAIC,gBAAgBL,IAChC5kI,EAAAA,GAAAA,GAAS8D,EAAKihI,EAAAA,QAGVG,GAAkCj6I,EAAAA,EAAAA,KAAaisF,IACnDl+E,OAAOyrI,UAAUD,uBAAuBttD,KACvC,IAEGiuD,GAAoBn2I,EAAAA,EAAAA,IAAiB5B,IACzC+2I,EAAY,CAAEiB,OAAQh4I,EAAEG,QAAS83I,OAAQj4I,EAAEK,aAGvC63I,GAAwBt2I,EAAAA,EAAAA,IAAgB,KAC5C6jF,EAAgB,CAAEc,WAAW,OAGzB4xD,GAAav2I,EAAAA,EAAAA,IAAgB,KACjC,MAAMwoC,EAAS4sG,EAAcvsI,QACxB2/B,IAEDguG,EAAAA,GAAAA,GAAYhuG,KACd8sG,GAAyB,GAEzBrrI,YAAW,KACTqrI,GAAyB,KACxB,UAIP,OACE/8I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAem6I,aACvBv8I,KAAM,IACNhE,UAAU,oBACV+0C,gBAAc,EACdxuC,QAAQ,KAEVhD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SAAEhC,EAAK,yCAEjE6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPvH,QAAS+/I,EACT34I,KAAK,aAAYjF,UAEjBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAC,6BAEzBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPvH,QAAS4/I,EACTx4I,KAAK,gBACL2B,UAAWo3I,EAAAA,GAA4Bh+I,UAEvCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAC,kBAEzBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP8T,IAAKwjI,EACL7+I,QAASggJ,EACT54I,KAAK,UACL2B,UAAWq3I,EAAAA,GACXvxI,MAAOiwI,EAAwB,qBAAuB,GAAG38I,UAEzDe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAC,4BAGzBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAM,uBACN0kC,QAASxqC,QAAQw6I,GAEjBrnF,QAASA,IAAMy2D,EAAuB,CAAE4wB,0BAA2BA,OAGrEt7I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAM,uBACNf,UAAWy1I,EACXhwG,QAASxqC,QAAQu6I,GAEjBpnF,QAASA,IAAMy2D,EAAuB,CAAE2wB,0BAA2BA,OAGrEr7I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,uBACZquC,QAASxqC,QAAQy6I,GAEjBtnF,QAASA,IAAMy2D,EAAuB,CAAE6wB,wBAAyBA,OAGnEv7I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAM,gCACN0kC,QAASxqC,QAAQ06I,GAEjBvnF,QAASA,IAAMy2D,EAAuB,CAAE8wB,4BAA6BA,MAGtE2B,EAAAA,KACCn9I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAM,qBACN0kC,QAASxqC,QAAQg7I,GACjB7nF,QAASwoF,KAIbz8I,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPvH,QAASo/I,EACTh4I,KAAK,MAAKjF,UAEVe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAC,6B,0BCpIjC,MAgKA,IAAe3C,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,MACJqqD,EAAK,qBACL6/E,EAAoB,oBACpBC,EAAmB,gBACnBC,EAAe,WACfC,IACEvsE,EAAAA,GAAAA,GAAqB99D,GAEzB,MAAO,CACLmqI,sBACAC,kBACAC,aACAhgF,QACA6/E,0BAfcnqI,EAhK+BuqI,EACjDhhJ,WACA8gJ,kBACAD,sBACAE,aACAhgF,QACA6/E,uBACA39E,cAEA,MAAM,uBACJirD,EAAsB,mBAAEmc,IACtBxgI,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,MAEP,SAAE+E,IAAaC,EAAAA,EAAAA,MACfu7I,EAAiBx7I,IAAayY,EAAAA,IAAUD,EAAAA,IAExCijI,EAAoC,CAAC,CACzC92I,MAAO3J,EAAK,wBACZ4J,MAAO,OACN,CACDD,MAAO3J,EAAK,wBACZ4J,MAAO,QAGH82I,EAAyC,CAAC,CAC9C/2I,MAAO3J,EAAK,4BACZ4J,MAAO,SACN,CACDD,MAAO3J,EAAK,2BACZ4J,MAAO,QACN,CACDD,MAAO3J,EAAK,6BACZ4J,MAAO,SAGH+2I,EAAuBH,OAOzB9/I,EAP0C,CAC5C,CAAEkJ,MAAO,QAASD,MAAO3J,EAAK,qBAAsBmxF,SAAUnxF,EAAK,iCACnE,CACE4J,MAAO,aACPD,MAAO3J,EAAK+1D,EAAAA,IAAat4C,EAAAA,GAAS,uBAAyB,yBAC3D0zE,SAAUnxF,EAAK,sCAIb4gJ,GAA8Br7I,EAAAA,EAAAA,KAAas0E,IAC/CjvE,SAASqgD,gBAAgBv8C,MAAMsjC,YAC7B,uBAAwB,GAAGvwC,KAAKZ,IAAIg5E,EAASp8D,EAAAA,GAAS,GAAK,SAE7D7S,SAASqgD,gBAAgBv8C,MAAMsjC,YAAY,wBAAyB,GAAGvwC,KAAKsgB,MAAgB,OAAV83D,QAClFjvE,SAASqgD,gBAAgBv8C,MAAMsjC,YAAY,sBAAuB,GAAG6nC,OACrEjvE,SAASqgD,gBAAgB41F,aAAa,yBAA0BhnE,EAAQ0P,YAExEkkC,EAAuB,CAAE4yB,gBAAiBxmE,MACzC,IAEGinE,GAA8Bv7I,EAAAA,EAAAA,KAAaqE,IAC/C,MAAMm3I,EAAqB,SAAVn3I,GAAmBo3I,EAAAA,GAAAA,KAAmBp3I,EAEvD6jH,EAAuB,CAAEntD,MAAOygF,IAChCtzB,EAAuB,CAAE0yB,qBAAgC,SAAVv2I,MAC9C,IAEGq3I,GAAyB17I,EAAAA,EAAAA,KAAa27I,IAC1CzzB,EAAuB,CAAE6yB,WAAYY,IACrCzzB,EAAuB,CAAE0zB,0BAA0B,KAEnDC,EAAAA,GAAAA,IAAcF,KACb,IAEGG,GAA+B97I,EAAAA,EAAAA,KAAa+7I,IAChD7zB,EAAuB,CAAE2yB,oBAAqBkB,MAC7C,KAEIC,EAAmBC,IAAwBhtI,EAAAA,EAAAA,KAAS,IAC3DlU,EAAAA,EAAAA,KAAU,KACRgT,OAAOyrI,UAAU0C,uBAAuB34D,KAAK04D,KAC5C,IAEH,MAAME,GAAgCn8I,EAAAA,EAAAA,KAAaisF,IACjDl+E,OAAOyrI,UAAUyC,qBAAqBhwD,KACrC,IAOH,OALAtgE,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,eAEhF+C,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CACVvc,MAAO3J,EAAK,YACZ0B,IAAK,GACLb,IAAK,GACL+I,MAAOy2I,EACPlrI,SAAUyrI,KAGZ79I,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,QACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6X,wBAAyB3/I,SAEpFhC,EAAK,oBAGPkgJ,EAAAA,IAAe0B,EAAAA,KACd7+I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gBACZquC,QAASxqC,QAAQ09I,GACjBvqF,QAAS0qF,QAKf7/I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,YAER+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,QACL5E,QAASihJ,EACTtrI,SAAU+qI,EAAuB,OAAS7/E,EAC1CnrD,SAAU2rI,QAIdj/I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,yBAER+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,aACL5E,QAASghJ,EACTrrI,SAAUkrI,EACVnrI,SAAU8rI,OAIbN,IACC9+I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,uBAEhF+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,yBACL5E,QAASkhJ,EACTxrI,SAAUksI,EACVjsI,SAAUgrI,c,4BChKtB,MAsFA,IAAe/gJ,EAAAA,EAAAA,KAtFqBwiJ,EAClCC,YACAxhF,QACAqiC,aACA9iG,cAEA,MAAM,KAAEgsE,EAAI,SAAEjhE,GAAak3I,EACrBC,EAAiB,YAAYn3I,EAASpF,KACtCkM,EAAe9G,EAASwG,eACxBA,GAAiBJ,EAAAA,EAAAA,GAAS,GAAG+wI,YAC7B/mG,GAAWC,EAAAA,GAAAA,GAAcrwC,EAASs7B,WAAWp0B,QAASjO,QAAQuN,IAAiB,IAC/E,qBAAE8Y,IAAyBE,EAAAA,GAAAA,GAC/BvmB,QAAQuN,GAAkBM,QAC1BhR,OACAA,EACA,QAEIshJ,GAAehwI,EAAAA,EAAAA,KAAO,IACrBiwI,EAAeC,IAAoB1tI,EAAAA,EAAAA,KAAS,IAEjDnD,UAAW8wI,EAAS,aAAE5wI,IACpBC,EAAAA,EAAAA,GAAyBuwI,GAAiBE,GACxCG,GAA2D,KAAzCnmH,EAAAA,EAAAA,GAAsBgmH,IACtCj4H,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpF63H,IAAkBE,GAAct2E,IAASw2E,EAAAA,QAC1C3hJ,EACA0hJ,EACA,QAGIE,GAActwI,EAAAA,EAAAA,MACpBswI,EAAYnwI,QAAUmuD,EAEtB,MAAM4yD,GAAe3tH,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMg9I,QAAaC,EAAAA,EAAAA,IAAUL,SACvBM,GAASC,KAAKC,EAAAA,IAAsBL,EAAYnwI,QAAUowI,GAChE1iJ,EAAQgsE,EACT,EAJD,KAKC,CAACs2E,EAAWtiJ,EAASgsE,KAExBvrE,EAAAA,EAAAA,KAAU,KAEJ6hJ,GAAaH,EAAa7vI,UAC5B+gH,IACA8uB,EAAa7vI,SAAU,KAExB,CAACgwI,EAAWjvB,IAEf,MAAMzoG,GAAcllB,EAAAA,EAAAA,KAAY,KAC1B48I,EACFjvB,KAEA8uB,EAAa7vI,SAAU,EACvB+vI,GAAkBU,IAAeA,OAElC,CAACT,EAAWjvB,IAET1zH,GAAYsC,EAAAA,GAAAA,GAChB,gBACA6gG,GAAc,YAGhB,OACE5/F,EAAAA,GAAAA,GAAA,OAAKvD,UAAWA,EAAWK,QAAS4qB,EAAYzoB,UAC9CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,UACEmY,IAAK8/B,EACLx7C,UAAU,eAEZuD,EAAAA,GAAAA,GAAA,OACE0J,IAAK2E,GAAkBM,EACvBlS,WAAWsC,EAAAA,GAAAA,GAAe,aAAcooB,GACxCwE,IAAI,GACJpiB,WAAW,IAEZ2d,IACClnB,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAe,oBAAqBqoB,GAAmBnoB,UACrEe,EAAAA,GAAAA,GAAC6X,GAAAA,EAAe,CAACC,SAAUtJ,EAAc1R,QAAS4qB,cCpExD22C,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAO,GAkInD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMqqD,GAAQuD,EAAAA,EAAAA,KAAY5tD,IACpB,WAAE2pG,EAAU,UAAEH,IAAcK,EAAAA,EAAAA,KAAkB7pG,EAAQqqD,IAAU,CAAC,GACjE,iBAAEuiF,GAAqB5sI,EAAO0hC,SAEpC,MAAO,CACLioE,aACAH,YACAojC,mBACAviF,WAVctqD,EAhIyC8sI,EAC3DvjJ,WACAijE,UACAo9C,aACAH,YACAojC,mBACAviF,YAEA,MAAM,eACJyiF,EAAc,gBACdC,EAAe,iBACfC,EAAgB,mBAChBrZ,IACExgI,EAAAA,EAAAA,MAEE85I,GAAWlxI,EAAAA,EAAAA,MACjBkxI,EAAS/wI,QAAUmuD,GAGnBhgE,EAAAA,EAAAA,KAAU,KACR8gE,IAAa,KACX2hF,SAED,CAACA,IAEJ,MAAMI,GAAmB59I,EAAAA,EAAAA,KAAamC,IACpC,MAAM,MAAEgrD,GAAUhrD,EAAEqN,OAEdquI,GAAiBC,EAAAA,EAAAA,IAAc3wF,GACjC0wF,GAAgBxhJ,QAClBohJ,EAAgBI,EAAe,MAEhC,CAACJ,IAEEM,GAAwB/9I,EAAAA,EAAAA,KAAY,MACxCg+I,EAAAA,GAAAA,GAvCoB,aAuCmBJ,GAAkB,KACxD,CAACA,IAEEK,GAAiBj+I,EAAAA,EAAAA,KAAY,KACjCqkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2Z,+BAC5C,IAEGC,GAAuBn+I,EAAAA,EAAAA,KAAY,KACvC09I,EAAiB,CACf3iF,QACAs/C,gBAAYl/G,EACZqoE,qBAAiBroE,EACjB++G,WAAW,EACXE,aAAwB,SAAVr/C,EAAmBqjF,EAAAA,IAA2BC,EAAAA,QAE7D,CAACX,EAAkB3iF,IAEhBujF,GAAwBt+I,EAAAA,EAAAA,KAAasmE,IACzCo3E,EAAiB,CAAE3iF,MAAO4iF,EAAS/wI,QAAUytG,WAAY/zC,IACzD,MAAMi4E,EAAmBjB,GAAoBA,EAAiBtgJ,MAAMu/I,GAAcA,EAAUj2E,OAASA,IACjGi4E,GAAkBl5I,SAASs7B,YAC7B69G,EAAAA,GAAAA,IAAgBD,EAAiBl5I,SAASs7B,UAAUp0B,SACjDg3E,MAAMngF,IACL,MAAMg3G,GAAeqkC,EAAAA,GAAAA,IAAgBr7I,GAC/Bs7I,EAAW,KAAIC,EAAAA,GAAAA,IAAQv7I,KAC7Bs6I,EAAiB,CAAE3iF,MAAO4iF,EAAS/wI,QAAU42D,gBAAiBk7E,EAAUtkC,sBAG7E,CAACkjC,EAAkBI,IAEhBkB,GAA4B5+I,EAAAA,EAAAA,KAAamC,IAC7Cu7I,EAAiB,CAAE3iF,MAAO4iF,EAAS/wI,QAAUstG,UAAW/3G,EAAEqN,OAAOs5B,YAChE,CAAC40G,IAEEjjJ,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM4hF,EAAcvB,IAAmB,IAAMA,EAAiB,GAAGh3E,OAASw2E,EAAAA,GAE1E,OACExgJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2DAA0DwC,SAAA,EACvEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,aACLzH,UAAU,OACVoJ,SAAUw7I,EACVvkJ,QAASyjJ,EAAsBthJ,SAE9BhC,EAAK,kBAGR+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,WACLzH,UAAU,OACVK,QAAS2jJ,EAAexhJ,SAEvBhC,EAAK,eAGR+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,WAAWpH,QAAS6jJ,EAAqB1hJ,SACrDhC,EAAK,2BAGR+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,qBACZquC,QAASxqC,QAAQ47G,GACjBtqG,SAAUgvI,OAIbtB,GACC9/I,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,SACjC6gJ,EAAiB5gJ,KAAK6/I,IACrB/+I,EAAAA,GAAAA,GAAC8+I,GAAa,CAEZC,UAAWA,EACXxhF,MAAOA,EACPqiC,WAAYid,IAAekiC,EAAUj2E,KACrChsE,QAASgkJ,GAJJ/B,EAAUj2E,WASrB9oE,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,WCrHVu0F,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAyMzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbnjJ,KAAKmY,MAAO8qI,EAAI,IAAOC,EAAME,UAAUzyI,MAAQ,IAC/C3Q,KAAKmY,OAAO,EAAI8qI,EAAI,KAAOC,EAAME,UAAUpyI,OAAS,KAEtDqyI,YAAarjJ,KAAKmY,MAAM8qI,EAAI,IAAMC,EAAMI,QAAQ3yI,MAAQ,IAE5D,CAEA,SAAS4yI,IACP,cAAEJ,EAAa,YAAEE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQ3yI,MAAQ,GACrCwyI,EAAc,IAAMD,EAAME,UAAUzyI,MAAQ,GAC5C,EAAIwyI,EAAc,IAAMD,EAAME,UAAUpyI,OAAS,GAErD,CA4EA,UAAepT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMqqD,GAAQuD,EAAAA,EAAAA,KAAY5tD,IACpB,gBAAE8yD,IAAoB+2C,EAAAA,EAAAA,KAAkB7pG,EAAQqqD,IAAU,CAAC,EACjE,MAAO,CACLyI,kBACAzI,WANctqD,EArSyC8sI,EAC3DvjJ,WACAijE,UACAlC,QACAyI,sBAEA,MAAM,iBAAEk6E,IAAqB75I,EAAAA,EAAAA,MAEvB85I,GAAWlxI,EAAAA,EAAAA,MACjBkxI,EAAS/wI,QAAUmuD,EACnB,MAAM7wC,GAAezd,EAAAA,EAAAA,MACfizI,GAAiBjzI,EAAAA,EAAAA,MACjBkzI,GAAelzI,EAAAA,EAAAA,MACfmzI,GAAgBnzI,EAAAA,EAAAA,KAAO,IAEtB0yI,EAAKU,IAAU5wI,EAAAA,EAAAA,IAiLxB,SAAuBu0D,GACrB,OAAOA,GAAmBA,EAAgBw0D,WAAW,MACjD+mB,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQx7E,EAAgB3N,QAAQ,IAAK,MAC7CipF,EACN,CArLiCgB,CAAct8E,IAEvCu8E,GAAStzI,EAAAA,EAAAA,IAAO0yI,IACtBpkJ,EAAAA,EAAAA,KAAU,KACRglJ,EAAOnzI,QAAUuyI,IAChB,CAACA,IAEJ,MAAOzuE,EAAYsvE,EAAgBC,IAAoBnlJ,EAAAA,EAAAA,MAChDolJ,EAAUC,IAAelxI,EAAAA,EAAAA,IAAS,KAClCmxI,EAAUC,IAAepxI,EAAAA,EAAAA,IAAS,IAEnCqxI,GAAW7zI,EAAAA,EAAAA,MACX8zI,GAAc9zI,EAAAA,EAAAA,OAGpB1R,EAAAA,EAAAA,KAAU,KAER,MAAMukJ,EAAY,CAChBkB,WAAYd,EAAe9yI,QAAS4zI,eACjC9xF,EAAAA,GAAAA,IAAKgxF,EAAe9yI,QAASyQ,wBAAyB,CAAC,MAAO,QAAS,YAEtEmiI,EAAU,CACdgB,WAAYb,EAAa/yI,QAAS4zI,eAC/B9xF,EAAAA,GAAAA,IAAKixF,EAAa/yI,QAASyQ,wBAAyB,CAAC,WAK1D,SAASojI,EAAgBt+I,GACvB,MAAMk9I,EAAgB,CACpBnjJ,KAAKC,IAAID,KAAKZ,IAAI,EAAG6G,EAAEqb,MAAS8hI,EAAUkB,YAAalB,EAAUzyI,MAAQ,GACzE3Q,KAAKC,IAAID,KAAKZ,IAAI,EAAG6G,EAAEmqB,MAASgzH,EAAUt7H,IAAMkG,EAAatd,QAASkuB,WAAYwkH,EAAUpyI,OAAS,KAGjG,YAAEqyI,GAAgBL,GAAca,EAAOnzI,QAAS0zI,EAAS1zI,SAK/D,OAHAizI,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAAS1zI,UAC9DozI,KAEO,CACT,CAWA,SAASU,EAAcv+I,GACrB,MAAM,cAAEk9I,GAAkBH,GAAca,EAAOnzI,QAAS0zI,EAAS1zI,SAC3D2yI,EAAcrjJ,KAAKC,IAAID,KAAKZ,IAAI,EAAG6G,EAAEqb,MAASgiI,EAAQgB,YAAahB,EAAQ3yI,MAAQ,GAKzF,OAHAgzI,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAAS1zI,UAC9DozI,KAEO,CACT,CAjCAM,EAAS1zI,QAAU,CAAE0yI,YAAWE,YAgBhCxhI,EAAAA,GAAAA,IAAc0hI,EAAe9yI,QAAU,CACrCqR,UAAWwiI,EACXriI,OAAQqiI,EACRtiI,UAAW8hI,EACX3lJ,QAAS2lJ,EACTU,wBAAyB,kCACzBC,YAAY,KAad5iI,EAAAA,GAAAA,IAAc2hI,EAAa/yI,QAAU,CACnCqR,UAAWyiI,EACXtiI,OAAQsiI,EACRviI,UAAW8hI,EACX3lJ,QAAS2lJ,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAE,YAAEE,EAAc,GAAMe,EAAS1zI,QAAUsyI,GAAcC,EAAKmB,EAAS1zI,SAAW,CAAC,EACzGi0I,GAAMlC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAASrC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxChmJ,EAAAA,EAAAA,KAAU,KACR,MAAMkmJ,GAAMH,EAAAA,GAAAA,IAAQ3B,GACd/7I,EAAQ,KAAIu7I,EAAAA,GAAAA,IAAQsC,KAK1B,GAHAd,EAAYc,EAAI35H,KAAK,OACrB+4H,EAAYj9I,IAEPw8I,EAAchzI,QAAS,CAC1B,MAAMwtG,GAAeqkC,EAAAA,GAAAA,IAAgBwC,GACrCvD,EAAiB,CACf3iF,MAAO4iF,EAAS/wI,QAChBytG,gBAAYl/G,EACZqoE,gBAAiBpgE,EACjBg3G,gBAEJ,CACAwlC,EAAchzI,SAAU,IACvB,CAACuyI,EAAKzB,KAGT3iJ,EAAAA,EAAAA,KAAU,MA2GZ,SACE+R,EACAi0I,EACAR,EACAD,GAEA,IAAIY,EACAC,EACAtjH,EAEC0iH,EAAY3zI,SAAY0zI,EAAS1zI,SAWpCs0I,EAAIZ,EAAS1zI,QAAQ0yI,UAAUzyI,MAC/Bs0I,EAAIb,EAAS1zI,QAAQ0yI,UAAUpyI,OAC/B2wB,EAAM0iH,EAAY3zI,UAXlBs0I,EAAIp0I,EAAO0/B,YACX20G,EAAIr0I,EAAOiuB,aACX8C,EAAM/wB,EAAOG,WAAW,MAExBH,EAAOD,MAAQq0I,EACfp0I,EAAOI,OAASi0I,EAEhBZ,EAAY3zI,QAAUixB,GAOxB,MAAMujH,EAAUvjH,EAAKwjH,gBAAgBH,EAAGC,GAClCG,EAASF,EAAQrnI,KACjBwnI,GAAMT,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAIjlJ,EAAQ,EAEZ,IAAK,IAAIyG,EAAI,EAAGA,EAAI4+I,EAAG5+I,IAAK,CAC1B,MAAMi/I,EAAO,EAAIj/I,GAAK4+I,EAAI,GACpBM,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIp/I,EAAI,EAAGA,EAAI8+I,EAAG9+I,IAAK,CAC1B,MAAMu/I,EAAOv/I,GAAK8+I,EAAI,GACtBI,EAAOxlJ,KAAW2lJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxlJ,KAAW2lJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxlJ,KAAW2lJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxlJ,KAAW,GACpB,CACF,CAEA+hC,EAAK+jH,aAAaR,EAAS,EAAG,EAChC,CAxJIS,CAAUnC,EAAe9yI,QAAS1D,WAAiC63I,EAAKR,EAAaD,KACpF,CAACS,KAGJhmJ,EAAAA,EAAAA,KAAU,MAsJZ,SAAiB+R,GACf,MAAMo0I,EAAIp0I,EAAO0/B,YAEjB1/B,EAAOD,MAAQq0I,EACfp0I,EAAOI,OAFG,EAGV,MAAM2wB,EAAM/wB,EAAOG,WAAW,MAExBm0I,EAAUvjH,EAAIwjH,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQrnI,KAEvB,IAAIje,EAAQ,EAEZ,IAAK,IAAIsG,EAAI,EAAGA,EAAI8+I,EAAG9+I,IAAK,CAC1B,MAAM2+I,EAAM3+I,GAAK8+I,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BO,EAAOxlJ,KAAWmlJ,EAAI,GACtBK,EAAOxlJ,KAAWmlJ,EAAI,GACtBK,EAAOxlJ,KAAWmlJ,EAAI,GAEtBK,EAAOxlJ,KAAW,GACpB,CAEA+hC,EAAI+jH,aAAaR,EAAS,EAAG,EAC/B,CA7KIU,CAAQnC,EAAa/yI,QAAS1D,cAC7B,IAEH,MAAM64I,GAAkB/hJ,EAAAA,EAAAA,KAAamC,IACnC,MAAM6/I,EAAW7/I,EAAEkjB,cAAchhB,MAAMwxD,QAAQ,WAAY,IAAIpY,MAAM,EAAG,IAExE,GAAIukG,EAASlrD,MAAM,mCAAoC,CACrD,MAAMmqD,EAAMe,EAAShpE,MAAM,KAAKt8E,KAAKulJ,GAAYh8H,OAAOg8H,EAAQx6E,UAChEo4E,GAAOd,EAAAA,GAAAA,IAAQkC,GACjB,CAEA9+I,EAAEkjB,cAAchhB,MAAQ29I,IACvB,IAEGE,GAAkBliJ,EAAAA,EAAAA,KAAamC,IACnC,MAAMggJ,EAAWhgJ,EAAEkjB,cAAchhB,MAAMwxD,QAAQ,gBAAiB,IAAIpY,MAAM,EAAG,GAEzE0kG,EAASrrD,MAAM,uBACjB+oD,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQmD,EAAStsF,QAAQ,IAAK,OAG/C1zD,EAAEkjB,cAAchhB,MAAQ89I,IACvB,IAEGC,GAA6BpiJ,EAAAA,EAAAA,KAAamC,IAC9C09I,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ78I,EAAEkjB,cAAcg9H,QAAQj/I,MAAOyyD,QAAQ,IAAK,SAClE,IAEG57D,GAAYsC,EAAAA,GAAAA,GAChB,gEACAm0E,GAAc,eAQhB,OALA/kD,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKqZ,IAAKuU,EAAcjwB,UAAWA,EAAUwC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKqZ,IAAK+pI,EAAgBzlJ,UAAU,eAAcwC,SAAA,EAChDe,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEvD,UAAU,SACVkP,MAAO,wBAAwBk2I,EAAc,SAASA,EAAc,6BAA6BwB,WAGrGvkJ,EAAAA,GAAAA,IAAA,OAAKqZ,IAAKgqI,EAAc1lJ,UAAU,aAAYwC,SAAA,EAC5Ce,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEvD,UAAU,SACVkP,MAAO,yBAAyBo2I,4BAAsCyB,WAG1E1kJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,QAAOwC,SAAA,EACpBe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CAACzL,MAAO+7I,EAAUh8I,MAAM,MAAMwL,SAAUsyI,KAClD1kJ,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CAACzL,MAAO67I,EAAU97I,MAAM,MAAMwL,SAAUmyI,WAGtDvkJ,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,oBAAmBwC,SAC/BwiJ,GAAkBviJ,KAAK0G,IACtB5F,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAe,mBAAoB6G,IAAU,IAAIy9I,IAAQ,cAAW1lJ,GAC/E,aAAYiI,EACZ+F,MAAO,qBAAqB/F,KAC5B9I,QAAS8nJ,eCyErB,IAAetoJ,EAAAA,EAAAA,KA/RsBwoJ,EACnCre,gBACAse,iBACAtlF,cAEA,MAAM,QACJulF,EAAO,0BACPhpE,EAAyB,mBACzB6qD,IACExgI,EAAAA,EAAAA,OAEE,SAAEpE,IAAaC,EAAAA,EAAAA,OACd+iJ,EAAqBC,IAA0BzzI,EAAAA,EAAAA,KAAS,GAEzD0zI,ECnCO,SAAuBvkJ,EAAgB63E,GACpD,MAAM2sE,GAAmBn2I,EAAAA,EAAAA,IAAO,GAC1Bc,GAAad,EAAAA,EAAAA,MAkBnB,OAjBoBzM,EAAAA,EAAAA,KAAY,KAE9B,GADA4iJ,EAAiBh2I,UD+BoB,IC9BjCg2I,EAAiBh2I,QAGnB,OAFAg2I,EAAiBh2I,QAAU,OAC3BqpE,IAIE1oE,EAAWX,SACbc,aAAaH,EAAWX,SAG1BW,EAAWX,QAAUoB,YAAW,KAC9B40I,EAAiBh2I,QAAU,IAlBX,OAoBjB,CDiBoC,ECjB3BqpE,GAGd,CDc2B4sE,CAAc,GAAG,KACxCxe,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiW,kBAGzCsI,GAA0B9iJ,EAAAA,EAAAA,KAAY,KAC1C0iJ,GAAuB,KACtB,IAEGK,GAA2B/iJ,EAAAA,EAAAA,KAAY,KAC3C0iJ,GAAuB,KACtB,IAEGM,GAA+BhjJ,EAAAA,EAAAA,KAAY,KAC1CuiJ,GAEL/oE,EAA0B,CAAEK,SAAU0oE,MACrC,CAACA,EAAgB/oE,IAEdypE,GAAuBjjJ,EAAAA,EAAAA,KAAY,KACvC+iJ,IACAP,EAAQ,CAAEU,cAAc,MACvB,CAACH,EAA0BP,IAExBW,GAAsEjoJ,EAAAA,EAAAA,KAAQ,IAC3E,EAAGkZ,YAAWxT,aACnBpD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLqM,QAASjhB,EACTxB,KAAK,UACLmF,MAAM,cACNnJ,UAAW2G,EAAS,SAAW,GAC/BtG,QAAS8Z,EACTE,UAAU,eAAc7X,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGd,CAACW,IAEElF,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAiNb,OACE4B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACN9I,QAAS2iE,EACT3oD,UAAW/Z,EAAQ,kBAAkBkC,UAErCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAxNjB,WACE,OAAQmlI,GACN,KAAKM,EAAAA,GAAgB6e,YACnB,OAAO5lJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,8BACtB,KAAKgqI,EAAAA,GAAgB8e,QACnB,OAAO7lJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,aACtB,KAAKgqI,EAAAA,GAAgB+e,cACnB,OAAO9lJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,sBACtB,KAAKgqI,EAAAA,GAAgBv7C,YACnB,OAAOxrF,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,WACtB,KAAKgqI,EAAAA,GAAgB51E,cACnB,OAAOnxD,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,mBACtB,KAAKgqI,EAAAA,GAAgBgf,YACnB,OAAO/lJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kBACtB,KAAKgqI,EAAAA,GAAgB2D,QACnB,OAAO1qI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBACtB,KAAKgqI,EAAAA,GAAgBif,SACnB,OAAOhmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,cACtB,KAAKgqI,EAAAA,GAAgBkf,eACnB,OAAOjmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,oBACtB,KAAKgqI,EAAAA,GAAgBmf,SACnB,OAAOlmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kBACtB,KAAKgqI,EAAAA,GAAgBiW,aACnB,OAAOh9I,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,+BAEtB,KAAKgqI,EAAAA,GAAgB6X,sBACnB,OAAO5+I,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,oBACtB,KAAKgqI,EAAAA,GAAgB2Z,2BACnB,OAAO1gJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,cAEtB,KAAKgqI,EAAAA,GAAgBof,mBACnB,OAAOnmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kBACtB,KAAKgqI,EAAAA,GAAgBqf,gBACnB,OAAOpmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBACtB,KAAKgqI,EAAAA,GAAgBsf,oBACnB,OAAOrmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,0BACtB,KAAKgqI,EAAAA,GAAgBuf,WACnB,OAAOtmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gBACtB,KAAKgqI,EAAAA,GAAgBwf,gBACnB,OAAOvmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBACtB,KAAKgqI,EAAAA,GAAgByf,aACnB,OAAOxmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,kBACnB,KAAK8pI,EAAAA,GAAgB0f,kBACnB,OAAOzmJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBACtB,KAAKgqI,EAAAA,GAAgB2f,qBACnB,OAAO1mJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,0BACtB,KAAKgqI,EAAAA,GAAgB4f,gBACnB,OAAO3mJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBACtB,KAAKgqI,EAAAA,GAAgB8G,kBACnB,OAAO7tI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,4BACtB,KAAKgqI,EAAAA,GAAgBiH,iBACnB,OAAOhuI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,WAEtB,KAAKgqI,EAAAA,GAAgB6f,+BACrB,KAAK7f,EAAAA,GAAgB8f,mCACrB,KAAK9f,EAAAA,GAAgB+f,0BACrB,KAAK/f,EAAAA,GAAgBggB,iCACnB,OAAO/mJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qBAEtB,KAAKgqI,EAAAA,GAAgBigB,8BACrB,KAAKjgB,EAAAA,GAAgBkgB,kCACrB,KAAKlgB,EAAAA,GAAgBmgB,yBACrB,KAAKngB,EAAAA,GAAgBogB,gCACnB,OAAOnnJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,oBAEtB,KAAKgqI,EAAAA,GAAgBqgB,kCACrB,KAAKrgB,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgBugB,4BACrB,KAAKvgB,EAAAA,GAAgBwgB,iCACrB,KAAKxgB,EAAAA,GAAgBygB,oCACrB,KAAKzgB,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgB2gB,+BACnB,OAAO1nJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,iBAEtB,KAAKgqI,EAAAA,GAAgB4gB,iCACrB,KAAK5gB,EAAAA,GAAgB6gB,8BACrB,KAAK7gB,EAAAA,GAAgB8gB,2BACrB,KAAK9gB,EAAAA,GAAgB+gB,gCACrB,KAAK/gB,EAAAA,GAAgBghB,mCACrB,KAAKhhB,EAAAA,GAAgBihB,+BACrB,KAAKjhB,EAAAA,GAAgBkhB,8BACnB,OAAOjoJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gBAEtB,KAAKgqI,EAAAA,GAAgB0H,sBACnB,OAAOzuI,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,oBAEnB,KAAK8pI,EAAAA,GAAgBmhB,YACnB,OAAOloJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,oBAEnB,KAAK8pI,EAAAA,GAAgBohB,eACnB,OAAOnoJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,mBACtB,KAAKgqI,EAAAA,GAAgBqhB,eACnB,OAAOpoJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,sBACtB,KAAKgqI,EAAAA,GAAgBshB,oBACnB,OAAOroJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kBAEtB,KAAKgqI,EAAAA,GAAgBuhB,cACrB,KAAKvhB,EAAAA,GAAgBwhB,aACnB,OAAOvoJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,yBACtB,KAAKgqI,EAAAA,GAAgByhB,iBACrB,KAAKzhB,EAAAA,GAAgB0hB,uBACrB,KAAK1hB,EAAAA,GAAgB2hB,2BACnB,OAAO1oJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gCACtB,KAAKgqI,EAAAA,GAAgB4hB,wBACnB,OAAO3oJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,2BACtB,KAAKgqI,EAAAA,GAAgB6hB,qBACrB,KAAK7hB,EAAAA,GAAgB8hB,wBACnB,OAAO7oJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kBACtB,KAAKgqI,EAAAA,GAAgB+hB,sBACrB,KAAK/hB,EAAAA,GAAgBgiB,mBACnB,OAAO/oJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,wBACtB,KAAKgqI,EAAAA,GAAgBiiB,0BACrB,KAAKjiB,EAAAA,GAAgBkiB,uBACnB,OAAOjpJ,EAAAA,GAAAA,GAAA,MAAAf,SAAI,wBACb,KAAK8nI,EAAAA,GAAgBmiB,qBACnB,OAAOlpJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,oCACtB,KAAKgqI,EAAAA,GAAgBoiB,2BACrB,KAAKpiB,EAAAA,GAAgBqiB,aACrB,KAAKriB,EAAAA,GAAgBsiB,kCACnB,OAAOrpJ,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gCAEtB,KAAKgqI,EAAAA,GAAgB4D,iBACrB,KAAK5D,EAAAA,GAAgB8D,gBACrB,KAAK9D,EAAAA,GAAgB+C,oBACrB,KAAK/C,EAAAA,GAAgBiD,2BACrB,KAAKjD,EAAAA,GAAgBmD,wBACnB,OAAOlqI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,cAEtB,KAAKgqI,EAAAA,GAAgBqC,gBACnB,OAAOppI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,sCAEtB,KAAKgqI,EAAAA,GAAgBoC,8BACrB,KAAKpC,EAAAA,GAAgBuD,0BACnB,OAAOtqI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,qCAEtB,KAAKgqI,EAAAA,GAAgByD,8BACnB,OAAOxqI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,oDAEtB,KAAKgqI,EAAAA,GAAgBqB,QACnB,OAAOpoI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,aACtB,KAAKgqI,EAAAA,GAAgBC,oBACnB,OAAOhnI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,eACtB,KAAKgqI,EAAAA,GAAgBX,aACnB,OAAOpmI,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,4BACtB,KAAKgqI,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACEroI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCe,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gBACZ+D,QAAQikJ,KACP/kJ,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXhb,UAAU,qBACVib,QAASiuI,EACThuI,UAAU,QAAO1Y,UAEjBe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASsT,aAAW,EAAC1a,QAAS0oJ,EAA6BvmJ,SACvElC,EAAQ,iBAMrB,KAAKgqI,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACEhoI,EAAAA,GAAAA,GAAA,MAAAf,SACGlC,EACC0pI,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBe,iCACjC,gBAAkB,mBAI9B,QACE,OACEhpI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EAEnCe,EAAAA,GAAAA,GAAA,MAAIlD,QAASqoJ,EAAiBlmJ,SAC3BlC,EAAQ,eAGXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLqM,QAASjhB,EACTxB,KAAK,UACLmF,MAAM,cAEN9I,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6e,cAC5D9uI,UAAW/Z,EAAQ,4BAA4BkC,UAE/Ce,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEbtB,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXhb,UAAU,qBACVib,QAASiuI,EACThuI,UAAU,QAAO1Y,UAEjBe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAASwoJ,EAAwBrmJ,SAAElC,EAAQ,sBAK/E,CAaKguC,IACD/qC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6hJ,EACRrhJ,QAAS2hJ,EACTvsI,KAAMjc,EAAQ,mBACdgpC,aAAchpC,EAAQ,0BACtBipC,eAAgBy/G,EAChBx/G,sBAAoB,UE7H5B,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,aACJo2I,EAAY,kBAAEC,EAAiB,eAAElU,GAC/BniI,EAAO0hC,SAASs+F,OACd,SAAEqC,EAAQ,UAAEiU,IAAcx4E,EAAAA,GAAAA,GAAqB99D,GAIrD,MAAO,CACLyvB,sBAH2B0B,EAAAA,EAAAA,KAA2BnxB,GAItDs2I,YACAjU,WACA+T,eACAC,oBACAlU,oBAfcpiI,EAnJgCw2I,EAClDjtJ,WACAmmC,uBACA6mH,YACAjU,WACA+T,eACAC,oBACAlU,iBACA51E,cAEA,MAAM,cACJiqF,EAAa,iBACbz5B,EAAgB,uBAChBvF,EAAsB,iBACtBhmF,EAAgB,mBAChBmiG,IACExgI,EAAAA,EAAAA,OAEGsjJ,EAAkBC,IAAuBn4I,EAAAA,EAAAA,IAAiB8jI,IAC1Dh+G,EAAWsyH,EAAeC,IAAmBxsJ,EAAAA,EAAAA,KAE9CysJ,EAA2BpnH,GAAwB4mH,EAEnDtsJ,GAAOD,EAAAA,EAAAA,MAEbO,EAAAA,EAAAA,KAAU,KACHisJ,GAAW3qJ,QACd6qJ,MAED,CAACF,IAEJ,MAAMjiE,GAAehhF,EAAAA,EAAAA,IAAiB6pH,IACpCw5B,EAAoBx5B,GACpBy5B,KAEKG,EAAAA,GAAAA,IAAe55B,GAAsB,KACxC05B,IAEAp/B,EAAuB,CAAE6qB,SAAUnlB,UAIjC1zH,GAAUgB,EAAAA,EAAAA,KAAQ,KACtB,IAAK8rJ,EAAW,OAChB,MAAMS,GAAmB15I,OAAO25I,UAAU3U,UAAY,MAAMvqF,cACtDm/F,EAAgBF,EAAgBG,OAAO,EAAG,GAEhD,OAAOZ,EAAUtqJ,KAAI,EAAGkxH,WAAUi6B,aAAY/oJ,WAAW,CACvDuF,MAAOupH,EACPxpH,MAAOyjJ,EACPj8D,SAAU9sF,EACVi2B,UAAW64F,IAAau5B,GAAoBpyH,MACf8tB,MAAMC,IAC5B2kG,GAAoB3kG,EAAEz+C,QAAUojJ,GAAmB3kG,EAAEz+C,QAAUsjJ,EAAsB,GAAJ,MAEzF,CAAC5yH,EAAWiyH,EAAWG,IAEpBW,GAA8B/jJ,EAAAA,EAAAA,IAAiB0xF,IACnDg4B,EAAiB,CAAEq5B,aAAcrxD,OAG7BsyD,GAAmChkJ,EAAAA,EAAAA,IAAiB0xF,IACxDg4B,EAAiB,CAAEs5B,kBAAmBtxD,OAGlCuyD,GAAkCjkJ,EAAAA,EAAAA,IAAgB,KACjDo8B,GACH+B,EAAiB,CACfQ,eAAgB,oBAKhBulH,GAAqB/sJ,EAAAA,EAAAA,KAAQ,KACjC,GAAKgtJ,EAAAA,IAA6BrV,EAAex2I,OAIjD,OAA8B,IAA1Bw2I,EAAex2I,OACK,IAAI8xH,KAAKC,aAAa,CAAC2kB,GAAW,CAAE/0I,KAAM,aAC3CqwH,GAAGwkB,EAAe,IAGlCp4I,EAAK,YAAao4I,EAAex2I,UACvC,CAACw2I,EAAgBp4I,EAAMs4I,IAEpBoV,GAAwBpkJ,EAAAA,EAAAA,IAAgB,KAC5CsgI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkf,oBAQ/C,OALA93H,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,mDAAkDwC,SAAA,CAC9DyrJ,EAAAA,KACC5rJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,uBACZquC,QAASg+G,EACTr1F,QAASq2F,KAEXtqJ,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,2BACZquC,QAASy+G,EACTlkJ,UAAW88B,EACXggF,UAAYhgF,OAAgChlC,EAAT,OACnCilH,aAAc4nC,EACdv2F,QAASs2F,KAETjB,GAAgBS,KAChBjrJ,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EACN5+G,QAAS6tJ,EAAsB1rJ,SAAA,CAE9BhC,EAAK,mBACN+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAEwrJ,QAGpDzqJ,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,sCAAqCwC,SAC/ChC,EAAK,sCAIZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qCAAoCwC,SAAA,EACjDe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAsBwC,SACjChC,EAAK,oCAEPP,GACCsD,EAAAA,GAAAA,GAACqsF,GAAU,CACTvlC,MAAOpqD,EACPuwF,cAAe08D,EACfj9D,qBAAmB,EACnBqB,sBAAuBxG,EACvB5/C,cAAc,QACdlrC,UAAU,qBAGZuD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,c,wCCxIlB,MA4MA,IAAezwD,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE+jB,GAAkB/jB,EACpB03I,GAAsBC,EAAAA,EAAAA,IAAuC33I,GAC7DkrG,EAAelrG,EAAOlV,OAAOqgH,QAEnC,MAAO,CACLysC,aAAc53I,EAAOk8H,eAAeqB,cAAc5xI,OAClDo4B,gBACAsjE,gBAAgBC,EAAAA,EAAAA,KAA+BtnF,GAC/C03I,sBACAxsC,kBAXcnrG,EA5M4B83I,EAC9CvuJ,WACAy6B,gBACA6zH,eACAvwD,gBACAqwD,sBACAxsC,eACA3+C,cAEA,MAAM,sBACJ7mC,EAAqB,iBACrB8L,EAAgB,gBAChBsmH,EAAe,QACflyH,EAAO,wBACPmyH,EAAuB,sBACvBC,EAAqB,mBACrBrkB,IACExgI,EAAAA,EAAAA,OAEG8kJ,EAAqBC,EAAmBC,IAAsB/tJ,EAAAA,EAAAA,IAAQ,GAEvEL,GAAOC,EAAAA,GAAAA,MAEbK,EAAAA,EAAAA,KAAU,KACJ05B,GACF2B,EAAsB,CAAEpyB,OAAQywB,EAAeq0H,WAAW,MAE3D,CAACr0H,KAEJ9I,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM8rF,GAAoBhlJ,EAAAA,EAAAA,IAAgB,KACxCykJ,IACAK,OAGF,OACEvsJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,kCAAiCwC,SAAA,CAC7Cg4B,IACCj3B,EAAAA,GAAAA,GAACwrJ,GAAAA,EAAW,CACVhlJ,OAAQywB,EACRw0H,aAAc3qJ,QAAQtE,GACtByK,eAAa,IAGhBgwB,IACCj3B,EAAAA,GAAAA,GAAC0rJ,GAAAA,EAAS,CACRC,aAAc10H,EACd20H,cAAY,QAIlB9sJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,WACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8e,UAAW5mJ,SAEtEhC,EAAK,4CAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,aACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmhB,cAAejpJ,SAE1EhC,EAAK,qBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,SACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB51E,gBAAiBlyD,SAE5EhC,EAAK,oBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgf,cAAe9mJ,SAE1EhC,EAAK,mBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2D,UAAWzrI,SAEtEhC,EAAK,sBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,SACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqB,UAAWnpI,SAEtEhC,EAAK,cAER6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,kBACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBohB,iBAAkBlpJ,SAAA,CAE7EhC,EAAK,iBACL6tJ,EAAe,IAAM9qJ,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAE6rJ,QAExEhsJ,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,WACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBif,WAAY/mJ,SAAA,CAEvEhC,EAAK,aACN+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAEhC,EAAK4uJ,aAAaxB,iBAEpErqJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,WACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmf,WAAYjnJ,SAEvEhC,EAAK,sBAGV6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,CAChCs7F,IACCv6F,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAAC7D,UAAU,0BAA0B+D,KAAK,UAAUC,KAAK,QAC/Ei7G,QAAM,EAEN5+G,QAASA,IAAM4nC,IAAmBzlC,SAEjChC,EAAK,sBAGV6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAAC7D,UAAU,0BAA0B+D,KAAK,OAAOC,KAAK,QAC5Ei7G,QAAM,EAEN5+G,QAASA,IAAMouJ,EAAsB,CAAC,GAAGjsJ,SAAA,CAExChC,EAAK,aACL6D,QAAQs9G,KACPp+G,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,UAC3C6sJ,EAAAA,GAAAA,IAAkB7uJ,EAAMmhH,QAI9BwsC,IACC5qJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OACLw3G,QAAM,EAEN5+G,QAASA,IAAMmuJ,IAA0BhsJ,SAExChC,EAAK,sBAIZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,cACLw3G,QAAM,EACN5+G,QAASsuJ,EAAkBnsJ,SAE1BhC,EAAK,mBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OACLw3G,QAAM,EAEN5+G,QAASA,IAAMg8B,EAAQ,CAAEzd,IAAK0wI,EAAAA,MAAW9sJ,SAExChC,EAAK,sBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,iBACLw3G,QAAM,EAEN5+G,QAASA,IAAMg8B,EAAQ,CAAEzd,IAAK2wI,EAAAA,MAAe/sJ,SAE5ChC,EAAK,2BAGV+C,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ+nJ,EACRplH,aAAc9oC,EAAK,MACnBkH,MAAOlH,EAAK,gBACZkuB,UAAWluB,EAAK,mBAAeU,EAAW,CAAEu+C,WAAW,EAAM+vG,kBAAmB,CAAC,QACjFjmH,eAAgBulH,EAChB3nJ,QAASynJ,W,2BC3MjB,MA8MA,IAAe/uJ,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLg5I,8BAA+BprJ,QAAQoS,EAAO0hC,SAASs+F,MAAMgZ,+BAC7DC,oBAAqBj5I,EAAO0hC,SAASs+F,MAAMiZ,oBAC3CC,qBAAsBl5I,EAAO0hC,SAASs+F,MAAMkZ,qBAC5CC,wBAAyBn5I,EAAO0hC,SAASs+F,MAAMmZ,2BANjCp5I,EA9MqCq5I,EACvD9vJ,WACAijE,UACA8sF,iBACAL,gCACAE,uBACAD,sBACAE,8BAEA,MAAM,yBACJG,EAAwB,gCACxBC,EAA+B,2BAC/BC,EAA0B,8BAC1BC,IACEtmJ,EAAAA,EAAAA,OAEJ9I,EAAAA,EAAAA,KAAU,KACRivJ,MACC,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAA4BC,EAAAA,GAAAA,MAC5BC,EAAmCF,KAA8BG,EAAAA,GAAAA,MAEjEC,GAAuB1qJ,EAAAA,EAAAA,KAAY,CACvCmC,EACAwoJ,EACAC,KAEA,MAAMC,EAAiBvsJ,QAAQyrJ,IAAiBY,IAAWG,YACrDC,EAA4BzsJ,QAAQyrJ,IAAiBY,IAAWK,oBAEtEd,EAA2B,CACzBS,WACAxrI,QAAqB,SAAZyrI,GAAsBzoJ,EAAEqN,OAAOs5B,QAAU+hH,EAClDG,mBAAgC,iBAAZJ,EAA6BzoJ,EAAEqN,OAAOs5B,QAAUiiH,MAErE,CAAChB,IAEEkB,GAA+BjrJ,EAAAA,EAAAA,KAAamC,IAChD,MAAM+oE,EAAY/oE,EAAEqN,OAAOs5B,QAC3BqhH,EAA8B,CAC5BR,oBAAqBz+E,MAChBA,GAAa,CAAE0+E,sBAAsB,OAE3C,CAACO,IAEEe,GAAgClrJ,EAAAA,EAAAA,KAAamC,IACjDgoJ,EAA8B,CAC5BP,qBAAsBznJ,EAAEqN,OAAOs5B,YAEhC,CAACqhH,IAEEgB,GAAwCnrJ,EAAAA,EAAAA,KAAamC,IACzDuoJ,EAAqBvoJ,EAAG,QAAS,UAChC,CAACuoJ,IAEEU,GAAkCprJ,EAAAA,EAAAA,KAAamC,IACnDuoJ,EAAqBvoJ,EAAG,QAAS,kBAChC,CAACuoJ,IAEEW,GAAkCrrJ,EAAAA,EAAAA,KAAamC,IACnDuoJ,EAAqBvoJ,EAAG,SAAU,UACjC,CAACuoJ,IAEEY,GAA4BtrJ,EAAAA,EAAAA,KAAamC,IAC7CuoJ,EAAqBvoJ,EAAG,SAAU,kBACjC,CAACuoJ,IAEEa,GAAoCvrJ,EAAAA,EAAAA,KAAamC,IACrDuoJ,EAAqBvoJ,EAAG,WAAY,UACnC,CAACuoJ,IAEEc,GAA8BxrJ,EAAAA,EAAAA,KAAamC,IAC/CuoJ,EAAqBvoJ,EAAG,WAAY,kBACnC,CAACuoJ,IAEEe,GAAkCzrJ,EAAAA,EAAAA,KAAamC,IACnD8nJ,EAAgC,CAC9B5jC,UAAWlkH,EAAEqN,OAAOs5B,YAErB,CAACmhH,IAEExkI,GAAqBzlB,EAAAA,EAAAA,KAAakf,IACtCirI,EAA8B,CAC5BN,wBAAyB3qI,IAE3BkrI,GAAa,KAAMsB,EAAAA,GAAAA,SAAgBvwJ,EAAW+jB,OAC7C,CAACkrI,EAAcD,IAEZ1vJ,GAAOC,EAAAA,GAAAA,KAOb,OALAixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,uBAER+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,oBACZmxF,SAAUnxF,EAAKkvJ,EAAsB,+BAAiC,iCACtE7gH,QAAS6gH,EACTtmJ,UAAWinJ,EACX16I,SAAUq7I,KAEZztJ,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,wBACZ4I,UAAWsmJ,IAAwBa,EACnC5+D,SACInxF,EADM+vJ,EACDZ,EAAuB,+BAAiC,gCACxD,0CACT9gH,QAAS8gH,EACTh6I,SAAUs7I,KAEZ1tJ,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,uBAAsBwC,UACnCe,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CACVvc,MAAO3J,EAAK,sBACZ0B,IAAK,EACLb,IAAK,GACL+H,UAAWinJ,EACXjmJ,MAAOwlJ,EACPj6I,SAAU6V,UAIhBnpB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,+BAGR+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gCACZmxF,SAAUnxF,EAAKsvJ,GAAgB7sJ,OAAO4tJ,WAClC,+BAAiC,iCACrChiH,QAASxqC,QAAQyrJ,GAAgB7sJ,OAAO4tJ,YACxCl7I,SAAUu7I,KAEZ3tJ,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,kBACZ4I,UAAW0mJ,GAAgB7sJ,OAAO4tJ,WAClCl/D,SAAUnxF,EAAKsvJ,GAAgB7sJ,OAAO8tJ,mBAClC,+BAAiC,iCACrCliH,QAASxqC,QAAQyrJ,GAAgB7sJ,OAAO8tJ,oBACxCp7I,SAAUw7I,QAId9uJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,mBAEhF+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,0BACZmxF,SAAUnxF,EAAKsvJ,GAAgB4B,QAAQb,WACnC,+BAAiC,iCACrChiH,QAASxqC,QAAQyrJ,GAAgB4B,QAAQb,YACzCl7I,SAAUy7I,KAEZ7tJ,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,kBACZ4I,UAAW0mJ,GAAgB4B,QAAQb,WACnCl/D,SAAUnxF,EAAKsvJ,GAAgB4B,QAAQX,mBACnC,+BAAiC,iCACrCliH,QAASxqC,QAAQyrJ,GAAgB4B,QAAQX,oBACzCp7I,SAAU07I,QAIdhvJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,qBAEhF+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,4BACZmxF,SAAUnxF,EAAKsvJ,GAAgBjpE,UAAUgqE,WACrC,+BAAiC,iCACrChiH,QAASxqC,QAAQyrJ,GAAgBjpE,UAAUgqE,YAC3Cl7I,SAAU27I,KAEZ/tJ,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,kBACZ4I,UAAW0mJ,GAAgBjpE,UAAUgqE,WACrCl/D,SAAUnxF,EAAKsvJ,GAAgBjpE,UAAUkqE,mBACrC,+BAAiC,iCACrCliH,QAASxqC,QAAQyrJ,GAAgBjpE,UAAUkqE,oBAC3Cp7I,SAAU47I,QAIdlvJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAEhC,EAAK,iBAEhF+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,iBACZquC,QAAS4gH,EACT95I,SAAU67I,c,4BC7LpB,MAAMG,GAA4C,CAChD,+BACA,kCACA,iCAGIC,GAAmD,CACvD,+BACA,kCACA,iCAGIC,GAA4C,CAChD,CAAC,yCAA0C,CACzC,CAAE1lI,IAAK,kBAAmBhiB,MAAO,sCACjC,CAAEgiB,IAAK,2BAA4BhiB,MAAO,8BAC1C,CAAEgiB,IAAK,wBAAyBhiB,MAAO,kCACvC,CAAEgiB,IAAK,4BAA6BhiB,MAAO,+BAC3C,CAAEgiB,IAAK,wBAAyBhiB,MAAO,uCACvC,CAAEgiB,IAAK,kBAAmBhiB,MAAO,iCAAkCf,UAAW0oJ,EAAAA,IAC9E,CAAE3lI,IAAK,wBAAyBhiB,MAAO,kCACvC,CAAEgiB,IAAK,aAAchiB,MAAO,+BAE9B,CAAC,8BAA+B,CAC9B,CAAEgiB,IAAK,gBAAiBhiB,MAAO,oCAC/B,CAAEgiB,IAAK,uBAAwBhiB,MAAO,mCACtC,CAAEgiB,IAAK,kBAAmBhiB,MAAO,sCACjC,CAAEgiB,IAAK,iBAAkBhiB,MAAO,uCAElC,CAAC,mCAAoC,CACnC,CAAEgiB,IAAK,eAAgBhiB,MAAO,kCAC9B,CAAEgiB,IAAK,iBAAkBhiB,MAAO,uCA0JpC,IAAetK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACjC,CACLs7I,qBAAqBC,EAAAA,EAAAA,KAA0Bv7I,MAF/BD,EAtJpB,UAA6B,SAC3BzW,EAAQ,oBACRgyJ,EAAmB,QACnB/uF,IAEA,MAAM,uBACJirD,EAAsB,0BACtBgkC,IACEroJ,EAAAA,EAAAA,OAEJ8nB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMxiE,GAAOC,EAAAA,GAAAA,MACNyxJ,EAAuBC,IAA4Bn9I,EAAAA,EAAAA,IAAkC,CAAC,GAEvFo9I,GAAuBnxJ,EAAAA,EAAAA,KAAQ,IAC5B4wJ,GAAoBzwJ,QAAO,CAACqtD,GAAM,CAAExuD,GAAU4B,KACnD4sD,EAAI5sD,GAAS5B,EAAQszG,OAAM,EAAGpnF,SAAU4lI,EAAoB5lI,KAErDsiC,IACN,CAAC,IACH,CAACsjG,IAEEM,GAAsBpxJ,EAAAA,EAAAA,KAAQ,KAC9BqxJ,EAAAA,GAAAA,GAAaP,EAAqBQ,GAAAA,IAC7BC,EAAAA,KAELF,EAAAA,GAAAA,GAAaP,EAAqBU,GAAAA,IAC7BC,EAAAA,KAELJ,EAAAA,GAAAA,GAAaP,EAAqBY,GAAAA,IAC7BC,EAAAA,IAGFC,EAAAA,KACN,CAACd,IAEEe,GAAwB7xJ,EAAAA,EAAAA,KAAQ,KACpBoxJ,IAAwBQ,EAAAA,IACpCjB,GACAD,IAEWlvJ,KAAKnB,GAAWd,EAAKc,MACnC,CAAC+wJ,EAAqB7xJ,IAEnBuyJ,GAAsBhtJ,EAAAA,EAAAA,KAAY,CAACmC,EAAqBrG,KAC5DqG,EAAEkkB,iBACF,MAAM4mI,EAAehnI,OAAOnqB,GAE5BswJ,GAA0B1vF,IAAI,IACzBA,EACH,CAACuwF,IAAgBvwF,EAAKuwF,SAEvB,IAEGC,GAA6BltJ,EAAAA,EAAAA,KAAamtJ,IAC9C,MAAMC,EAAcD,IAAaR,EAAAA,IAC7BD,GAAAA,GACCS,IAAaN,EAAAA,IAAsBD,GAAAA,GAAgCJ,GAAAA,GAExEtkC,EAAuB,CAAEmlC,eAAgBF,IACzCjB,EAA0BkB,KACzB,IAEGE,GAA4BttJ,EAAAA,EAAAA,KAAamC,IAC7C,MAAM,KAAErD,EAAI,QAAEgqC,GAAY3mC,EAAEqN,OACtB+9I,EAAoBzB,GAAoB9uJ,MAAK,EAAEwwJ,KAAiBA,IAAgB1uJ,IACtF,IAAKyuJ,EACH,OAGF,MAAME,EAAcF,EAAkB,GAAGlyJ,QAAO,CAACqtD,GAAOtiC,UACtDsiC,EAAItiC,GAAO0iB,EACJ4f,IACN,CAAC,GAEJwjG,EAA0BuB,KACzB,IAEGC,GAAuB1tJ,EAAAA,EAAAA,KAAamC,IACxC,MAAM,KAAErD,EAAI,QAAEgqC,GAAY3mC,EAAEqN,OAE5B08I,EAA0B,CAAE,CAACptJ,GAA6BgqC,MACzD,IAEH,OACExsC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,qCAER+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,4BAA4ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC1EhC,EAAK,wCAGR+C,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CACVzmB,QAAS6yJ,EACT1oJ,MAAOioJ,IAAwBQ,EAAAA,IAAyBD,EAAAA,IAAsBP,EAC9E18I,SAAUs9I,QAId5wJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,4DAA2DwC,SAAA,EACxEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAI,OAAMjB,SAAC,iCAE/CqvJ,GAAoBpvJ,KAAI,EAAE8wJ,EAAatzJ,GAAU4B,KAE9CQ,EAAAA,GAAAA,IAAA,OAEErC,UAAU,4BAA2BwC,SAAA,EAErCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,yBAAwBwC,UACrCe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAM0uJ,EACNnpJ,MAAOvI,EAAMkoF,WACbl7C,QAASujH,EAAqBvwJ,GAC9BsI,MAAO3J,EAAK+yJ,GACZrtC,UAAWgsC,EAAsBrwJ,GAAS,KAAO,OACjD8T,SAAU09I,EACVltC,aAAc4sC,MAGjB1uJ,QAAQ6tJ,EAAsBrwJ,MAC7B0B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kCAAiCwC,SAC7CvC,EAAQwC,KAAI,EAAG0pB,MAAKhiB,QAAOf,eAC1B,GAAY,eAAR+iB,GAAyBs0H,EAAAA,GAC7B,OACEl9I,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CAEP1yD,KAAMsnB,EACN0iB,QAASkjH,EAAoB5lI,GAC7BhiB,MAAO3J,EAAK2J,GACZf,SAAUA,EACVuM,SAAU89I,GALLtnI,UApBVonI,UAqCnB,KCyNA,IAAe1zJ,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACE0hC,UACEs+F,OAAO,YACLid,EAAW,mBAAEC,EAAkB,mBAAEC,EAAkB,kCAAEC,EAAiC,uCACtFtjB,EAAsC,yBAAEJ,GACzC,QACDrjG,EAAO,eACPgnH,GACD,QACDltG,EACAimF,UAAU,YACRknB,GACD,UACDp+G,GACEl/B,GAEE,sBAAEu9I,IAA0Bz/E,EAAAA,GAAAA,GAAqB99D,GACjDg6H,EAA0BpsI,QAAQ8rI,GAClC8jB,GAAsBv8G,EAAAA,EAAAA,KAA0BjhC,GAEtD,MAAO,CACLyvB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDi9I,cACAK,YAAa1vJ,QAAQ0vJ,GACrBG,aAActtG,EAAQ22D,WACtB42C,aAAc19I,EAAO8+H,kBAAkBvB,cAAc5xI,OACrDuxJ,qBACAS,6BAA8B/vJ,QAAQsxC,GAAWy+G,8BACjDP,oCACAD,qBACArjB,yCACAE,0BACA3jG,UACAknH,wBACAK,gBAAgBC,EAAAA,EAAAA,KAAqB79I,GACrCw9I,sBACAH,oBAtCct9I,EAxY+B+9I,EACjDx0J,WACAmmC,uBACAwtH,cACAK,cACAG,eACAC,eACAR,qBACAC,qBACAQ,+BACAP,oCACAtjB,yCACAE,0BACAujB,wBACAK,iBACAvnH,UACAk2B,UACAixF,sBACAH,qBAEA,MAAM,uBACJU,EAAsB,oBACtBC,EAAmB,iBACnBC,EAAgB,oBAChBC,EAAmB,sBACnBC,EAAqB,0BACrBC,EAAyB,4BACzB/kC,EAA2B,sBAC3BglC,EAAqB,uBACrB7mC,EAAsB,mBACtBmc,EAAkB,mBAClB2qB,IACEnrJ,EAAAA,EAAAA,OAEJ9I,EAAAA,EAAAA,KAAU,KACHmzJ,IACHS,IACAD,IACAE,IACAG,OAED,CAACb,KAEJnzJ,EAAAA,EAAAA,KAAU,KACJf,IAAak0J,IACfY,IACAE,OAED,CAACh1J,EAAUk0J,EAAqBY,IAEnC,MAAMv0J,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEbixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMgyF,GAA6BjvJ,EAAAA,EAAAA,KAAakrE,IAC9C6+C,EAA4B,CAC1B+jC,kCAAmC5iF,MAEpC,CAAC6+C,IAEEmlC,GAA0BlvJ,EAAAA,EAAAA,KAAaisF,IAC3Ci8B,EAAuB,CACrB+lC,sBAAuBhiE,MAExB,IAEGkjE,GAA8BnvJ,EAAAA,EAAAA,KAAaisF,IAC/C4iE,EAAsB,CAAEjB,mBAAoB3hE,MAC3C,CAAC4iE,IAEEO,GAA+BrrJ,EAAAA,EAAAA,IAAgB,KAC9CgqJ,GACLU,EAAuB,CAAEj+C,KAAMu9C,OAG3BsB,GAAYn0J,EAAAA,EAAAA,KAAQ,KACxB,GAAK6yJ,EACL,OAAOn+C,GAAgBW,EAAAA,IAAqBw9C,EAnFzB,IAmF0D/pE,aAC5E,CAAC+pE,IAEJ,SAASuB,EAAmB1E,GAC1B,IAAKA,EAAS,OAAOrwJ,EAAQ,WAE7B,MAAM,WAAEgsC,EAAU,mBAAEgpH,EAAkB,YAAEC,GAAgB5E,EAGlD6E,EAAuC,cAAflpH,EACxBmpH,EAF8B,UAAhBF,IAEyBC,EAEvCE,EAAa/E,EAAQgF,aAAavzJ,OAASuuJ,EAAQjjH,aAAatrC,OAChEwzJ,EAAajF,EAAQkF,aAAazzJ,OAASuuJ,EAAQnjH,aAAaprC,OAChE0zJ,EAAQ,GACVJ,GAAYI,EAAM/zJ,KAAK,IAAI2zJ,KAC3BE,IAAeJ,GAAuBM,EAAM/zJ,KAAK,IAAI6zJ,KAEzD,MAGMG,EAAkB,CAHCN,EAAuBj1J,EAAK,oBAAsB,GACvDA,EAAKw1J,YAAYF,IAEmB/xH,OAAO1/B,SAASgpB,KAAK,KAC7E,GAAIooI,IAAyBD,EAAuB,OAAOO,EAE3D,GAAIT,EACF,OAAOh1J,EAAQy1J,EAAkB,qBAAuB,kBAG1D,OAAQzpH,GACN,IAAK,YACH,MAAO,GAAGhsC,EAAQ,mBAAmBy1J,IAEvC,IAAK,WACH,MAAO,GAAGz1J,EAAQ,kBAAkBy1J,IAEtC,IAAK,SACH,MAAO,GAAGz1J,EAAQ,gBAAgBy1J,IAIxC,CAEA,OACE1zJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,cACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBshB,sBAAuBppJ,SAAA,CAElFlC,EAAQ,iBACTiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAE0xJ,GAAgB,QAEjEG,IACC9wJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,MACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAChCS,OAAQkpB,EAAczpB,EAAAA,GAAgB8D,gBAAkB9D,EAAAA,GAAgB4D,mBACvE1rI,UAEHH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,eACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClClC,EAAQyzJ,EAAc,aAAe,uBAK9CxwJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAChCS,OAAQ6oB,EAAcppB,EAAAA,GAAgBwhB,aAAexhB,EAAAA,GAAgBuhB,gBACpErpJ,UAEHH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,0BACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClClC,EAAQozJ,EAAc,aAAe,sBAI3CS,EAAe,IACd9xJ,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,MACLw3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqhB,iBAAkBnpJ,SAAA,CAE7ElC,EAAQ,gCACTiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAE2xJ,WAKtD9xJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAElC,EAAQ,mBAEtFiD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBof,qBAAsBlnJ,UAElFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,wBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQgxB,qBAIlCv6D,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqf,kBAAmBnnJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,oBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQmpH,kBAIlC1yJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsf,sBAAuBpnJ,UAEnFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,+BACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQopH,sBAIlC3yJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuf,aAAcrnJ,UAE1EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,iBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQ6vG,aAIlCp5I,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwf,kBAAmBtnJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,sBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQqpH,kBAIlC5yJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgByf,eAAgBvnJ,UAE5EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,mBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQgpD,eAIlCvyF,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0f,oBAAqBxnJ,UAEjFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,2BACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQspH,kBAIlC7yJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiH,mBAAoB/uI,UAEhFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,mBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQwkG,mBAIlC/tI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNo3C,oBAAkB,EAClBxvG,aAAc3gB,IAAwB3iC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAACG,KAAK,MAAMD,KAAK,YAChE/D,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2f,uBAAwBznJ,UAEpFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,gCACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQwpH,uBAIlC/yJ,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNp4D,aAAc3gB,IAAwB3iC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAACG,KAAK,MAAMD,KAAK,YAChE/D,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4f,kBAAmB1nJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,2BACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClCiuI,EAA0BjwI,EAAK,4BAE1BF,EADFiwI,EACU,oCACA,wBAIpBhtI,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNj/G,UAAU,UAEVK,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8G,oBAAqB5uI,UAEjFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,kBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC6yJ,EAAmBvoH,EAAQqkG,sBAMnCyiB,IACCvxJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzElC,EAAQ,mCAEXiD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO7J,EAAQ,4CACfqxF,SAAUrxF,EAAQ,gCAClBuuC,QAASxqC,QAAQsvJ,GACjBvqJ,UAAWwqJ,EACXp8F,QAAS09F,OAKdd,IACC/xJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzElC,EAAQ,8BAEXiD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO7J,EAAQ,kBACfqxF,SAAUrxF,EAAQ,sBAClBuuC,QAASxqC,QAAQwvJ,GACjBr8F,QAASw9F,QAKf3yJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzElC,EAAQ,iCAEXiD,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO7J,EAAQ,gCACfuuC,QAASxqC,QAAQ2vJ,GACjBx8F,QAASy9F,QAIb5yJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzEhC,EAAK,sBAER6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EACN5+G,QAAS80J,EAA6B3yJ,SAAA,CAErChC,EAAK,2BACN+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAC3ChC,EAAK,SAAU,CAAEk5B,MAAO07H,GAAa,CAAE10F,YAAa,mBC5VjE,IAAe7gE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACExT,OACEupC,KAAMrB,GAERyb,SACEzc,IAAKosH,GACN,YACDhqH,EAAW,cACX/R,GACE/jB,EAEJ,MAAO,CACL00B,YACAorH,aACAvsH,WAAYuC,GAAaR,QACzByqH,iBAAiB3/I,EAAAA,EAAAA,KAAeJ,GAAQggJ,WAAWC,aACnDl8H,mBAlBchkB,EAxD8BmgJ,EAChDxrH,YACAorH,aACAvsH,aACAwsH,kBACAh8H,gBACA7zB,SACAQ,cAEA,MAAM,mBACJyvJ,EAAkB,UAClBjxG,IACE/7C,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACNypD,EAAQoH,IAAap8C,EAAAA,EAAAA,IAAS,KAErClU,EAAAA,EAAAA,KAAU,KACR81J,EAAmB,CAAExsH,MAAO4f,MAC3B,CAACA,EAAQ4sG,IAEZ,MAAMC,GAAqB51J,EAAAA,EAAAA,KAAQ,KACjC,MAAM61J,GAAsB7sH,EAAAA,GAAAA,IAAO,IAC7BD,GAAc,MACdwsH,GAAmB,IACvBzyH,QAAQgzH,GACDA,IAAcv8H,IAAkB+7H,EAAWjgI,SAASygI,MAG7D,OAAO7sH,EAAAA,GAAAA,IAAmB,CAAEC,IAAK2sH,EAAqB1sH,MAAO4f,EAAQjmD,KAAM,SACxE6kD,MAAK,CAACouG,EAASC,KACd,MAAMz5F,GAAYhuB,EAAAA,EAAAA,IAAgBrE,EAAU6rH,KAAa,GACnDE,GAAa1nH,EAAAA,EAAAA,IAAgBrE,EAAU8rH,KAAc,GAE3D,OAAOz5F,EAAU25F,cAAcD,QAElC,CAACX,EAAYvsH,EAAYxP,EAAewvB,EAAQwsG,EAAiBrrH,IAE9DisH,GAAmBrxJ,EAAAA,EAAAA,KAAak+B,IACpC0hB,EAAU,CAAE1hB,WACZ98B,MACC,CAACA,IAEJ,OACE5D,EAAAA,GAAAA,GAACipD,GAAgB,CACf7lD,OAAQA,EACR8lD,cAAeoqG,EACfnqG,kBAAmBlsD,EAAK,0BACxBwpD,OAAQA,EACR4C,eAAgBwE,EAChBvE,mBAAoBuqG,EACpBjwJ,QAASA,QC2Ef,IAAetH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACE03C,OACE3hB,KAAM6qH,GAERp0J,OACEupC,KAAM8qH,GAER1wG,SAAS,IACPzc,GAEF2yB,aACEC,WAAYF,IAEZpmD,EAEJ,MAAO,CACL4gJ,aACAC,aACAf,WAAYpsH,EACZ0yB,mBArBcrmD,EAzH2C+gJ,EAC7Dx3J,WACAijE,UACAq0F,aACAC,aACAf,aACA15F,oBAEA,MAAM,YAAEnX,IAAgB97C,EAAAA,EAAAA,MAElBpJ,GAAOD,EAAAA,EAAAA,MACNi3J,EAAsBC,EAAoBC,IAAuB72J,EAAAA,EAAAA,KAClE82J,GAAqB5xJ,EAAAA,EAAAA,KAAak+B,IACtCyhB,EAAY,CAAEzhB,aACb,CAACyhB,KAEJh0B,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM40F,GAAuB32J,EAAAA,EAAAA,KAAQ,IAC5Bs1J,EAAWn1J,QAAO,CAACqtD,EAAKxqB,KAC7B,MACM2R,GADYr/B,EAAAA,EAAAA,IAAS0tB,GACFqzH,EAAWrzH,QAAU/iC,EACxC22J,EAAejiH,IAASA,EAAKkoB,cAAeg6F,EAAAA,EAAAA,IAAgBliH,GAMlE,OAJIiiH,IACFppG,EAAIxqB,GAAU4zH,GAGTppG,IACN,CAAC,IACH,CAAC8nG,EAAYe,IAkDhB,OACEj1J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,mCAAkCwC,SAAA,EAC/Ce,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,0BAAyBwC,UACtCe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,6CAA6CyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC3FhC,EAAK,yBAIV+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,0BAAyBwC,SACrC+zJ,GAAYn0J,QACXmB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iCAAgCwC,SAC5C+zJ,EAAW9zJ,KAAI,CAACs0J,EAAWrsG,IA5DxC,SAAuBqsG,EAAmBrsG,GACxC,MAAMvI,GAAY5rC,EAAAA,EAAAA,IAASwgJ,GACrBnhH,EAAO0hH,EAAWP,GAClB9/I,EAAOogJ,EAAWN,GAClB7sJ,EAAO0rC,GAAQ3+B,EAEfjX,GAAYsC,EAAAA,GAAAA,GAChB,wDACA6/C,EAAY,UAAY,SAGpB41G,EAAmBH,EAAqBb,GAE9C,OACE10J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,UAAWA,EACXymB,QAAM,EACNw4F,QAAM,EACNl5D,eAAgB,CAAC,CACfr+C,MAAO,UACPD,KAAM,SACN2+C,QAASA,KACPuxG,EAAmBZ,MAGvB7nJ,MAAO,SAkC6D,EAlCnCw7C,GAAK4rF,EAAAA,SAAoB9zI,SAAA,EAE1De,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,SACLkG,KAAMA,KAER7H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAeyD,IAAI,OAAMjB,SAAA,CACrC0H,IAAQ3G,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC5lD,KAAMA,IAC7B0rC,GAAMkoB,cACLv6D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAgByD,IAAI,OAAMjB,UAAE67D,EAAAA,GAAAA,IAA0BxB,EAAejnB,EAAKkoB,eAE1Fi6F,IACC11J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,mBAAmByD,IAAI,OAAMjB,SAAA,CAAC,IAE1Cu1J,UAzBF,WAAWhB,IA+BtB,CAc8CiB,CAAcjB,EAAWrsG,OAE3D6rG,IAAeA,EAAWn0J,QAC5BmB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAayD,IAAI,OAAMjB,SAAEhC,EAAK,gBAE7C+C,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GAAK,iBAKnB/sD,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,SAAO,EACPjsC,UAAU,oBACVK,QAASo3J,EACTp9I,UAAW7Z,EAAK,gBAAgBgC,UAEhCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WAEbtB,EAAAA,GAAAA,GAACozJ,GAAc,CACbhwJ,OAAQ6wJ,EACRrwJ,QAASuwJ,WCpJV,SAASO,GAAcptB,GAC5B,OAAQA,GACN,KAAKP,EAAAA,GAAgBof,mBACrB,KAAKpf,EAAAA,GAAgBqgB,kCACrB,KAAKrgB,EAAAA,GAAgB4gB,iCACnB,MAAO,cACT,KAAK5gB,EAAAA,GAAgBqf,gBACrB,KAAKrf,EAAAA,GAAgB6f,+BACrB,KAAK7f,EAAAA,GAAgBigB,8BACnB,MAAO,WACT,KAAKjgB,EAAAA,GAAgBsf,oBACrB,KAAKtf,EAAAA,GAAgB8f,mCACrB,KAAK9f,EAAAA,GAAgBkgB,kCACnB,MAAO,eACT,KAAKlgB,EAAAA,GAAgBuf,WACrB,KAAKvf,EAAAA,GAAgB+f,0BACrB,KAAK/f,EAAAA,GAAgBmgB,yBACnB,MAAO,MACT,KAAKngB,EAAAA,GAAgBwf,gBACrB,KAAKxf,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgB6gB,8BACnB,MAAO,WACT,KAAK7gB,EAAAA,GAAgByf,aACrB,KAAKzf,EAAAA,GAAgBugB,4BACrB,KAAKvgB,EAAAA,GAAgB8gB,2BACnB,MAAO,QACT,KAAK9gB,EAAAA,GAAgB0f,kBACrB,KAAK1f,EAAAA,GAAgBwgB,iCACrB,KAAKxgB,EAAAA,GAAgB+gB,gCACnB,MAAO,WACT,KAAK/gB,EAAAA,GAAgB2f,qBACrB,KAAK3f,EAAAA,GAAgBygB,oCACrB,KAAKzgB,EAAAA,GAAgBghB,mCACnB,MAAO,gBACT,KAAKhhB,EAAAA,GAAgB8G,kBACrB,KAAK9G,EAAAA,GAAgBggB,iCACrB,KAAKhgB,EAAAA,GAAgBogB,gCACnB,MAAO,aACT,KAAKpgB,EAAAA,GAAgBiH,iBACrB,KAAKjH,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgBihB,+BACnB,MAAO,YACT,KAAKjhB,EAAAA,GAAgB4tB,gBACrB,KAAK5tB,EAAAA,GAAgB2gB,+BACrB,KAAK3gB,EAAAA,GAAgBkhB,8BACnB,MAAO,WACT,KAAKlhB,EAAAA,GAAgB6tB,kBACnB,MAAO,aACT,KAAK7tB,EAAAA,GAAgB0H,sBACnB,MAAO,iBAIb,CCtCA,MA4HA,IAAenyI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACE0hC,UACEs+F,OAAO,gBACL2hB,KAGF3hJ,EAEJ,MAAO,CACL2hJ,kBACAlyH,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MAZnCD,EA5HS6hJ,EAC3BD,kBAAiBlyH,2BAEjB,MAAM,iBAAE8B,EAAgB,4BAAE8nF,IAAgClmH,EAAAA,EAAAA,MAEpDpJ,GAAOC,EAAAA,GAAAA,KAEP63J,GAAiCxuJ,EAAAA,EAAAA,IAAgB,KACrDk+B,EAAiB,CACft8B,QAASlL,EAAK,qCACd2K,OAAQ,CACNA,OAAQ,mBACRu2H,QAAS,CAAC,GAEZ2P,WAAY,CAAEllH,IAAK,QACnB1kB,KAAM,YAIJ8wJ,GAA6BzuJ,EAAAA,EAAAA,IAAgB,KAC5Co8B,EAKL4pF,EAA4B,CAC1BsoC,gBAAiB,IACZA,EACHI,gCAAiCJ,GAAiBI,qCAAkCt3J,KAPtFo3J,OAYEG,GAA+B3uJ,EAAAA,EAAAA,IAAgB,KAC9Co8B,EAIL4pF,EAA4B,CAC1BsoC,gBAAiB,IACZA,EACHM,kCAAmCN,GAAiBM,uCAAoCx3J,KAN1Fo3J,OAWEK,GAAqB7uJ,EAAAA,EAAAA,IAAgB,KACpCo8B,EAIL4pF,EAA4B,CAC1BsoC,gBAAiB,IACZA,EACHQ,+BAAgCR,GAAiBQ,oCAAiC13J,KANpFo3J,OAWEO,GAAkC/uJ,EAAAA,EAAAA,IAAgB,KACjDo8B,EAIL4pF,EAA4B,CAC1BsoC,gBAAiB,IACZA,EACHU,4BAA6BV,GAAiBU,iCAA8B53J,KAN9Eo3J,OAWJ,OACEj2J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,+BAER6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAASk4J,EAA2B/1J,SAAA,EAC5Ce,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,gCACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,kBACHmE,MAAyD3J,EAAlD43J,GAAiBI,+BAAsC,wCACrD,wCACTpvJ,UAAW88B,EACX2I,SAAU3I,IAA+BkyH,GAAiBI,qCAG9Dn2J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAASo4J,EAA6Bj2J,SAAA,EAC9Ce,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,2BACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,YACHmE,MAA2D3J,EAApD43J,GAAiBM,iCAAwC,mCACvD,mCACTtvJ,UAAW88B,EACX2I,SAAU3I,IAA+BkyH,GAAiBM,uCAG9Dr2J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAASs4J,EAAmBn2J,SAAA,EACpCe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,wBACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,SACHmE,MAAwD3J,EAAjD43J,GAAiBQ,8BAAqC,gCACpD,gCACTxvJ,UAAW88B,EACX2I,SAAU3I,IAA+BkyH,GAAiBQ,oCAG9Dv2J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAASw4J,EAAgCr2J,SAAA,EACjDe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,qCACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,uBACHmE,MAAqD3J,EAA9C43J,GAAiBU,2BAAkC,6BACjD,6BACT1vJ,UAAW88B,EACX2I,SAAU3I,IAA+BkyH,GAAiBU,iCAG9Dv1J,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACjFhC,EAAK,oCC7Dd,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLyvB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjD05G,oBAAqB9rH,SAAQ00J,EAAAA,EAAAA,KAA0BtiJ,OAJzCD,EAnDYwiJ,EAC9B9yH,uBAAsBiqF,sBAAqB7jF,iBAE3C,MAAM,4BAAEwjF,EAA2B,iBAAE7nF,IAAqBr+B,EAAAA,EAAAA,MACpDpJ,GAAOD,EAAAA,EAAAA,KACP04J,EAAqC,WAAf3sH,GAA0C,aAAfA,EAEjD4sH,GAAkCpvJ,EAAAA,EAAAA,IACrCmnE,GAAc6+C,EAA4B,CAAEK,oBAAqBl/C,MAG9Di/D,GAAyBpmI,EAAAA,EAAAA,IAAgB,KAC7Cm+B,EAAiB,CACfQ,eAAgB,iBAIpB,OACEpmC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGy2J,IACC52J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gBACZquC,QAASshF,EACT34D,QAAS0hG,KAEX31J,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UACjF8B,EAAAA,GAAAA,GAAW9D,EAAK,oBAAqB,CAAC,aAI7C6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACM,GAAAA,EAAQ,CAAC7D,UAAU,0BAA0B+D,KAAK,UAAUC,KAAK,QAC/E3D,QAAS6vI,EAAuB1tI,SAERhC,EAAvB0lC,EAA4B,mCAA2C,6BAE1E3iC,EAAAA,GAAAA,GAAA,KACEvD,UAAU,gDACVyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAGhChC,EADH0lC,EACQ,uCACA,0C,gBCnEnB,MCyGA,IAAermC,EAAAA,EAAAA,KAlFyCs5J,EACtD3+H,gBACA4+H,yBACAC,+BAEA,MAAM,aACJC,EAAY,mBAAEC,EAAkB,mBAAEnjJ,EAAkB,iBAAE4xB,IACpDp+B,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MAENi5J,EAAgCC,EAA8BC,IAAiC74J,EAAAA,EAAAA,IAAQ,GAExG08D,GAAW/qD,EAAAA,EAAAA,OAEjB1R,EAAAA,EAAAA,KAAU,KACHs4J,GACHE,EAAa,CAAEr1H,OAAQzJ,MAExB,CAAC4+H,EAAwB5+H,EAAe8+H,IAE3C,MAAMK,GAAmB5zJ,EAAAA,EAAAA,KAAa25I,IACpC6Z,EAAmB,CACjB7Z,OACAka,YAAY,IAEd5xH,EAAiB,CACft8B,QAASlL,EAAK,+CAEf,CAACA,EAAMwnC,EAAkBuxH,IAEtBM,GAAsB9zJ,EAAAA,EAAAA,KAAY,KACtC2zJ,IACAtjJ,EAAmB,CAAE/K,MAAOguJ,MAC3B,CAACK,EAA+BtjJ,EAAoBijJ,IAEjDS,GAAyB/zJ,EAAAA,EAAAA,KAAY,KACzCw3D,EAAS5qD,SAASonJ,UACjB,IAEH,OACE13J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EACNx3G,KAAK,aACLpH,QAASy5J,EAAuBt3J,SAAA,EAEhCe,EAAAA,GAAAA,GAACy2J,GAAAA,EAAY,CACXrkJ,SAAUgkJ,EACVp8F,SAAUA,IAEX/8D,EAAK64J,EACF,yCACA,0CAELA,IACCh3J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EACNt2E,aAAaplC,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACoB,MAAOguJ,EAA0Br1J,KAAK,OAAOhE,UDjFhB,aCkFlDK,QAASo5J,EACT1+I,aAAW,EAAAvY,SAAA,CAEVhC,EAAK64J,EAAyB1oJ,QAC3B,yCACA,2CACJpN,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6yJ,EACRryJ,QAASuyJ,EACTn9I,KAAM/b,EAAK,8BACX8oC,aAAc9oC,EAAK,UACnB+oC,eAAgBswH,EAChBrwH,sBAAoB,QAI1BjmC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACjFhC,EAAK,gDC6Cd,SAASy5J,IAAkB,OACzBpvB,EAAM,QACN/9F,EAAO,kBACPotH,IAMA,MAAM,qBAAElqC,EAAoB,mBAAEoa,IAAuBxgI,EAAAA,EAAAA,MAC/CtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEP05J,GAAoBl5J,EAAAA,EAAAA,KAAQ,KAChC,MAAMm5J,EAAYvvB,IAAWP,EAAAA,GAAgB6tB,kBACvCl4J,EAAU,CACd,CAAEmK,MAAO,YAAaD,MAAO7J,EAAQ,iBACrC,CACE8J,MAAO,WACPD,MAAO+vJ,GACL32J,EAAAA,GAAAA,GAACiuI,GAAmB,CAACrnI,MAAO7J,EAAQ,iBAEpCA,EAAQ,eAEVmxI,OAAQyoB,IAeZ,OAXIE,GACFn6J,EAAQ8B,KAAK,CACXqI,MAAO,SACPD,MAAO+vJ,GACL32J,EAAAA,GAAAA,GAACiuI,GAAmB,CAACrnI,MAAO7J,EAAQ,eAEpCA,EAAQ,aAEVmxI,OAAQyoB,IAGLj6J,IACN,CAACK,EAASuqI,EAAQqvB,IAEfG,GAAwBp5J,EAAAA,EAAAA,KAAQ,IAChC4pI,IAAWP,EAAAA,GAAgB6tB,kBACtB,CACLmC,kBAAkB,EAClBC,mBAAmB,GAIhB,CACLD,iBAA0C,WAAxBxtH,GAASR,WAC3BiuH,kBAA2C,cAAxBztH,GAASR,aAE7B,CAACQ,EAAS+9F,IAEPxa,EAAa4nC,GAAcptB,GAE3B33B,GAAkBjyG,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ4pI,GACN,KAAKP,EAAAA,GAAgByf,aACnB,OAAOvpJ,EAAK,oBACd,KAAK8pI,EAAAA,GAAgBqf,gBACnB,OAAOrpJ,EAAQ,cACjB,KAAKgqI,EAAAA,GAAgB6tB,kBACnB,OAA6C73J,EAAd,cAAxBwsC,GAASR,WAAqC,mBAA8B,qBAErF,KAAKg+F,EAAAA,GAAgB2f,qBACnB,OAAO3pJ,EAAQ,4BACjB,QACE,UAEH,CAACA,EAASE,EAAMqqI,EAAQ/9F,IAErB0tH,GAAav5J,EAAAA,EAAAA,KAAQ,KACzB,OAAQ4pI,GACN,KAAKP,EAAAA,GAAgBof,mBACnB,OAAOppJ,EAAQ,qBACjB,KAAKgqI,EAAAA,GAAgB6tB,kBACnB,OAAO73J,EAAQ,sBACjB,KAAKgqI,EAAAA,GAAgBqf,gBACnB,OAAOrpJ,EAAQ,iBACjB,KAAKgqI,EAAAA,GAAgBsf,oBACnB,OAAOtpJ,EAAQ,4BACjB,KAAKgqI,EAAAA,GAAgBuf,WACnB,OAAOvpJ,EAAQ,mBACjB,KAAKgqI,EAAAA,GAAgBwf,gBACnB,OAAOxpJ,EAAQ,wBACjB,KAAKgqI,EAAAA,GAAgByf,aACnB,OAAOvpJ,EAAK,qBACd,KAAK8pI,EAAAA,GAAgB0f,kBACnB,OAAO1pJ,EAAQ,wBACjB,KAAKgqI,EAAAA,GAAgB2f,qBACnB,OAAO3pJ,EAAQ,6BACjB,KAAKgqI,EAAAA,GAAgB8G,kBACnB,OAAO9wI,EAAQ,eACjB,KAAKgqI,EAAAA,GAAgBiH,iBACnB,OAAOjxI,EAAQ,gBACjB,KAAKgqI,EAAAA,GAAgB4tB,gBACnB,OAAO53J,EAAQ,cACjB,QACE,UAEH,CAACA,EAASE,EAAMqqI,IAEb4vB,GAAkB3wJ,EAAAA,EAAAA,IACtB,CAACiiC,EAAoBk3F,EAAoBqyB,EAA8BC,KACrE,MAAMmF,EAAe3uH,GAAS3pC,QAAU,EAClCu4J,EAAe13B,GAAS7gI,QAAU,EAClCw4J,EAA8B,UAAhBrF,EAGpB,IAFiBmF,IAAgBC,IAEfC,EAChB,OAA4Bt6J,EAArBg1J,EAA6B,iBAA4B,qBAC3D,GAAIA,EACT,OAAOh1J,EAAQ,sBAGjB,MAAMu6J,EAAkBH,EAAe,EAAIp6J,EAAQ,QAASo6J,QAAgBx5J,EACtE45J,EAAkBH,EAAe,EAAIr6J,EAAQ,QAASq6J,QAAgBz5J,EAK5E,MAAO,CAHkB05J,EAAcp6J,EAAK,oBAAsB,GAC9CA,EAAKw1J,YAAY,CAAC6E,EAAiBC,GAAiB/2H,OAAO1/B,WAExC0/B,OAAO1/B,SAASgpB,KAAK,QAI1D0tI,GAAgB95J,EAAAA,EAAAA,KAAQ,IACrBw5J,EACL3tH,GAASU,aACTV,GAAS+oH,aACT/oH,GAASwoH,mBACTxoH,GAASyoH,cAEV,CAACzoH,IAEEkuH,GAAc/5J,EAAAA,EAAAA,KAAQ,IACnBw5J,EAAgB3tH,GAASY,aAAcZ,GAAS6oH,eACtD,CAAC7oH,IAEEiC,GAAyBhpC,EAAAA,EAAAA,KAAaqE,IAC1C4lH,EAAqB,CACnBK,WAAYA,EACZ/jF,WAAYliC,MAEb,CAACimH,IAEE4qC,EAAwB,MAC5B,OAAQpwB,GACN,KAAKP,EAAAA,GAAgBof,mBACnB,OAAOpf,EAAAA,GAAgBqgB,kCACzB,KAAKrgB,EAAAA,GAAgBqf,gBACnB,OAAOrf,EAAAA,GAAgB6f,+BACzB,KAAK7f,EAAAA,GAAgBsf,oBACnB,OAAOtf,EAAAA,GAAgB8f,mCACzB,KAAK9f,EAAAA,GAAgBuf,WACnB,OAAOvf,EAAAA,GAAgB+f,0BACzB,KAAK/f,EAAAA,GAAgBwf,gBACnB,OAAOxf,EAAAA,GAAgBsgB,+BACzB,KAAKtgB,EAAAA,GAAgByf,aACnB,OAAOzf,EAAAA,GAAgBugB,4BACzB,KAAKvgB,EAAAA,GAAgB0f,kBACnB,OAAO1f,EAAAA,GAAgBwgB,iCACzB,KAAKxgB,EAAAA,GAAgBiH,iBACnB,OAAOjH,EAAAA,GAAgB0gB,gCACzB,KAAK1gB,EAAAA,GAAgB4tB,gBACnB,OAAO5tB,EAAAA,GAAgB2gB,+BACzB,KAAK3gB,EAAAA,GAAgB2f,qBACnB,OAAO3f,EAAAA,GAAgBygB,oCACzB,QACE,OAAOzgB,EAAAA,GAAgBggB,iCAE5B,EAzB6B,GA2BxB4Q,EAAuB,MAC3B,OAAQrwB,GACN,KAAKP,EAAAA,GAAgBof,mBACnB,OAAOpf,EAAAA,GAAgB4gB,iCACzB,KAAK5gB,EAAAA,GAAgBqf,gBACnB,OAAOrf,EAAAA,GAAgBigB,8BACzB,KAAKjgB,EAAAA,GAAgBsf,oBACnB,OAAOtf,EAAAA,GAAgBkgB,kCACzB,KAAKlgB,EAAAA,GAAgBuf,WACnB,OAAOvf,EAAAA,GAAgBmgB,yBACzB,KAAKngB,EAAAA,GAAgBwf,gBACnB,OAAOxf,EAAAA,GAAgB6gB,8BACzB,KAAK7gB,EAAAA,GAAgByf,aACnB,OAAOzf,EAAAA,GAAgB8gB,2BACzB,KAAK9gB,EAAAA,GAAgB0f,kBACnB,OAAO1f,EAAAA,GAAgB+gB,gCACzB,KAAK/gB,EAAAA,GAAgBiH,iBACnB,OAAOjH,EAAAA,GAAgBihB,+BACzB,KAAKjhB,EAAAA,GAAgB4tB,gBACnB,OAAO5tB,EAAAA,GAAgBkhB,8BACzB,KAAKlhB,EAAAA,GAAgB2f,qBACnB,OAAO3f,EAAAA,GAAgBghB,mCACzB,QACE,OAAOhhB,EAAAA,GAAgBogB,gCAE5B,EAzB4B,GA2B7B,OACEroJ,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAEg4J,KAC9Ej3J,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAM,cAAcwrH,IACpBpwH,QAASk6J,EACTxkJ,SAAUo5B,EACVn5B,SAAUk3B,GAASR,aAEpB4mE,IACC3vG,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAE0wG,QAG3FgnD,IAAsBG,EAAsBE,mBAAqBF,EAAsBC,oBACvFj4J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SACzElC,EAAQ,uBAEV+5J,EAAsBE,oBACrBh3J,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNx3G,KAAK,WAELpH,QAASA,KACP+pI,EAAmB,CAAES,OAAQowB,KAC7Bz4J,UAEFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA0BwC,SAAA,EACvCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,kBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEu4J,SAIjCV,EAAsBC,mBACrB/2J,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPq3G,QAAM,EACNx3G,KAAK,cAELpH,QAASA,KACP+pI,EAAmB,CAAES,OAAQqwB,KAC7B14J,UAEFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA0BwC,SAAA,EACvCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,iBACjCiD,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEw4J,YAMrCd,IAAqB32J,EAAAA,GAAAA,GAAC2uI,GAAiB,MAG9C,CAEA,UAAeryI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUo0H,aACT,IAAIswB,EACAC,EAEJ,MAAM,cACJ5gI,EACA2d,UAAU,QACRrL,EACA2pG,OAAO,yBACL4kB,KAGF5kJ,EAEE8lI,GAAsBvmG,EAAAA,EAAAA,KAAmBv/B,EAAQ+jB,GAEvD,OAAQqwG,GACN,KAAKP,EAAAA,GAAgBof,mBACnByR,EAAiBruH,EAAQgxB,YACzBs9F,EAAmBtuH,EAAQwuH,WAC3B,MAEF,KAAKhxB,EAAAA,GAAgBqf,gBACnBwR,EAAiBruH,EAAQmpH,SACzB,MAEF,KAAK3rB,EAAAA,GAAgBsf,oBACnBuR,EAAiBruH,EAAQopH,aACzB,MAEF,KAAK5rB,EAAAA,GAAgBuf,WACnBsR,EAAiBruH,EAAQ6vG,IACzB,MAEF,KAAKrS,EAAAA,GAAgBwf,gBACnBqR,EAAiBruH,EAAQqpH,SACzB,MAEF,KAAK7rB,EAAAA,GAAgByf,aACnBoR,EAAiBruH,EAAQgpD,MACzB,MAEF,KAAKw0C,EAAAA,GAAgB4tB,gBACrB,KAAK5tB,EAAAA,GAAgBiH,iBACnB4pB,EAAiBruH,EAAQwkG,UACzB8pB,EAAmBtuH,EAAQyuH,SAC3B,MAEF,KAAKjxB,EAAAA,GAAgB0f,kBACnBmR,EAAiBruH,EAAQspH,SACzB,MAEF,KAAK9rB,EAAAA,GAAgB2f,qBACnBkR,EAAiBruH,EAAQwpH,cACzB,MAEF,KAAKhsB,EAAAA,GAAgB8G,kBACnB+pB,EAAiBruH,EAAQqkG,WAI7B,OAAKgqB,EAQE,CACLA,iBACAC,mBACA5gI,cAAeA,EACf4+H,uBAAwB/0J,QAAQk4I,GAChC8c,yBAA0B9c,GAAqBnjH,cAC/C8gI,kBAAmBrvB,IAAWP,EAAAA,GAAgB2f,wBAAyBriH,EAAAA,EAAAA,KAA2BnxB,GAClG4kJ,2BACAn1H,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,IAf1C,CACL+jB,cAAeA,EACf4+H,uBAAwB/0J,QAAQk4I,GAChC8c,yBAA0B9c,GAAqBnjH,iBAlEnC5iB,EAzWyCglJ,EAC3D3wB,SACA9qI,WACAo7J,iBACAC,mBACA5gI,gBACA4+H,yBACAC,2BACAa,oBACAl3F,UACAq4F,2BACAn1H,2BAEA,MAAM,4BAAE4pF,EAA2B,iBAAE9nF,IAAqBp+B,EAAAA,EAAAA,MAEpDpJ,GAAOC,EAAAA,GAAAA,MAEbixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMy4F,GAA4B3xJ,EAAAA,EAAAA,IAAgB,KAC3Co8B,EAYL4pF,EAA4B,CAC1BurC,0BAA2BA,IAZ3BrzH,EAAiB,CACft8B,QAASlL,EAAK,qCACd2K,OAAQ,CACNA,OAAQ,mBACRu2H,QAAS,CAAC,GAEZ2P,WAAY,CAAEllH,IAAK,QACnB1kB,KAAM,YASNi0J,GAAkBz6J,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ4pI,GACN,KAAKP,EAAAA,GAAgBiH,iBACnB,OAAOjH,EAAAA,GAAgB4tB,gBACzB,KAAK5tB,EAAAA,GAAgBof,mBACnB,MAAsC,WAA/ByR,GAAgB7uH,WAA0Bg+F,EAAAA,GAAgB6tB,uBAAoBj3J,EAEvF,QACE,UAEH,CAACi6J,EAAgBtwB,IAEpB,OACExoI,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,CAC5CqoI,IAAWP,EAAAA,GAAgByf,eAC1B1nJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAASo7J,EAA0Bj5J,SAAA,EAC3Ce,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,gCACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,OACHoD,UAAW88B,EACX/7B,MAAkC3J,EAA3B66J,EAAgC,kBAA0B,sBACjExsH,QAASwsH,QAGb93J,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACjFhC,EAAK,gCAAiC,CACrCiH,MAAMlE,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UAAU,cAClCq6F,KAAM75F,EAAK,uBACV,CACDi/C,WAAW,UAKnBl8C,EAAAA,GAAAA,GAAC02J,GAAiB,CAChBpvB,OAAQA,EACR/9F,QAASquH,EACTjB,kBAAmBA,IAEpBrvB,IAAWP,EAAAA,GAAgBsf,qBAAsD,cAA/BuR,GAAgB7uH,aACjE/oC,EAAAA,GAAAA,GAAC41J,GAAiC,CAChC3+H,cAAeA,EACf4+H,uBAAwBA,EACxBC,yBAA0BA,IAG7BxuB,IAAWP,EAAAA,GAAgBqf,kBAC1BpmJ,EAAAA,GAAAA,GAACy1J,GAAuB,CAAC1sH,WAAY6uH,GAAgB7uH,aAEtDu+F,IAAWP,EAAAA,GAAgByf,eAC1BxmJ,EAAAA,GAAAA,GAAC80J,GAAoB,IAEtBh0J,QAAQq3J,KACPn4J,EAAAA,GAAAA,GAAC02J,GAAiB,CAChBpvB,OAAQ6wB,EACR5uH,QAASsuH,WC9FbO,GAAmB,CAACC,GAAAA,IA6K1B,SAASC,GAA0BplJ,EAAqBo0H,GACtD,MAAM,QAAE/9F,GAAYr2B,EAAO0hC,SAC3B,OAAQ0yF,GACN,KAAKP,EAAAA,GAAgBqgB,kCACrB,KAAKrgB,EAAAA,GAAgB4gB,iCACnB,OAAOp+G,EAAQgxB,YACjB,KAAKwsE,EAAAA,GAAgB6f,+BACrB,KAAK7f,EAAAA,GAAgBigB,8BACnB,OAAOz9G,EAAQmpH,SACjB,KAAK3rB,EAAAA,GAAgB8f,mCACrB,KAAK9f,EAAAA,GAAgBkgB,kCACnB,OAAO19G,EAAQopH,aACjB,KAAK5rB,EAAAA,GAAgB+f,0BACrB,KAAK/f,EAAAA,GAAgBmgB,yBACnB,OAAO39G,EAAQ6vG,IACjB,KAAKrS,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgB6gB,8BACnB,OAAOr+G,EAAQqpH,SACjB,KAAK7rB,EAAAA,GAAgBugB,4BACrB,KAAKvgB,EAAAA,GAAgB8gB,2BACnB,OAAOt+G,EAAQgpD,MACjB,KAAKw0C,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgBihB,+BACnB,OAAOz+G,EAAQwkG,UACjB,KAAKhH,EAAAA,GAAgB2gB,+BACrB,KAAK3gB,EAAAA,GAAgBkhB,8BACnB,OAAO1+G,EAAQyuH,SACjB,KAAKjxB,EAAAA,GAAgBwgB,iCACrB,KAAKxgB,EAAAA,GAAgB+gB,gCACnB,OAAOv+G,EAAQspH,SACjB,KAAK9rB,EAAAA,GAAgBygB,oCACrB,KAAKzgB,EAAAA,GAAgBghB,mCACnB,OAAOx+G,EAAQwpH,cACjB,KAAKhsB,EAAAA,GAAgBogB,gCACrB,KAAKpgB,EAAAA,GAAgBggB,iCACnB,OAAOx9G,EAAQqkG,WACjB,KAAK7G,EAAAA,GAAgB0H,sBACnB,OAAOllG,EAAQwjG,eAIrB,CAEA,UAAezwI,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUo0H,aACF,CACLrwG,cAAe/jB,EAAO+jB,cACtB2d,SAAU0jH,GAA0BplJ,EAAQo0H,MAJ9Br0H,EAtNsDslJ,EACxEC,cACAC,sBACAC,uBACApxB,SACA9qI,WACAy6B,gBACA2d,WACA+jH,aAAY,EACZl5F,cAEA,MAAM,mBAAEm5F,IAAuBvyJ,EAAAA,EAAAA,MAEzBtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEP27J,GAAmCn7J,EAAAA,EAAAA,KAAQ,KACxC,CACLo7J,cAAc,EACdt4J,KAAM,OACN2D,MAAOlH,EAAK,oBACZ87J,WAAY,OACZC,gBAAgB,EAChBC,YAAa,KAEd,CAACh8J,IAEEi8J,GAAmBx7J,EAAAA,EAAAA,KAAQ,IACxB,CAACm7J,IACP,CAACA,IAEEM,GAAqBz7J,EAAAA,EAAAA,KAAQ,IAC5Bk3C,EAID4jH,EACK,IAAI5jH,EAAS3K,gBAAiB2K,EAAS09G,cAEvC,IAAI19G,EAASzK,gBAAiByK,EAASw9G,cANvC,IAQR,CAACoG,EAAa5jH,IACXwkH,GAAwB17J,EAAAA,EAAAA,KAAQ,IAC/Bk3C,EAGDA,EAASm9G,mBACJ,CAACsG,GAAAA,GAAoB73J,MAED,UAAzBo0C,EAASo9G,aAA2BwG,EAC/B,CAACK,EAAer4J,MAElB,GARE,IASR,CAACo0C,EAAU4jH,EAAaK,KACpBvyH,EAAaC,IAAkB90B,EAAAA,EAAAA,IAAiB,KAChDq2B,EAAeC,IAAoBt2B,EAAAA,EAAAA,KAAkB,IACrDu2B,EAAuBC,IAA4Bx2B,EAAAA,EAAAA,IAAmB0nJ,IACtEE,EAA0BC,IAA+B7nJ,EAAAA,EAAAA,IAA2B2nJ,IAG3F77J,EAAAA,EAAAA,KAAU,KACHf,IACHyrC,EAAyBkxH,GACzBG,EAA4BF,MAE7B,CAAC58J,EAAU48J,EAAuBD,IAErC,MAAM/5B,GAAsBC,EAAAA,GAAAA,IAA8B1E,EAAAA,KACpD2E,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KACzD/4F,GAAe9oC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMitD,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAC9BrB,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAE9By2F,GAAUh5F,EAAAA,GAAAA,IAAO,IAAI04F,GAAuB,MAAOE,GAA4B,KAClF9+F,QAAQx5B,IACP,MAAM0M,EAAOi3C,EAAU3jD,GACjBqrC,EAAOzK,EAAU5gC,GACjB+lC,EAAYsF,IAAQ0b,EAAAA,EAAAA,IAAc1b,GAClC9b,EAAY7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GACxC,QAASilJ,GAAatmH,IACjBrrC,IAAWiwB,GACXjwB,IAAWuyJ,EAAAA,MACVhjI,IAAcwW,KAGlBysH,GAAgB7yH,EAAAA,GAAAA,IAAmB,CAAEC,IAAK84F,EAAS74F,MAAOP,IAGhE,OAAIA,EAAoBkzH,GAEjB9yH,EAAAA,GAAAA,IAAO,IACTyyH,KACAz5B,MAEJ,CAACN,EAAqBE,EAA0B65B,EAAoB7yH,EAAarP,EAAe0hI,IAE7Fc,GAAiCj3J,EAAAA,EAAAA,KAAaqE,IAClDyyJ,EAA4BzyJ,GAC5BkhC,GAAiB,KAChB,IAEGO,GAAiC9lC,EAAAA,EAAAA,KAAaqE,IAClDohC,EAAyBphC,GACzBkhC,GAAiB,KAChB,IAEGQ,GAAe/lC,EAAAA,EAAAA,KAAY,KAC/Bo2J,EAAmB,CACjB9rC,WAAY4nC,GAAcptB,GAC1BkxB,YAAa13J,QAAQ03J,GACrBkB,WAAY1xH,EACZ2xH,iBAAkBN,EAAyBtmI,SAASslI,GAAAA,GAAoB73J,YAAS7C,EACjFq0J,YAAe0G,EACVW,EAAyBtmI,SAAS8lI,EAAer4J,MAAQ,QAAU,WADjC,SAIzCi/D,MACC,CACD+4F,EACAE,EACAW,EACArxH,EACAy3B,EACA6nE,EACAuxB,IAcF,OAXA1qI,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAUR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCe,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTo5F,WARAu4B,EAA4BL,GAC5BM,GAAwBF,EAAoBU,OAAhD,EAQInyH,QAASP,GAAgB,GACzBL,YAAa6B,EACbm4F,mBAAoBk5B,EACpBnyH,YAAaZ,EACba,kBAAiCpqC,EAAdy7J,EAAsB,yBAAoC,yBAC7Ep4B,uBAAuB,mBACvBh5F,cAAc,0BACdC,cAAY,EACZE,oBAAqBe,EACrBg4F,2BAA4Bm5B,EAC5BjyH,eAAgBjB,EAChBkB,eAAa,EACbE,cAAc,WACdL,oBAAkB,EAClBI,YAAU,KAGZ1nC,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASZ,EACThrC,QAASyrC,EACTzxB,UAAyB/Z,EAAdy7J,EAAsB,cAAyB,cAAcv5J,UAExEe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBCjJnB,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAE0mJ,EAAM,UAAE53G,GAAc9uC,EAE9B,MAAO,CACL6uC,mBAAoBC,EAAUD,mBAC9B83G,iBAAkBD,GAAQE,mBANZ7mJ,EA7CqC8mJ,EACvDv9J,WACAulD,qBACA83G,mBACAp6F,cAEA,MAAM,mBAAEu6F,IAAuB3zJ,EAAAA,EAAAA,OAE/B8nB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM/iE,GAAUgB,EAAAA,EAAAA,KAAQ,KACrBqkD,GAAsB,IAAIvhB,QAAQqiE,IAAuBA,EAAkBuI,aACzElsG,KAAK2jG,IAAiB,CACrBj8F,OACE9H,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAAClS,SAAUwxD,EAAkBxxD,SAAU0Q,mBAAoBA,IAC9E8gD,EAAkB1+F,SAGvB0C,MAAOg8F,EAAkBxxD,SAAS4oH,cAErC,CAACl4G,IAEEwlC,GAAe/kF,EAAAA,EAAAA,KAAa6uC,IAChC2oH,EAAmB,CACjB3oH,SAAU,CAAE7wC,KAAM,QAASy5J,SAAU5oH,OAEtC,CAAC2oH,IAEJ,OACEh6J,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,uEAAsEwC,UACnFe,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,0BACL5E,QAASA,EACT2V,SAAUwnJ,EACVznJ,SAAUm1E,EACV2rB,UAAQ,UC/BVrxD,GAAwB,IAAMhoC,EAAAA,EAwIpC,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,KACFg+C,EAAAA,GAAAA,IAAKh+C,EAAO0hC,SAASs+F,MAAO,CAC7B,wBACA,gCAEFgnB,YAAahnJ,EAAOwsE,SAAS0pB,MAAMC,OACnC8pC,kBAAmBjgI,EAAO81E,aAAaogB,MAAMC,OAC7Cd,gBAAiBr1F,EAAOwsE,SAAS4oB,SACjCwxD,gBAAiB5mJ,EAAO0mJ,QAAQE,gBAChC/3G,mBAAoB7uC,EAAO8uC,UAAUD,mBACrCqxF,uBAAuB7pC,EAAAA,EAAAA,KAA4Br2F,MAZrCD,EArHgCknJ,EAClD39J,WACA09J,cACA/mB,oBACA5qC,kBACAuxD,kBACAM,wBACAC,8BACAt4G,qBACAqxF,wBACA3zE,cAEA,MAAM,iBACJwwD,EAAgB,eAChB3lC,EAAc,mBACdu8C,IACExgI,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KAEPu2I,GAAqBtkI,EAAAA,EAAAA,OACnB0sF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASq3C,IAE/EC,GAAwBhxI,EAAAA,EAAAA,KAAao8E,IACzC0L,EAAe,CACblB,eAAgBxK,EAAQwK,mBAEzB,CAACkB,IAEEgwE,GAAqC93J,EAAAA,EAAAA,KAAay1F,IACtDg4B,EAAiB,CAAEoqC,4BAA6BpiE,MAC/C,CAACg4B,IAEEsqC,GAA8B/3J,EAAAA,EAAAA,KAAay1F,IAC/Cg4B,EAAiB,CAAEmqC,sBAAuBniE,MACzC,CAACg4B,IAEEuqC,GAAc98J,EAAAA,EAAAA,KAAQ,IAC1Bw8J,GAAev5G,OAAOsK,QAAOiG,EAAAA,GAAAA,IAAKq3C,EAAiB2xD,KAClD,CAACA,EAAa3xD,IAOjB,OALAp6E,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iCAAgCwC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,mBACZquC,QAAS8uH,EACTnmG,QAASsmG,KAEXz7J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPq3G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBv7C,cAC5DtnF,KAAK,QAAOjF,SAAA,CAEXhC,EAAK,0BACLk2I,IAAqBnzI,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,+BAA8BwC,SAAEk0I,EAAkBt0I,YAEzFi7J,IACCh7J,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAU,0BACVi/G,QAAM,EAEN5+G,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+e,gBAAiB7mJ,SAAA,EAE7Ee,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAClBlS,SAAUyoH,EACVr9J,UAAU,2BACVgE,KAAMohD,GACNE,mBAAoBA,KAEtB/hD,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAEhC,EAAK,6BAInC6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,yCAER+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,sCACZquC,QAAS+uH,EACTpmG,QAASqmG,KAEXt6J,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,+CAGTu9J,IACC17J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACtEhC,EAAK,iCAER+C,EAAAA,GAAAA,GAAA,OAAKmY,IAAKo7H,EAAmBt0I,SAC1Bu7J,EAAYt7J,KAAKm+F,IAChBr9F,EAAAA,GAAAA,GAAC6yI,GAAc,CAEbx1C,WAAYA,EACZE,oBAAqBR,EACrBjgG,QAAS02I,EACT3vH,QAASuvH,GAJJ/1C,EAAW56F,SAQtBzC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,UACrD8B,EAAAA,GAAAA,GAAW9D,EAAK,mBAAoB,CAAC,sBCpGlD,IAAeX,EAAAA,EAAAA,KApCoCm+J,EACjDj+J,WAAUijE,cAEV,MAAM,mBAAEonE,IAAuBxgI,EAAAA,EAAAA,MACzBpJ,GAAOD,EAAAA,EAAAA,KAEP0qB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCsgI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2D,aAQ/C,OALAv8G,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACmmI,GAAAA,EAAY,CACX1lI,KAAMkC,EAAAA,IACNC,OAAQC,GAAAA,EAAeimI,gBACvBrsI,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,4CAIV+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,+BAA8BwC,UAC3Ce,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAAS4qB,EAAYzoB,SAAEhC,EAAK,uD,gBChB5C,MA2EA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MACMwnJ,GADWpnJ,EAAAA,EAAAA,KAAeJ,GACDwnJ,cAE/B,MAAO,CACLC,eAAeC,EAAAA,EAAAA,KAAoB1nJ,EAAQ,MAC3C2nJ,WAAY3nJ,EAAOqlG,cAAcuiD,uBACjCJ,mBAPgBznJ,EAzEsC8nJ,EACxDJ,gBACAE,aACAtjI,YACA64B,QACAmpD,aACA5jD,WACAn5D,WACAijE,UACAi7F,oBAEA,MAAM1gG,GAAW/qD,EAAAA,EAAAA,OACX,SAAEhN,IAAaC,EAAAA,EAAAA,MACf84J,EAAsB/4J,EAAW,IAAM,KAEtC4E,EAAOo0J,IAAYxpJ,EAAAA,EAAAA,IAAiB,KAE3ClU,EAAAA,EAAAA,KAAU,KACHkc,EAAAA,IACHjJ,YAAW,KACTwpD,EAAS5qD,QAASurD,UACjBqgG,KAEJ,CAACA,IAEJ,MAAM/9J,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMy7F,GAAoB14J,EAAAA,EAAAA,KAAamC,IACjCyrD,GAASmpD,GACXA,IAGF,MAAMthB,EAAWtzF,EAAEqN,OAAOnL,MAAMo5C,MAAM,EAAG46G,GAErC5iE,EAASp5F,SAAWg8J,GACtBllG,EAASsiC,GAGXgjE,EAAShjE,GACTtzF,EAAEqN,OAAOnL,MAAQoxF,IAChB,CAACshB,EAAYshD,EAAYzqG,EAAOuF,IAEnC,OACE72D,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACm7J,GAAAA,EAAuB,CAACv8E,QAAS+7E,EAAel6J,KApDvC,IAoDwDhE,UAAU,0BAC3Ei+J,IACC16J,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,sCAAuCy9J,SAKnD57J,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+BAA8BwC,SAAA,EAC3Ce,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOA,EACPsR,IAAK6hD,EACLhB,UAAU,UACVpyD,MAAO3J,EAAK,iBACZmzD,MAAOA,EACPh+C,SAAU8oJ,IAEX3jI,IAAav3B,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,cC7B9B,IAAezwD,EAAAA,EAAAA,KArD4B8+J,EACzC5+J,WAAUijE,cAEV,MAAM,mBAAEonE,IAAuBxgI,EAAAA,EAAAA,MACzBpJ,GAAOD,EAAAA,EAAAA,KAOb,OALAmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAemmI,KACvBC,WAAYC,GACZzoI,KAAM,IACNhE,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,UACrD8B,EAAAA,GAAAA,GAAW9D,EAAK,uBAAwB,CAAC,aAI9C6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,OAELpH,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBoiB,6BAA8BlqJ,SAEzFhC,EAAK,qBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,eAELpH,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqiB,eAAgBnqJ,SAE3EhC,EAAK,sBAER+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,QAELpH,QAASA,IAAM+pI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsiB,oCAAqCpqJ,SAEhGhC,EAAK,+BCyGhB,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAqB,CAACC,GAAUhP,WAC3C,CACLy2J,eAAeC,EAAAA,EAAAA,KAAoB1nJ,EAAiB,UAAThP,EAAmB,KAAO,SAFrD+O,EAnI0CooJ,EAC5DV,gBACAn6J,OAAO,OACP+2B,YACA64B,QACAxD,cACA0uG,gBACA/hD,aACA5jD,WACAn5D,WACAijE,cAEA,MAAMzF,GAAW/qD,EAAAA,EAAAA,OACX,SAAEhN,IAAaC,EAAAA,EAAAA,MAEf84J,EAAsB/4J,EAAW,IAAM,KACtC4E,EAAOo0J,IAAYxpJ,EAAAA,EAAAA,IAAiB,KACpC8pJ,EAAgBC,EAAoBC,IAAwBn+J,EAAAA,EAAAA,IAAQ,IAE3EC,EAAAA,EAAAA,KAAU,KACHkc,EAAAA,IACHjJ,YAAW,KACTwpD,EAAS5qD,QAASurD,UACjBqgG,KAEJ,CAACA,IAEJ,MAAME,GAAoB14J,EAAAA,EAAAA,KAAamC,IACjCyrD,GAASmpD,GACXA,IAGF0hD,EAASt2J,EAAEqN,OAAOnL,SACjB,CAAC0yG,EAAYnpD,IAYVsrG,GAAal5J,EAAAA,EAAAA,KAAY,KAC7BmzD,MACC,CAACA,IAEEgmG,GAAoBn5J,EAAAA,EAAAA,KAAY,KACpCi5J,IACA9lG,MACC,CAACA,EAAU8lG,IAERx+J,GAAOD,EAAAA,EAAAA,KAOb,OALAmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACm7J,GAAAA,EAAuB,CAACv8E,QAAS+7E,EAAel6J,KAlEvC,IAkEwDhE,UAAU,0BAClE,UAAT+D,IACCR,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,+BAKZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+BAA8BwC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,QAAM8I,OAAO,GAAG+tD,SAtCAhxD,IACpBA,EAAEkkB,iBAEGmxC,EAAS5qD,SAIdumD,EAAS9uD,IA+BkC5H,SAAA,EACrCe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAK6hD,EACLnzD,MAAOA,EACPmyD,UAAWx4D,EACXoG,MAAOgmD,EACPwD,MAAOA,EACPh+C,SAAU8oJ,IAGXr0J,GACC7G,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACR,KAAK,SAAS+2B,UAAWA,EAAWrU,QAAM,EAAAjkB,SAAEhC,EAAK,eAEzD+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNq2B,UAAWA,EACXrU,QAAM,EACNpmB,QAASw+J,EAAgBE,EAAqBE,EAAWz8J,SAExDhC,EAAK,sBAIXq+J,IACCx8J,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAU,SACV2G,OAAQm4J,EACRp3J,MAAOlH,EAAK,wBACZ2G,QAAS63J,EAAqBx8J,SAAA,EAE7B8B,EAAAA,GAAAA,GAAW9D,EAAK,4BAA6B,CAAC,KAAM,qBACrD6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,SACNsd,QAAM,EACNhiB,QAAM,EACNzE,UAAU,wBACVK,QAAS6+J,EAAkB18J,SAE1BhC,EAAK,oBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,UACNsd,QAAM,EACNhiB,QAAM,EACNzE,UAAU,wBACVK,QAAS2+J,EAAqBx8J,SAE7BhC,EAAK,4BChHtB,IAAeX,EAAAA,EAAAA,KAhC0Bs/J,EACvCp/J,WAAUijE,UAASzlB,cAEnB,MAAM/8C,GAAOD,EAAAA,EAAAA,KAOb,OALAmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,KAIR3gE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oCAAmCwC,SAAA,EAChDe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAemmI,KACvBC,WAAYC,GACZzoI,KAAM,IACNhE,UAAU,2BAGZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAiCyD,IAAI,OAAMjB,SACrDhC,EAAK,mCAIV+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,+BAA8BwC,UAC3Ce,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAClE,QAASk9C,EAAQ/6C,SAAEhC,EAAK,0CCsWxC,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOqlG,iBADnBtlG,EAtX6B4oJ,EAC/Cp1B,gBACAC,cACA1pE,QACAw7C,OACAjhF,YACA8hF,WACAyhD,yBACAt8B,WACAhiI,WACAijE,cAEA,MAAM,eACJq8F,EAAc,cACdC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,sBACnBC,EAAqB,cACrBC,EAAa,mBACbt1B,IACExgI,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MAEhBO,EAAAA,EAAAA,KAAU,KACJu9J,IACEr0B,IAAkBM,EAAAA,GAAgB+hB,sBACpCjiB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiiB,4BACpCviB,IAAkBM,EAAAA,GAAgBgiB,oBAC3CliB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkiB,4BAGhD,CAACxiB,EAAeq0B,EAAwBj0B,IAE3C,MAAMgD,GAAoBrnI,EAAAA,EAAAA,KAAY,KACpCg8H,EAAS,CAAEh+H,KAAM,UACjBqmI,EAAmB,CAAES,OAAQP,EAAAA,GAAgByhB,qBAC5C,CAAChqB,EAAUqI,IAERkD,GAAoBvnI,EAAAA,EAAAA,KAAaqE,IACrC23H,EAAS,CAAEh+H,KAAM,cAAe29H,QAASt3H,IACzCggI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4hB,4BAC5C,CAACnqB,EAAUqI,IAERoD,GAA2BznI,EAAAA,EAAAA,KAAY,KAC3CqkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6hB,yBAC5C,CAAC/hB,IAEEu1B,GAAwB55J,EAAAA,EAAAA,KAAaqE,IACzC23H,EAAS,CAAEh+H,KAAM,UAAW29H,QAASt3H,IACrCggI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+hB,0BAC5C,CAACtqB,EAAUqI,IAERw1B,GAAyB75J,EAAAA,EAAAA,KAAaqE,IAC1C23H,EAAS,CAAEh+H,KAAM,WAAY29H,QAASt3H,IACtCi1J,EAAe,IACV9+F,EACHihE,MAAOp3H,EACPkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmiB,4BAGhD,CAAC1qB,EAAUxhE,EAAO8+F,EAAgBj1B,IAE/BsD,GAA8B3nI,EAAAA,EAAAA,KAAaqE,IAC/C23H,EAAS,CAAEh+H,KAAM,qBAAsB29H,QAASt3H,IAChDk1J,EAAc,CACZ9iD,gBAAiBpyG,EACjBkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0hB,8BAGhD,CAACsT,EAAev9B,EAAUqI,IAEvB0D,GAA0B/nI,EAAAA,EAAAA,KAAaqE,IAC3C23H,EAAS,CAAEh+H,KAAM,cAAe29H,QAASt3H,IACzCggI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2hB,+BAC5C,CAAClqB,EAAUqI,IAERy1B,GAA8B95J,EAAAA,EAAAA,KAAY,KAC9CqkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8hB,4BAC5C,CAAChiB,IAEE01B,GAA2B/5J,EAAAA,EAAAA,KAAaqE,IAC5C23H,EAAS,CAAEh+H,KAAM,UAAW29H,QAASt3H,IACrCi1J,EAAe,IACV9+F,EACHw7C,KAAM3xG,EACNkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmiB,4BAGhD,CAAC1qB,EAAUxhE,EAAO8+F,EAAgBj1B,IAE/B4D,GAAgBjoI,EAAAA,EAAAA,KAAaqE,IACjCs1J,EAAc,CACZljD,gBAAiBpyG,EACjBkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2D,eAGhD,CAACyxB,EAAet1B,IAEb21B,GAAqCh6J,EAAAA,EAAAA,KAAaqE,IACtD23H,EAAS,CAAEh+H,KAAM,qBAAsB29H,QAASt3H,IAChDk1J,EAAc,CACZ9iD,gBAAiBpyG,EACjBkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgiB,0BAGhD,CAACgT,EAAev9B,EAAUqI,IAEvB41B,GAAsBj6J,EAAAA,EAAAA,KAAaqE,IACvC23H,EAAS,CAAEh+H,KAAM,WAAY29H,QAASt3H,IACtCo1J,EAAoB,IACfj/F,EACHihE,MAAOp3H,EACPkmH,UAAWA,KACT8Z,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmiB,4BAGhD,CAAC1qB,EAAUxhE,EAAOi/F,EAAqBp1B,IAEpC61B,GAAkBl6J,EAAAA,EAAAA,KAAay1D,IACnCikG,EAAsB,CAAEjkG,WACvB,CAACikG,IAEJ,OAAQz1B,GACN,KAAKM,EAAAA,GAAgBuhB,cACnB,OACEtoJ,EAAAA,GAAAA,GAAC47J,GAAkB,CACjB5hH,QAAS6vF,EACTrtI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgByhB,iBAChBzhB,EAAAA,GAAgB4hB,wBAChB5hB,EAAAA,GAAgB6hB,qBAChB7hB,EAAAA,GAAgB+hB,sBAChB/hB,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgByhB,iBACnB,OACExoJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpB/vG,YAAa7vD,EAAQ,uBACrBg7D,YAAah7D,EAAQ,YACrB44D,SAAUo0E,EACVvtI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB4hB,wBAChB5hB,EAAAA,GAAgB6hB,qBAChB7hB,EAAAA,GAAgB+hB,sBAChB/hB,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB4hB,wBACnB,OACE3oJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpBp0B,iBAAkBvrE,EAAMg8C,SACxBpsD,YAAa7vD,EAAQ,yBACrBg7D,YAAah7D,EAAQ,YACrB44D,SAAUs0E,EACVztI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB6hB,qBAChB7hB,EAAAA,GAAgB+hB,sBAChB/hB,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB6hB,qBACnB,OACE5oJ,EAAAA,GAAAA,GAACq7J,GAA0B,CACzBn3J,KAAK,OACL0oD,YAAa7vD,EAAQ,2BACrB44D,SAAUymG,EACV5/J,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB+hB,sBAChB/hB,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB+hB,sBACnB,OACE9oJ,EAAAA,GAAAA,GAACq7J,GAA0B,CACzBn3J,KAAK,QACL1D,KAAK,QACL+2B,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZpvG,YAAa7vD,EAAQ,sBACrBu+J,eAAa,EACb3lG,SAAU0mG,EACV7/J,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBiiB,0BACnB,OACEhpJ,EAAAA,GAAAA,GAAC+6J,GAAsB,CACrBxjI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZrmG,SAAU+mG,EACVlgK,SAAUA,GAAYkqI,IAAgBK,EAAAA,GAAgBmiB,qBACtDzpF,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBmiB,qBACnB,OACElpJ,EAAAA,GAAAA,GAACy6J,GAA4B,CAC3Bj+J,SAAUA,EACVijE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBwhB,aACnB,OACEvoJ,EAAAA,GAAAA,GAACo7J,GAAoB,CACnB5+J,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBoiB,2BAChBpiB,EAAAA,GAAgB0hB,uBAChB1hB,EAAAA,GAAgB2hB,2BAChB3hB,EAAAA,GAAgB8hB,wBAChB9hB,EAAAA,GAAgBqiB,aAChBriB,EAAAA,GAAgBsiB,kCAChBtiB,EAAAA,GAAgBgiB,mBAChBhiB,EAAAA,GAAgBkiB,uBAChBliB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBoiB,2BACnB,OACEnpJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpBplI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZxjD,KAAMA,EACN7iD,SAAUw0E,EACV3tI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB0hB,uBAChB1hB,EAAAA,GAAgB2hB,2BAChB3hB,EAAAA,GAAgB8hB,wBAChB9hB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB0hB,uBACnB,OACEzoJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpB/vG,YAAa7vD,EAAQ,+BACrB44D,SAAU40E,EACV/tI,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB2hB,2BAChB3hB,EAAAA,GAAgB8hB,wBAChB9hB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB2hB,2BACnB,OACE1oJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpBp0B,iBAAkBvrE,EAAMg8C,SACxBpsD,YAAa7vD,EAAQ,yBACrB44D,SAAU2mG,EACV9/J,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgB8hB,wBAChB9hB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgB8hB,wBACnB,OACE7oJ,EAAAA,GAAAA,GAACq7J,GAA0B,CACzB9jI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZ93J,KAAK,OACL0oD,YAAa7vD,EAAQ,2BACrB44D,SAAU4mG,EACV//J,SAAUA,GAAYkqI,IAAgBK,EAAAA,GAAgBmiB,qBACtDzpF,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBqiB,aACnB,OACEppJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpBplI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZxjD,KAAMA,EACN7iD,SAAU80E,EACVjuI,SAAUA,EACVijE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBsiB,kCACnB,OACErpJ,EAAAA,GAAAA,GAAC28J,GAAqB,CACpBplI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZxjD,KAAMA,EACN7iD,SAAU6mG,EACVhgK,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBgiB,mBAChBhiB,EAAAA,GAAgBkiB,uBAChBliB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBgiB,mBACnB,OACE/oJ,EAAAA,GAAAA,GAACq7J,GAA0B,CACzBn3J,KAAK,QACL1D,KAAK,QACLosD,YAAa7vD,EAAQ,sBACrB44D,SAAU8mG,EACVjgK,SAAUA,GAAY,CACpBuqI,EAAAA,GAAgBkiB,uBAChBliB,EAAAA,GAAgBmiB,sBAChBn2H,SAAS2zG,GACXjnE,QAASA,IAIf,KAAKsnE,EAAAA,GAAgBkiB,uBACnB,OACEjpJ,EAAAA,GAAAA,GAAC+6J,GAAsB,CACrBxjI,UAAWA,EACX64B,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCE,WAAYyiD,EACZrmG,SAAU+mG,EACVlgK,SAAUA,GAAYkqI,IAAgBK,EAAAA,GAAgBmiB,qBACtDzpF,QAASA,IAIf,QACE,YCpWAm9F,GAA0Bj8G,OAAO0K,KAAK07E,EAAAA,IAAiBloI,OAAS,EAGhEg+J,GAAiB,CACrB91B,EAAAA,GAAgBuhB,cAChBvhB,EAAAA,GAAgByhB,iBAChBzhB,EAAAA,GAAgB4hB,wBAChB5hB,EAAAA,GAAgB6hB,qBAChB7hB,EAAAA,GAAgB+hB,sBAChB/hB,EAAAA,GAAgBiiB,0BAChBjiB,EAAAA,GAAgBmiB,qBAChBniB,EAAAA,GAAgBwhB,aAChBxhB,EAAAA,GAAgBoiB,2BAChBpiB,EAAAA,GAAgB0hB,uBAChB1hB,EAAAA,GAAgB2hB,2BAChB3hB,EAAAA,GAAgB8hB,wBAChB9hB,EAAAA,GAAgBqiB,aAChBriB,EAAAA,GAAgBsiB,kCAChBtiB,EAAAA,GAAgBgiB,mBAChBhiB,EAAAA,GAAgBkiB,wBAGZ6T,GAAmB,CACvB/1B,EAAAA,GAAgB4D,iBAChB5D,EAAAA,GAAgB8D,iBAGZkyB,GAAkB,CACtBh2B,EAAAA,GAAgBqB,QAChBrB,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBG,8BAChBH,EAAAA,GAAgBI,yBAChBJ,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBM,qBAChBN,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBX,cAGZ42B,GAAkB,CACtBj2B,EAAAA,GAAgBshB,oBAChBthB,EAAAA,GAAgBqhB,gBAGZ6U,GAA+B,CACnCl2B,EAAAA,GAAgBqgB,kCAChBrgB,EAAAA,GAAgB4gB,kCAGZuV,GAAkC,CACtCn2B,EAAAA,GAAgB6f,+BAChB7f,EAAAA,GAAgBigB,+BAGZmW,GAAgC,CACpCp2B,EAAAA,GAAgB8f,mCAChB9f,EAAAA,GAAgBkgB,mCAGZmW,GAAsB,CAC1Br2B,EAAAA,GAAgB+f,0BAChB/f,EAAAA,GAAgBmgB,0BAGZmW,GAA2B,CAC/Bt2B,EAAAA,GAAgBsgB,+BAChBtgB,EAAAA,GAAgB6gB,+BAGZ0V,GAAwB,CAC5Bv2B,EAAAA,GAAgBugB,4BAChBvgB,EAAAA,GAAgB8gB,4BAGZ0V,GAA6B,CACjCx2B,EAAAA,GAAgB0gB,gCAChB1gB,EAAAA,GAAgBihB,gCAGZwV,GAA4B,CAChCz2B,EAAAA,GAAgB2gB,+BAChB3gB,EAAAA,GAAgBkhB,+BAGZwV,GAA6B,CACjC12B,EAAAA,GAAgBwgB,iCAChBxgB,EAAAA,GAAgB+gB,iCAGZ4V,GAAiC,CACrC32B,EAAAA,GAAgBygB,oCAChBzgB,EAAAA,GAAgBghB,oCAGZ4V,GAA8B,CAClC52B,EAAAA,GAAgBggB,iCAChBhgB,EAAAA,GAAgBogB,iCAGZyW,GAA2B,CAC/B72B,EAAAA,GAAgB0H,uBA2XlB,IAAenyI,EAAAA,EAAAA,KA/WgBuhK,EAC7BrhK,WACAiqI,gBACAq3B,eACAC,kBACAt+F,UACAu+F,2BAEA,MAAM,0BAAEC,EAAyB,mBAAEp3B,IAAuBxgI,EAAAA,EAAAA,MAEpDqmB,GAAezd,EAAAA,EAAAA,OAEdivJ,EAAYC,I/D3GZC,EAAAA,GAAAA,GAAWlgC,GAAcF,K+D4GzBqgC,EAAiBC,IAAsB7sJ,EAAAA,EAAAA,IAAiB,KAE/D8sJ,EAAAA,GAAAA,GAAgB,CACd7xI,eACAsI,SAAU,qBACT,CAACyxG,IAEJ,MAAMK,GAAcvgI,EAAAA,EAAAA,IAAiBi4J,IACnC,MAAMC,GAAiBnrJ,EAAAA,EAAAA,MAAe09B,EAAAA,EAAAA,OAAaq0F,mBAAmBo5B,eAElEh4B,IAAkBM,EAAAA,GAAgBX,cACpC63B,KAG4B,IAA1BO,QAAsD7gK,IAAnB8gK,IAAiCA,EACtEh/F,GAAQ,IAKRgnE,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErC32H,YAAW,KACTutJ,EAAgB,CAAEv9J,KAAM,YAvJJ,KA4JtBimI,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvC5nE,IAR4B,WAAtBq+F,EAAav/B,KACfsI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,wBAQnD,SAASy3B,EAA4BC,EAAyBC,GAC5D,MAAMC,EAA+C,CACnD,CAAC93B,EAAAA,GAAgBof,oBAAqB8W,GAA6BlqI,SAAS6rI,GAC5E,CAAC73B,EAAAA,GAAgBqf,iBAAkB8W,GAAgCnqI,SAAS6rI,GAC5E,CAAC73B,EAAAA,GAAgBsf,qBAAsB8W,GAA8BpqI,SAAS6rI,GAC9E,CAAC73B,EAAAA,GAAgBuf,YAAa8W,GAAoBrqI,SAAS6rI,GAC3D,CAAC73B,EAAAA,GAAgBwf,iBAAkB8W,GAAyBtqI,SAAS6rI,GACrE,CAAC73B,EAAAA,GAAgByf,cAAe8W,GAAsBvqI,SAAS6rI,GAC/D,CAAC73B,EAAAA,GAAgBiH,kBAAmBuvB,GAA2BxqI,SAAS6rI,GACxE,CAAC73B,EAAAA,GAAgB4tB,iBAAkB6I,GAA0BzqI,SAAS6rI,GACtE,CAAC73B,EAAAA,GAAgB0f,mBAAoBgX,GAA2B1qI,SAAS6rI,GACzE,CAAC73B,EAAAA,GAAgB2f,sBAAuBgX,GAA+B3qI,SAAS6rI,GAChF,CAAC73B,EAAAA,GAAgB8G,mBAAoB8vB,GAA4B5qI,SAAS6rI,GAC1E,CAAC73B,EAAAA,GAAgB4f,iBAAkBiX,GAAyB7qI,SAAS6rI,IAGjEE,EAAgBjC,GAAe9pI,SAAS6rI,GACxCG,EAAmBjC,GAAiB/pI,SAAS6rI,GAC7CI,EAAkBjC,GAAgBhqI,SAAS6rI,GAC3CK,EAAkBjC,GAAgBjqI,SAAS6rI,IAC5CE,GACAC,GACAp+G,OAAO0K,KAAKwzG,GAAqB3/J,IAAIupB,QAAQsK,SAAS6rI,IACtDj+G,OAAOsK,OAAO4zG,GAAqB9rI,UAAS,GAEjD,OAAQ0zG,GACN,KAAKM,EAAAA,GAAgBm4B,KACnB,OACEl/J,EAAAA,GAAAA,GAAC+qJ,GAAY,CAACvuJ,SAAUA,EAAUijE,QAASqnE,IAE/C,KAAKC,EAAAA,GAAgB6e,YACnB,OACE5lJ,EAAAA,GAAAA,GAACq5I,GAAmB,CAClB78I,SAAUA,GAAYmiK,EACtBl/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgB8e,QACnB,OACE7lJ,EAAAA,GAAAA,GAACw9I,GAAe,CACdhhJ,SAAUmiK,GACLC,IAAiB73B,EAAAA,GAAgB2Z,4BACjCke,IAAiB73B,EAAAA,GAAgB6X,uBACjCggB,IAAiB73B,EAAAA,GAAgB+e,eACjC8Y,IAAiB73B,EAAAA,GAAgBv7C,aACjCyzE,GAAmBD,EACxBv/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgB+e,cACnB,OACE9lJ,EAAAA,GAAAA,GAAC+5J,GAAqB,CAACv9J,SAAUmiK,EAAgBl/F,QAASqnE,IAE9D,KAAKC,EAAAA,GAAgBv7C,YACnB,OACExrF,EAAAA,GAAAA,GAACqzI,GAAmB,CAAC72I,SAAUmiK,EAAgBl/F,QAASqnE,IAE5D,KAAKC,EAAAA,GAAgB51E,cACnB,OACEnxD,EAAAA,GAAAA,GAACssJ,GAAqB,CAAC9vJ,SAAUmiK,EAAgBl/F,QAASqnE,IAE9D,KAAKC,EAAAA,GAAgBgf,YACnB,OACE/lJ,EAAAA,GAAAA,GAAC2zI,GAAmB,CAACn3I,SAAUmiK,EAAgBl/F,QAASqnE,IAE5D,KAAKC,EAAAA,GAAgB2D,QACnB,OACE1qI,EAAAA,GAAAA,GAACgxJ,GAAe,CACdx0J,SAAUmiK,GAAkBM,EAC5Bx/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBif,SACnB,OACEhmJ,EAAAA,GAAAA,GAACypJ,GAAgB,CACfjtJ,SAAUmiK,GAAkBC,IAAiB73B,EAAAA,GAAgBkf,eAC7DxmF,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBkf,eACnB,OACEjmJ,EAAAA,GAAAA,GAACs1I,GAAsB,CAAC94I,SAAUmiK,EAAgBl/F,QAASqnE,IAE/D,KAAKC,EAAAA,GAAgBmf,SACnB,OACElmJ,EAAAA,GAAAA,GAACm6J,GAAgB,CAAC39J,SAAUmiK,EAAgBl/F,QAASqnE,IAEzD,KAAKC,EAAAA,GAAgBiW,aACnB,OACEh9I,EAAAA,GAAAA,GAACy7I,GAAoB,CAACj/I,SAAUmiK,EAAgBl/F,QAASqnE,IAE7D,KAAKC,EAAAA,GAAgB6X,sBACnB,OACE5+I,EAAAA,GAAAA,GAAC+/I,GAAyB,CACxBvjJ,SAAUmiK,GAAkBC,IAAiB73B,EAAAA,GAAgB2Z,2BAC7DjhF,QAASqnE,IAGf,KAAKC,EAAAA,GAAgB2Z,2BACnB,OACE1gJ,EAAAA,GAAAA,GAACm/J,GAA8B,CAC7B3iK,SAAUmiK,EACVl/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBohB,eACnB,OACEnoJ,EAAAA,GAAAA,GAACwwI,GAAsB,CACrBh0I,SAAUmiK,EACVl/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBqhB,eACnB,OACEpoJ,EAAAA,GAAAA,GAACqyI,GAAsB,CACrB71I,SAAUmiK,EACVl/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBshB,oBACnB,OACEroJ,EAAAA,GAAAA,GAACg0J,GAA2B,CAC1Bx3J,SAAUmiK,EACVl/F,QAASqnE,IAGf,KAAKC,EAAAA,GAAgBof,mBACrB,KAAKpf,EAAAA,GAAgBqf,gBACrB,KAAKrf,EAAAA,GAAgBsf,oBACrB,KAAKtf,EAAAA,GAAgBuf,WACrB,KAAKvf,EAAAA,GAAgBwf,gBACrB,KAAKxf,EAAAA,GAAgByf,aACrB,KAAKzf,EAAAA,GAAgBiH,iBACrB,KAAKjH,EAAAA,GAAgB0f,kBACrB,KAAK1f,EAAAA,GAAgB2f,qBACrB,KAAK3f,EAAAA,GAAgB8G,kBACnB,OACE7tI,EAAAA,GAAAA,GAACi4J,GAAyB,CACxB3wB,OAAQb,EACRjqI,SAAUmiK,GAAkBE,EAAoBp4B,GAChDhnE,QAASqnE,IAIf,KAAKC,EAAAA,GAAgBqgB,kCACrB,KAAKrgB,EAAAA,GAAgB6f,+BACrB,KAAK7f,EAAAA,GAAgB8f,mCACrB,KAAK9f,EAAAA,GAAgB+f,0BACrB,KAAK/f,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgBugB,4BACrB,KAAKvgB,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgB2gB,+BACrB,KAAK3gB,EAAAA,GAAgBwgB,iCACrB,KAAKxgB,EAAAA,GAAgBygB,oCACrB,KAAKzgB,EAAAA,GAAgBggB,iCACrB,KAAKhgB,EAAAA,GAAgB0H,sBACnB,OACEzuI,EAAAA,GAAAA,GAACu4J,GAAsC,CACrCC,aAAW,EACXG,UAAWlyB,IAAkBM,EAAAA,GAAgB0H,sBAC7CgqB,oBAAqBhyB,IAAkBM,EAAAA,GAAgBggB,iCACvD2R,qBAAsBjyB,IAAkBM,EAAAA,GAAgBugB,4BACxDhgB,OAAQb,EACRjqI,SAAUmiK,GAAkBE,EAAoBp4B,GAChDhnE,QAASqnE,IAIf,KAAKC,EAAAA,GAAgB4gB,iCACrB,KAAK5gB,EAAAA,GAAgBigB,8BACrB,KAAKjgB,EAAAA,GAAgBkgB,kCACrB,KAAKlgB,EAAAA,GAAgBmgB,yBACrB,KAAKngB,EAAAA,GAAgB6gB,8BACrB,KAAK7gB,EAAAA,GAAgB8gB,2BACrB,KAAK9gB,EAAAA,GAAgBihB,+BACrB,KAAKjhB,EAAAA,GAAgBkhB,8BACrB,KAAKlhB,EAAAA,GAAgB+gB,gCACrB,KAAK/gB,EAAAA,GAAgBghB,mCACrB,KAAKhhB,EAAAA,GAAgBogB,gCACnB,OACEnnJ,EAAAA,GAAAA,GAACu4J,GAAsC,CACrCjxB,OAAQb,EACRjqI,SAAUmiK,EACVl/F,QAASqnE,IAIf,KAAKC,EAAAA,GAAgB4f,gBACnB,OACE3mJ,EAAAA,GAAAA,GAAC2mJ,GAAe,CACdnqJ,SAAUmiK,EACVl/F,QAASqnE,IAIf,KAAKC,EAAAA,GAAgBqB,QACrB,KAAKrB,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACrB,KAAKJ,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACrB,KAAKjB,EAAAA,GAAgBX,aACnB,OACEpmI,EAAAA,GAAAA,GAACwmI,GAAe,CACdC,cAAeA,EACfC,YAAak4B,EACb5hG,MAAO8gG,EACPt/B,SAAUu/B,EACVvhK,SAAUmiK,EACVl/F,QAASqnE,IAIf,KAAKC,EAAAA,GAAgBuhB,cACrB,KAAKvhB,EAAAA,GAAgByhB,iBACrB,KAAKzhB,EAAAA,GAAgB4hB,wBACrB,KAAK5hB,EAAAA,GAAgB6hB,qBACrB,KAAK7hB,EAAAA,GAAgB+hB,sBACrB,KAAK/hB,EAAAA,GAAgBiiB,0BACrB,KAAKjiB,EAAAA,GAAgBmiB,qBACrB,KAAKniB,EAAAA,GAAgBwhB,aACrB,KAAKxhB,EAAAA,GAAgBoiB,2BACrB,KAAKpiB,EAAAA,GAAgB0hB,uBACrB,KAAK1hB,EAAAA,GAAgB2hB,2BACrB,KAAK3hB,EAAAA,GAAgB8hB,wBACrB,KAAK9hB,EAAAA,GAAgBqiB,aACrB,KAAKriB,EAAAA,GAAgBsiB,kCACrB,KAAKtiB,EAAAA,GAAgBgiB,mBACrB,KAAKhiB,EAAAA,GAAgBkiB,uBACnB,OACEjpJ,EAAAA,GAAAA,GAAC67J,GAAa,CACZp1B,cAAeA,EACfzpE,MAAOkhG,EACP1/B,SAAU2/B,EACVz3B,YAAak4B,EACbpiK,SAAUmiK,EACVl/F,QAASqnE,IAIf,KAAKC,EAAAA,GAAgB4D,iBACrB,KAAK5D,EAAAA,GAAgB+C,oBACrB,KAAK/C,EAAAA,GAAgBiD,2BACrB,KAAKjD,EAAAA,GAAgBoC,8BACrB,KAAKpC,EAAAA,GAAgBuD,0BACrB,KAAKvD,EAAAA,GAAgByD,8BACrB,KAAKzD,EAAAA,GAAgBmD,wBACrB,KAAKnD,EAAAA,GAAgB8D,gBACrB,KAAK9D,EAAAA,GAAgBqC,gBACnB,OACEppI,EAAAA,GAAAA,GAACupI,GAAgB,CACf9C,cAAeA,EACf6C,SAAU+0B,EACV70B,cAAe80B,EACf53B,YAAak4B,EACbpiK,SAAUmiK,EACVl/F,QAASqnE,IAIf,KAAKC,EAAAA,GAAgBmhB,YACnB,OACEloJ,EAAAA,GAAAA,GAACo/J,GAAmB,CAClB5iK,SAAUmiK,EACVl/F,QAASqnE,IAIf,QACE,OAEN,CAoBA,OACE9mI,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACT3nB,IAAKuU,EACLjqB,GAAG,WACHnB,KAAM08J,EAAuB,OAASqB,EAAAA,GACtCt/H,UAAW0mG,EACX1I,YAAa6+B,GACb0C,YAAU,EACVC,kBAAgB,EAAAtgK,SA1BpB,SACE0/J,EACAa,EACAC,EACA1/H,GAEA,OACEjhC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC8kJ,GAAc,CACbre,cAAeA,EACfhnE,QAASqnE,EACTie,eAAgB+Y,EAAazhF,WAE9BqiF,EAA4BC,EAAgB5+H,KAGnD,OC7YF,IAAezjC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAQs1B,QAAS/B,GAAevzB,EAAO81B,aAAe,CAAC,GAC/CC,KAAMrB,EAAW+pD,aAAc+tE,GAAqBxsJ,EAAOxT,MAEnE,MAAO,CACLkoC,YACA83H,mBACAj5H,gBARcxzB,EA3E2B0sJ,EAC7CnjK,WACAgkC,SACAoH,YACA83H,mBACAj5H,aACAg5B,cAEA,MAAM,SACJr5D,EAAQ,qBACRw5J,IACEv5J,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACP,SAAEiF,IAAaC,EAAAA,EAAAA,OAErBisB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAM/3C,GAAcllB,EAAAA,EAAAA,KAAaC,IAC/B2D,EAAS,CAAE3D,KAAIqzH,sBAAsB,MACpC,CAAC1vH,IAEEgnD,GAAU1vD,EAAAA,EAAAA,KAAQ,KACtB,IAAK+oC,EACH,OAGF,MAAMs0F,GAAcp0F,EAAAA,GAAAA,IAAmB,CAAEC,IAAKH,EAAYI,MAAOrG,EAAQhgC,KAAM,SAE/E,OAAOqxF,EAAAA,EAAAA,IAAYkpC,EAAanzF,EAAW83H,KAC1C,CAACj5H,EAAYjG,EAAQoH,EAAW83H,KAE5B/1G,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBlsD,EAAWyvD,EAAStsD,QAAQ0/B,IAE7E,OACE1hC,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CAACC,MAAO6C,EAAa5C,WAAY6C,EAASntD,UAAU,0BAAyBwC,SAAA,CACzF0qD,GAAa9qD,OACZ8qD,EAAYzqD,KAAKuD,IACfzC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,wCACVK,QAASA,IAAM4qB,EAAYjlB,GAAIxD,UAE/Be,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQj+B,EACRwE,eAAa,EACbqnH,WAAW,QACXrxE,WAAS,EACTq4E,kBAAmB10F,EAAAA,GAAkBI,SACrC9d,QAASjhB,KAVNQ,KAcPknD,IAAgBA,EAAY9qD,QAC9BmB,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,aAA8ByD,IAAI,OAAMjB,SAClDuhC,EAAO3hC,OAAS,mCAAqC,0BAD1B,eAI9BmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GAAK,YAEf/sD,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CAEnBC,SAAO,EACP5rC,QAAS8iK,EACT9oJ,UAAW7Z,EAAK,oBAAoBgC,UAEpCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,qBALP,6BCkCZ,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAQs1B,QAASyqH,GAAoB//I,EAAO81B,aAAe,CAAC,GAG1DnC,MAAOP,EAAW,eAClBm4B,EAAc,cACdw6D,EAAa,aACbC,IACE5lH,EAAAA,EAAAA,KAAeJ,GAAQqrD,cACnBvf,QAASm6E,GAAkBF,GAAiB,CAAC,GAC7Cj6E,QAAS87E,GAAiB5B,GAAgB,CAAC,EAEnD,MAAO,CACL+5B,kBACA3sH,cACAu5H,YAAaphG,GAAgB7T,MAC7BuuE,gBACA2B,kBAlBc7nH,EAjG4B6sJ,EAC9CvpI,YACA/5B,WACA60F,oBACA4hE,kBACA3sH,cACAu5H,cACA/kC,eACA3B,gBACA4mC,4BACAC,aACAvgG,cAEA,MAAM,qBACJwgG,IACE55J,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMwuB,GAAqBzrF,EAAAA,EAAAA,KAAaqkC,IACtCo5H,EAAqB,CAAEp5H,YACtB,IAEGL,GAAe9oC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkqC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAC9Bi3H,EAAkBjN,GACpBtsH,EAAAA,GAAAA,IAAmB,CAAEC,IAAKqsH,EAAiBpsH,MAAOP,EAAa9lC,KAAM,SAAY,GAErF,OAAO2tD,EAAAA,GAAAA,IACLznB,EAAAA,GAAAA,IAAO,IACFw5H,KACCplC,GAAgB,MAChB3B,GAAiB,KACpB34F,QAAQgzH,IACT,MAAMnhH,EAAOzK,EAAU4rH,GAEvB,OAAOnhH,IAASA,EAAKwZ,SAAWxZ,EAAK8tH,uBAAwBnuE,EAAAA,EAAAA,IAAU3/C,QAEzE,EACAg/C,KAED,CAAC4hE,EAAiB3sH,EAAaw0F,EAAc3B,EAAe9nC,IAEzD+uE,GAAiB59J,EAAAA,EAAAA,KAAY,KACjCy9J,EAAqB,CAAEp5H,MAAO,KAC9Bm5H,MACC,CAACA,IAEJ,OACElhK,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACN9I,QAAS2iE,EACT3oD,UAAU,sBAAqB7X,UAE/Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAEbtB,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,yBAEZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCe,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTC,QAASP,EACTL,YAAakrD,EACbnqD,YAAaZ,EACba,kBAAmBlqC,EAAK,iBACxBmqC,cAAc,0BACd7P,UAAWsoI,EACXx4H,cAAY,EACZI,eAAa,EACbC,YAAU,EACVC,cAAc,WACdL,oBAAkB,EAClBC,oBAAqBw4H,EACrBv4H,eAAgBymD,KAGlBjuF,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,SAAO,EACP5rC,QAASsjK,EACTtpJ,UAAWyf,EAAY,2BAA6B,yBAAyBt3B,UAE7Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,4BCkGrB,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACE4E,SAAUuoJ,EACVjwG,MAAOkwG,IACLhtJ,EAAAA,EAAAA,KAAeJ,GAAQqtJ,cAAgB,CAAC,EAE5C,MAAO,CACLF,mBACAC,gBACAE,aAActtJ,EAAO0mJ,QAAQ4G,gBAVfvtJ,EAvL4BwtJ,EAC9ClqI,YACA/5B,WACAk1F,YACA8uE,eACAH,mBACAC,gBACA7gG,cAEA,MAAM,gBACJihG,EAAe,cACfC,IACEt6J,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAOt7D,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAAS,KAC5B4kG,EAAOwqD,IAAYpvJ,EAAAA,EAAAA,IAAS,KAC5B3J,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnB2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,MAEpBqvJ,EAAsB,4BACtBC,EAAyB,+BAGzBxpI,EAAY8oI,IAAqBW,EAAAA,GAAqB5mB,YAE5D78I,EAAAA,EAAAA,KAAU,KACR,GAAIg5B,EACF,OAEF,IAAKm7D,EAAU7yF,QAAU6yF,EAAU7yF,OAtCI,EAwCrC,YADA+hK,EAAS,IAGX,MAAM1tJ,GAAS89B,EAAAA,EAAAA,MACTpJ,EAAY10B,EAAOxT,MAAMupC,KACzBg4H,EAAmB,CAAC/tJ,EAAO+jB,iBAAmBy6D,GACjDxyF,KAAKwhC,IAAW2uB,EAAAA,EAAAA,IAAuBznB,EAAUlH,MACjDF,OAAO1/B,SACJogK,EAAoBD,EAAiBhhH,MAAM,GAAI,GAAGn2B,KAAK,MACzD7sB,EAAK,uCACLgkK,EAAiBA,EAAiBpiK,OAAS,GAC/C+hK,EAASM,KACR,CAAC3qI,EAAWm7D,EAAWz0F,IAE1B,MAAMkkK,GAAoB3+J,EAAAA,EAAAA,KAAamC,IACrC,MAAM,MAAEkC,GAAUlC,EAAEkjB,cACdowE,EAAWpxF,EAAMwxD,QAAQ,OAAQ,IAEvCuoG,EAAS3oE,GAELA,IAAapxF,IACflC,EAAEkjB,cAAchhB,MAAQoxF,KAEzB,IAEGlmF,GAA0BvP,EAAAA,EAAAA,KAAamC,IAC3Ck8J,EAASl8J,EAAEkjB,cAAchhB,SACxB,IAEGu6J,GAAoB5+J,EAAAA,EAAAA,KAAY,KAC/B2B,EAAMtF,OAKP2hK,GAAgB9uE,EAAU7yF,QAAU2hK,EACtC3mB,EA7C0B,oDAiD5B6mB,EAAgB,CACdv8J,QACA2D,QACA4pF,cAZAmoD,EAASinB,KAcV,CAAC38J,EAAOutF,EAAW8uE,EAAcE,EAAiB54J,IAE/Cu5J,GAAsB7+J,EAAAA,EAAAA,KAAY,KACjC2B,EAAMtF,OAKX8hK,EAAc,CACZx8J,QACAkyG,QACAvuG,QACA4pF,YACAn7D,WAAW,IATXsjH,EAASknB,KAWV,CAAC58J,EAAOw8J,EAAetqD,EAAOvuG,EAAO4pF,EAAWqvE,KAEnDxjK,EAAAA,EAAAA,KAAU,KACJ8iK,IAAqBW,EAAAA,GAAqBxmB,UAC5C/6E,GAAQ,KAET,CAAC4gG,EAAkB5gG,IAEtB,MAAM6hG,EAAiBhB,GAAiBrjK,EAAKqjK,KAC3ClwG,IAAU0wG,GAAuB1wG,IAAU2wG,EACvC3wG,OACAzyD,GAGN,OACEmB,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cAEN9I,QAASA,IAAM2iE,IACf3oD,UAAU,6BAA4B7X,UAEtCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAEbtB,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAKs5B,EAAY,aAAe,kBAEvCz3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCe,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACb5oI,SAAU0nI,EACV31I,MAAOlH,EAAK,eAEd+C,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAO1C,EACPiO,SAAU+uJ,EACVv6J,MAAO3J,EAAKs5B,EAAY,mBAAqB,aAC7C65B,MAAOA,IAAU0wG,GAAuB1wG,IAAU2wG,EAAyB3wG,OAAQzyD,IAEpF44B,IACCz3B,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAOwvG,EACPjkG,SAAUL,EACVnL,MAAO3J,EAAK,qCAEd+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,OAAMwC,SAAEhC,EAAK,wBAI7BqkK,IACCthK,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,QAAOwC,SAAEqiK,IAGvB5vE,EAAU7yF,OAAS,IAClBC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAsBwC,SAAEhC,EAAK,6BAA8By0F,EAAU7yF,OAAQ,QAE3FmB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kCAAiCwC,SAC7CyyF,EAAUxyF,KAAKuD,IACdzC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAAC8gC,UAAQ,EAAC1oC,UAAU,sBAAqBwC,UAChDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CAACnjB,OAAQj+B,iBAQrCzC,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBvkC,EAAMtF,OACf/B,QAASy5B,EAAY8qI,EAAsBD,EAC3Cv7J,SAAU0xB,EACVzgB,UAAWyf,EAAYt5B,EAAK,8BAAgC,eAAegC,SAE1Es4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,yBCjMfigK,GAAe5gH,OAAO0K,KAAKm2G,EAAAA,IAAmB3iK,OAAS,EAiE7D,IAAevC,EAAAA,EAAAA,KA/DemlK,EAC5BjlK,WACA+5B,aAAY,EACZlf,UACAooD,cAEA,MAAM,sBAAEiiG,EAAqB,qBAAEzB,IAAyB55J,EAAAA,EAAAA,OACjDs7J,EAAkBC,IAAuBnwJ,EAAAA,EAAAA,IAAmB,IAE7D2uJ,GAAiB59J,EAAAA,EAAAA,KAAY,KACjCk/J,EAAsB,CACpBG,WAAYtrI,EAAYirI,EAAAA,GAAkBM,gBAAkBN,EAAAA,GAAkBO,kBAE/E,CAACxrI,IAEEyrI,GAAiCz7J,EAAAA,EAAAA,IAAiBqgC,IACtD,MAAMq7H,EAAcr7H,EAAI/nC,OAAS8iK,EAAiB9iK,OAElD+iK,EAAoBh7H,GAChBq7H,GACFhC,EAAqB,CAAEp5H,MAAO,QAIlC,OACE7mC,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTr9B,GAAG,UACHnB,KAAM+9J,EAAAA,GACNthC,YAAawjC,GACbxhI,UAAW1oB,EAAQpY,SAEjBijK,IACA,OAAQ7qJ,GACN,KAAKmqJ,EAAAA,GAAkBW,gBACvB,KAAKX,EAAAA,GAAkBY,cACrB,OACEpiK,EAAAA,GAAAA,GAAC8/J,GAAY,CACXvpI,UAAWA,EACX/5B,SAAUA,EACV60F,kBAAmBswE,EACnB5B,0BAA2BiC,EAC3BhC,WAAYI,EACZ3gG,QAASA,IAGf,KAAK+hG,EAAAA,GAAkBM,gBACvB,KAAKN,EAAAA,GAAkBO,cACrB,OACE/hK,EAAAA,GAAAA,GAACygK,GAAY,CACXlqI,UAAWA,EACX/5B,SAAU0lK,GAAgB1lK,EAC1Bk1F,UAAWiwE,EACXliG,QAASA,IAGf,QACE,c,wFC1CZ,MA+GA,IAAenjE,EAAAA,EAAAA,KA/GqB+lK,EAClC7lK,WACA8lK,mBACAC,kBACAC,qBACA/iG,UACAgjG,gBACA1E,sBAEA,MAAM,sBAAE2E,IAA0Br8J,EAAAA,EAAAA,MAC5BpJ,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQqxC,IAGV,MAAMkjG,GAA8Bp8J,EAAAA,EAAAA,IAAgB,KAClDm8J,EAAsB,CAAEnpJ,UAAU,QAG9B,uCACJqpJ,EAAsC,gCACtCC,IACEC,EAAAA,GAAAA,GAAsCR,IAGxCr7I,aAAc87I,EACd57I,qBAAsB67I,IACpB37I,EAAAA,GAAAA,IAA6Bi7I,OAAkB3kK,OAAWA,GAAW,IAEnE,uBACJslK,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBf,GAClBgB,EAAsBhB,GAAoBc,GAG9Cn8I,aAAcs8I,EACdp8I,qBAAsBq8I,EACtB7oE,UAAW8oE,IACTp8I,EAAAA,GAAAA,GACFm7I,OAAoB7kK,OAAWA,EAAW,IAAI,EAAOsuB,GAAAA,GAAqB6O,EAAAA,KAG5E,OACEh8B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAe,eAAgBwkK,GAA2B,sBAAsBtkK,SAAA,CAC7FhC,EAAKkD,QAASH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,wBAC9BuD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cACN9I,QAAS2iE,EACT3oD,UAAU,sBACVra,WAAWsC,EAAAA,GAAAA,GACT9B,EAAKkD,OAAS,MACdmjK,GAAuBrmK,EAAKkD,OAAS,gBACrCyiK,EAAuCxzJ,SAAWnS,EAAKkD,OAAS,sBAElE6gD,gBAAiB6hH,EAAgC5jK,UAEjDe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAEZyhK,IAAqB/iK,EAAAA,GAAAA,GAAA,MAAIvD,UAAWumK,EAAgB/jK,SAAEhC,EAAK,oBAC5D+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,wBAAuBwC,UACpCe,EAAAA,GAAAA,GAAC0jK,GAAAA,EAAY,CAACC,SAAO,EAAC38D,YAAU,MAEjCu7D,EAAgBhpJ,WACfvZ,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXhb,UAAU,2BACVkb,UAAU,QACVqpC,gBAAiB/jD,EAAKkD,MAAQ0iK,OAAkCllK,EAAUsB,UAE1Ee,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,oBAAoBpH,QAAS6lK,EAA4B1jK,SACrEhC,EAAK,uCAKd6B,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,oBACAwkK,GAA2B,oBAC3BC,GACAvkK,SAAA,CAEDskK,IACCvjK,EAAAA,GAAAA,GAAC6gC,GAAAA,EAAW,CAACmmE,YAAU,EAACvqG,UAAU,qBAAqBk+F,UAAW8oE,KAEpEzjK,EAAAA,GAAAA,GAACghC,GAAAA,EAAQ,CACP4iI,WAAW,WACXpnK,SAAUA,EACV8lK,iBAAkBgB,EAClBO,YAAU,EACV9F,gBAAiBA,EACjBwE,gBAAiBA,OAGpBU,IACCjjK,EAAAA,GAAAA,GAAC8jK,GAAAA,EAAU,CACT1gK,OAAQk/J,EACRG,cAAeA,EACfsB,qBAAsBZ,EACtB9xJ,oBAAqB6xJ,UCzB/B,IAAe5mK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAQ+1B,KAAMo6F,EAAajvF,WAAY4vH,GAAqB9wJ,EAAO+gH,YAEnE,MAAO,CACLoP,cACA2gC,sBANc/wJ,EAtF+BwiH,EACjDryH,SACA4D,SACAq8H,cACA2gC,mBACApgK,UACAyN,0BAEA,MAAM,gBAAE4yJ,IAAoB59J,EAAAA,EAAAA,MAEtBpJ,GAAOD,EAAAA,EAAAA,KAEPknK,GAA2BxmK,EAAAA,EAAAA,KAAQ,IAClC2lI,EAIE1iF,OAAO0K,KAAKg4E,GAAaxlI,QAAO,CAACK,EAAQm+E,KAC9C,MAAM,gBAAEwjD,EAAe,cAAE8F,GAAkBtC,EAAY56G,OAAO4zD,IAK9D,OAJIwjD,EAAgB9sG,SAAS/rB,IAAW2+H,GAAe5yG,SAAS/rB,KAC9D9I,EAAOM,KAAK69E,GAGPn+E,IACN,IAVM,IAWR,CAAC8I,EAAQq8H,KAEL8gC,EAAmBC,IAAwB3yJ,EAAAA,EAAAA,IAAmByyJ,GAE/DzuD,GAAU/3G,EAAAA,EAAAA,KAAQ,IACfsmK,GAAkBxjI,QAAQ67C,GAAaA,IAAas+C,EAAAA,MACxDz7H,KAAKm9E,IACJ,MAAMR,EAASwnD,EAAcA,EAAYhnD,QAAY1+E,EAMrD,MAAO,CACLiJ,MANYi1E,GAASpuC,EAAAA,GAAAA,IAAuB,CAC5Cz0B,KAAM6iE,EAAO13E,MAAM6U,KACnBkzE,SAAUrQ,EAAO13E,MAAM+nF,SACvB4nB,sBAAuBj4B,EAAOk4B,oBAC3B,GAGHltG,MAAOg6C,OAAOw7B,QAEZ,IACP,CAAC2nF,EAAkB3gC,IAEhB96F,GAAe/lC,EAAAA,EAAAA,KAAY,KAC/B,MAAM6hK,EAAcH,EAAyB1jI,QAAQ/9B,IAAQ0hK,EAAkBpxI,SAAStwB,KAAKvD,IAAIupB,QAC3F67I,EAAWH,EAAkB3jI,QAAQ/9B,IAAQyhK,EAAyBnxI,SAAStwB,KAAKvD,IAAIupB,QAE9Fw7I,EAAgB,CAAEj9J,SAAQq9J,cAAaC,aACvC1gK,MACC,CAACoD,EAAQi9J,EAAiBC,EAA0BtgK,EAASugK,IAEhE,GAAK9gC,GAAgB2gC,EAIrB,OACEllK,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTyN,oBAAqBA,EACrBa,QAASq2B,EACT9rC,WAAWsC,EAAAA,GAAAA,GC9FgC,WD8FJ,UACvC+E,iBC/FyB,WDgGzBK,MAAOlH,EAAK,eAAegC,SAAA,EAE3Be,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GClG6C,WDkGjB,iBAAiBE,UAC3De,EAAAA,GAAAA,GAACkoH,GAAAA,EAAa,CACZxrH,QAAS+4G,EACTpjG,SAAU8xJ,EACV/xJ,SAAUgyJ,OAGdpkK,EAAAA,GAAAA,GAAA,OAAKvD,UCzG4E,WDyGnDwC,UAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,UAAUnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAASyrC,EAAatpC,SACpFhC,EAAK,kBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,wBEnGzC,IAUrCsnK,GAAY,SAAZA,GAAY,OAAZA,EAAY,eAAZA,EAAY,kBAAZA,EAAY,mBAAZA,EAAY,eAAZA,EAAY,mBAAZA,EAAY,aAAZA,CAAY,EAAZA,IAAY,IASjB,MA8DA,IAAejoK,EAAAA,EAAAA,KA9DqBk5H,EAClCpyH,SACA4D,SACAgmD,UACAppD,UACAyN,0BAEA,MAAOmzJ,EAAiBC,IAAsBhzJ,EAAAA,EAAAA,IAAS8yJ,GAAaG,UAC9D,qBAAEC,EAAoB,sBAAEC,IAA0Bv+J,EAAAA,EAAAA,MAElDpJ,GAAOD,EAAAA,EAAAA,KAEP6nK,GAAiBnnK,EAAAA,EAAAA,KAAQ,IAAM,CACnC,CAAEkJ,MAAO3J,EAAK,gBAAiB,GAAI4J,MAAO09J,GAAaO,SACvD,CAAEl+J,MAAO3J,EAAK,gBAAiB,GAAI4J,MAAO09J,GAAaQ,WACvD,CAAEn+J,MAAO3J,EAAK,gBAAiB,GAAI4J,MAAO09J,GAAaS,YACvD,CAAEp+J,MAAO3J,EAAK,eAAgB,GAAI4J,MAAO09J,GAAaU,QACtD,CAAEr+J,MAAO3J,EAAK,eAAgB,GAAI4J,MAAO09J,GAAaW,WACtD,CAAEt+J,MAAO3J,EAAK,mBAAoB4J,MAAO09J,GAAaG,WACrD,CAACznK,IAEEsrC,GAAe/lC,EAAAA,EAAAA,KAAY,KAC/B,IAAI8qJ,EAEFA,EADEkX,IAAoBD,GAAaG,QACtBvwG,EAAAA,IAEAz1D,KAAKsgB,MAAMsQ,KAAKC,MAAQ,KAAQ9G,OAAO+7I,GAElDx3G,EACF43G,EAAsB,CAAE59J,SAAQgmD,UAASsgG,eAEzCqX,EAAqB,CAAE39J,SAAQsmJ,eAEjC1pJ,MACC,CAACoD,EAAQw9J,EAAiB5gK,EAASopD,IAEtC,OACEluD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQA,EACRQ,QAASA,EACTyN,oBAAqBA,EACrBa,QAASq2B,EACT9rC,UAAU,SACV0H,MAAOlH,EAAK,iBAAiBgC,SAAA,EAE7Be,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT1V,UAAU,wBACV6E,KAAK,UACL5E,QAASmoK,EACTxyJ,SAAUmyJ,EACVpyJ,SAAUqyJ,KAEZ3lK,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,UAAUnJ,UAAU,wBAAwByE,QAAM,EAACpE,QAASyrC,EAAatpC,SACpFhC,EAAK,kBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAAEhC,EAAK,qB,4BCxBjF,MAkMA,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUiyJ,cAAaC,0BACtB,MAAMxxJ,GAAqBC,EAAAA,EAAAA,KAAyBX,IAC9C,OAAElM,EAAM,SAAE8M,GAAaF,GAAsB,CAAC,EAC9CF,EAAO1M,IAAUurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,GACpCgnD,EAAehnD,GAASinD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,QAAUrJ,EAC7D0nK,EAAc3xJ,GAAO4xJ,EAAAA,EAAAA,IAA4B5xJ,EAAMs6C,QAAgBrwD,EACvE4nK,EAAav+J,GAAU8M,GAAW0xJ,EAAAA,EAAAA,KAAiBtyJ,EAAQlM,EAAQ8M,QAAYnW,EAC/E8nK,EAAkB3kK,SAASykK,GAAYG,gBAAkBH,GAAYI,eACrEx6G,EAAQnkD,GAAU8M,GAAWwjH,EAAAA,EAAAA,KAAYpkH,EAAQlM,EAAQ8M,QAAYnW,EACrEioK,EAAkB9kK,QACtB4S,GAAQI,IAAYs3C,EAAAA,EAAAA,IAAiB13C,EAAMy3C,EAAOs6G,EAAiBz3G,IAChEq3G,GAAaO,iBAEZp5G,EAAkB1rD,QAAQkG,KAAWmwB,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAElEoiF,EAAiB+7E,EAAcA,EAAY/7E,eAC7Cg8E,EAAsB,CAAE3qF,UAAW2qF,QAAwBznK,EAEzD0/F,EAAajU,GAAiBD,EAAAA,EAAAA,KAAiBj2E,EAAQk2E,QAAkBzrF,EACzEq2C,EAAoBhtC,GAASitC,EAAAA,EAAAA,KAA4B/gC,EAAQlM,QAAUrJ,EAEjF,MAAO,CACLkoK,uBAAwB/kK,QAAQkG,KAAW8+J,EAAAA,EAAAA,KAA6B5yJ,EAAQlM,GAChF4+J,kBACAp5G,kBACAu5G,gBAAiB/xH,IAAqBgyH,EAAAA,EAAAA,KAAqB9yJ,GAC3DmqF,aACA16D,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDmnJ,4BAA6BnnJ,EAAO0hC,SAASs+F,MAAMmnB,4BACnDzmJ,wBA9BcX,EAhM+BgzJ,EACjD7iK,SACA+hK,cACAC,sBACA/nE,aACAuoE,kBACAC,yBACAE,iBACAv5G,kBACA7pB,uBACA03H,8BACAzmJ,qBACAhQ,cAEA,MAAM,aACJymF,EAAY,iBACZwa,EAAgB,YAChBn0C,EAAW,iBACXjsB,IACEp+B,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MACfuuF,GAAkBvuF,EAAAA,EAAAA,MAElBhS,GAAOD,EAAAA,EAAAA,MAEP,SAAEiF,IAAaC,EAAAA,EAAAA,MAEfgkK,GAAiBhtI,EAAAA,EAAAA,GAAsBmkE,GACvC8oE,EAAsB9oE,GAAc6oE,EAEpCE,EAAUtlK,SAASqlK,GAAqBn/D,YAAcm/D,GAAqBp/D,eAC3EnB,EAAUugE,GAAqBvgE,SAE9BygE,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAE9ClkH,aAAcwoD,EACd5oD,cAAe6oD,GACb/oD,MAGFs6C,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAckwE,WA5CzB,IA4C4D/sF,YAAazM,KAErG7F,EAAAA,EAAAA,KAAU,KACJ6F,IAAW+iK,GAAqBzmF,UAClC2K,EAAa,CACXjB,eAAgB+7E,EAAcA,EAAY/7E,eAAiB,CAAE3O,UAAW2qF,OAG3E,CAAChiK,EAAQ+hK,EAAa96E,EAAc+6E,EAAqBe,IAE5D,MAAMh2C,GAAe3tH,EAAAA,EAAAA,KAAY,CAACo8E,EAAqBiqC,EAAoB29C,KACpE5yJ,IAGLgrE,EAAU,IACLA,EACH6nF,qBAAqB,GAGnBV,GAAkBS,EACpBH,GAAiBK,IACfh2G,EAAY,CACVM,YAAap9C,EAAoBgrE,UAASiqC,WAAU69C,gBAEtD9iK,QAGF8sD,EAAY,CACVM,YAAap9C,EACbgrE,UACAiqC,WACAwxC,4BAA6BA,GAA+B+L,IAE9DxiK,QAED,CAACgQ,EAAoBmyJ,EAAgBM,EAAiBziK,EAASy2J,EAA6B+L,IAEzFh1D,GAAoB5uG,EAAAA,EAAAA,KAAY,KAChC2jK,IACFthE,EAAiB,CAAEoB,aAAckgE,EAAoB1jK,KACrDmB,OAED,CAACA,EAASuiK,EAAqBthE,IAE5B8hE,GAAiBnkK,EAAAA,EAAAA,KAAY,KACjC,IAAK2jK,EAAqB,OAC1B,MAAM,UAAE1rF,GAAc0rF,EAChBS,EAAShhE,EAAU,WAAa,cAChCvqF,EAAM,GAAGkuD,EAAAA,MAAkBq9F,KAAUnsF,KAC3C+2C,EAAAA,GAAAA,IAAoBn2G,GACpBopB,EAAiB,CACft8B,QAASlL,EAAK,kBAEf,CAAC2oG,EAAS3oG,EAAMkpK,EAAqB1hI,IAclCqhB,GAAkEpoD,EAAAA,EAAAA,KAAQ,IACvE,EAAGkZ,YAAWxT,OAAQ2iD,MAC3B/lD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLqM,QAASjhB,EACTxB,KAAK,UACLmF,MAAM,cACNnJ,UAAWspD,EAAa,SAAW,GACnCjpD,QAAS8Z,EACTE,UAAU,eAAc7X,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGd,CAACW,IAwBJ,OACEnD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,WAAWsC,EAAAA,GAAAA,GAAe,kBAAmB6mG,GAAW,gBACxDxiG,OAAQA,EACRQ,QAASA,EACTL,OA3BJ,WACE,MAAMosC,GAAgB5wC,EAAAA,GAAAA,GAAe,gBAAiBqrG,GAAuB,mBAE7E,OACEtrG,EAAAA,GAAAA,IAAA,OAAKrC,UAAWkzC,EAAezvC,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EACjEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAW7Z,EAAK,SAAUH,QAAS8G,EAAQ3E,UAC1Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SACzBknK,GAAsBplK,EAAAA,GAAAA,GAAWolK,EAAoBhiK,MAAO,CAAC,QAAS,UAAYlH,EAAK,yBAE1F+C,EAAAA,GAAAA,GAACyX,GAAAA,EAAY,CACXhb,UAAU,2CACVib,QAASouC,EACTnuC,UAAU,QAAO1Y,UAEjBe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,OAAOpH,QAAS6pK,EAAe1nK,SAAEhC,EAAK,sBAI7D,CAOY4pK,GAAe5nK,SAAA,CAEtBknK,GAAqBzmF,UACpB5gF,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,yBAAyBkqD,SAAUwjD,EAAoBlrG,UACvFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wCAAuCwC,SAAA,EACpDe,EAAAA,GAAAA,GAAA,UAAQmY,IAAKqlF,EAAiB/gG,UAAU,kBACvC0pK,EAAoBzmF,SAASxgF,KAAK0/E,IACjC5+E,EAAAA,GAAAA,GAACu/F,GAAa,CACZ3gB,QAASA,EACTn+E,KAAMmlG,EAAUkhE,EAAAA,IAAmBC,EAAAA,IACnCxpE,oBAAqBA,EACrBzgG,QAAS8oK,IAAoBhgE,EAAUuqB,OAAexyH,EACtDwJ,SAAUy3E,EACVpyB,gBAAiBA,EACjB7pB,qBAAsBA,EACtB66D,gBAAiBA,YAKzBx9F,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iBAAgBwC,UAC7Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLP,KAAK,UACLulD,OAAK,EACLpgD,MAAOwgK,EAAU,SAAW,UAC5BtpK,QAASs0G,EAAkBnyG,SAjFd+nK,MACvB,IAAKb,EAAqB,OAAOlpK,EAAK,WAEtC,MAAM2pK,EAAShhE,EAAU,QAAU,UAEnC,OAAO3oG,EACLmpK,EAAU,qBAAqBQ,SAAgB,kBAAkBA,SACjET,EAAoBhwI,MACpB,MA2ES6wI,WAKPhnK,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAETu5G,SC3PP,IAAgB,KAAO,WAAW,KAAO,YCmFzC,IAAehqK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLkgI,uBAAuB7pC,EAAAA,EAAAA,KAA4Br2F,MAHrCD,EApDoCg0J,EACtD9zB,oBACAC,wBACAxvI,cAEA,MAAM,eAAE0mF,IAAmBjkF,EAAAA,EAAAA,MACrBpJ,GAAOD,EAAAA,EAAAA,KAEP02I,GAAkBh2I,EAAAA,EAAAA,KAAQ,IACvBy1I,GAAmBj0I,KAAKuD,IAAOuuC,EAAAA,EAAAA,MAAY0uC,SAAS4oB,SAAS7lG,MACnE,CAAC0wI,IAEE+zB,GAAsBj4J,EAAAA,EAAAA,OACpB0sF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CACxEC,QAASgrE,EAAqBr3J,YAAa6jI,IAGvCyzB,GAAsBjuI,EAAAA,EAAAA,GAAsBw6G,GAC5C0zB,EAA2B1zB,GAAmByzB,EAE9CE,GAAiB9gK,EAAAA,EAAAA,IAAiBq4E,IACtC0L,EAAe,CACblB,eAAgBxK,EAAQwK,oBAI5B,OACEppF,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQtC,QAAQ4yI,GAChBj3I,UAAWuC,GAAO+hC,KAClBn9B,QAASA,EACT6C,gBAAc,EACdtC,MAAOlH,EAAK,8BAA8BgC,UAE1Ce,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOsoK,KAAM,iBAAkBnvJ,IAAK+uJ,EAAqBK,eAAa,EAAAtoK,SAClGmoK,GAA0BloK,KAAKsoK,IAE5BxnK,EAAAA,GAAAA,GAAC6yI,GAAc,CAEbp2I,UAAWuC,GAAOyoK,QAClBpqE,WAAYmqE,EACZ1qK,QAASuqK,EACT9pE,oBAAqBR,EACrBl5E,QAASuvH,GALJo0B,EAAe/kK,c,4BCPlC,MAAMilK,GAAiE,CACrE9yH,SAAU,CACR1wC,KAAM,OACN0C,MAAO,eAET+gK,KAAM,CACJzjK,KAAM,OACN0C,MAAO,YAmvBX,IAAetK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,SAAQ8M,eACjB,MAAMJ,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAChC,IAAK0M,GAAQA,EAAKk0J,aAChB,MAAO,CAAC,EAEV,MAAMhpH,GAAY5rC,EAAAA,EAAAA,IAASU,EAAKjR,IAC1B4vC,EAAOuM,GAAYtM,EAAAA,EAAAA,KAAWp/B,EAAQlM,QAAUrJ,EAChDkqK,EAAgBx1H,IAAQy1H,EAAAA,EAAAA,IAAiBz1H,GACzC01H,EAAej0J,IAAaupC,EAAAA,GAC5BnmB,GAAiBC,EAAAA,EAAAA,KAAqBjkB,EAAQlM,IAC5CA,OAAQghK,EAAel0J,SAAUm0J,IAAoBp0J,EAAAA,EAAAA,KAAyBX,IAAW,CAAC,EAC5Fg1J,EAAgBH,IAAiB11H,KAAS7b,EAAAA,EAAAA,IAAc9iB,KAASgjB,EAAAA,EAAAA,IAAYhjB,IAE7EqwG,GAAWC,EAAAA,EAAAA,IAAYh9G,QAAsCrJ,GAA5BsmH,EAAAA,EAAAA,KAAU/wG,EAAQlM,GACnDwrC,EAAeoM,GAAYnM,EAAAA,EAAAA,KAAmBv/B,EAAQlM,QAAUrJ,EAChEqwD,EAAgBpP,OAAiDjhD,GAArCswD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,GACvD06G,EAAWlvE,GAAgBwb,EAC3Bm6G,GAAUC,EAAAA,EAAAA,KAAcl1J,EAAQlM,GAEhCmkD,GAAQmsE,EAAAA,EAAAA,KAAYpkH,EAAQlM,EAAQ8M,GACpCu0J,EAAiB30J,EAAKg4C,UAC1Bh4C,EAAK0wG,aAAckkD,EAAAA,EAAAA,IAAkB50J,EAAM,kBAAmBywG,EAAAA,EAAAA,IAAiBzwG,EAAM,iBAEjF60J,EAAep9G,IAASq9G,EAAAA,EAAAA,IAAkB90J,EAAMy3C,GAChDs9G,GAAYC,EAAAA,EAAAA,KAAgBx1J,EAAQlM,GAEpCsiJ,GAAeqf,EAAAA,EAAAA,KAAuBz1J,EAAQlM,IAAW06G,GAAUknD,sBAGnEC,GADgBC,EAAAA,EAAAA,IAAiB9hK,EAAQ8M,EAAUZ,EAAO+jB,gBAC5Bsb,EAAAA,EAAAA,KAAWr/B,EAAQ2tC,OAAO/sC,SAAanW,EACrEu2C,GAAkBC,EAAAA,EAAAA,KAA0BjhC,GAElD,MAAO,CACLQ,OACAiO,SAASkyG,EAAAA,GAAAA,IAAengH,GAAMogH,EAAAA,EAAAA,KAAqB5gH,IAAS6gH,EAAAA,EAAAA,KAAsB7gH,EAAQQ,EAAKjR,KAC/Fm8C,YACAmqH,QAASr1J,GAAMg4C,UAAYq8G,EAC3Br8G,QAASh4C,GAAMg4C,QACfs9G,kBAAmBt1J,GAAMs1J,kBACzBnB,gBACAoB,eAAeC,EAAAA,EAAAA,IAAiBx1J,GAChCw0J,gBACAC,UACAxmD,cAAe7gH,QAAQktD,GAAc4zD,cACrCunD,YAAaplD,EAAUvxE,GAAcouB,SAASwoG,cAAWzrK,EACzD0rK,oBAAqBtlD,EAAUvxE,GAAcouB,SAAS0oG,sBAAmB3rK,EACzE4rK,iBAAiBj2J,EAAAA,EAAAA,KAAeJ,GAAQq2J,iBACnCvB,IAAkBhhK,GAAUihK,IAAoBn0J,EACrDu0J,iBACAE,eACAE,YACAe,oBAAoBC,EAAAA,EAAAA,KAAyBv2J,GAC7Co2I,eACAxkB,UAAWtyF,GAAcsyF,UACzB4kC,MAAO5oK,QAAQijH,GACf7sF,iBACA2xI,cACAhU,gBAAiBriH,GAAcqiH,gBAC/B3gH,qBA3DcjhC,EAnrBmC02J,EACrD3iK,SACA8M,WACA1Q,SACAwmK,mBACApwF,SACAjjD,YACA4yI,cACAE,sBACAQ,mBACAd,UACAr9G,UACAs9G,oBACAO,kBACAO,cACAC,eACA7B,gBACA8B,YACAC,UACAC,UACAC,oBACAC,sBACAC,gBACAC,sBACAC,WACAC,oBACAC,qBACA/2J,OACAkrC,YACAj9B,UACAsnJ,gBACAd,UACAxmD,gBACAkmD,gBACAQ,iBACAE,eACAE,YACAe,qBACAlgB,eACAxkB,YACA4kC,QACAxyI,iBACA2xI,cACA6B,oBACAC,sBACAC,qBACAC,gBACAC,oBACAlnK,UACAyN,uBACAwjJ,mBACA3gH,uBAEA,MAAM,qBACJywH,GAAoB,uBACpBoG,GAAsB,eACtBC,GAAc,WACdC,GAAU,8BACVC,GAA6B,gBAC7BC,GAAe,eACfC,GAAc,qBACdC,GAAoB,uBACpBC,GAAsB,4BACtBC,GAA2B,iBAC3BC,GAAgB,2BAChBC,GAA0B,oBAC1BC,GAAmB,cACnBC,GAAa,mBACbC,GAAkB,qBAClBC,GAAoB,mBACpBC,GAAkB,SAClB1lK,GAAQ,QACR0yB,GAAO,iBACPizI,GAAgB,uBAChBC,GAAsB,UACtB5pH,GAAS,YACTD,GAAW,uBACX8pH,GAAsB,eACtBC,GAAc,eACdrwD,GAAc,iBACdp3E,KACEp+B,EAAAA,EAAAA,MAEEtJ,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,MAEP,SAAE+E,KAAaC,EAAAA,EAAAA,OACd6jD,GAAYomH,KAAiB16J,EAAAA,EAAAA,KAAS,IACtC26J,GAAiBC,KAAsB56J,EAAAA,EAAAA,KAAS,IAChD2D,GAAmBk3J,KAAwB76J,EAAAA,EAAAA,KAAS,IACpD4iH,GAAiBk4C,KAAsB96J,EAAAA,EAAAA,KAAS,IAChDqjH,GAAuBC,GAAqBC,KAAyB13H,EAAAA,EAAAA,MACtE,EAAEsH,GAAC,EAAEG,IAAMy0E,GAEjBnyD,EAAAA,GAAAA,GAA4BjkB,EAAQiO,QAAqB1T,GAAW,GACpE,MAAM6uK,IAAuBh+H,EAAAA,GAAAA,KACzB+6H,IAAmB79G,SAAkB/tD,EAlGL,KAqG9B8uK,IAAwB/uK,EAAAA,EAAAA,KAAQ,KACpC,GAAKm3J,GAGL,OAAOl0G,OAAOsK,OAAO4pG,IAAiB7kD,MAAMlvG,WAC3C,CAAC+zJ,KAEEtgC,IAAiBhuH,EAAAA,EAAAA,IAAgB,KACrCgmK,IAAmB,GACnB3oK,OAGIgO,IAAerL,EAAAA,EAAAA,IAAgB,KAC/B2tC,GACFo3H,MAEAa,IAAc,GACdtwD,GAAe,CAAE70G,SAAQiQ,WAAY,MAEvCrT,OAGIwnH,IAAe7kH,EAAAA,EAAAA,IAAgB,KAC/B2tC,IACFo3H,KACA1nK,KAEA0oK,IAAqB,GAEvBH,IAAc,MAGVO,IAAYnmK,EAAAA,EAAAA,IAAgB,KAChC4lK,IAAc,GACdvoK,OAGI+oK,IAAsBpmK,EAAAA,EAAAA,IAAgB,KAC1CqlK,GAAmB,CAAE5kK,SAAQ8M,aAC7Bu4J,IAAoB7C,GACpBkD,QAGIp3J,IAAmB/O,EAAAA,EAAAA,IAAgB,KACvC+lK,IAAqB,GACrB1oK,OAGIgpK,IAAiBrmK,EAAAA,EAAAA,IAAgB,KACjC2tC,GACFo3H,KAEAN,GAAe,CAAE6B,QAAS,cAIxBC,IAAmBvmK,EAAAA,EAAAA,IAAgB,KACnC2tC,GACFo3H,KAEAL,GAAW,CAAEjkK,cAIX+lK,IAAoBxmK,EAAAA,EAAAA,IAAgB,KACpC2tC,GACFo3H,KAEA3G,GAAqB,CAAE39J,SAAQ2a,SAAS,IAE1C+qJ,QAGIM,IAAkBzmK,EAAAA,EAAAA,IAAgB,KAClC2tC,IACFo3H,KACAoB,OAEA33C,KACAw3C,IAAmB,IAErBJ,IAAc,MAGVc,IAAyB1mK,EAAAA,EAAAA,IAAgB,KACzC2tC,GACFo3H,MAEAO,GAAqB,CAAE7kK,WACvBqlK,IAAoB7C,IAEtBkD,QAGIQ,IAAkB3mK,EAAAA,EAAAA,IAAgB,KAClC2tC,GACFo3H,MAEAS,GAAiB,CAAEr2I,OAAO,IAC1B22I,IAAoB7C,IAEtBkD,QAGIS,IAAuB5mK,EAAAA,EAAAA,IAAgB,KACvC2tC,GACFo3H,MAEAQ,GAAmB,CAAE9kK,SAAQgmD,QAASvkC,OAAO3U,KAC7Cu4J,IAAoB7C,IAEtBkD,QAGIU,IAA0B7mK,EAAAA,EAAAA,IAAgB,KAC9CH,GAAS,CAAE3D,QAAI9E,IACfsuK,GAAuB,CAAEjlK,SAAQ0mE,WAAW,IAC5Cg/F,QAGIW,IAA4B9mK,EAAAA,EAAAA,IAAgB,KAC5C2tC,GACFo3H,KACSb,EAETU,GAAgB,CACdnkK,WAGFkkK,GAA8B,CAC5BlkK,WAGJ0lK,QAGIY,IAAwB/mK,EAAAA,EAAAA,IAAgB,KAC5C6kK,GAAe,CAAE3oK,GAAIuE,IACrB0lK,QAGIa,IAAkBhnK,EAAAA,EAAAA,IAAgB,KAClCkmK,IAAyB/4J,EAC3B+wB,GAAiB,CAAEt8B,QAASlL,GAAK,wBAGnC0uK,GAAc,CAAE6B,UAAWxmK,IACvBktC,GACFo3H,KAEAK,GAAc,CAAE6B,UAAWxmK,IAE7B0lK,SAGIe,IAAwBlnK,EAAAA,EAAAA,IAAgB,KACxC2tC,GACFo3H,KAEAD,GAAqB,CAAE3qI,OAAQ15B,IAEjC0lK,QAGIgB,IAAkBnnK,EAAAA,EAAAA,IAAgB,KAClC2tC,GACFo3H,KAEAV,IAEF8B,QAGIiB,IAAkBpnK,EAAAA,EAAAA,IAAgB,KAClC2tC,GACFo3H,KAEAC,GAA4B,CAAE7qI,OAAQ15B,EAAQoG,SAAS,IAEzDs/J,QAGIkB,IAAarnK,EAAAA,EAAAA,IAAgB,KAC7B2tC,GACFo3H,KAEAC,GAA4B,CAAE7qI,OAAQ15B,IAExC0lK,QAGIn8C,IAAehqH,EAAAA,EAAAA,IAAgB,KACnCskK,IACA6B,QAGImB,IAAwBtnK,EAAAA,EAAAA,IAAgB,KAC5CilK,KACAa,IAAoB7C,GACpBkD,QAGIoB,IAA0BvnK,EAAAA,EAAAA,IAAgB,KAC9CklK,GAA2B,CAAEzkK,WAC7BqlK,IAAoB7C,GACpBkD,QAGIqB,IAAmBxnK,EAAAA,EAAAA,IAAgB,KACnC2tC,GACFo3H,KACSjB,GACTqB,GAAoB,CAAE1kK,WACtBqlK,IAAoB7C,IAEpB0C,GAAe,CAAEllK,WAEnB0lK,QAGIsB,IAA2BznK,EAAAA,EAAAA,IAAgB,KAC/CylK,GAAuB,CAAEhlK,SAAQ0mE,WAAW,IAC5Cg/F,QAGIuB,IAAuB1nK,EAAAA,EAAAA,IAAgB,KACvC2tC,GACFo3H,KAEAP,KAEF2B,QAGIwB,IAAuB3nK,EAAAA,EAAAA,IAAgB,KAC3CukK,IACA4B,QAGIyB,IAAc5nK,EAAAA,EAAAA,IAAgB,KAC9B2tC,GACFo3H,KAEAlpH,GAAU,CAAE1hB,OAAQ15B,IAEtB0lK,QAGI0B,IAAgB7nK,EAAAA,EAAAA,IAAgB,KAChC2tC,GACFo3H,KAEAnpH,GAAY,CAAEzhB,OAAQ15B,IAExB0lK,SAGFnvK,EAAAA,EAAAA,IAAUkjD,GAAAA,GAAkB,IAE5B,MAAM4tH,IAAa3wK,EAAAA,EAAAA,KAAQ,KACzB,MAAM4wK,EAAiBnF,GAAajqK,KAAI,EAAG2tK,cACzC,MAAM0B,EAAM7G,GAAYmF,GACxB,GAAK0B,EAOL,OACEvuK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAEP1T,KAAMqqK,EAAIrqK,KAEVpH,QAVgB4qB,KAClBsjJ,GAAe,CAAE6B,QAAS,IAAIA,MAC9BH,MAQuBztK,SAEpBlC,GAAQwxK,EAAI3nK,QALRimK,MAUL2B,EAAoBrF,GAAal+D,MAAK,EAAG4hE,aAA0B,YAAZA,IAmB7D,MAAO,IAAIyB,GAAkB,GAjBP5E,IACpB1pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,iBAELpH,QAASA,KACH0xK,IAAsBnF,EACxB2B,GAAe,CAAE6B,QAAS,aAE1B/zI,GAAQ,CAAEzd,IAAKguJ,GAAuBtsK,GAAQ,6BAEhD2vK,MACAztK,SAEDlC,GAAQ,uBAImCyjC,OAAO1/B,WACtD,CAACqoK,EAAapsK,GAASssK,EAAqBK,IAEzC+E,IAAc/wK,EAAAA,EAAAA,KAAQ,KAC1B,GAAKgW,EAEL,OACS3W,GADL8rK,EACa,SAGbjqH,EACa,iBAGbqqH,EACa,0BAGb1yI,EACa,eAGF,sBACd,CAAC0yI,EAAev1J,EAAM6iB,EAAWqoB,EAAWiqH,EAAa9rK,KAE5D,OACEiD,EAAAA,GAAAA,GAACmtG,GAAAA,EAAM,CAAAluG,UACLH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,sBAAqBwC,SAAA,EAClCH,EAAAA,GAAAA,IAACwkB,GAAAA,EAAI,CACHlgB,OAAQ2iD,GACRpuC,UAAU,QACVhM,MAAO,SAAS/G,aAAYG,QAC5BnB,QAAS8oK,GACTN,gBAAiBA,GAAgBntK,SAAA,CAEhCgD,IAAY+nK,IACXhqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,SACLpH,QAASyzH,GAAatxH,SAErBlC,GAAQ,YAGZ8sK,GAAoBxB,IACnBvpK,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,WACLpH,QAASmwK,GAAuBhuK,SAE/BlC,GAAQ,6BAEXiD,EAAAA,GAAAA,GAAC0uK,GAAAA,EAAa,OAGjBlC,KACCxsK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAAS6vK,GAAoB1tK,SAElBlC,GAAVgsK,EAAkB,yBAAoC,4BAG1DN,IAAcF,IACbvoK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAASowK,GAAgBjuK,SAExBlC,GAAQ,UAGZwrK,IACCvoK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAASqwK,GAAqBluK,SAE7BlC,GAAQ,0BAGZkF,KAAa4nK,GAAoBn+G,IAAYq9G,IAC5C/oK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,SACLpH,QAASswK,GAAwBnuK,SAEhClC,GAAQ,8BAGZ8sK,GAAoB/oK,QAAQwpK,KAC3BxrK,EAAAA,GAAAA,IAAC8Y,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAAS6tK,EAAoB1rK,SAAA,CAEhBlC,GAAZw5B,EAAoB,oBAA+B,mBACpDv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEqrK,OAGjCT,IAAqBd,IAAYC,IAChChpK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,UACLpH,QAASoxK,GAAqBjvK,SAE7BlC,GAAQ,gCAGZ6sK,GAAoBE,IACnB9pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAAS8vK,GAAe3tK,SAEvBlC,GAAQ,cAGZ6sK,GAAoBG,IACnB/pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAMqyB,EAAY,UAAY,QAC9Bz5B,QAAS4wK,GAAgBzuK,SAExBlC,GAAQw5B,EAAY,qBAAuB,sBAG/Cm0I,IAAsBL,IACrBrqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,gBACLpH,QAASixK,GAAiB9uK,SAEzBlC,GAAQw5B,EAAY,2BAA6B,4BAGrDsxI,IACC7nK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,WACLpH,QAAS2wK,GAAsBxuK,SAE9BlC,GAAQ,gBAGZkF,IAAYgoK,IACXjqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,QACLpH,QAAS8wK,GAAW3uK,SAEnBlC,GAAQ,UAGZktK,IACCjqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,iBACLpH,QAAS6wK,GAAgB1uK,SAExBlC,GAAQ,eAGZmtK,IAAYvoJ,GACX3hB,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,SACLpH,QAASiwK,GAAkB9tK,SAE1BlC,GAAQ,kBAIT+B,EAAAA,GAAAA,IAAC8Y,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAASkwK,GAAgB/tK,SAAA,CAExBlC,GAAQ,aAAa,WAK1BytK,GAAqBC,KACrBzqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,aACLpH,QAASuwK,GAA0BpuK,SAElClC,GAAQ0tK,EAAqB,gBAAkB,uBAGnD9oD,IACC3hH,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAMqyB,EAAY,WAAa,UAC/Bz5B,QAASwwK,GAAsBruK,SAE9BlC,GAAQw5B,EAAY,iBAAmB,+BAG1CszI,IACA7pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,SACLpH,QAASmxK,GAAqBhvK,SAE7BlC,GAAQ,0BAGZstK,IACCrqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,gBACLpH,QAASixK,GAAiB9uK,SAEzBlC,GAAQ,YAGZotK,IACCnqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,QACLpH,QAAS+wK,GAAsB5uK,SAE9BlC,GAAQ,gBAGZw5B,GAAa6zI,IACZpqK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,cACLpH,QAASgxK,GAAwB7uK,SAEhClC,GAAQ,4BAGZusJ,IACCtpJ,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,WACLpH,QAASkxK,GAAyB/uK,SAEjClC,GAAQ,2BAGZmrK,IACCloK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAAS8U,GAAa3S,SAErBlC,GAAQ,uBAGZsxK,GACAlG,IACCnoK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,OACLpH,QAASywK,GAAgBtuK,SAExBlC,GAAQ,sBAGZ2sK,IACC1pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAM4gI,EAAY,OAAS,YAC3BhoI,QAASgoI,EAAYgoC,GAAmBqB,GAAYlvK,SAEvClC,GAAZ+nI,EAAoB,aAAwB,cAGhDlmF,IAAc1nB,IAAmBwyI,IAChC1pK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAM4gI,EAAY,OAAS,YAC3BhoI,QAASgoI,EAAYspC,GAAgBD,GAAYlvK,SAEpClC,GAAZ+nI,EAAoB,UAAqB,eAG7CylC,IACCzrK,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC0uK,GAAAA,EAAa,KACd1uK,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACPJ,aAAW,EACXtT,KAAK,SACLpH,QAASsuH,GAAansH,SAErBwvK,WAKR/6J,IACC1T,EAAAA,GAAAA,GAAC2uK,GAAAA,EAAe,CACdvrK,OAAQgS,GACRxR,QAAS0R,GACT5B,KAAMm1J,GAAen1J,EACrBk7J,cAAe9tK,QAAQ+nK,KAG1BqB,GAAWp1C,IAAyBphH,GAAMjR,KACzCzC,EAAAA,GAAAA,GAACw1H,GAAAA,EAAa,CACZpyH,OAAQixH,GACRzwH,QAAS2wH,GACTljH,oBAAqB2jH,GACrBhuH,OAAQ0M,EAAKjR,c,wCChzBzB,UAAgB,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,SAAW,YCmFzH,IAAenG,EAAAA,EAAAA,KArDYuyK,EACzBryK,WACA2L,UACA2mK,aACAC,cACAC,iBACAnoI,QACApqC,YACAK,cAEA,MAAMG,GAAOD,EAAAA,EAAAA,KACPiyK,EAAqB9mK,EAAQ+6B,aAAagsI,eAE1CvoK,EAAOqoK,EAAiBD,EAAcD,EAEtCK,EAAaH,GAAkBF,GAAaM,EAAAA,GAAAA,IAAqBnyK,EAAMkL,EAAQnB,OAAQ8nK,QAAcnxK,EAErG+pB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQqL,MAGV,OACErJ,EAAAA,GAAAA,IAAA,OACEgtC,KAAK,SACLD,SAAU,EACVpvC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO+hC,KAAMvkC,GAAYwC,GAAOa,OAAQpD,GAClEK,QAAS4qB,EAAYzoB,SAAA,EAErBe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjK,UAAWuC,GAAOyI,OAClBd,KAAMA,EACNqS,KAAMi2J,EACNxuK,KAAK,YAEP3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO06B,KAAKz6B,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOqwK,OAAOpwK,SAAA,CAC1B0H,IAAQ3G,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC5lD,KAAMA,EAAMO,iBAAe,KAAQ+nK,GAC5DjvK,EAAAA,GAAAA,GAACsvK,GAAAA,EAAe,CAAC7yK,UAAWuC,GAAOuwK,KAAMpnK,QAASA,QAEpDrJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOoF,SAAUlE,IAAI,OAAMjB,SAAA,CACxCkwK,IACCrwK,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,cAAawC,UAAE8B,EAAAA,GAAAA,GAAWouK,MAC1CnvK,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAC,UAG5Be,EAAAA,GAAAA,GAACwvK,GAAAA,EAAc,CAACrnK,QAASA,EAAS6oH,UAAWnqF,EAAO4oI,eAhDtC,kBC5BxB,IAAgB,KAAO,WAAW,OAAS,WAAW,OAAS,WAAW,OAAS,WAAW,MAAQ,WAAW,OAAS,WAAW,QAAU,WAAW,aAAe,WAAW,mBAAqB,WAAW,SAAW,WAAW,eAAiB,WAAW,QAAU,WAAW,YAAc,WAAW,UAAY,WAAW,UAAY,WAAW,KAAO,WAAW,WAAa,WAAW,eAAiB,WAAW,KAAO,WAAW,YAAc,WAAW,WAAa,WAAW,aAAe,WAAW,OAAS,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,QAAU,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,mBAAqB,WAAW,OAAS,YCoFxsBC,GAA4B,CAChC5W,cAAc,EACdC,WAAY,iBACZ4W,SAAU,qBAINC,GAAyB,qBAEzBC,IAAwBpgJ,EAAAA,GAAAA,KAAU6uC,GAAOA,KAAM,KAAK,GAqqB1D,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAMU,GAAqBC,EAAAA,EAAAA,KAAyBX,GACpD,IAAKU,EACH,MAAO,CAAC,EAEV,MAAM,OAAE5M,EAAM,SAAE8M,GAAaF,EAEvBF,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAChC,IAAK0M,EACH,MAAO,CAAC,EAGV,MAAM,eACJo8J,EAAc,SAAEC,EAAQ,QAAEpiD,EAAO,cAAEqiD,EAAa,UAAEC,EAAS,KAAEzvK,IAC3D0vK,EAAAA,EAAAA,KAA0Bh9J,IAAW,CAAC,GACpC,WAAE8mG,EAAU,SAAE7hF,EAAU0O,MAAOspI,GAAoBxiD,GAAW,CAAC,EAE/D12F,EAAgB/jB,EAAO+jB,cACvBu1B,GAAkBr1B,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAC/C4nK,GAAgB9F,EAAAA,EAAAA,IAAiB9hK,EAAQ8M,EAAUmjB,GAEnDm5I,EAAY5jH,IAAoBoiH,EAAgB17J,EAAOm9J,mBAAmBn9B,WAAQv1I,EAExF,MAAO,CACL+V,OACAo8J,iBACA91D,aACAlmG,WACAqkB,WACAm4I,sBAAuBxvK,SAAQwS,EAAAA,EAAAA,KAAeJ,GAAQ+lD,2BACtDm3G,YACAL,WACAptI,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDs5C,kBACAwjH,gBACAO,eAAgBN,EAChBh5I,gBACAu5I,WAAYhwK,EACZ2vK,qBAvCcl9J,EAnqBiBw9J,EACnCj0K,WACAkX,OACAI,WACAg8J,iBACAM,YACAL,WACA/1D,aACAm2D,kBACAh4I,WACAm4I,wBACA3tI,uBACA6pB,kBACAwjH,gBACAO,iBACAC,aAAa,OACbv5I,oBAEA,MAAM,mBACJy5I,EAAkB,kBAClBC,EAAiB,oBACjBC,EAAmB,aACnBr7I,EAAY,kBACZs7I,EAAiB,oBACjBC,EAAmB,iBACnBpsI,EAAgB,sBAChBqsI,IACE1qK,EAAAA,EAAAA,MAEE8R,GAAMlJ,EAAAA,EAAAA,MACN+qD,GAAW/qD,EAAAA,EAAAA,MACXyd,GAAezd,EAAAA,EAAAA,MACf+hK,GAAwB/hK,EAAAA,EAAAA,KAAO,IAE/B,SAAEhN,IAAaC,EAAAA,EAAAA,MACfnF,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEN2pC,EAAO6d,IAAYjzC,EAAAA,EAAAA,IAASq+J,GAAkB,KAC9CmB,EAAcC,IAAmBz/J,EAAAA,EAAAA,IAAS,GAC3C0/J,EAAgBh5I,GAAY84I,EAAe,EAC3CG,EAAgBj5I,GAAY84I,EAAe94I,EAASt5B,OAAS,GAE5DwyK,EAAeC,IAAoB7/J,EAAAA,EAAAA,KAAUjV,GAC9C+0K,GAAiBtiK,EAAAA,EAAAA,MACjBuiK,IAA0BviK,EAAAA,EAAAA,KAAO,IAEhCwiK,GAAWC,GAAaC,KAAer0K,EAAAA,EAAAA,MACvCs0K,GAAcC,KAAmBpgK,EAAAA,EAAAA,KAAS,IAC1C8lB,GAAWkpF,KAAgBhvG,EAAAA,EAAAA,KAAS,IC3ItC,SACLqgK,EAAiCr5F,GAEjC,MAAMs5F,GAAqBxrK,EAAAA,EAAAA,IAAiByrB,IACnB8/I,EAAK9hE,OAAO73F,GAC1BA,EAAI/I,UAAY+I,EAAI/I,QAAQutB,SAAS3K,EAAMhgB,WAGhCymE,EAASzmD,OAG/Bz0B,EAAAA,EAAAA,KAAU,KACRsK,SAASmS,iBAAiB,QAAS+3J,GAC5B,KACLlqK,SAASoS,oBAAoB,QAAS83J,MAEvC,CAACA,GACN,CDkIEC,CAAgB,CAAC75J,IANU5R,EAAAA,EAAAA,IAAiByrB,IACtCw/I,GAAwBpiK,SAEvB4iB,EAAMhgB,OAAuBge,QAAQ,WAC1C2hJ,SAIF,MAAMM,GAAsBnxK,QAAS+lC,GAAS1O,GAAao4I,GACrD2B,GAAa3B,IAAmB1pI,EAChCsrI,GAAkBrxK,QAAQ+lC,GAAS1O,IAAaA,EAASt5B,SAAW04B,KAAc26I,IAGlFE,GAAqB51K,IAAao1K,KAAiB3vK,KAAcwvK,IADrB,YAAfjB,GAA2C,aAAfA,IAE1D1vK,QACDmxK,IAJ0BE,IAAmBD,IAIG9B,GAG9CiC,GAAevxK,QAAS+lC,IAAUqrI,IAAenC,GACjDuC,GAAsC,SAAf9B,GAAyB1vK,QAAQq3B,GAAUt5B,QAElEk/B,IAAcx3B,EAAAA,EAAAA,IAAgB,KAClCsqK,OAGI0B,IAAahsK,EAAAA,EAAAA,IAAgB,MACjCuoC,EAAAA,EAAAA,KAAe,KACbkrB,EAAS5qD,SAASurD,cAIhB63G,IAAYjsK,EAAAA,EAAAA,IAAgB,KAChCyzD,EAAS5qD,SAASqjK,WAIpBl1K,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEm1K,GAAmBniK,OAC3B,IAAKmiK,EACH,OAGF,MAAMC,EAAS9qK,SAASk1B,eAAe,QACjCjjB,EAAeA,KACnB,MAAM,cAAE65G,GAAkB9rH,SAC1B,GAAI8rH,GAAkBA,IAAkB35D,EAAS5qD,QAAU,CACzD,MAAM,QAAEwjK,EAAO,OAAEljK,GAAWgjK,GAE5Bz2J,EAAAA,EAAAA,KAAgB,KACd02J,EAAOhnK,MAAMojB,UAAY,cAAc6jJ,OACvCD,EAAOhnK,MAAM+D,OAAS,GAAGA,MACzB7H,SAASqgD,gBAAgB5qB,UAAYs1I,IAEzC,MACE32J,EAAAA,EAAAA,KAAgB,KACd02J,EAAOhnK,MAAMojB,UAAY,GACzB4jJ,EAAOhnK,MAAM+D,OAAS,OAO5B,OAFAgjK,EAAe14J,iBAAiB,SAAUF,GAEnC,KACL44J,EAAez4J,oBAAoB,SAAUH,MAE9C,KAGHvc,EAAAA,EAAAA,KAAU,KACR2zK,GAAiB,KAChB,CAACf,KAGJ5wJ,EAAAA,EAAAA,KAAgB,KACT7E,EAAAA,IAELta,MAAMC,KAAKwH,SAAS0D,iBAAmC,UAAUlN,SAASktC,IACxEA,EAAM1lC,SAAW/E,QAAQtE,GAAY+uC,IAAUyuB,EAAS5qD,cAEzD,CAAC5S,KAGJe,EAAAA,EAAAA,KAAU,KACHf,GAOH80K,GAAiB,GACjBphK,aAAaqhK,EAAeniK,WAP5B4qD,EAAS5qD,QAASqjK,OAClBZ,IAAgB,GAChBX,EAAgB,GAChBxsH,EAAS,IACT6sH,EAAeniK,QAAUmB,OAAOC,YAAW,IAAM8gK,GAAiB,IAjJnD,QAsJhB,CAAC90K,KAEJe,EAAAA,EAAAA,KAAU,KACHuyK,GAAmBp8J,GAAMjR,KAC9BiiD,EAASorH,GACTY,EAAmB,CAAE1pK,OAAQ0M,EAAKjR,GAAIqR,WAAU0xD,OAAQ,CAAEsqG,oBAAgBnyK,KAC1E8iH,IAAa,IAEboyD,EAAAA,EAAAA,KAAoB,KAClB,MAAMtnI,EAAQyuB,EAAS5qD,QAClBm8B,KACLiV,EAAAA,GAAAA,GAAqBjV,GAAO,GAAM,GAClCmmI,YAED,CAACh+J,GAAMjR,GAAIqtK,EAAgBh8J,KAE9Bs0B,EAAAA,GAAAA,IAAsB,EAAEC,MAClB7rC,IAAa6rC,IAAiBxB,GAASspI,GACzCzrH,EAASyrH,KAEV,CAAC3zK,EAAU2zK,EAAiBtpI,KAE/BuB,EAAAA,GAAAA,IAAsB,EAAE0qI,MACjBt2K,GAAYs2K,IAAuBxC,IACpCA,GACFkC,KACAb,MAEAY,QAED,CAACjC,EAAuB9zK,IAE3B,MAAMsqI,IAAcvgI,EAAAA,EAAAA,IAAgB,KAC7BsgC,GAAOhoC,QAAWkxK,GAKvBrrH,EAAS,IACT+7D,IAAa,GACbkwD,IACA4B,MAPEx0I,SAUJxgC,EAAAA,EAAAA,KAAU,IAAOf,GAAW+hC,EAAAA,EAAAA,GAAsBuoG,SAAenpI,GAAY,CAACnB,EAAUuhC,KAExF,MAAMg1I,IAAiBr1K,EAAAA,EAAAA,KAAQ,KAC7B,GAAK0yK,EACL,OAAOzvH,OAAOsK,OAAOmlH,KACpB,CAACA,IAEE4C,GAAelyK,QAAQiyK,IAAgBl0K,QACvCo0K,GAAuBD,KAAiBrwI,GAE9CplC,EAAAA,EAAAA,KAAU,KACJivD,GAAmBhwD,GAAUu0K,MAChC,CAACvkH,EAAiBhwD,IAErB,MAAM+zH,IAAehqH,EAAAA,EAAAA,IAAgB,KACnC,MAAMS,EAAS0M,GAAMjR,GAChBuE,GAIL6oK,IAAsB,KAChBmB,EAAsB5hK,SAC1BwhK,EAAoB,CAAE5pK,SAAQ8M,WAAU+yB,gBAItCqsI,IAAoB3sK,EAAAA,EAAAA,IAAiB4sK,IAGzC,GAFAnC,EAAsB5hK,SAAU,EAE5B+jK,EAAS34C,WAAW,OAAS+1C,EAI/B,OAHAG,EAAmB,CAAE1pK,OAAQ0M,EAAMjR,GAAIqR,WAAU0xD,OAAQ,CAAEyqG,WAAW,KACtEvrH,EAASyuH,EAASlzH,MAAM,SACxBswE,KAIF7rE,EAASyuH,GAEJA,IACH1yD,IAAa,GACbkwD,IACAK,EAAsB5hK,SAAU,OAIpC7R,EAAAA,EAAAA,KAAU,KACJspC,GACF0pF,OAED,CAAC1pF,KAEJtpC,EAAAA,EAAAA,KAAU,KACRkjH,GAAa3/G,QAAQkvK,MACpB,CAACA,KAEJzyK,EAAAA,EAAAA,KAAU,KACH46B,GAAUt5B,QACCs5B,EAASt5B,OAASoyK,EA5PA,GA8PhC1gD,OAED,CAAC0gD,EAAc94I,GAAUt5B,UAE5BtB,EAAAA,EAAAA,KAAU,KACR,GAAKf,EA4BL,OA1BAg1K,GAAwBpiK,SAAU,EAoBlCmB,OAAOyJ,iBAAiB,WAAY2gD,GACpCpqD,OAAOyJ,iBAAiB,UAAW2gD,GAEnCpqD,OAAOyJ,iBAAiB,aAAco5J,GACtC7iK,OAAOyJ,iBAAiB,YAAao5J,GAE9B,KACLA,IACA7iK,OAAO0J,oBAAoB,aAAcm5J,GACzC7iK,OAAO0J,oBAAoB,YAAam5J,IA3B1C,SAASz4G,IACPX,EAAS5qD,SAASurD,QAClB+2G,MAEA2B,EAAAA,GAAAA,KAAQ,KACN7B,GAAwBpiK,SAAU,IAEtC,CAEA,SAASgkK,IACP7iK,OAAO0J,oBAAoB,WAAY0gD,GACvCpqD,OAAO0J,oBAAoB,UAAW0gD,IAEtC04G,EAAAA,GAAAA,KAAQ,KACN7B,GAAwBpiK,SAAU,IAEtC,IAaC,CAAC5S,KAEJ2xB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQ2P,KAGV,MAAO4rB,GAAaC,GAASM,GAAiB,IAAKL,EAAAA,GAAAA,GAAkB0mE,GAAcp4F,GAE7Em7I,IAAkB51K,EAAAA,EAAAA,KAAQ,KAC9B,IAAMmpC,IAAUkpI,IAAcpmH,IAAa9qD,OACzC,OAAOmoC,GAAAA,EAET,MAAM9zB,GAAS89B,EAAAA,EAAAA,MAEf,OAAO2Y,GAAYzqD,KAAKq0K,IACtB,MAAOvsK,EAAQvE,IAAMmwH,EAAAA,GAAAA,GAAqB2gD,GACpCprK,GAAUuvB,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQvE,GAClD,IAAK0F,EACH,OAGF,MAAMqrK,EAAkBhnH,IAAmBw3D,EAAAA,EAAAA,IAAYh9G,IAAWA,IAAWysK,EAAAA,KACzEC,EAAAA,EAAAA,KAAsBxgK,EAAQ/K,QAAWxK,EACvCu3B,GAAgBC,EAAAA,EAAAA,KAAajiB,EAAQ/K,GAK3C,MAAO,CACLorK,kBACAprK,UACA4mK,aAPkBx8H,EAAAA,EAAAA,KAAWr/B,EAAQ/K,EAAQnB,QAQ7C8nK,WANiB0E,GAAkBt+I,MAQpCsL,OAAO1/B,WACT,CAAC+lC,EAAOkpI,EAAUpmH,GAAa6C,IAE5BmnH,IAAqBptK,EAAAA,EAAAA,IAAiB4B,IAC1C,MAAMorK,GAAkBK,EAAAA,GAAAA,GAAmBzrK,GACrC7J,EAAQ65B,GAAUgH,QAAQo0I,IAAoB,EAEpDrC,EADkB5yK,EAAQ4rD,IAGP,SAAfsmH,GACFqB,IAAgB,GAGlBt8I,EAAa,CACXvuB,OAAQmB,EAAQnB,OAChBsV,UAAWnU,EAAQ1F,GACnBqR,SAAWy8J,OAA4B5yK,EAAXmW,IAG9B69J,QAGIkC,IAAyBttK,EAAAA,EAAAA,IAAgB,KAC7CsrK,IAAiB3yG,IAAUA,IAC3BwyG,QAGI/oJ,IAAgB8iC,EAAAA,GAAAA,GAA0B/+B,EAAculJ,IAAsB3zK,IAClF,MAAMw1K,EAAcR,MAA6B,IAAXh1K,EAAe,EAAIA,GACrDw1K,IACFH,GAAmBG,EAAY3rK,SAC/B+oK,EAAgB5yK,EAAQ4rD,OAEzB,IAAI0lH,MAA0B,GAE3BmE,IAAqBxtK,EAAAA,EAAAA,IAAiBi/D,IAC1CkrG,EAAmB,CAAE1pK,OAAQ0M,EAAMjR,GAAIqR,WAAU0xD,WAEjD+qD,QAGIyjD,IAAoBztK,EAAAA,EAAAA,IAAiB0tK,IACrChB,GACFvuI,EAAiB,CACfQ,eAAgB,eAKpB6uI,GAAmB,CAAEhE,SAAUkE,OAG3BC,IAAuB3tK,EAAAA,EAAAA,IAAgB,KAC3CwtK,GAAmB,CAAEhE,cAAUpyK,OAG3Bw2K,IAAkB5tK,EAAAA,EAAAA,IAAgB,KAClCgqK,EACFwD,GAAmB,CAAE9D,WAAW,IAI9BF,GACFmE,QAIEE,IAAyB7tK,EAAAA,EAAAA,IAAiB/F,IAC9CuzK,GAAmB,CAAEvzK,SACrBqxK,IAAgB,MAGZwC,IAAmB9tK,EAAAA,EAAAA,IAAgB,KACvC,GAAmB,SAAfiqK,IACJmB,KACAa,KACIr6I,GAAU,CACZ,MAAMm8I,EAAgBrD,EAAe,GAC9BjqK,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBz6F,EAASm8I,IAC1D/+I,EAAa,CAAEvuB,SAAQsV,YAAWxI,aAClCo9J,EAAgBoD,EAClB,KAGIC,IAAmBhuK,EAAAA,EAAAA,IAAgB,KACvC,GAAmB,SAAfiqK,IACJmB,KACAa,KACIr6I,GAAU,CACZ,MAAMm8I,EAAgBrD,EAAe,GAC9BjqK,EAAQsV,IAAas2G,EAAAA,GAAAA,GAAqBz6F,EAASm8I,IAC1D/+I,EAAa,CAAEvuB,SAAQsV,YAAWxI,aAClCo9J,EAAgBoD,EAClB,KAGF,SAASE,GAAch0K,EAAwBi0K,GAC7C,MAAM70E,GAAc60E,GAAYjE,IAAehwK,EAC/C,OAAQA,GACN,IAAK,OACH,OACER,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPtK,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOwxK,WAAY5wE,GAAc5gG,GAAO01K,cAClEluK,OAAQkN,GAAMjR,GACd0B,MAAOpH,EAAQ,kBACfoK,SAAS,OACTrK,QAAS23K,EAAWN,GAAkBC,KAG5C,IAAK,UACH,OACEp0K,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPtK,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOwxK,WAAY5wE,GAAc5gG,GAAO01K,cAClEluK,OAAQywB,EACRhwB,eAAa,EACb9C,MAAOpH,EAAQ,oBACfoK,SAAS,UACTrK,QAAS23K,EAAWN,GAAkBC,KAG5C,IAAK,WACH,OACEp0K,EAAAA,GAAAA,GAAC+G,GAAAA,EAAQ,CACPtK,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOwxK,WAAY5wE,GAAc5gG,GAAO01K,cAClE79D,WAAY64D,GACZvrK,MAAOpH,EAAQ,qBACfoK,SAAS,WACTrK,QAAS23K,EAAWN,GAAkBC,KAKhD,CAEA,SAASO,KACP,OACE71K,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO41K,UAAWxC,IAAsBpzK,GAAO61K,gBAAgB51K,SAAA,EAC1FgD,IAAYjC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO81K,YACpC9B,KAAiBzC,IAChBvwK,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACTC,GAAOoxK,WACNnuK,GAAYjD,GAAO+1K,KACpB,gBACA91K,SAED8zK,GAAe7zK,KAAK+0K,IACnB,MAAMe,GAAWvkI,EAAAA,EAAAA,IAAewjI,EAAI5iI,SAAU0+H,GAC9C,OACE/vK,EAAAA,GAAAA,GAACi1K,GAAAA,EAAc,CACbpkI,YAAY,eAEZQ,SAAU4iI,EAAI5iI,SACd4iI,IAAKA,EACLiB,WAAS,EACTrlK,WAAYojK,GACZ+B,SAAUA,EACVl4K,QAASk4K,EAAWd,GAAuBF,KANtCriI,EAAAA,EAAAA,IAAesiI,EAAI5iI,gBAYjCk/H,IACCzxK,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOm2K,YAAa,gBAAgBl2K,SAAA,CAE7Du1K,GAAc,QACdA,GAAc,WACdA,GAAc,eAGlBvC,KACCnzK,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACb1uC,IAAKuU,EACLjwB,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO2uH,QAAS,iBAC1C7mE,MAAOwsH,GACPnmH,aAAc,IAAIyiH,KAClBpwG,iBAAkB,EAClBzY,WAAY6C,GACZ+C,UAAWhkC,GAAc1pB,SAAA,CAExBkzK,KACCnyK,EAAAA,GAAAA,GAAA,QAAoBvD,UAAWuC,GAAO4tD,YAAY3tD,SAC/ClC,EAAQ,mBAAoB8pC,IADrB,WAIXqrI,KACClyK,EAAAA,GAAAA,GAAA,QAAsBvD,UAAWuC,GAAO4tD,YAAY3tD,SACjDlC,EAAQ,6BADD,aAIXu2K,IAAiBp0K,KAAI,EACpBiJ,UAAS2mK,aAAYC,cAAawE,mBACjCpsH,KACDnnD,EAAAA,GAAAA,GAAC6uK,GAAkB,CAEjBuG,eAAgBjtK,EAAQ6tB,KACxBv5B,UAAWmzK,GACX/oI,MAAOA,EACP1+B,QAASA,EACT2mK,WAAYA,EACZC,YAAaA,EACbC,eAAgBuB,EAChB/zK,SAAUy0K,EAAe/mH,KAAmB/C,EAC5CrqD,QAAS62K,IATJJ,UAgBnB,CAEA,OACEz0K,EAAAA,GAAAA,IAAA,OACE2D,GAAG,eACHhG,WAAWsC,EAAAA,GAAAA,GACTC,GAAO+hC,KACPvkC,GAAYwC,GAAOa,QAClBrD,GAAY60K,GAAiB,kBAC9BI,IAAazyK,GAAOq2K,QACpBpzK,GAAYjD,GAAOs2K,QAErBn9J,IAAKA,EAAIlZ,SAAA,EAETH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOuE,OAAOtE,SAAA,EAC1BgD,IACAjC,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjK,UAAWuC,GAAOyI,OAClBd,KAAM+M,EACNjT,KAAK,SACL+rD,gBAAiBA,KAGrB1tD,EAAAA,GAAAA,IAAC0nD,GAAAA,EAAW,CACVruC,IAAK6hD,EACLnzD,MAAOggC,EACPpqC,WAAWsC,EAAAA,GAAAA,GACTC,GAAOusC,MACP6mI,IAAsBpzK,GAAOu2K,aAC7BnD,KAAuBnwK,GAAYjD,GAAOw2K,oBAE5CC,UAAWxzK,EACXs1B,UAAWA,GACXm+I,oBAAqB,IAAI12K,GAAO2uH,YAAYiiD,KAC5C+F,YAAarD,KAAyBrwK,EACtC2zK,cAAetD,KAAyBrwK,EACxC2qD,YAA8B7vD,EAAjBwzK,EAAyB,qBAAgC,UACtE7kI,2BAAyB,EACzBt5B,SAAU8gK,GACV2C,iBAAkB1B,GAClB10G,QAASqnE,GACTgvC,aAAc7zK,EACd27C,QAAS8zH,GACT2D,QAAS5D,GACTsE,UAAW3E,EAAgBiD,QAAmB12K,EAC9Cq4K,YAAa7E,EAAgBoD,QAAmB52K,EAAUsB,SAAA,EAE1DH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOi3K,WAAWh3K,SAAA,CAC/B8wK,IACC/vK,EAAAA,GAAAA,GAACi1K,GAAAA,EAAc,CACbpkI,YAAY,oBACZp0C,UAAWuC,GAAOk3K,eAClB7kI,SAAU0+H,EACVkE,IAAK7D,GAAWz+H,EAAAA,EAAAA,IAAeo+H,IAC/BjzK,QAASo3K,KAGZ3D,IAAkBvwK,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOm3G,KAAKl3G,SAAC,UAEhDgD,GAAY0yK,SAEd1yK,IACAjC,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOm3K,MAAMl3K,UAC3Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cAEN9I,QAASA,IAAMg0K,EAAoB,CAAE37G,YAAYihH,EAAAA,GAAAA,IAAc9mJ,KAAKC,SACpEzY,UAAW/Z,EAAQ,cAAckC,UAEjCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,oBAKlBW,GAAY0yK,KACZ1yK,IACCnD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOwE,OAAOvE,SAAA,EAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLpW,KAAK,UACLmF,MAAM,cAEN9I,QAASA,IAAMg0K,EAAoB,CAAE37G,YAAYihH,EAAAA,GAAAA,IAAc9mJ,KAAKC,SACpEzY,UAAW/Z,EAAQ,cAAckC,UAEjCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOq3K,QAAQp3K,SAC5BozK,KACCl6I,GAAUt5B,OACR9B,EAAQ,KAAM,CAAC2B,KAAKZ,IAAImzK,EAAe,EAAG,GAAIj3D,IAC5C7hF,IAAaA,EAASt5B,QACxB9B,EAAQ,eAIE,SAAfyzK,GAAyB1vK,QAAQq3B,GAAUt5B,UAC1CmB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAWuC,GAAOs3K,UAClB71K,KAAK,UACLS,QAAM,EACN8kD,OAAK,EACL7kD,mBAAiB,EACjBrE,QAAS+2K,GAAuB50K,SAEhBlC,EAAf60K,GAAuB,eAA0B,kBAGrDU,KAAyBF,KACxBtzK,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOu3K,iBAAiBt3K,SAAA,EACtCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOw3K,kBAAmBpF,GAAiBpyK,GAAOy3K,oBAC5E5/J,OAAK,EACLpW,KAAK,UACLmF,MAAM,YACN9I,QAASu3K,GACT7iI,gBAAiB4/H,EACjBt6J,UAAW7Z,EAAK,yBAAyBgC,UAEzCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOw3K,kBAAmBrF,GAAiBnyK,GAAOy3K,oBAC5E5/J,OAAK,EACLpW,KAAK,UACLmF,MAAM,YACN9I,QAASy3K,GACT/iI,gBAAiB2/H,EACjBr6J,UAAW7Z,EAAK,yBAAyBgC,UAEzCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,wB,wCE1qB3B,MAAM6mG,GAAsB,IAAMtuF,EAAAA,EAqUlC,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,SACJshG,EAAQ,MACRc,EAAK,OACLstE,EAAM,SACNC,EAAQ,OACRC,GACE1jK,EAAOwsE,SAELlzB,GAAkBr1B,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAC/C0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1B6vK,GAAoB7jK,EAAAA,EAAAA,IAAShM,QAA+DrJ,GAArDswD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAASq2F,YAAY56F,GAE7F,MAAO,CACLiR,OACAojK,eAAgBF,GAAQl3F,SACxBq3F,aAAcH,GAAQhuE,OACtBouE,eAAgBN,EAAOh3F,SACvBgkB,iBAAkBizE,EAASj3F,SAC3B6oB,gBAAiBD,EACjB4xD,YAAa9wD,EAAMC,OACnBC,YAAY2tE,EAAAA,EAAAA,KAAyB/jK,GACrCs5C,kBACA7pB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjD2jK,sBAzBc5jK,EAnU6BikK,EAC/CxjK,OACAI,WACArX,YACA8c,WACA2qF,gBACAxB,cACAkjE,kBACAoR,iBACAtzE,mBACAozE,iBACAC,eACA7c,cACA3xD,kBACAsuE,mBACAvtE,aACA98C,kBACA7pB,uBACAwhE,iBACA5I,WACA+I,kBACA6yE,mBAEA,MAAM,mBACJC,EAAkB,iBAClBC,EAAgB,cAChBC,EAAa,YACbC,EAAW,oBACXC,IACEnxK,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,MACfkrB,GAAYlrB,EAAAA,EAAAA,MACZuuF,GAAkBvuF,EAAAA,EAAAA,OAGtB0yC,aAAcwoD,EACd5oD,cAAe6oD,GACb/oD,KAEEo2H,GAAoBC,EAAAA,GAAAA,GAAqBhkK,GAAMjR,GAAIqR,GAEnD02F,EAAS,GAAGjP,iBACZ,eACJE,EAAc,0BACdG,EAAyB,mCACzBkB,EAAkC,mCAClCL,EAAkC,6BAClCM,EAA4B,iBAC5B5T,GACEmS,GAA0B5uE,EAAcyN,EAAWqwE,EAAQjxF,GAEzDtc,GAAOD,EAAAA,EAAAA,KAEP0tG,EAAiB5pG,QAAQo5J,GAEzBvvD,GAAUjtG,EAAAA,EAAAA,KAAQ,KACtB,GAAIy5K,GAAgBL,EAAgB,CAClC,MAAMa,EAAiD,GAoBvD,OAnBIZ,GAAcl4K,QAChB84K,EAAWn5K,KAAK,CACdiE,GAAIykG,EAAAA,IACJL,WAAY,IACZ1iG,MAAO,GACPu7E,SAAUq3F,EACV5gJ,MAAO4gJ,EAAal4K,OACpB+mG,SAAS,IAGTkxE,GAAgBj4K,QAClB84K,EAAWn5K,KAAK,CACdiE,GAAI0kG,EAAAA,IACJN,WAAY,IACZ1iG,MAAOlH,EAAK,kBACZyiF,SAAUo3F,EACV3gJ,MAAO2gJ,EAAej4K,SAGnB84K,CACT,CAEA,IAAKzd,EACH,OAAOlzH,GAAAA,EAGT,MAAM4jE,EAAc,GAEhBlH,EAAiB7kG,QACnB+rG,EAAYpsG,KAAK,CACfiE,GAAIgjG,EAAAA,IACJoB,WAAY,IACZ1iG,MAAOlH,EAAK,oBACZyiF,SAAUgkB,EACVvtE,MAAOutE,EAAiB7kG,SAIxBm4K,EAAen4K,QACjB+rG,EAAYpsG,KAAK,CACfiE,GAAI4iG,EAAAA,IACJwB,WAAY,IACZ1iG,MAAOlH,EAAK,kBACZyiF,SAAUs3F,EACV7gJ,MAAO6gJ,EAAen4K,SAI1B,MAAM4sG,EAAa,IAAKyuD,GAAe,IACnC2c,GACFprE,EAAWV,QAAQ8rE,GAGrB,MAAMe,EAAsBj3H,OAAOsK,QAAOo/C,EAAAA,GAAAA,IAAW9B,EAAiBkD,IAEtE,MAAO,IACFb,KACAgtE,KAEJ,CACD1d,EACA3xD,EACA7E,EACAszE,EACAH,EACA55K,EACA65K,EACAK,EACAJ,IAGInrE,GAAkBluG,EAAAA,EAAAA,KAAQ,IAC9BgtG,GAC4D,IAAzDC,EAAQnqE,QAAQlwB,GAAQA,EAAIovE,UAAU7gF,SAAQA,QAChD,CAAC8rG,EAASD,KAEbntG,EAAAA,EAAAA,KAAU,KACHmlG,IACL00E,IACKxR,GACL6R,EAAkB,CAAEj3K,KAAM,qBACzB,CAAColK,EAAiBljE,EAAa00E,EAAoBK,IAEtD,MAAM1kD,GAAoBjnB,EAAAA,GAAAA,GAAkB,GAAI1Q,EAAAA,KAC1Cy8E,EAAuBntE,GAAkBqoB,IACzCnnB,IAAoBg6D,GAAmBuR,IAE7C98F,EAAAA,GAAAA,GAAoBlgD,GAAY09I,IAAyB19I,EAAU/qB,UAGnE7R,EAAAA,EAAAA,KAAU,KACR,IAAKmtG,EACH,OAGF,MAAMnnG,EAAS42B,EAAU/qB,QACzB,IAAK7L,EACH,OAGF,MAAMyoG,EAAUvQ,EAAiB0M,IAAuB5kG,EAAOyrC,YAAc,EAAIm5D,GAAsB,IAEvGriB,EAAAA,GAAAA,GAAwBviF,EAAQyoG,KAC/B,CAACtB,EAAgBjP,IAEpB,MAAMq8E,GAAsBvxK,EAAAA,EAAAA,IAAgB,CAACq4E,EAAqBiqC,EAAoBk9C,KACpFzhE,EAAgB1lB,EAASiqC,EAAUk9C,GAAgB,GACnDsR,EAAiB,CAAEz4F,eAGfm5F,IAAsBxxK,EAAAA,EAAAA,IAAiBq4E,IAC3C04F,EAAc,CAAE14F,eAGZo5F,IAAoBzxK,EAAAA,EAAAA,IAAiBq4E,IACzC24F,EAAY,CAAE34F,eAGVq5F,IAAkB1xK,EAAAA,EAAAA,IAAgB,KACjCq/J,GACL6R,EAAkB,CAAEj3K,KAAM,qBAGtB03K,IAA4B3xK,EAAAA,EAAAA,IAAiBq4E,IACjD44F,EAAoB,CAAE54F,eAGxB,IAAKlrE,EAAM,OA+DX,MAAMi8B,IAAgB5wC,EAAAA,GAAAA,GzJzUD,WyJyU6BtC,GAElD,IAAKo7K,EACH,OACE73K,EAAAA,GAAAA,GAAA,OAAKvD,UAAWkzC,GAAc1wC,SAC1B2mK,GAAoBuR,EAElBvrE,GACF5rG,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAsBC,SAAEhC,EAAK,iBAE7C+C,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAJR/sD,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAsBC,SAAEhC,EAAK,sCAUrD,MAAM0I,IAAkB5G,EAAAA,GAAAA,GACtBC,GACA,gBACCorG,GAAuBprG,IAG1B,OACEF,EAAAA,GAAAA,IAAA,OAAKrC,UAAWkzC,GAAc1wC,SAAA,EAC1Bk4K,IACAn3K,EAAAA,GAAAA,GAAA,OAAKmY,IAAKgiB,EAAW19B,UAAWkJ,GAAgB1G,UAC9CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCe,EAAAA,GAAAA,GAAA,UAAQmY,IAAKqlF,EAAiB/gG,UAAU,kBACvCkuG,EAAQzrG,KAzFnB,SAAqBm+F,EAA8C/+F,GACjE,MAAM8tG,EAAe/O,EAAW3d,WAAW,GACrC3C,GAAkBh+E,EAAAA,GAAAA,GAAeC,GAAqBV,IAAUm9F,GzJ9QoJ,YyJ+QpN4Q,EAAmB/tG,EAAQguG,EAAAA,IAEjC,OAAIjP,EAAW56F,KAAO4iG,EAAAA,KACjBhI,EAAW56F,KAAOgjG,EAAAA,KAClBpI,EAAW56F,KAAO01K,EAAAA,KAClB96E,EAAWI,eACV2O,GAGFpsG,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAELvE,UAAWsgF,EACXjmE,UAAWumF,EAAWl5F,MACtB0S,OAAK,EACLsvC,MAAOk3C,EAAW56F,KAAO4iG,EAAAA,KAAwBhI,EAAW56F,KAAOgjG,EAAAA,IACnE7/F,MAAM,cAEN9I,QAASA,IAAMqsF,EAAiB7qF,GAAOW,SAEtCo+F,EAAW56F,KAAO4iG,EAAAA,KACjBrlG,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,WACT+7F,EAAW56F,KAAOgjG,EAAAA,KACpBzlG,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aACT+7F,EAAW56F,KAAO01K,EAAAA,KACpBn4K,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACC,KAAM+M,EAAMjT,KAAK,WAEzBT,EAAAA,GAAAA,GAACo9F,GAAe,CACdC,WAAYA,EACZx5E,QAASylF,IAAe5G,EACxBnF,oBAAqBR,EACrBS,gBAAiB6O,EAAmB7O,OAAkB7/F,EACtD0tB,eAAa,KArBZgyE,EAAW56F,KA4BlBzC,EAAAA,GAAAA,GAACu/F,GAAa,CAEZ3gB,QAASwtB,EACT3rG,KAAM68F,EAAAA,IACNn5F,MAAOk5F,EAAWl5F,MAClB1H,UAAWsgF,EACXl5D,QAASylF,IAAe5G,EACxBnF,oBAAqBR,EACrByC,eAAa,EACb78D,sBAAoB,EACpB66D,gBAAiB6O,EAAmB7O,OAAkB7/F,EACtDoiG,qBAAsBmE,EACtBpnG,QAASqsF,EACThiF,SAAU7I,EACV+sB,eAAa,GAbRgyE,EAAW56F,GAiBxB,UAkCIzC,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLzD,YAAagvJ,GACbtxH,SAAUwjD,EACV1tG,WACEsC,EAAAA,GAAAA,GACEC,GACAya,EAAAA,GAAe,eAAiB,iBAC/B09J,GAAgBn4K,IAEpBC,SAEA0rG,EAAQzrG,KAAI,CAACm+F,EAAYl2C,KACxBnnD,EAAAA,GAAAA,GAACwjG,GAAU,CAETnG,WAAYA,EACZqF,YAAa5hG,QAAQwoG,GAAc5G,GACnCyB,eAAgBA,EAChB7lG,MAAO6oD,EACPo0C,SAAUiP,EACVjN,oBAAqB3B,EACrBkB,mCAAoCA,EACpCL,mCAAoCA,EACpCgH,aAAchI,GAAkBt0C,EAAI,GAAKs0C,GAAkBt0C,EAAI,EAC/Du8C,iBAAkBA,EAClBl3C,gBAAiBA,EACjB7pB,qBAAsBA,EACtBuhE,cAAeA,EACfD,iBAAkB5G,EAAW56F,KAAOo0K,EACpCvyE,gBAAiBwzE,EACjBvzE,gBAAiBwzE,GACjBvzE,cAAewzE,GACfvzE,sBAAuByzE,GACvB7sJ,eAAa,EACbu4E,iBAAkBvG,EAAW56F,KAAOykG,EAAAA,KApB/B7J,EAAW56F,eCjO5B,IAAenG,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,mBAAE+6C,EAAkB,aAAEknD,GAAiB/1F,EAAO8uC,WAE9C,mBAAEo2H,GAAuBllK,EAAOk/B,WAAa,CAAC,GAC9C,iBAAEimI,EAAgB,wBAAExuE,IAA4B57C,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAW,CAAC,EAE7F,MAAO,CACLqxK,mBACAt2H,qBACAknD,eACAqvE,eAAgBF,EAChBxuE,mBAAoBC,KAZN52F,EAhGqCslK,EACvD71E,cACA21E,mBACAt2H,qBACAknD,eACAnF,sBACA8F,qBACAzhG,UACAmwK,iBACAl0E,mBACAC,wBAEA,MAAM7G,GAAkBvuF,EAAAA,EAAAA,MAClB0zF,GAAoB1zF,EAAAA,EAAAA,OAClBI,MAAO2e,IAAgBE,EAAAA,GAAAA,MACzB,cAAEsqJ,IAAkBt2K,EAAAA,EAAAA,MAEpBu2K,EAAmBtwK,GAAS65C,WAAW2rE,QAEvC+qD,EAA4BJ,GAAkBG,GAC/CA,EAAiB55K,QAAUy5K,EAE1BK,GAAwBj7K,EAAAA,EAAAA,KAAQ,KACpC,GAAIg7K,EAA2B,CAC7B,MAAM12H,EAAYy2H,EAAiBv5K,KAAI,EAAGmyC,cAAeA,IAIzD,OAHIu4D,GACF5nD,EAAU+oD,QAAQ,CAAEvqG,KAAM,SAErBwhD,CACT,CAEA,IAAKq2H,EACH,MAAO,GAGT,GAA8B,QAA1BA,EAAiB73K,KAAgB,CACnC,MAAMo4K,GAA0C72H,GAAsB,IAAI7iD,KAAI,EAAGmyC,cAAeA,IAIhG,OAHIu4D,GACFgvE,EAAgB7tE,QAAQ,CAAEvqG,KAAM,UAE3Bq4K,EAAAA,EAAAA,IAAcD,EAAiB3vE,EACxC,CAEA,MAAM2vE,EAAyCP,EAAiBS,QAAQ74H,QAKxE,OAJI2pD,GACFgvE,EAAgB7tE,QAAQ,CAAEvqG,KAAM,UAG3Bq4K,EAAAA,EAAAA,IAAcD,EAAiB3vE,KACrC,CACDlnD,EAAoBs2H,EAAkBpvE,EAAcyvE,EAA2BD,EAAkB7uE,IAG7FmvE,GAAer7K,EAAAA,EAAAA,KAAQ,KAC3B,MAAMs7K,EAAct6K,KAAKC,IA1DD,MA0D2Bkb,EAAAA,EAAKmU,GAClDirJ,GAAYjrJ,EA9DK,IAIE,KACD,IAyD2EnU,EAAAA,EAC7FohB,EAAiB+9I,EA9DI,GA8DmCn/J,EAAAA,EAExDq/J,EAAax6K,KAAKsgB,OAAOic,EAAiBg+I,IAlE9B,GAkE2DA,IACvE1pG,EAAY7wE,KAAKm+E,KAAK87F,EAAsB95K,OAASq6K,GAErDC,EArEY,GAqEM5pG,GAA6BA,EAAY,GAAK0pG,EAnE3C,GAmE+Ep/J,EAAAA,EAAM,EAEhH,OAAOnb,KAAKC,IApEa,GAoEckb,EAAAA,EAAKs/J,KAC3C,CAACR,EAAsB95K,OAAQmvB,IAElC,OACEhuB,EAAAA,GAAAA,GAAA,OAAKvD,UCzHc,WDyHUkP,MAAO,WAAWotK,MAAiB95K,UAC9De,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GC1HsB,WD0HSy5K,EAAgB,eAAiB,iBAAiBv5K,UAC/FH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,+CAA8CwC,SAAA,EAC3De,EAAAA,GAAAA,GAAA,UAAQmY,IAAKqlF,EAAiB/gG,UAAU,mBACxCuD,EAAAA,GAAAA,GAAA,UAAQmY,IAAKwqF,EAAmBlmG,UAAU,kBACzCk8K,EAAsBz5K,KAAKmyC,IAC1B,MAAM22D,GAAar2D,EAAAA,EAAAA,IAAeN,GAC5BuuD,EAAaoI,EAAalE,GAAqB/wE,SAASi1E,QAAcrqG,EAE5E,OACEqC,EAAAA,GAAAA,GAACyiG,GAAa,CAEZpxD,SAAUA,EACVuuD,WAAYA,EACZ8C,YAAaA,EACb3gD,mBAAoBA,EACpBjlD,QAASsnG,EACTj7E,cAAek7E,EACf7G,gBAAiBA,EACjBmF,kBAAmBA,GARdqF,iBErEfoxE,GAA0B,OAASv/J,EAAAA,EAoOzC,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAM8pD,GAAQ1pD,EAAAA,EAAAA,KAAeJ,GACvBmmK,EAAsBnmK,EAAOmmK,qBAC7B,OACJryK,EAAM,UAAEsV,EAAS,YAAEg9J,EAAW,QAAEzzI,EAAO,SAAE9iB,EAAQ,cAAEw2J,EAAa,aAAEpC,GAChEn6G,EAAMzpB,gBAAkB,CAAC,EACvB7Q,EAAQ42I,GAAezzI,GACzBiD,EAAAA,EAAAA,KAAgB51B,EAAQomK,EAAazzI,QACrCloC,EACE+V,EAAO1M,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,QAAUrJ,EAC7CqwD,EAAehnD,GAASinD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,QAAUrJ,EAC7DwK,EAAUnB,GAAUsV,GAAYob,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQsV,QAAa3e,EAC/EyqH,GAAgBp1G,EAAAA,EAAAA,IAAShM,GAAUsyK,GAAe,IAClDE,EAAmE,SAAzCxrH,GAAcqqH,kBAAkB73K,MAC1D,mBAAE43K,GAAuBllK,EAAOk/B,WAAa,CAAC,EAC9CqnI,EAAkE,QAAzCzrH,GAAcqqH,kBAAkB73K,MAC1DwtD,GAAcqqH,kBAAkBqB,iBAE/BjB,EAAmBtwK,GAAS65C,WAAW2rE,QACvC+qD,EAA4B53K,QAAQs3K,GAAsBK,GAC3DA,EAAiB55K,QAAUu5K,GAEhC,MAAO,CACLjwK,UACAu6B,QACA3f,WACA42J,sBAAsBjmK,GAAMkmK,aAAeJ,GAA2Bd,KACjEe,GAA0BrxD,GAC/BlkB,eAAewI,EAAAA,EAAAA,KAA+Bx5F,GAC9CyvB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,GACjDqmK,gBACApC,eACAnwK,SACAqyK,yBAjCgBpmK,EAlO8B4mK,EAChDz2K,SACA+E,UACAu6B,QACA3f,WACAmhF,gBACAvhE,uBACAg3I,sBACAJ,gBACAvyK,SACAmwK,eACAkC,0BAEA,MAAM,eACJS,EAAc,oBAAEC,EAAmB,YAAErpH,EAAW,iBAAEjsB,EAAgB,kBAAEwL,EAAiB,kBAAE+pI,EAAiB,wBACxGC,EAAuB,qBAAEC,EAAoB,sBAAEC,IAC7C9zK,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KAEPo9K,GAAoBjsI,EAAAA,GAAAA,GAAiBhmC,GAAS1F,IAAI,GAClD43K,GAAiBlsI,EAAAA,GAAAA,GAAiBhmC,GAASnB,QAAQ,GACnDszK,GAAsBnsI,EAAAA,GAAAA,GAAiBzL,GAAOl8B,QAAQ,GACtD+zK,GAAkBpsI,EAAAA,GAAAA,GAAiBzL,GAAOjgC,IAC1C+3K,GAAiBrsI,EAAAA,GAAAA,GAAiBprB,GAAU,GAC5CqvD,GAAUnjE,EAAAA,EAAAA,MACVwrK,GAAoB/8K,EAAAA,EAAAA,KAAQ,KAChC,GAAK88K,EAIL,OAAID,EACKC,EAGF,CACL51K,EAAG41K,EAAe51K,GAAK+0K,GAxCQ,IACG,IAwClC50K,EAAGy1K,EAAez1K,GAAK40K,GAzCgB,IACG,OA0C3C,CAACY,EAAiBC,EAAgBb,IAE/BpnG,GAAiBhsE,EAAAA,EAAAA,IAAgB,IAAM6rE,EAAQhjE,UAC/C4xF,GAAYz6F,EAAAA,EAAAA,IAAgB,KAAM,CACtC06F,YAAY,EACZy5E,SAAUJ,EACVK,SAASr9H,EAAAA,EAAAA,OAAiB80B,EAAQhjE,UAC5BgjE,EAAQhjE,QAAQ4/B,YAAcoqI,IAA2B,IAAIwB,KAC/D,MAGAC,GAA6Bt0K,EAAAA,EAAAA,IAAiBq4E,IAClD,IAAKy7F,IAAmBD,EACtB,OAEF,MAAM/oI,EAAwButC,EAAQ+hB,cAClC,CAAEngG,KAAM,SAAUyoF,WAAYrK,EAAQn8E,IACtC,CAAEjC,KAAM,QAASy5J,SAAUr7E,EAAQiN,OAEvCiuF,EAAe,CACb9yK,OAAQqzK,EAAgB/9J,UAAW89J,EAAmB/oI,WAAUypI,mBAAmB,IAErFf,OAGIgB,GAAuBx0K,EAAAA,EAAAA,IAAiB8qC,IACvCgpI,GAAmBD,IAIF,SAAlB/oI,EAAS7wC,KACX05K,EAAqB,CACnBlzK,OAAQqzK,EAAgB/9J,UAAW89J,EAAmBjkJ,MAAO,IAG/D2jJ,EAAe,CACb9yK,OAAQqzK,EAAgB/9J,UAAW89J,EAAmB/oI,WAAUypI,mBAAmB,IAGvFf,QAGIiB,GAA4Bz0K,EAAAA,EAAAA,IAAiB8qC,IAC3B,SAAlBA,EAAS7wC,OAEb25K,EAAsB,CACpBnzK,OAAQqzK,EACR/9J,UAAW89J,IAEbL,QAGIkB,GAA4B10K,EAAAA,EAAAA,IAAiB4M,IACjD,GAAI,SAAUA,GAAsB,SAAdA,EAAK3S,KAAiB,OAE5C,MAAM6wC,EAAW,OAAQl+B,EAAO,CAAE3S,KAAM,SAAUyoF,WAAY91E,EAAK1Q,IAAgB0Q,EAE7EyrE,EAAU,SAAUzrE,GAAsB,WAAdA,EAAK3S,MAAoBwwC,EAAAA,EAAAA,MAAYg4C,aAAa//C,KAAK91B,EAAK81E,YAC1F,OAAQ91E,EAAOA,OAAOxV,EAE1B,GAAIihF,IAAYA,EAAQ6hB,SAAW99D,EAYjC,OAXA8B,EAAiB,CACft8B,QAASlL,EAAK,0BACd2K,OAAQ,CACNA,OAAQ,mBACRu2H,QAAS,CAAEj5F,eAAgB,mBAE7B4oG,WAAY7wI,EAAK,sBAGnB88K,IAKF,IAAKR,EASH,OARAtpI,EAAkB,CAChBzpC,OAAQ8zK,EACRz0I,QAAS00I,EACT1pI,aAAaC,EAAAA,EAAAA,IAAYwpI,EAAsBC,GAC/ClpI,WACAypI,mBAAmB,SAErBf,IAIF,IAAI/gK,EACAkzE,EAEJ,GAAI,SAAU/4E,GAAsB,UAAdA,EAAK3S,KACzBwY,EAAO7F,EAAK8mJ,aACP,CACL,MAAMihB,GAAqBC,EAAAA,GAAAA,KAAyBC,EAAAA,GAAAA,IAAqBx8F,IACzE5lE,EAAOkiK,EAAmBliK,KAC1BkzE,EAAWgvF,EAAmBhvF,QAChC,CAEAx7B,EAAY,CAAE13C,OAAMkzE,WAAUmvF,YAAY,IAC1CtB,OAGIjC,GAAsBvxK,EAAAA,EAAAA,IAAiBq4E,IAC3C,MAAM08F,EAAmB36H,OAAOsK,OAAOouH,GACjCkC,EAAWD,EAAiB97K,MAAMo3K,GAAWA,EAAO4E,kBAAoB58F,EAAQn8E,MAAKA,GAEvFuE,GAAQgzK,EAAkB,CAAEhzK,SAAQ8M,SAAUupC,EAAAA,GAAgBk+H,aAE9DA,GAAUtB,EAAwB,CAAC,GACvCF,OAGIj2E,GAAsBpmG,EAAAA,EAAAA,KAAQ,KAC1ByK,GAAS65C,WAAW2rE,SAAW,IAAI9vH,QAAiB,CAACqtD,GAAOuwH,cAAapqI,oBAC3D1zC,IAAhB89K,GACFvwH,EAAI1sD,MAAKmzC,EAAAA,EAAAA,IAAeN,IAGnB6Z,IACN,KACF,CAAC/iD,GAAS65C,WAAW2rE,UAExB,OACE3tH,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQA,EACR+U,IAAKi6D,EACL31E,WAAWsC,EAAAA,GAAAA,GCtOM,WDsOsB,kBACvCsuG,iBAAiBtuG,EAAAA,GAAAA,GCvOyB,YDyOvC46K,IAAwBY,GCzOiE,WD0O1FA,GC1O+D,YD4OjEt5E,YAAU,EACVmM,WAAS,EACT5zB,OAAQihG,EACRl3J,UAAWmf,GAAS,SACpB2vC,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,EAChByuB,UAAWA,EACX06E,yBAAyB,iBACzB93K,QAASm2K,EAAoB96K,SAE5Bk4K,GAAgBnwK,GACfhH,EAAAA,GAAAA,GAACk3K,GAAa,CACZz6K,UAAU,GACV8c,UAAWnW,EACXs/F,YAAa5hG,QAAQsC,GAAUu2K,GAC/Bp+E,SAAS,iBACTqqE,iBAAiB,EACjBzhE,gBAAgB,EAChBn9F,OAAQA,EACRk9F,cAAeA,EACfI,gBAAiBwzE,EACjBX,aAAcA,KAGhBr4K,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAC+pG,GAAiB,CAChB/iG,OAAQqzK,EACR9+E,SAAS,qBACThiF,UAAWnW,KAAYu2K,GAAuBY,GAC9C73E,YAAa5hG,QAAQsC,GAAUu2K,GAC/Bh2E,kBAAgB,EAChBlnG,UAAYk9K,GAAwBY,OAAkC58K,EC5QoC,WD6Q1GmmG,oBAAqBA,EACrBI,cAAeA,EACfgG,oBAAqBqwE,EAAkBU,EAA4BJ,EACnEz2E,iBAAkBm2E,EAAkBU,EAA4BF,EAChE12E,kBAAmB22E,KAEnBrB,GAAuB74K,QAAQu5K,KAC/Br6K,EAAAA,GAAAA,GAACu4K,GAAqB,CACpBvxK,OAAQqzK,EACR33E,YAAat/F,EACbghG,iBAAkBm2E,EAAkBU,EAA4BF,EAChE12E,kBAAmB22E,EACnBl3E,oBAAqBA,EACrB37F,QAASA,aA8CvB,SAASkqE,KACP,OAAOxqE,SAASqC,cAAc,OAChC,CAEA,SAASooE,KACP,OAAOzqE,SAASqC,cAAc,OAChC,C,4BE7UA,MAAMyxK,GAAM9zK,SAASqB,cAAc,O,sFCDnC,SAA4C,WAA5C,GAA+N,WC6BzN0yK,GAAmB,GAAK/hK,EAAAA,EAmH9B,IAAevd,EAAAA,EAAAA,KAjH2Bu/K,EACxCC,aACAr/K,YACA+K,WACAu0K,0BACAC,uBACA19K,QACA02C,WACAinI,sBAEA,MAAMC,EA2FD,SAAwBJ,EAA2BC,GACxD,GAAIA,GAA2BD,EAAWK,MAAO,CAC/C,GAAIC,EAAAA,IAA8B3uF,IAAIquF,EAAWO,UAC/C,MAAO,QAET,GAAIC,EAAAA,IAA8B7uF,IAAIquF,EAAWO,UAC/C,MAAO,OAEX,CACA,MAAO,MACT,CArGsBE,CAAeT,EAAYC,GAEzCS,GAAqBj2K,EAAAA,EAAAA,IAAgB,KACzC01K,IAAkB39K,MAGd+Y,GAAU3Z,EAAAA,EAAAA,KAAQ,KACtB,OAAQw+K,GACN,IAAK,QACH,OACEl8K,EAAAA,GAAAA,GAAA,OACEvD,UAAWuC,GACX0K,IAAKoyK,EAAWltK,QAChB+c,IAAI,GACJpiB,WAAW,IAGjB,IAAK,QACH,OACEzK,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACG6B,QAAQg7K,EAAWK,OAAOp/J,YACzB/c,EAAAA,GAAAA,GAAA,OAAKvD,UD9D+C,WC8DpBwC,UAAEygB,EAAAA,GAAAA,IAAoBo8J,EAAWK,MAAMp/J,aAEzE/c,EAAAA,GAAAA,GAAA,SACEvD,UAAWuC,GACX0K,IAAKoyK,EAAWltK,QAChBya,UAAQ,EACRjB,OAAK,EACLoB,MAAI,EACJ/D,yBAAuB,OAI/B,QACE,OACE3mB,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACo8I,GAAAA,EAAI,CACH3/I,UD9E2I,WC+E3I6E,KAAMw6K,EAAWprG,SACjB+rG,WAAWC,EAAAA,GAAAA,IAAiBZ,EAAWprG,SAAUorG,EAAWO,UAC5DM,YAAab,EAAWztK,eACxB5N,KAAMq7K,EAAWr7K,KACjBy7H,SAAO,IAERlnF,IACCh1C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAK,SACL7E,WAAWsC,EAAAA,GAAAA,GAAeC,GDxFsO,YC0FhQlC,QAASA,IAAMk4C,EAAS12C,WAMnC,CAACw9K,EAAYI,EAAa59K,EAAO02C,IAE9B4nI,EAAqC,SAAhBV,IAA2BF,EAChDa,EAAuB/7K,QAAwB,SAAhBo7K,GAA0BJ,EAAWgB,qBACpEC,EAAsC,SAAhBb,EAEtBc,GAAgBj+K,EAAAA,GAAAA,GACpBtC,EDvGmB,WCuGK+K,GDvG0D,WCuG/Bo1K,GDvGgF,YC0GrI,OACE99K,EAAAA,GAAAA,IAAA,OAAKrC,UAAWugL,EAAc/9K,SAAA,CAC3BoY,GACDrX,EAAAA,GAAAA,GAACi9K,GAAAA,EAAY,CACXt6J,UAAWk6J,EACX/tK,aAAcgtK,EAAWztK,gBAAkBytK,EAAWltK,QACtDS,MAAOusK,GACPlsK,OAAQksK,KAETmB,IACCj+K,EAAAA,GAAAA,IAAA,OAAKrC,UDpHiK,WCoHvIwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CACHE,KAAMw6K,EAAWgB,oBAAsB,kBAAoB,UAC3DrgL,UAAWuC,GACXlC,QAAS0/K,IAEVxnI,IAECh1C,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,SAAS7E,UAAWuC,GAAmBlC,QAASA,IAAMk4C,EAAS12C,c,wCC7HvE,SAAS4+K,GAAe7xK,EAAwB0pB,EAAsBooJ,GAAe,GAClG,MAAMC,EAAa/xK,EAAU8xK,EAAe,aAAe,aACrDE,EAAaD,EAAa/xK,EAAU8xK,EAAe,cAAgB,gBACnEhsJ,EAAK4D,EAAQooJ,EAAe,aAAe,aAC3CG,EAAKnsJ,EAAK4D,EAAQooJ,EAAe,cAAgB,gBACvD,OAAOhsJ,EAAKisJ,GAAcE,EAAKD,CACjC,CCNe,SAASE,GACtBlyK,EACAmyK,EACA3gF,EAAS,EACT69E,GAAU,EACV+C,GAAsB,EACtBN,GAAe,GAEf,MAAMC,EAAa/xK,EAAU8xK,EAAe,aAAe,aACrDE,EAAaD,EAAa/xK,EAAU8xK,EAAe,cAAgB,gBACnEO,EAA4C,iBAAvBF,EACvBnyK,EAAUE,iBAA8BiyK,GACxCA,GACE,OAAE3+K,GAAW6+K,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIz2H,EAAI,EAAGA,EAAItoD,EAAQsoD,IAAK,CAC/B,MAAMpyB,EAAU2oJ,EAAYv2H,GACtBh2B,EAAK4D,EAAQooJ,EAAe,aAAe,aAC3CG,EAAKnsJ,EAAK4D,EAAQooJ,EAAe,cAAgB,gBAKvD,GAJkBM,EACdH,GAAMF,EAAavgF,GAAUygF,GAAMD,EAAaxgF,EAChD1rE,GAAMksJ,EAAaxgF,GAAUygF,GAAMF,EAAavgF,EAGlD8gF,EAAen/K,KAAK2oD,GACpBy2H,GAAU,OACL,GAAIA,IAAYlD,EACrB,KAEJ,CAEA,MAAO,CAAEgD,cAAaC,iBACxB,CCzBe,SAASE,GAAsB7oJ,EAAkB12B,EAAeouB,GAC7E,MAAMrhB,EAAYqhB,EAAatd,QAC/B,IAAK/D,GAAa/M,EAAQ,EACxB,OAEF,MAAM,eAAEq/K,EAAc,YAAED,GAAgBH,GACtClyK,EACA2pB,EAVoB,GAYpB,GACA,GAGF,IAAK0oJ,EAAY7+K,SAAW6+K,EAAYp/K,GACtC,OAEF,MAAMqtF,EAAQgyF,EAAe,GAC7B,IAAKA,EAAe5qJ,SAASz0B,IACvBA,IAAUqtF,IAAUuxF,GAAe7xK,EAAWqyK,EAAY/xF,IAAU,CACxE,MAAM5oE,EAAWzkB,EAAQq/K,EAAeA,EAAe9+K,OAAS,GAAK,QAAU,OAC/Eq+F,EAAAA,GAAAA,IAAc,CACZ7xF,YACA0pB,QAAS2oJ,EAAYp/K,GACrBykB,WACA85E,OA1BgB,IA4BpB,CACF,CC7BO,SAASihF,IAAsB,SACpCthL,EAAQ,aACR2gL,EAAY,iCACZY,EAAgC,6BAChCC,EAA4B,kBAC5BC,EAAiB,MACjBn3H,EAAK,kBACLo3H,EAAiB,SACjB73I,EAAQ,QACRziC,IAYA,MAAOu6K,EAAmBC,IAAwB3sK,EAAAA,EAAAA,KAAU,GAEtD4sK,GAAmB93K,EAAAA,EAAAA,IAAiBm2E,GACnC51B,GAIEk5B,EAAAA,GAAAA,GAAcl5B,EAAMjoD,OAAQ69E,IAHzB,IAMN4hG,GAAiB/3K,EAAAA,EAAAA,IAAgB,CAACM,EAAelC,KACrDA,EAAEkkB,iBACFu1J,GAAsB9/K,GAAW+/K,EAAiB//K,EAAQuI,QAGtD03K,GAAmBh4K,EAAAA,EAAAA,IAAiB5B,IAExC,GAAIA,EAAE65K,QAAU75K,EAAE8vB,SAAW9vB,EAAE85K,SAAW95K,EAAE+5K,SAAU,OAAO,EAC7D,IAAKliL,EAAU,OAAO,EAEtB,GAAIsqD,GAASA,EAAMjoD,QAAUs/K,GAAqB,EAAG,CACnD,MAAMhrK,EAAO2zC,EAAMq3H,GACnB,GAAIhrK,EAAM,CACR,IAAuB,IAAnBkzB,EAASlzB,GACX,OAAO,EAGTxO,EAAEkkB,gBACJ,CACF,CAEA,OAAO,MAGTtrB,EAAAA,EAAAA,KAAU,KACHf,GAAU4hL,EAAqBJ,GAAgC,EAAI,KACvE,CAACxhL,EAAUwhL,IAEd,MAAMW,GAAyB73H,GAASq3H,EAAoBr3H,EAAMjoD,OAAS,EAmB3E,OAlBAtB,EAAAA,EAAAA,KAAU,KACHwgL,IAAoCY,GACvCP,EAAqBJ,GAAgC,EAAI,KAE1D,CAACW,EAAuBX,EAA8BD,KAEzDxgL,EAAAA,EAAAA,KAAU,IAAOf,GAAWu+C,EAAAA,GAAAA,GAAyB,CACnDuwE,MAAO1nH,EACPg7K,KAAMX,GAAqBd,OAAex/K,EAAagH,GAAqB25K,GAAgB,EAAG35K,GAC/Fk6K,OAAQZ,GAAqBd,OAAex/K,EAAagH,GAAqB25K,EAAe,EAAG35K,GAChGs2C,OAAQgjI,IAAsBd,OAAex/K,EAAagH,GAAqB25K,GAAgB,EAAG35K,GAClGq2C,QAASijI,IAAsBd,OAAex/K,EAAagH,GAAqB25K,EAAe,EAAG35K,GAClGm6K,MAAOZ,EAAoBK,OAAmB5gL,EAC9CuU,QAASqsK,SACN5gL,GAAY,CACfsgL,EAAmBK,EAAgBC,EAAkB/hL,EAAU2gL,EAAcv5K,EAASs6K,IAGjFC,CACT,CC3DA,MAyFA,IAAe7hL,EAAAA,EAAAA,KAzFsByiL,EACnC37K,SACAQ,UACAo7K,mBACAC,oBAEA,MAAMvyJ,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GAEnGuhL,GAAmB34K,EAAAA,EAAAA,IAAgB,CAACm6B,EAAgBy+I,GAAa,KAErE,MACM9sI,GADYrB,EAAAA,EAAAA,MAAYtxC,MAAMupC,KACbvI,GAClB2R,GAIL2sI,EAAiB3sI,EAAM8sI,MAGnBz3J,GAAcnhB,EAAAA,EAAAA,IAAgB,CAAC5B,EAAqBlC,KACxDkC,EAAEkkB,iBAEFq2J,EAAiBz8K,MAGb28K,GAAsB74K,EAAAA,EAAAA,IAAiB2/G,IAC3Cg5D,EAAiBh5D,EAAOzjH,IAAI,MAGxB48K,EAAuBvB,GAAsB,CACjDthL,SAAU4G,EACV0jD,MAAOm4H,EACP54I,SAAU+4I,EACVlB,mBAAmB,EACnBH,kCAAkC,EAClCn6K,aAGFrG,EAAAA,EAAAA,KAAU,KACRsgL,GAAsB,uBAAwBwB,EAAsB3yJ,KACnE,CAAC2yJ,KAEJ9hL,EAAAA,EAAAA,KAAU,KACJ0hL,IAAkBA,EAAcpgL,QAClC+E,MAED,CAACq7K,EAAer7K,IAEnB,MAAM07K,GAAkBpmJ,EAAAA,EAAAA,GACtB+lJ,GAAepgL,OACXogL,OACAthL,EACJspB,GAEIs4J,EAAsBN,IAAkBA,EAAcpgL,OACxDygL,EACAL,EAEJ,IAAKh4J,GAAiBs4J,IAAwBA,EAAoB1gL,OAChE,OAGF,MAAMpC,GAAYsC,EAAAA,GAAAA,GAChB,gDACAooB,GAGF,OACEnnB,EAAAA,GAAAA,GAAA,OAAKvD,UAAWA,EAAW0b,IAAKuU,EAAaztB,SAC1CsgL,GAAqBrgL,KAAI,EAAGuD,MAAMnE,KACjC0B,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,+CACVK,QAAS4qB,EACTvgB,SAAU1E,EACVk4D,MAAO0kH,IAAyB/gL,EAAMW,UAEtCe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQj+B,EACR6rH,WAAW,QACX6F,cAAY,KATT1xH,U,4BClGf,SAAma,WAAna,GAAwgB,WC+GlgB+8K,GAA4B,qBAmnBlC,IAAeljL,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,cACJiwB,EAAa,aACbwoJ,EAAY,aACZz2F,EAAY,mBACZ02F,GACExsK,EAEE86C,GAAeC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,GAC1CkwB,GAAiBC,EAAAA,EAAAA,KAAqBjkB,EAAQlM,IAC9C,yBAAEssI,GAA6BpgI,EAAO0hC,SAASs+F,OAC/C,SAAEqC,IAAavkE,EAAAA,GAAAA,GAAqB99D,GACpCysK,EAAoBzsK,EAAO0sK,cAAcC,EAAAA,KACzCD,EAAgBrqC,IAAasqC,EAAAA,IAA0B3sK,EAAO0sK,cAAcrqC,QAAY53I,EAE9F,MAAO,CACLu5B,iBACAD,gBACA6oJ,iBAAkB9xH,GAAcujC,QAChCkuF,eACAE,kBAAmBA,GAAmBI,SACtCH,cAAeA,GAAeG,SAC9BzsC,2BACA0sC,oBAAqBh3F,EAAai3F,SAASvgG,SAC3CwgG,cAAc7hD,EAAAA,GAAAA,GAAmBnrH,EAAQ,iBACzCwsK,wBA1BczsK,EA/mB+BktK,EACjDn5K,SACA8M,WACAssK,cACAC,UACAC,iBACAC,wBACAL,eACAjjK,UACAia,iBACAD,gBACA6oJ,mBACAL,eACAE,oBACAC,gBACAY,eACAza,iBACAzyB,2BACA0sC,sBACAN,qBACAe,2BACAC,yBACAC,oBACAC,0BACAC,iBACAC,sBACAC,kBACAC,SACAC,eACAC,UACAC,eACAC,kBACAl3E,sBACAm3E,iBACAC,gBACAzb,yBACA0b,cACAC,mBACAxtI,wBAEA,MAAM77B,GAAMlJ,EAAAA,EAAAA,MACNwyK,IAASxyK,EAAAA,EAAAA,OACT,qBAAEyyK,GAAoB,eAAEC,GAAc,yBAAEC,KAA6Bv7K,EAAAA,EAAAA,MAErEtJ,IAAUC,EAAAA,EAAAA,KACVC,IAAOC,EAAAA,GAAAA,KAEP2kL,IAAgB5yK,EAAAA,EAAAA,MAChB+qD,IAAW/qD,EAAAA,EAAAA,MAEX6yK,IAAiB7yK,EAAAA,EAAAA,MACjB8yK,IAAkB7oJ,EAAAA,EAAAA,GAAsBknJ,GACxC4B,GAAuB5B,EAAYvhL,OAASuhL,EAAc2B,IAC1D,SAAE9/K,KAAaC,EAAAA,EAAAA,MAEf+/K,GAAY3B,GAAkBx/K,QAAQw/K,GACtC11J,GAAY01J,GAAkBA,GAAgB4B,UAE9CC,GAA0C,UADnBF,IAAa7B,GAAavhL,SAAUujL,EAAAA,EAAAA,IAAuBhC,EAAY,MAG7FiC,GAAkBC,GAAgBC,KAAmBjlL,EAAAA,EAAAA,MAErDklL,GAAsBC,KAA2BhxK,EAAAA,EAAAA,IACtDgvK,GAA4Bf,EAAmBgD,gBAE3CC,GAAsB7hL,SACzB0hL,IAAwB9B,GAA0B91J,MAAe+1J,IAE7DiC,GAAmBC,KAAwBpxK,EAAAA,EAAAA,IAASiuK,EAAmBkD,mBACxEE,GAAkBpD,EAAmBoD,iBAGzCnhI,aAAcohI,GACdxhI,cAAeyhI,GACfvhI,QAASwhI,IACP5hI,MAEIM,aAAcuhI,GAAqB3hI,cAAe4hI,IAAyB9hI,KAE7Ej+C,GAAStC,QAAQs/K,EAAYvhL,QAC7BukL,GAAkBtiL,QAAQkhL,IAAsBnjL,SAC/CwkL,GAAWC,GAAaC,KAAiBjmL,EAAAA,EAAAA,MAEhDC,EAAAA,EAAAA,KAAU,KACH6F,KACHm/K,KACAX,GAAyB,CAAEkB,qBAAiBnlL,OAE7C,CAAC4kL,GAAiBn/K,KAErB,MAAOogL,GAAUC,KAAgB/lL,EAAAA,EAAAA,KAAQ,IACrBoD,QAAQkhL,IAAsBhyE,OAAO1qD,GAAMA,EAAE62H,OAAS72H,EAAEo+H,SACpD,EAAC,GAAM,GAEtB,CADU5iL,QAAQkhL,IAAsB/2E,MAAM3lD,GAAMA,EAAE62H,OAAS72H,EAAEo+H,UACtD,IACjB,CAAC1B,MAEG2B,GAAYC,KAAkBlmL,EAAAA,EAAAA,KAAQ,IACpBoD,QAAQkhL,IAAsBhyE,OAAO1qD,GAAMA,EAAEw3H,uBACzC,EAAC,GAAM,GAE3B,CADeh8K,QAAQkhL,IAAsB/2E,MAAM3lD,GAAMA,EAAEw3H,wBAC3C,IACtB,CAACkF,KAEE6B,IAAoBC,EAAAA,GAAAA,GAAqB,IAAIC,EAAAA,QAE7C,mBACJC,GAAkB,eAClBC,GAAc,qBACdC,GAAoB,YACpBC,GAAW,kBACXC,KACEC,EAAAA,GAAAA,GACFvjL,QAAQmc,IAAY2jK,IAA4BJ,IAAiB4C,IACjE/C,EACAU,EACAgD,EAAAA,IACAtE,EACAE,EACAC,IAGI,yBACJ0E,GAAwB,kBACxBC,GAAiB,wBACjBC,KACEC,EAAAA,GAAAA,GACF3jL,QAAQmc,IAAY2jK,IAA4BJ,IAAiB4C,IAAmB9vC,GACpF+sC,EACAU,EACA8C,GACA7pH,GACAgmH,IAGI,qBACJ0E,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFhkL,QAAQmc,GAAW2jK,GAA2BwC,IAC9C/C,EACAU,EACA8C,GACA7pH,GACA8lH,OACAniL,EACAs5B,GAkBF,SAAS8tJ,GAAmBl+K,GAC1B+6K,GAAyB,CAAEkB,gBAAiBj8K,GAC9C,EAjBAtJ,EAAAA,EAAAA,KAAU,IAAO6F,IAASm7B,EAAAA,EAAAA,GAAsB2iJ,QAAWvjL,GAAY,CAACyF,GAAQ89K,KAEhF3jL,EAAAA,EAAAA,KAAU,KACJ6F,KACFq/K,GAAwBhC,GAA4Bf,EAAmBgD,gBACvEG,GAAqBnD,EAAmBkD,sBAEzC,CAAClD,EAAoBt8K,GAAQq9K,KAEhCljL,EAAAA,EAAAA,KAAU,KACH6F,IACHw+K,GAAyB,CAAEkB,qBAAiBnlL,MAE7C,CAACikL,GAA0Bx+K,GAAQq9K,KAMtCljL,EAAAA,EAAAA,KAAU,KACJ6F,IAAUnB,KACZ+iL,EAAAA,GAAAA,QAED,CAAC/iL,GAAUmB,KAEd,MACEovE,kBAAmByyG,GAAoB,kBACvCvyG,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBgvG,IAAgBtB,IAA0Bn9K,IAE/D8hL,IAAkB3+K,EAAAA,EAAAA,IAAgB,CAACsiH,EAAoBs8D,KACvD/hL,OACa2iK,GAAkBof,IAAwB3E,IAAiBF,EAAkBc,EACxFv4D,EAAWs4D,EAAeH,GACzB2B,GAAqBC,GAAmBE,IAC7ClB,GAAyB,CACvBc,oBAA6C/kL,IAA7B8iL,EAAyCkC,QAAsBhlL,EAC/EilL,qBACAE,yBAKAsC,IAAmB7+K,EAAAA,EAAAA,IAAgB,KACvC2+K,IAAgB,MAGZG,IAAkB9+K,EAAAA,EAAAA,IAAgB,KACtC2+K,QAGII,IAAsB/+K,EAAAA,EAAAA,IAAgB,KAC1C2+K,IAAgB,GAAO,MAuBnBK,IAAkBh/K,EAAAA,EAAAA,IAAgB8V,UACtC1X,EAAEkkB,iBACF06J,KAEA,MAAM,aAAEiC,GAAiB7gL,EAEnBgrD,QAAc81H,EAAAA,GAAAA,GAA8BD,EAAa1+H,OAC3D6I,GAAO9wD,QACToiL,EAAatxH,EAAOi0H,OAalBxjC,IAAmB75I,EAAAA,EAAAA,IAAiB5B,IACxC,MAAM,MAAEgrD,GAAUhrD,EAAEqN,OACdquI,GAAiBC,EAAAA,EAAAA,IAAc3wF,GAEjC0wF,GAAgBxhJ,QAClBoiL,EAAa5gC,EAAgBujC,OAI3B8B,IAAuBn/K,EAAAA,EAAAA,IAAgB,MAC3Ci6I,EAAAA,GAAAA,GAAsB,KAAM77I,GAAMy7I,GAAiBz7I,QAG/CymH,IAAe7kH,EAAAA,EAAAA,IAAiBjI,IACpCwiL,EAAoBV,EAAY5/I,QAAO,CAAC8kB,EAAG6B,IAAMA,IAAM7oD,QAGnDqnL,IAAuBp/K,EAAAA,EAAAA,IAAgB,KAC3Cu6K,EAAoBV,EAAYlhL,KAAKomD,IAAC,IACjCA,EACHw3H,qBAAqB,UAInB8I,IAAwBr/K,EAAAA,EAAAA,IAAgB,KAC5Cu6K,EAAoBV,EAAYlhL,KAAKomD,IAAC,IAAWA,EAAGw3H,yBAAqBn/K,UAGrEkoL,IAAsBt/K,EAAAA,EAAAA,IAAiBjI,IAC3CwiL,EAAoBV,EAAYlhL,KAAI,CAAC48K,EAAY30H,IAC3CA,IAAM7oD,EACD,IACFw9K,EACHgB,qBAAsBhB,EAAWgB,0BAAuBn/K,GAIrDm+K,QAILhiK,IAAevT,EAAAA,EAAAA,IAAgB,KACnC,MAAMu/K,EAAMrE,GAAOryK,QACnB,IAAK02K,EACH,OAGF,MAAM,MAAEz2K,EAAK,OAAEK,GAAWo2K,EAAIjmK,wBAC9BimK,EAAIz1G,QAAQ01G,QAAQ12K,MAAQA,EAC5By2K,EAAIz1G,QAAQ01G,QAAQr2K,OAASA,MAI/Bk3F,EAAAA,GAAAA,GAAkBzuF,EAAK2B,KAEvB1B,EAAAA,GAAAA,GAAc0B,KAEdvc,EAAAA,EAAAA,KAAU,KACR,MAAMulE,EAAa++G,GAAczyK,QAC3Bm8B,EAAQ1jC,SAASk1B,eAAeyiJ,IAEtC,IAAK18G,IAAev3B,EAAO,OAE3B,MAAM,MAAEl8B,GAAUyzD,EAAWjjD,yBAE7B5D,EAAAA,EAAAA,KAAgB,KACdsvB,EAAM5/B,MAAMsjC,YAAY,yBAA0B,GAAG5/B,YAEtD,CAACtS,GAASqG,KAEb,MAAM0iD,IAAkEpoD,EAAAA,EAAAA,KAAQ,IACvE,EAAGkZ,YAAWxT,OAAQ2iD,MAC3B/lD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLqM,QAASjhB,GACTxB,KAAK,UACLmF,MAAM,cACNnJ,UAAWspD,EAAa,SAAW,GACnCjpD,QAAS8Z,EACTE,UAAU,eAAc7X,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAGd,CAACW,KAEE+jL,IAAYxsK,EAAAA,GAAAA,IAAgB,KAChC,IAAK4pK,GAAiB,OAEtB,MAAM6C,EAAuB/F,GTlcCgG,ESkcgC7F,ITjchE1E,GAAIwK,UAAYD,GAChBE,EAAAA,GAAAA,IAAgBzK,IAChBA,GAAIpwK,iBAAiB,MAAMlN,SAASgoL,IAClCA,EAAGC,YAAY,SAEV3K,GAAI4K,aAAat8G,OAAOprE,QAAU,GANpC,IAA2BqnL,ESmc9B,OAAOD,GArVoB,IAqV6BA,OAAuBtoL,IAC9E,CAACuiL,EAAcG,EAAS+C,KAErBoD,GAAiB7D,IAAuBc,IAEvCgD,GAAcC,GAAcC,KAAgBjpL,EAAAA,EAAAA,KAAQ,IACpD8oL,IAAmBxE,GAIjB,CAHYA,GAAqBhyE,OAAO1qD,GAAM82H,EAAAA,IAA8B3uF,IAAInoC,EAAE+2H,YACtE2F,GAAqBhyE,OAAO1qD,GAAMg3H,EAAAA,IAA8B7uF,IAAInoC,EAAE+2H,YACtE2F,GAAqBhyE,OAAO1qD,GAAMshI,EAAAA,IAA8Bn5F,IAAInoC,EAAE+2H,aAHpC,EAAC,GAAO,GAAO,IAKnE,CAAC2F,GAAsBwE,KAEpBK,IAAoBnpL,EAAAA,EAAAA,KAAQ,MAC3BskL,IACEA,GAAqB/2E,MAAM3lD,IAAOshI,EAAAA,IAA8Bn5F,IAAInoC,EAAE+2H,aAC5E,CAAC2F,KAEJ,IAAKA,GACH,OAGF,MAAM8E,GAAa9E,GAAqBnjL,OAAS,EAE3CkoL,KACA9E,KACCuB,MACA7C,GAAsBD,GAA2BiC,KAClDmE,IAAclE,IAIpB,IAAIz+K,GAAQ,GACZ,MAAM6iL,GAAoBhF,GAAqBnjL,OAE7CsF,GAAQpH,GADN0pL,GACcxE,GAAY,0BAA4B,0BAC/CyE,GACOzE,GAAY,0BAA4B,0BAC/C0E,GACO1E,GAAY,0BAA4B,0BAExCA,GAAY,yBAA2B,yBAN4B+E,GAAmB,KA6FxG,MAAMC,IAAwBhE,KAAmCE,GAC3D+D,GAAoBlzI,GAAoBgI,EAAAA,GAAAA,GAAkB/+C,GAC9D+pL,GAAoBhzI,EACpB,CACEv3C,UD1kBkJ,WC2kBlJw/C,QAAQ,IACLl/C,GAAQ,QAEf,OACEiD,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJX,OAAQA,GACRQ,QAASs9K,EACT39K,OAhGJ,WACE,GAAKy+K,GAIL,OACEljL,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAyByD,IAAKnD,GAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC7Ee,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAU,qBAAqBha,QAASokL,EAAQjiL,UAC/Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEkF,KAC7Bg+K,KAAmBv3J,KAEhB9rB,EAAAA,GAAAA,IAAC2Y,GAAAA,EAAY,CACXhb,UAAU,iEACVib,QAASouC,GACTnuC,UAAU,QAAO1Y,SAAA,CAEhB6B,SAASw/K,KACRtgL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,MAAMpH,QAAS4oL,GAAqBzmL,SAAElC,GAAQ,SAE9DymL,KACC1kL,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CAEI8nL,KAAoBjE,IAOlB9iL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,oBAAoBpH,QAASA,IAAMioL,QAAmBpnL,GAAWsB,SAC7ElC,GAAS,iCANZiD,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,kBAAkBpH,QAASA,IAAMioL,IAAmB,GAAM9lL,SACtElC,GAAQ,gCAUZ4jL,IAAsBD,IAA2BiC,IAEhD3iL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAWpH,QAASA,IAAM2lL,IAAwB,GAAOxjL,SACrElC,GAAQ+pL,GAAa,yBAA2B,4BAInD9mL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,QAAQpH,QAASA,IAAM2lL,IAAwB,GAAMxjL,SACjE6nL,GAAa,oBAAsB,mBAIzCnE,IAAuBkE,IAAqB/lL,SAASw/K,KACpDqD,IACE3jL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,kBAAkBpH,QAAS8oL,GAAsB3mL,SAC7DlC,GAAQ,gCAGXiD,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,UAAUpH,QAAS6oL,GAAqB1mL,SACpDlC,GAAQ,kCAMlB+pL,KACClE,IACE5iL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CACP1T,KAAK,kBAELpH,QAASA,IAAM+lL,IAAqB,GAAO5jL,SAC5C,uBAKDe,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,UAAUpH,QAASA,IAAM+lL,IAAqB,GAAM5jL,SAAC,0BASpF,CAcY4nK,GACRpqK,WAAWsC,EAAAA,GAAAA,GDnlBM,WCqlBfskL,IAAarkL,IACZgkL,IDtlBmH,WCulBpH/gL,IDvlBmC,WCwlBnCogL,IDxlB+D,WCylB/DxB,GAAkB,wBAEpBlmG,iBAAe,EACfx0E,oBAAkB,EAAAlH,UAElBH,EAAAA,GAAAA,IAAA,OACErC,UAAWuC,GACXmoL,YAAa7D,GACb8D,OAAQ7B,GACR8B,WA/PN,SAAwB1iL,GACtBA,EAAEkkB,iBAEEi5J,GAAe1yK,UACjBmB,OAAOL,aAAa4xK,GAAe1yK,SACnC0yK,GAAe1yK,aAAUzR,EAE7B,EAyPM2pL,YAhSmB3iL,IACvB,MAAQ4iL,cAAeC,EAAUx1K,OAAQy1K,GAAe9iL,EAGnD8iL,EAA8BxyJ,QAAQ,IAAIj2B,QAAyBwoL,IACtE1F,GAAe1yK,QAAUmB,OAAOC,WAAW+yK,GAxNnB,MA4NtBkE,GAAeA,EAA2Bz3J,QAAQ,IAAIhxB,QAItDwoL,GACF7iL,EAAEwV,kBAGJopK,OAgRIzmL,QAASymL,GACT,0BAAyBxmL,GAAQ,4BAA6B,IAC9D,mBAAakC,SAAA,EAEbe,EAAAA,GAAAA,GAAA,OAAKvD,UDxmBwb,WCwmBjZwC,UAC1Ce,EAAAA,GAAAA,GAAA,QAAMvD,UDzmB8c,WCymB/amI,EAAE,IAAIG,EAAE,IAAIsK,MAAM,OAAOK,OAAO,OAAOg4K,GAAG,SAEjF1nL,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GD5mB4J,WC8mBrK,gBACAkoL,ID/mBmP,YCinBrPtgI,SAAUo8H,GAAwB9jL,SAEjC+iL,GAAqB9iL,KAAI,CAAC48K,EAAY30H,KACrCnnD,EAAAA,GAAAA,GAAC67K,GAAmB,CAClBC,WAAYA,EACZC,wBAAyB4G,GACzB3G,qBAAsB4G,GACtBp7K,SAA0C,IAAhCw6K,GAAqBnjL,OAC/BP,MAAO6oD,EAEPnS,SAAUo2E,GACV6wD,gBAAiB4J,IAFZ/J,EAAW6L,UAAYxgI,QAMlCroD,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GDjoBmS,WCmoB5SkoL,IDnoB0W,YCooB1WhoL,SAAA,EAEFe,EAAAA,GAAAA,GAAC++K,GAAc,CACb37K,OAAQshL,GACRzF,cAAe4F,GACf7F,iBAAkB4F,GAClBhhL,QAAS+gL,MAEX3kL,EAAAA,GAAAA,GAAC4nL,GAAAA,EAAY,CACXxkL,OAAQ4gL,GACRp7E,OAAQq7E,GACRj7F,aAAck7F,GACdvC,eAAgBA,GAChBD,qBAAsBA,GACtBJ,cAAe6C,GACfj6E,oBAAqBi6E,GACrBvgL,QAASwgL,MAEXpkL,EAAAA,GAAAA,GAAC6nL,GAAAA,EAAkB,CACjB7gL,OAAQA,EACR5D,OAAQkhL,GACR5C,qBAAsBA,GACtBx3E,oBAAqBq6E,GACrB3gL,QAAS4gL,MAEX1lL,EAAAA,GAAAA,IAAA,OAAKrC,UD7pB4X,WC6pBlWwC,SAAA,EAC7Be,EAAAA,GAAAA,GAAC8nL,GAAAA,EAAgB,CACf9gL,OAAQA,EACR8M,SAAUA,EACV7R,SAAUA,GACVgb,QAASA,EACTolK,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBr4E,oBAAqBA,EACrBm3E,eAAgBA,EAChBC,cAAeA,EACfyG,mBAAiB,EACjBC,kBAAgB,EAChBvrL,UAAU,qDACV8+F,SAAS,aACTslF,eAAgBA,KAElB7gL,EAAAA,GAAAA,GAACioL,GAAAA,EAAY,CACX9vK,IAAK6hD,GACLv3D,GAAI+8K,GACJx4K,OAAQA,EACR8M,SAAUA,EACVo0K,wBAAsB,EACtBC,kBAAkB,aAClBlrK,QAASA,EACTzgB,SAAU4G,GACVi9K,QAASA,EACT5iI,gBAAiBsmI,EAAAA,IACjBn3H,YAAa7vD,GAAQ,cACrBuiB,SAAUyhK,EACVC,OAAQqE,GACR1+H,SAAUu8H,GACVkF,aAActnL,QAAQmc,GAAW2jK,GAA2BR,EAAYvhL,QACxEqhL,aAAc8F,GACdqC,oBAAqBpmL,IAAYogL,GACjCiG,kBAAmB/F,MAErBzjL,EAAAA,GAAAA,IAAA,OAAKrC,UDnsB0iB,WCmsB5gBwC,SAAA,EACjCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLmX,IAAK0pK,GACLplL,UDtsB6jB,WCusB7jBK,QAASuoL,GACTl8J,cAAeo3J,EAAwB7tG,QAAoB/0E,EAAUsB,SAEpE8mK,IAAmBua,EAAiBvjL,GAAQ,QACzCujL,EAAiBvjL,GAAQ,QAAUmqL,KAExC3G,IACCvgL,EAAAA,GAAAA,GAACuoL,GAAAA,EAAc,CACbnlL,OAAQ6hL,GACR1D,YAAaA,GAAef,EAC5BW,aAAejqJ,OAAoCv5B,EAAnBynL,GAChCoD,eAAgBlD,GAChB1hL,QAAS+uE,GACTthE,oBAAqBuhE,GACrBpmB,gBAAiBt1B,EACjBsqJ,iBAAkBA,EAClB3b,uBAAwBA,sBCjW1C,IAAevpK,EAAAA,EAAAA,KA/UiBmsL,EAC9BrlL,SAAQslL,SAAQC,oBAAmB3H,SAAQE,cAE3C,MAAM0H,GAAmB35K,EAAAA,EAAAA,MACnB45K,GAAiB55K,EAAAA,EAAAA,OAEhB65K,EAAUC,IAAet3K,EAAAA,EAAAA,IAAiB,KAC1C/U,EAASssL,IAAcv3K,EAAAA,EAAAA,IAAmB,CAAC,MAC3Cw3K,EAAaC,IAAkBz3K,EAAAA,EAAAA,KAAS,IACxC03K,EAAmBC,IAAwB33K,EAAAA,EAAAA,KAAS,IACpD43K,EAAYC,IAAiB73K,EAAAA,EAAAA,IAASi3K,IAAU,IAChDa,EAAUC,IAAe/3K,EAAAA,EAAAA,IAAiB,KAC1Cg4K,EAAeC,IAAoBj4K,EAAAA,EAAAA,OACnCk4K,EAAWC,IAAgBn4K,EAAAA,EAAAA,KAAkB,GAE9CxU,GAAOD,EAAAA,EAAAA,KAEP6sL,GAAuBtjL,EAAAA,EAAAA,IAAiB5B,IAC5C6kL,EAAY7kL,EAAEqN,OAAOnL,UAGjB0rK,GAAahsK,EAAAA,EAAAA,IAAiB4R,IAC9B/U,GAAU+U,EAAI/I,SAChB+I,EAAI/I,QAAQurD,YAIhBp9D,EAAAA,EAAAA,KAAU,IAAO6F,GAASm7B,EAAAA,EAAAA,GAAsB2iJ,QAAWvjL,GAAY,CAACyF,EAAQ89K,KAChF3jL,EAAAA,EAAAA,KAAU,KACH6F,IACH2lL,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcZ,IAAU,GACxBc,EAAY,IACZE,OAAiB/rL,GACjBisL,GAAa,MAEd,CAAClB,EAAQtlL,KAEZ7F,EAAAA,EAAAA,KAAU,IAAMg1K,EAAWqW,IAAmB,CAACrW,EAAYnvK,IAE3D,MAAM0mL,GAAevjL,EAAAA,EAAAA,IAAgB,CAACwjL,EAAuB,MAC3Df,EAAW,IAAIe,EAAY,MAE3BlX,EAAAA,EAAAA,KAAoB,KAClB,MAAMxnI,EAAOw9I,EAAez5K,QACvBi8B,IAILyD,EAAAA,EAAAA,KAAe,KACbzD,EAAKqE,SAAS,CAAElpB,IAAK6kB,EAAKuW,aAAcooI,SAAU,oBAKlDC,GAAe1jL,EAAAA,EAAAA,IAAgB,KAEnC,GADAqjL,GAAa,IACRxmL,EACH,OAGF,MAAM8mL,EAAyBb,SAAiC1rL,IAAlB8rL,IAAgC/sL,EAAQ+sL,GAAex/G,QAE/FkgH,EAAUztL,EACbwC,KAAI,CAAC8Z,EAAM1a,KAGV,GAFA0a,EAAOA,EAAKixD,OAIZ,MAAO,CACLjxD,KAAM,CACJA,QAEFjb,OAAQ8iD,OAAOviD,MACXA,IAAUmrL,GAAiB,CAAEW,SAAS,OAE3C5pJ,OAAO1/B,SAENupL,EAAkBvB,EAAS7+G,OAAOqgH,UAAU,EApF1B,KAqFxB,IAAKD,GAAmBF,EAAQtrL,OAAS,EAAG,CAE1C,GADAkqL,EAAYsB,GACRF,EAAQtrL,OAAQ,CAClB,MAAM0rL,EAAiB7tL,EAAQwC,KAAKsrL,GAAMA,EAAEvgH,OAAOqgH,UAAU,EAzF3C,OAyFkE9pJ,OAAO1/B,SACvFypL,EAAe1rL,OAAS,EAC1BirL,EAAaS,GAEbvB,EAAWuB,EAEf,MACET,IAGF,YADAF,GAAa,EAEf,CAEA,GAAIM,EAEF,YADAN,GAAa,GAIf,MAAMzrD,EAAsB,CAC1BssD,QAAS,CACP3B,SAAU,CACR9vK,KAAMqxK,GAERF,cACKlB,GAAe,CAAEr4I,UAAU,MAC5Bu4I,GAAqB,CAAEuB,gBAAgB,MACvCrB,GAAc,CAAEsB,MAAM,KAI9B,GAAItB,EAAY,CACd,MAAM,KAAErwK,EAAI,SAAEkzE,GAAcq9F,IAAYpO,EAAAA,GAAAA,IAAyBoO,EAASe,UAAU,EAtH9D,OAuHjB,CAAC,EAENnsD,EAAQwsD,KAAO,CACbC,eAAgB,CAAC/pI,OAAO4oI,OACpBzwK,GAAQ,CAAEuwK,SAAUvwK,MACpBkzE,GAAY,CAAE2+F,iBAAkB3+F,GAExC,CAEA80F,EAAO7iD,MAGH2sD,GAAevkL,EAAAA,EAAAA,IAAgB,CAACjI,EAAe0a,KACnD,MAAM+wK,EAAa,IAAIrtL,GACvBqtL,EAAWzrL,GAAS0a,EAChB+wK,EAAWA,EAAWlrL,OAAS,GAAGorE,OAAOprE,QAAUkrL,EAAWlrL,OAzI5C,GA0IpBirL,EAAaC,GAEbf,EAAWe,MAITgB,GAAexkL,EAAAA,EAAAA,IAAiBjI,IACpC,MAAMyrL,EAAa,IAAIrtL,GACvBqtL,EAAWl8F,OAAOvvF,EAAO,GACzB0qL,EAAWe,QAEWpsL,IAAlB8rL,IACEA,IAAkBnrL,EACpBorL,OAAiB/rL,GACRW,EAAQmrL,GACjBC,EAAiBD,EAAgB,KAIrC5W,EAAAA,EAAAA,KAAoB,KACbgW,EAAez5K,SAIpBy5K,EAAez5K,QAAQjG,UAAU+wB,OAAO,YAAa2uJ,EAAez5K,QAAQwyC,aAnK1D,WAuKhBopI,GAA4BzkL,EAAAA,EAAAA,IAAiB0xF,IACjDyxF,EAAiBjhK,OAAOwvE,OAGpBgzF,GAA0B1kL,EAAAA,EAAAA,IAAiB5B,IAC/CukL,EAAevkL,EAAEqN,OAAOs5B,YAGpB4/I,GAA8B3kL,EAAAA,EAAAA,IAAiB5B,IACnDykL,EAAqBzkL,EAAEqN,OAAOs5B,YAG1B6/I,GAAuB5kL,EAAAA,EAAAA,IAAiB5B,IAC5C2kL,EAAc3kL,EAAEqN,OAAOs5B,YAGnB8/I,GAAiB7kL,EAAAA,EAAAA,IAAiB5B,IACpB,KAAdA,EAAEy1C,SACJ6vI,OAIEoB,GAAuB9kL,EAAAA,EAAAA,IAAiB5B,IAC5CokL,EAAYpkL,EAAEqN,OAAOnL,UAGjBykL,GAAmB/kL,EAAAA,EAAAA,IAAgB,KACvC,GAAIojL,IAAcb,EAAS7+G,OAAOprE,OAChC,OAAO5B,EAAK,gCAMVsuL,GAAkBhlL,EAAAA,EAAAA,IAAiBjI,IACvC,MAAMisL,EAAiB7tL,EAAQwC,KAAKsrL,GAAMA,EAAEvgH,SAAQzpC,QAAQgqJ,GAAMA,EAAE3rL,SACpE,GAAI8qL,GAAaY,EAAe1rL,OAAS,IAAMnC,EAAQ4B,GAAO2rE,OAAOprE,OACnE,OAAO5B,EAAK,+BAwBhB,SAASuuL,IACP,OAAO9uL,EAAQwC,KAAI,CAACnB,EAAQO,KAC1BQ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRusE,UAtOgB,IAuOhBj4E,MAAOtI,IAAU5B,EAAQmC,OAAS,GAxOlB,KAwOuBnC,EAAQmC,OAC3C5B,EAAK,cACLA,EAAK,wBACTmzD,MAAOm7H,EAAgBjtL,GACvBuI,MAAO9I,EAEPqU,SAAWzN,GAAMmmL,EAAaxsL,EAAOqG,EAAEkjB,cAAchhB,OACrD4kL,WAAYL,IAEb9sL,IAAU5B,EAAQmC,OAAS,IAC1BmB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,uBACVoa,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLqW,UAAW7Z,EAAK,UAEhBH,QAASA,IAAMiuL,EAAazsL,GAAOW,UAEnCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAKrB,CAeA,OACExC,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CAACX,OAAQA,EAAQQ,QAASs9K,EAAS39K,QA9DvCzE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,yBAAwBwC,SAAA,EACrCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC6V,OAAK,EAACjR,MAAM,cAAcnF,KAAK,UAAUqW,UAAU,uBAAuBha,QAASokL,EAAQjiL,UACjGe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEhC,EAAK,cACnC+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,UACNnF,KAAK,UACLhE,UAAU,sBACVK,QAASmtL,EAAahrL,SAErBhC,EAAK,eAmDqDR,UAAU,YAAWwC,SAAA,EACpFe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAKywK,EACLhiL,MAAO3J,EAAK,gBACZ4J,MAAOiiL,EACP14H,MAAOk7H,IACPl5K,SAAUi5K,EACVI,WAAYL,KAEdprL,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,qBAEfqC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,6BAA6B0b,IAAK0wK,EAAe5pL,SAAA,EAC9De,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,iBAAgBwC,SAAEhC,EAAK,iBAEpC0sL,GAvBP,WACE,MAAMY,EAAiB7tL,EAAQwC,KAAKsrL,GAAMA,EAAEvgH,SAAQzpC,QAAQgqJ,GAAMA,EAAE3rL,SAEpE,OAAOwqL,SAAiC1rL,IAAlB8rL,IAAgCc,EAAed,MACnEzpL,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,aAAYwC,SAAEhC,EAAK,6BAEpC,CAiBoByuL,GACbrC,GACCrpL,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,gBACL5E,QA/BD8uL,IACJtsL,KAAI,CAAC0H,EAAOtI,KAAU,CAAGuI,MAAOg6C,OAAOviD,GAAQsI,QAAOsnI,QAASxxI,EAAQ4B,GAAO2rE,WA+BzE53D,SAAUwuC,OAAO4oI,GACjBr3K,SAAU44K,IAGZQ,QAKJxrL,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,qBAEfqC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,YAAWwC,SAAA,EACxBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wBAAuBwC,SAAA,EAClC0pL,IACA3oL,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,iBACZquC,QAAS29I,EACT72K,SAAU64K,KAGdjrL,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,gBACZquC,QAAS69I,EACTtjL,SAAUwjL,EACVj3K,SAAU84K,KAEZlrL,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,YACZquC,QAAS+9I,EACTxjL,SAAUsjL,QAAgCxrL,IAAX+qL,EAC/Bt2K,SAAU+4K,OAGb9B,IACCvqL,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,iBAAgBwC,SAAEhC,EAAK,+BACrC+C,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACPz1G,MAAO0iL,EACPn3K,SAAUy3K,EACVptE,mBAAiB,KAEnBz8G,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,OAAMwC,SAAEhC,EAAK,4C,4BC5VxC,MAuCA,IAAeX,EAAAA,EAAAA,KAvCmBqvL,EAChC9/F,QAAOlxB,QAAO79D,cAEd,MAAM4qB,GAAcnhB,EAAAA,EAAAA,IAAiB5B,IAEnCA,EAAEkkB,iBAEF/rB,EAAQ+uF,EAAM+/F,OAAQ//F,EAAMppF,OAGxBhG,GAAYsC,EAAAA,GAAAA,GAChB,cACA47D,GAAS,SAGLjxD,EAAM,GAAGmiL,EAAAA,IAAuBC,EAAAA,IAAW,oBAAoBjgG,EAAMkgG,YACrEztI,EAAW0tI,GAAAA,GAAcv+F,IAAI/jF,GAEnC,OACE1J,EAAAA,GAAAA,GAAA,OACEvD,UAAWA,EACX4wC,YAAa3lB,EACbvjB,MAAO,IAAI0nF,EAAMogG,MAAM,MAAMhtL,SAE5BitL,EAAAA,GAAqBrgG,EAAM+/F,QAC1B5rL,EAAAA,GAAAA,GAAA,OACE0J,IAAKA,EACLjN,UAAY6hD,OAAwC3gD,EAA7B,2BACvBguB,IAAKkgE,EAAM+/F,OACXO,QAAQ,OACR,YAAWziL,EACXzG,OAASq7C,OAA6B3gD,EAAlByuL,GAAAA,GACpB7iL,WAAW,SCjCf8iL,GAAe,KAAQxyK,EAAAA,EACvByyK,GAAwB,IAAOzyK,EAAAA,EAC/B0yK,GAA+B,GAAM1yK,EAAAA,EACrC2yK,GAA2B,GAAM3yK,EAAAA,EAuEvC,IAAevd,EAAAA,EAAAA,KA5DqBmwL,EAClCC,WAAUpuL,QAAOquL,YAAWpvF,sBAAqBt2E,eAAcq6J,oBAE/D,MAAMnpK,GAAMlJ,EAAAA,EAAAA,OAEZipH,EAAAA,GAAAA,IAAe//G,EAAKolF,GAEpB,MAAMp2E,GAAuBixB,EAAAA,GAAAA,GAA6BnxB,GAEpDhqB,GAAOD,EAAAA,EAAAA,MACP,SAAEiF,IAAaC,EAAAA,EAAAA,MAEf0qL,EAAe3qL,EACjBvD,KAAKsgB,OACJgc,EAAAA,EAAWlrB,MAAMT,MAAQm9K,GAA2BH,KAAiBlpF,EAAAA,IAAoBkpF,KA7B9D,EAgC1B38K,EAAShR,KAAKm+E,KAAK6vG,EAAS9jF,OAAO/pG,OAAS+tL,IAC7CzpF,EAAAA,KAAqBlhG,EAAWsqL,GAA+BD,KAEpE,OACExtL,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EAEL1V,GAAI,kBAAkBnE,IACtB7B,UAAU,aAAYwC,SAAA,EAEtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,oBAAmBwC,UAChCe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,kBAAkByD,IAAI,OAAMjB,SACtChC,EAAKyvL,EAASjqL,KAAO4iG,EAAAA,IAAuB,iBAAmB,QAAQ/mG,UAG5E0B,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAe,uBAAwBooB,GAClDxb,MAAO,WAAW+D,OAClBxP,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAEnCgoB,GAAgBylK,EAAS9jF,OAAO1pG,KAAKoC,IACpC,MAAMuqF,EAAQ8gG,EAAUrrL,GAExB,IAAKuqF,EACH,OAIF,MAAMghG,EAAiB,OAAQhhG,EAAQA,EAAQA,EAAM,GAErD,OACE7rF,EAAAA,GAAAA,GAAC2rL,GAAW,CAEV9/F,MAAOghG,EACP/vL,QAASwkL,GAFJuL,EAAepqL,WA1BvBiqL,EAASjqL,OCNdqqL,GAA8C,CAClDpW,OAAQ,SACRqW,OAAQ,QACRC,OAAQ,UACRC,MAAO,OACPC,SAAU,QACVC,OAAQ,MACRC,QAAS,OACTC,QAAS,WACTC,MAAO,QAKHjyF,GAAe,KAAOxhF,EAAAA,EACtBsuF,GAAsB,MAAQtuF,EAAAA,EAG9B0zK,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA+LJ,UAAepxL,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAAuBg+C,EAAAA,GAAAA,IAAKh+C,EAAQ,CAAC,kBADpBD,EA7L2B06K,EAC7ClxL,YACAgjL,eACA6B,oBAEA,MAAM50J,GAAezd,EAAAA,EAAAA,MACfkrB,GAAYlrB,EAAAA,EAAAA,OAEXixH,EAAY0tD,IAAiBn8K,EAAAA,EAAAA,OAC7Bm3F,EAAQilF,IAAap8K,EAAAA,EAAAA,OACrBq8K,EAAqBC,IAA0Bt8K,EAAAA,EAAAA,IAAS,IACzD,SAAExP,IAAaC,EAAAA,EAAAA,OAEnBy/C,aAAcwoD,EACd5oD,cAAe6oD,GACb/oD,MAEIs6C,QAAS4B,IAAwBtB,EAAAA,GAAAA,IAAwB,CAC/DC,QAASxvE,EACTkwE,WA3B0B,MA4BxBh8C,IACFA,EAAQviD,SAAS+9F,IACf,MAAM,GAAE35F,GAAO25F,EAAMpqF,OACrB,IAAKvP,IAAOA,EAAG+3H,WAAW,mBACxB,OAGF,MAAMl8H,EAAQmqB,OAAOhmB,EAAG41D,QAAQ,kBAAmB,KACnDk1H,GAAsBjvL,GAAS89F,EAAMC,kBAGvC,MAAMC,EAAuBixF,GAAsB1vL,QAAO,CAAC0+F,EAAaF,EAAgB/9F,IAC/E+9F,GAAkB/9F,EAAQi+F,EAAcj+F,EAAQi+F,GACtDC,KAECF,IAAyBE,KAI7BuxF,EAAuBzxF,MAGnBy2B,GAAoBjnB,EAAAA,GAAAA,GAAkB,GAAIkiF,EAAAA,KAC1CjiF,EAAsBnD,GAAUmqB,GAEtC14C,EAAAA,GAAAA,GAAoBlgD,IAAal4B,GAAY8pG,KAG7CxuG,EAAAA,EAAAA,KAAU,KACR,IAAK2iI,EACH,OAGF,MAAM38H,EAAS42B,EAAU/qB,QACzB,IAAK7L,EACH,OAGF,MAAMyoG,EAAU8hF,EAAsB3lF,GAAsB5kG,EAAOyrC,YAAc,EAAIm5D,GAAsB,GAE3GriB,EAAAA,GAAAA,GAAwBviF,EAAQyoG,KAC/B,CAACk0B,EAAY4tD,IAEhB,MAAM7wL,GAAOD,EAAAA,EAAAA,KAEPixL,GAAgBvwL,EAAAA,EAAAA,KAAQ,KAC5B,IAAKwiI,EACH,OAAOl5F,GAAAA,EAET,MAAMknJ,EAAkB,IAAIhuD,GAS5B,OARIu/C,GAAc5gL,QAChBqvL,EAAgBnjF,QAAQ,CACtBtoG,GAAI4iG,EAAAA,IACJ/jG,KAAMrE,EAAK,kBACX2rG,OAAQ62E,IAILyO,IACN,CAAChuD,EAAYjjI,EAAMwiL,KAGtBliL,EAAAA,EAAAA,KAAU,KACRiT,YAAW,KACT,MAAM29K,EAAOA,KACXP,EAAcF,GAAUxtD,YAExB2tD,EAAUH,GAAU9kF,SAGlB8kF,GACFS,IAuFR9xK,iBAQE,OAPKmxK,KACHA,GAAmB,oCACnBC,UAAsBD,IAAkBY,QAExCV,IAAYW,EAAAA,GAAAA,IAAgBZ,KAGvBD,EACT,CA9FQc,GACGvoG,KAAKooG,KA1Ga,OA6GxB,IAEH,MAAMI,GAAiBhoL,EAAAA,EAAAA,IAAiBjI,IACtCyvL,EAAuBzvL,GACvB,MAAMkwL,EAAa9hK,EAAatd,QAAS4gB,QAAqB,oBAC3D9lB,cAA2B,mBAAmB5L,MACjD4+F,EAAAA,GAAAA,IAAc,CACZ7xF,UAAWqhB,EAAatd,QACxB2lB,QAASy5J,EACTzrK,SAAU,QACV85E,OAAQxB,GACR8B,YAvHyB,SA2HvB8O,GAAoB1lG,EAAAA,EAAAA,IAAgB,CAACslF,EAAevqF,KACxDggL,EAAcz1F,EAAOvqF,MAqBjBmtL,GAAqB1vL,EAAAA,GAAAA,GAAe,cAAetC,GAEzD,IAAKsvG,EACH,OACE/rG,EAAAA,GAAAA,GAAA,OAAKvD,UAAWgyL,EAAmBxvL,UACjCe,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,MAKd,MAAMpnD,GAAkB5G,EAAAA,GAAAA,GACtB,sBACCqrG,GAAuB,mBAG1B,OACEtrG,EAAAA,GAAAA,IAAA,OAAKrC,UAAWgyL,EAAmBxvL,SAAA,EACjCe,EAAAA,GAAAA,GAAA,OACEmY,IAAKgiB,EACL19B,UAAWkJ,EACXzF,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAEnCgvL,EAAc/uL,KAxCrB,SAA8BwtL,EAA6BpuL,GACzD,MAAM4F,EAAO4oL,GAAkBJ,EAASjqL,IAExC,OAAOyB,IACLlE,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAW,sBAAqB6B,IAAUwvL,EAAsB,YAAc,IAC9Ej3K,OAAK,EACLsvC,OAAK,EACLvgD,MAAM,cAEN9I,QAASA,IAAMyxL,EAAejwL,GAC9BwY,UAAW41K,EAASprL,KAAKrC,UAEzBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM4C,KAGlB,OA0BIlE,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLi6B,SAAUwjD,EACV1tG,WAAWsC,EAAAA,GAAAA,GAAe,mBAAoB0a,EAAAA,GAAe,eAAiB,iBAAiBxa,SAE9FgvL,EAAc/uL,KAAI,CAACwtL,EAAUvlI,KAC5BnnD,EAAAA,GAAAA,GAACysL,GAAa,CACZC,SAAUA,EACVpuL,MAAO6oD,EACPwlI,UAAW/jF,EACXrL,oBAAqBA,EACrBt2E,aAAc6mK,GAAuB3mI,EAAI,GAAK2mI,GAAuB3mI,EAAI,EACzEm6H,cAAer1E,eCxC3B,IAAe3vG,EAAAA,EAAAA,KAlKiBoyL,EAC9BC,MACA9+K,aACApT,YACA8gG,sBACAzgG,UACA8xL,gBACApiI,sBAEA,MAAMr0C,GAAMlJ,EAAAA,EAAAA,MAENhS,GAAOD,EAAAA,EAAAA,KAGP0lG,GADiBrE,EAAAA,GAAAA,IAAkBlmF,EAAKolF,KACP1tF,EACjCuzB,GAAeurJ,EAAIE,iBAAmBF,EAAIxrJ,YAAa2rJ,EAAAA,EAAAA,IAAkBH,EAAK,aAC9EtgL,GAAiBJ,EAAAA,EAAAA,GAASm1B,GAAcs/D,IAEvCqsF,IAAat9K,EAAAA,EAAAA,IAASk9K,EAAIxrJ,WAAWp0B,UAAYV,GAClD4pC,GAAWC,EAAAA,GAAAA,GAAcy2I,EAAIxrJ,WAAWp0B,SAAUggL,GAElDC,GAAYC,EAAAA,EAAAA,IAAyBN,KAAQG,EAAAA,EAAAA,IAAkBH,EAAK,QACpEO,GAAYjhL,EAAAA,EAAAA,GAAS+gL,GAAYtsF,GAEjCysF,EAAoBruL,QAAQ4hG,GAAewsF,IAC3C,WAAEztK,EAAU,kBAAEoF,IAAsBC,EAAAA,GAAAA,IAAa,GACjDI,EAAsBw7E,IAAgBjhF,EACtC2tK,EAAe1sF,GAAejhF,GAE9B,kBACJ+wD,EAAiB,kBAAEC,EAAiB,wBACpCquB,EAAuB,kBAAEpuB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB16D,GAErBk6D,GAAoB9rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,UAC9CkjE,GAAiB/rE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,QAAS4gB,QAAQ,mCAC5DuiD,GAAiBhsE,EAAAA,EAAAA,IAAgB,IAAM4R,EAAI/I,QAASlF,cAAc,+BAElEwd,GAAcnhB,EAAAA,EAAAA,IAAgB,MAC9BisE,GAAsB11E,GAC1BA,EAAQ,IACH6xL,EACH//K,QAASsgL,OAIPG,GAAoB9oL,EAAAA,EAAAA,IAAiB5B,IACzCA,EAAEwV,kBACFxV,EAAEkkB,iBACF+lK,EAAeD,MAGXW,GAAsB/oL,EAAAA,EAAAA,IAAgB,KAC1CqoL,IAAgBD,MAGZptF,GAAkBh7F,EAAAA,EAAAA,IAAgB,KACtCzJ,EAAS,IACJ6xL,EACH//K,QAASsgL,IACR,MAGC1tF,GAAsBj7F,EAAAA,EAAAA,IAAgB,KAC1CzJ,EAAS,IACJ6xL,EACH//K,QAASsgL,QACRvxL,GAAW,MAGVsvC,GAAkB1mC,EAAAA,EAAAA,IAAiB5B,KACvCm9F,EAAAA,GAAAA,GAAoCn9F,GACpCm8F,EAAwBn8F,OAG1BpH,EAAAA,EAAAA,KAAU,KACJsS,GAAY8iE,MACf,CAACA,EAAwB9iE,IAE5B,MAAM8/B,GAAgB5wC,EAAAA,GAAAA,GACpB,YACA4vL,EAAIt/K,OAASs/K,EAAIj/K,QAAUi/K,EAAIt/K,MAAQs/K,EAAIj/K,OAAS,WAAa,aACjE5S,GAAW,cACXL,GAGF,OACEqC,EAAAA,GAAAA,IAAA,OACEqZ,IAAKA,EACL1b,UAAWkzC,EACXtC,YAAaJ,EACbnwC,QAAS4qB,EACTyB,cAAeupD,EAAkBzzE,SAAA,EAE/Bwa,EAAAA,IAAgBm1K,IAChB5uL,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,oBACVmJ,MAAM,OACNkiG,MAAI,EACJtF,aAAW,EACX1lG,QAASuyL,EAAkBpwL,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,QAAQ7E,UAAU,6BAGhCsyL,IACC/uL,EAAAA,GAAAA,GAAA,UACEmY,IAAK8/B,EACLx7C,UAAU,cAGb4R,IAAmB+gL,IAClBpvL,EAAAA,GAAAA,GAAA,OACE0J,IAAK2E,EACLsd,IAAI,GACJlvB,UAAU,UACV8M,WAAW,IAGd4lL,IACCnvL,EAAAA,GAAAA,GAAC28C,GAAAA,EAAc,CACbC,SAAO,EACPlzC,IAAKwlL,EACL7lK,UAAQ,EACRG,MAAI,EACJpB,OAAK,EACL3C,yBAAuB,EACvB8D,aAAW,EACXgmK,QAAQ,UAEJ1oK,IAGPK,IACClnB,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAOyI,GAAkB0gL,EAAY,QAAU,UAEzDjyL,QAAiCa,IAAtB80E,IACV3zE,EAAAA,GAAAA,IAACwkB,GAAAA,EAAI,CACHlgB,OAAQovE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChB91E,UAAU,mBACV+mB,WAAS,EACT5f,QAAS+uE,EACTthE,oBAAqBuhE,EAAsB3zE,SAAA,EAEzCutD,IAAmBxsD,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAASykG,EAAiBr9F,KAAK,OAAMjF,SAAEhC,EAAK,uBAC3E+C,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC9a,QAAS0kG,EAAqBt9F,KAAK,WAAUjF,SACpDhC,EAAKuvD,EAAkB,cAAgB,qBAEzCoiI,IACC5uL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAACJ,aAAW,EAACtT,KAAK,SAASpH,QAASwyL,EAAoBrwL,SAAEhC,EAAK,qBCrGpF,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAElM,IAAW6M,EAAAA,EAAAA,KAAyBX,IAAW,CAAC,EAClDs5C,EAAkB1rD,QAAQkG,KAAWmwB,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GACxE,MAAO,CACLy8E,UAAWvwE,EAAOs8K,KAAKC,MAAMD,KAC7BhjI,qBANcv5C,EA1DyBy8K,EAC3CjzL,YACAimG,cACAitF,cACAlsG,YACAj3B,kBACAojI,kBAEA,MAAM,cAAEC,EAAa,QAAEC,IAAYzpL,EAAAA,EAAAA,MAE7BqmB,GAAezd,EAAAA,EAAAA,OAGnB0sF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAcqjK,WAhBzB,OAkB5BxyL,EAAAA,EAAAA,KAAU,KACJmlG,GACFmtF,MAED,CAACntF,EAAamtF,IAEjB,MAAMR,GAAoB9oL,EAAAA,EAAAA,IAAiBooL,IACzCmB,EAAQ,CAAEnB,MAAKqB,cAAc,OAGzBj9D,GAAoBjnB,EAAAA,GAAAA,GAAkB,GAAI1Q,EAAAA,KAEhD,OACEp7F,EAAAA,GAAAA,GAAA,OAAAf,UACEe,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLjwB,WAAWsC,EAAAA,GAAAA,GAAe,YAAatC,EAAWgd,EAAAA,GAAe,eAAiB,iBAAiBxa,SAEjG0wL,EAEE58D,GAAqBtvC,GAAaA,EAAU5kF,OAC9C4kF,EAAUvkF,KAAKyvL,IACb3uL,EAAAA,GAAAA,GAAC0uL,GAAS,CAERC,IAAKA,EACLpxF,oBAAqBA,EACrB1tF,YAAa6yF,EACb5lG,QAAS6yL,EAAcC,OAAcjyL,EACrCixL,cAAeS,EACf7iI,gBAAiBA,GANZmiI,EAAIlsL,MASXswH,GAAqBtvC,GACvBzjF,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,SAAC,oBAEjCe,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAhBR/sD,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,SAAC,sDClDpC,IAAKgxL,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,6BAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,eAAdA,CAAc,MAOnB,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAezkG,aAAc,yBAC9B,CAACykG,GAAe/pC,UAAW,mBAC3B,CAAC+pC,GAAeG,MAAO,WAGnBC,GAAwB,CAC5B,CAACJ,GAAeE,OAAQ,aACxB,CAACF,GAAezkG,aAAc,gBAC9B,CAACykG,GAAe/pC,UAAW,gBAC3B,CAAC+pC,GAAeG,MAAO,aAqEzB,IAAe9zL,EAAAA,EAAAA,KAlEwBg0L,EACrC9yD,YAAWM,cAAaujD,iBAAgBkP,eAAcxI,oBACtDC,mBAAkBhe,gBAElB,MAAM/sK,GAAOD,EAAAA,EAAAA,KAEb,SAASwzL,EAAgBr3G,GACvB,OACEn5E,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAW,sBAAqB+gI,IAAcrkD,EAAM,YAAc,IAElEr8E,QAASA,IAAMghI,EAAY3kD,GAC3BriE,UAAW7Z,EAAKizL,GAAuB/2G,IACvCtiE,OAAK,EACLsvC,OAAK,EACLvgD,MAAM,cAAa3G,UAEnBe,EAAAA,GAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,GAAAA,GAAe,OAAQsxL,GAAsBl3G,OAGjE,CAEA,MAAMs3G,GAAmBlqL,EAAAA,EAAAA,IAAgB,KACvCgqL,EAAa/yD,IAAcyyD,GAAe/pC,SAAW,WAAa,WAOpE,OACEpnJ,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAoBK,QALrC,SAAyBk1B,GACvBA,EAAM7X,iBACR,EAG+Dja,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,CAC9Fu+H,IAAcyyD,GAAeE,OAAS3yD,IAAcyyD,GAAezkG,aAAew+E,IACjFhqK,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,uBACVqa,UAAW0mH,IAAcyyD,GAAe/pC,SAAW,kBAAoB,cACvErvI,OAAK,EACLsvC,OAAK,EACLvgD,MAAM,cACN9I,QAAS2zL,EAAiBxxL,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAId0mL,GAAoBwI,EAAgBP,GAAeE,OACnDnI,GAAoBwI,EAAgBP,GAAezkG,cAClDu8F,GAAqByI,EAAgBP,GAAe/pC,WACpD6hC,GAAqByI,EAAgBP,GAAeG,OAEpD5yD,IAAcyyD,GAAeE,OAAS3yD,IAAcyyD,GAAezkG,eACnExrF,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,uBACVK,QAASukL,EACTvqK,UAAU,gBACVD,OAAK,EACLsvC,OAAK,EACLvgD,MAAM,cAAa3G,UAEnBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,wBC5BrB,IAAIy9E,IAAc,EAElB,MAyQA,IAAeziF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACQ,CACLw9K,mBAAmBp9K,EAAAA,EAAAA,KAAeJ,GAAQw9K,kBAC1CC,yBAAyBjkF,EAAAA,EAAAA,KAA+Bx5F,MAJ1CD,EAzQ0B29K,EAC5C5pL,SACA8M,WACA1Q,SACAwiK,kBACA+pB,cACAkB,oBACAH,oBACAn1F,WACAwsF,oBACAC,mBACAvrL,YACAk0L,0BACA1tL,SACAW,UACA09K,gBACAp3E,sBACA5F,kBACAsrF,cACAvO,iBACAkP,eACA5O,iBACAD,0BACGoP,MAEH,MAAOtzD,EAAWC,IAAgBhsH,EAAAA,EAAAA,IAAyBw+K,GAAeE,QACnE1Q,EAAcsR,IAAmBt/K,EAAAA,EAAAA,IAAmB,KACpDq3F,EAAoBkoF,IAAyBv/K,EAAAA,EAAAA,IAAmB,KACjE,SAAExP,IAAaC,EAAAA,EAAAA,OAEd+uL,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/tL,EAAQQ,OAASjG,EAAWsE,IAClF,aAAEglB,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,EAAQQ,GAAS,GAAO,GAE7F3G,GAAOD,EAAAA,EAAAA,MAER+hF,IAAe37E,IAClB27E,IAAc,IAGhBxhF,EAAAA,EAAAA,KAAU,KACR0F,MACC,CAACA,KAGJ1F,EAAAA,EAAAA,KAAU,KACJyqL,GACJvqD,EArFuB,KAsFtB,CAACuqD,KAEJzoK,EAAAA,EAAAA,KAAgB,KACd,GAAKtd,GAAamB,IAAU2kL,EAO5B,OAHAlgL,SAAS+a,KAAKzZ,UAAUC,IAAI,iCAC5BvB,SAAS+a,KAAKzZ,UAAUC,IAAI,uBAErB,KACLvB,SAAS+a,KAAKzZ,UAAU0Z,OAAO,uBAE/BrS,YAAW,MACTyL,EAAAA,EAAAA,KAAgB,KACdpU,SAAS+a,KAAKzZ,UAAU0Z,OAAO,sCAtGd,QA0GtB,CAACklK,EAAmB9lL,EAAUmB,IAEjC,MAAMguL,GAAkBniL,EAAAA,EAAAA,IAAOwwK,GAC/B2R,EAAgBhiL,QAAUqwK,GAC1BliL,EAAAA,EAAAA,KAAU,KACH6zL,EAAgBhiL,QAAQvQ,SAAUuE,IAIvCguL,EAAgBhiL,QAAQ/Q,SAASiD,IAC/BqgL,EAAe,CAAE91F,MAAOvqF,OAG1ByvL,EAAgB,OACf,CAAC3tL,EAAQu+K,IAEZ,MAAM11E,GAAoB1lG,EAAAA,EAAAA,IAAgB,CAACslF,EAAevqF,KACxDyvL,GAAiBnoF,GAAW,IAAIA,EAAQtnG,KAExCggL,EAAcz1F,MAGVwlG,GAAwBpiL,EAAAA,EAAAA,IAAO65F,GACrCuoF,EAAsBjiL,QAAU05F,GAChCvrG,EAAAA,EAAAA,KAAU,KACH8zL,EAAsBjiL,QAAQvQ,SAAUuE,IAI7CiuL,EAAsBjiL,QAAQ/Q,SAAS4qF,IACrCy4F,EAAqB,CACnBz4F,kBAIJ8nG,EAAgB,OACf,CAAC3tL,EAAQs+K,IAEZ,MAAM4P,GAA0B/qL,EAAAA,EAAAA,IAAiBslF,IAC/CmlG,GAAuBpqJ,GAAQ,IAAIA,EAAKilD,EAAMppF,MAE9CynG,EAAoBre,MAGhB0kC,GAAehqH,EAAAA,EAAAA,IAAiB/F,IACpCoD,IACA2sL,EAAa/vL,MAGTs3K,GAAsBvxK,EAAAA,EAAAA,IAAgB,CAC1Cq4E,EAAqBiqC,EAAoBk9C,EAA0BwrB,KAEnEjtF,IAAkB1lB,EAASiqC,EAAUk9C,GAAgB,EAAMwrB,MAyDvDl6K,GACJvY,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAkBK,QANrC,SAAyBk1B,GACvBA,EAAM7X,iBACR,EAI8Dlb,SACvD8/E,KACC/+E,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAK,QACLy+B,UAAWy9F,EACXO,YAAap9E,OAAOsK,OAAOilI,IAAwBrxL,OAAOI,SA7DpE,SAAuBzC,EAAmBg1L,GACxC,OAAQh0D,GACN,KAAKyyD,GAAeE,MAClB,OACEnwL,EAAAA,GAAAA,GAAC2tL,GAAW,CACVlxL,UAAU,aACV6kL,cAAer1E,IAGrB,KAAKgkF,GAAezkG,YAClB,OACExrF,EAAAA,GAAAA,GAAC+pG,GAAiB,CAChBttG,UAAU,aACV8c,UAAWnW,IAAW5G,EACtB++F,SAAUA,EACVmH,YAAat/F,IAAW5G,GAAYg1L,GACpCxqL,OAAQA,EACRk9F,eAAgBjiG,GAAY0uL,EAC5BzmF,oBAAqBonF,IAG3B,KAAKrB,GAAe/pC,SAClB,OACElmJ,EAAAA,GAAAA,GAACk3K,GAAa,CACZz6K,UAAU,aACV8c,UAAWnW,IAAW5G,EACtBkmG,cAAakjE,GAAkBxiK,IAAW5G,GAAYg1L,GACtDj2F,SAAUA,EACVqqE,gBAAiBA,EACjBzhE,gBAAiB0sF,EACjB7pL,OAAQA,EACR8M,SAAUA,EACVowF,eAAgBjiG,GAAY0uL,EAC5BrsF,gBAAiBwzE,IAGvB,KAAKmY,GAAeG,KAClB,OACEpwL,EAAAA,GAAAA,GAAC0vL,GAAS,CACRjzL,UAAU,aACVimG,cAAaitF,GAAcvsL,IAAW5G,GAAYg1L,GAClD7B,YAAaA,EACbC,YAAaA,IAMvB,MAmBK3tL,IACCjC,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLsvC,OAAK,EACLvgD,MAAM,cACNkR,UAAW7Z,EAAK,SAChBR,UAAU,sBACVgE,KAAK,OACL3D,QAAS8G,EAAQ3E,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAACswL,GAAgB,CACf9yD,UAAWA,EACXM,YAAaL,EACb4jD,eAAgBA,EAChBrX,UAAW6mB,EACXN,aAAchgE,EACdw3D,kBAAmBA,EACnBC,iBAAkBA,OAKxB,GAAI/lL,EAAU,CACZ,IAAKglB,EACH,OAGF,MAAMwqK,GAAkB1yL,EAAAA,GAAAA,GACtB,yBACAooB,EACAupK,GAAqB,mBACrB3I,GAAqB,sBACrB8I,GAAqB,oBAGvB,OAAI9I,GAEA/nL,EAAAA,GAAAA,GAAA,OAAKvD,UAAWg1L,EAAgBxyL,SAC7BoY,KAMLrX,EAAAA,GAAAA,GAACmtG,GAAAA,EAAM,CAAAluG,UACLe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWg1L,EAAgBxyL,SAC7BoY,KAIT,CAEA,OACErX,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQA,EACRQ,QAASA,EACTq9F,WAAY8mF,EACZtrL,WAAWsC,EAAAA,GAAAA,GAAe,aAActC,GACxC4U,oBAAqBzN,EACrB8tL,aAAej4K,EAAAA,QAAkC9b,EAAnBszL,EAC9B/nK,aAAezP,EAAAA,QAAkC9b,EAAnBuzL,EAC9B5jF,mBAAoB7zF,EAAAA,GACpB2zF,WAAS,KAEJ26E,EAAoB+I,EAAsB,CAC7Cn5K,UAAW,OACX4L,UAAW,UACZtkB,SAEAoY,Q,gBCvTP,MAmCA,IAAe/a,EAAAA,EAAAA,KAnCKq1L,EAClBC,aACAj3H,QACAkyG,UACAn7J,cACA/K,OACAQ,WACArK,cAEA,MAAM4qB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQqK,MAGV,OACErI,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,WAAWsC,EAAAA,GAAAA,GAAe,6CAA8C6yL,GAAc,eACtFrtL,WAAS,EACTzH,QAAS4qB,EACTizC,MAAOA,EAAM17D,SAAA,CAEZ2yL,IACC5xL,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,QAAQkG,KAAMA,KAE7B7H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,QAAOwC,SAAA,CAAC,IAErB4tK,MAEH7sK,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,UAAE8B,EAAAA,GAAAA,GAAW2Q,UAdpCm7J,MCiIX,IAAevwK,EAAAA,EAAAA,KAAKu1L,EAAAA,GAAAA,IA7HqBC,EACvC1uL,SACA4D,SACAmtH,eACAg1C,cACA4oB,eACAC,qBACAC,OACA5R,UACAvjL,UACA8G,cAEA,MAAM,eAAEonK,EAAc,eAAEknB,IAAmB7rL,EAAAA,EAAAA,MAErCqmB,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GAEnGw0L,GAAoB5rL,EAAAA,EAAAA,IAAgB,EAAGqtD,QAAOi5G,cAElD,MACM78G,GADYhf,EAAAA,EAAAA,MAAYtxC,MAAMupC,KACd2qB,GAEtBo3G,EAAe,CACb6B,QAAS,IAAIA,IAAU14C,GAAgBnkE,EAAM,KAAIukG,EAAAA,EAAAA,IAAgBvkG,KAAS,OAE5ElzD,OAGIs1L,GAAuB7rL,EAAAA,EAAAA,IAAiB9D,IAC5CyvL,EAAe,CAAElrL,SAAQqrL,aAAc5vL,IACvC3F,OAGIw1L,GAA8B50L,EAAAA,EAAAA,KAAQ,KAC1C,GAAKq0L,GAAclzL,QAAWmzL,EAC9B,OAAOD,EAAa7yL,KAAKqzL,IACvB,MAAMpqL,EAAU6pL,EAAmBO,EAAMC,cACzC,MAAO,CACL/vL,GAAI8vL,EAAM9vL,GACVoqK,QAAS0lB,EAAME,SACf/gL,YAAavJ,GAASkP,QAAQ2B,MAAMA,MAAQ,SAG/C,CAAC+4K,EAAcC,IAEZU,GAAuBnsL,EAAAA,EAAAA,IAAiB4M,KACvCA,EAAK05J,QAAQryC,WAAW6lD,IAAUpgI,MAAM,MAIzC,OAAQ9sC,EACVi/K,EAAqBj/K,EAAK1Q,IAE1B0vL,EAAkBh/K,IAGb,KASHw/K,EAAuB7U,GAAsB,CACjDthL,SAAU4G,EACV0jD,OAR8BppD,EAAAA,EAAAA,KAAQ,KACtC,GAAKyrK,GAAgBmpB,EACrB,MAAQ,GACL5kG,OAAO4kG,GAA+B,GAAInpB,GAAe,MAC3D,CAACA,EAAampB,IAKfjsJ,SAAUqsJ,EACV9uL,YAGIgvL,EAAWzpB,IAAgBA,EAAYtqK,QAAYkzL,IAAiBA,EAAalzL,OAYvF,IAVAtB,EAAAA,EAAAA,KAAU,KACJq1L,GACFhvL,MAED,CAACgvL,EAAShvL,KAEbrG,EAAAA,EAAAA,KAAU,KACRsgL,GAAsB,uBAAwB8U,EAAsBjmK,KACnE,CAACimK,KAEC1rK,GAAgB2rK,EACnB,OAGF,MAAMn2L,GAAYsC,EAAAA,GAAAA,GClIG,WDoInB,iCACAooB,GAGF,OACEroB,EAAAA,GAAAA,IAAA,OAAKrC,UAAWA,EAAW0b,IAAKuU,EAAaztB,SAAA,CAC1CqzL,GAA6BpzL,KAAI,CAACqzL,EAAOj0L,KACxC0B,EAAAA,GAAAA,GAAC2xL,GAAW,CAEV9kB,QAAS0lB,EAAM1lB,QACfn7J,YAAa6gL,EAAM7gL,YACnB/K,KAAMsrL,EACNL,YAAU,EACVzqL,SAAUorL,EAAM9vL,GAChB3F,QAASs1L,EACTz3H,MAAOg4H,IAAyBr0L,GAP3B,cAAci0L,EAAM9vL,QAU5B0mK,GAAajqK,KAAI,CAAC2tK,EAASvuK,KAC1B0B,EAAAA,GAAAA,GAAC2xL,GAAW,CAEV9kB,QAASA,EAAQA,QACjBn7J,YAAam7J,EAAQn7J,YAErB/K,MAAMqqC,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAAK4jI,EAAQj5G,OACrCg+H,YAAU,EACVzqL,SAAU0lK,EACV/vK,QAASq1L,EACTx3H,MAAOg4H,GAAwBL,GAA6BzzL,QAAU,KAAOP,GARxE,GAAGuuK,EAAQj5G,SAASi5G,EAAQA,oBEzF3C,IAAevwK,EAAAA,EAAAA,KAzCsBu2L,EACnCzvL,SAAQ+lK,cAAavlK,cAErB,MAAM,eAAEonK,IAAmB3kK,EAAAA,EAAAA,OACrB,SAAEpE,IAAaC,EAAAA,EAAAA,OAEd+uL,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/tL,EAAQQ,OAASjG,EAAWsE,GAElFylB,GAAcnhB,EAAAA,EAAAA,IAAiBsmK,IACnC7B,EAAe,CACb6B,QAAS,IAAIA,MAEfjpK,OAGF,OACE5D,EAAAA,GAAAA,GAACsjB,GAAAA,EAAI,CACHlgB,OAAQA,EACRuU,UAAU,OACV4L,UAAU,SACV3f,QAASA,EACTnH,UAAU,iBACV4U,oBAAqBzN,EACrB8tL,aAAej4K,EAAAA,QAAkC9b,EAAnBszL,EAC9B/nK,aAAezP,EAAAA,QAAkC9b,EAAnBuzL,EAC9B5jF,mBAAoB7zF,EAAAA,GACpB2zF,WAAS,EAAAnuG,SAERkqK,EAAYjqK,KAAK4zL,IAChB9yL,EAAAA,GAAAA,GAAC2xL,GAAW,CAEV9kB,QAASimB,EAAWjmB,QACpBn7J,YAAaohL,EAAWphL,YACxBvK,SAAU2rL,EAAWjmB,QACrB/vK,QAAS4qB,GAJJorK,EAAWjmB,gBC4C1B,IAAevwK,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,SAAE04E,GAAaxsE,EAAOwsE,SAASugG,SAGrC,MAAO,CAAEvgG,WAAUlzB,iBAFKr1B,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAEjB27B,sBADP0B,EAAAA,EAAAA,KAA2BnxB,MAJxCD,EA3D8B8/K,EAChD/rL,SACA8M,WACA1Q,SACAkhG,kBACA1gG,UACA87E,WACAlzB,kBACA7pB,2BAEA,MAAMjW,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GACnGq1L,GAAe95J,EAAAA,EAAAA,GAAsBwmD,GAAU,GAC/CuzG,EAAoBvzG,GAAYszG,EAChCvb,GAAoBC,EAAAA,GAAAA,GAAqB1wK,EAAQ8M,IAGrD6nF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAckwE,WApBzB,OAsB5Br/F,EAAAA,EAAAA,KAAU,IAAO6F,GAASm7B,EAAAA,EAAAA,GAAsB36B,QAAWjG,GAAY,CAACyF,EAAQQ,IAEhF,MAIMnH,GAAYsC,EAAAA,GAAAA,GAChB,gDACAooB,GACE8rK,GAAmBp0L,QAAW,UAGlC,OACEmB,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLjwB,UAAWA,EACXwsB,YAdoBgvJ,KACtBR,EAAkB,CAAEj3K,KAAM,mBAaKvB,SAE5BgoB,GAAgBgsK,EACfA,EAAkB/zL,KAAK0/E,IACrB5+E,EAAAA,GAAAA,GAACu/F,GAAa,CAEZ3gB,QAASA,EACTn+E,KAAM+lG,EAAAA,IACNjJ,oBAAqBA,EACrBzgG,QAASsG,EAASkhG,OAAkB3mG,EACpCwJ,SAAUy3E,EACVpyB,gBAAiBA,EACjBkzC,YAAU,EACV/8D,qBAAsBA,GARjBi8C,EAAQn8E,MAWfwkB,GACFjnB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,SACNpvD,QC3FV,IAAgB,KAAO,YAAY,YAAc,YC4GjD,IAAerB,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAQ04E,SAAUme,GAAgB3qF,EAAO81E,aAAai3F,SAItD,MAAO,CAAEpiF,cAAarxC,iBAHEr1B,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAGd27B,sBAFV0B,EAAAA,EAAAA,KAA2BnxB,MAJxCD,EArEkC40K,EACpDzkL,SACAs+K,uBACAx3E,sBACAtmG,UACAi6F,cACArxC,kBACA7pB,uBACA9e,aAEA,MAAM,yBAAEqvK,IAA6B7sL,EAAAA,EAAAA,MAE/BqmB,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GACnGq1L,GAAe95J,EAAAA,EAAAA,GAAsB2kE,GAAa,GAClDo1F,EAAoBp1F,GAAem1F,GAEzC34G,EAAAA,GAAAA,GAAoB3tD,GAEpB,MACEivE,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAckwE,WAvBzB,IAuB4D/sF,YAAazM,KAErG7F,EAAAA,EAAAA,KAAU,IAAO6F,GAASm7B,EAAAA,EAAAA,GAAsB36B,QAAWjG,GAAY,CAACyF,EAAQQ,IAEhF,MAAM0tL,GAA0B/qL,EAAAA,EAAAA,IAAiB4sL,IAC1C/vL,IACL8mG,EAAoBipF,GACpBzR,EAAqB,CACnBz4F,WAAYkqG,EAAG1wL,KAEjBywL,QAGIz2L,GAAYsC,EAAAA,GAAAA,GAChBC,GAAO+hC,KACP,mCACA5Z,GACC8rK,GAAmBp0L,QAAUG,GAAOkvI,QAGvC,OACEluI,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLjwB,UAAWA,EAAUwC,SAEpBgoB,GAAgBgsK,EACfA,EAAkB/zL,KAAK0/E,IACrB5+E,EAAAA,GAAAA,GAACu/F,GAAa,CAEZ3gB,QAASA,EACTniF,UAAWuC,GAAOo0L,YAClB3yL,KAAM4yL,EAAAA,IACN91F,oBAAqBA,EACrBzgG,QAASw0L,EACTnqL,SAAUy3E,EACVpyB,gBAAiBA,EACjBkzC,YAAU,EACV/8D,qBAAsBA,EACtB9e,OAAQA,GAVH+6D,EAAQn8E,MAafwkB,GACFjnB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,SACNpvD,Q,gBCnDV,MA8HA,IAAerB,EAAAA,EAAAA,KA5HsBisL,EACnCnlL,SACAkwL,kBAAiB,EACjB9mI,kBACA+0H,cACA1b,yBACAsb,eACAqH,iBACAhH,mBACA+R,iBACA3vL,UACAyN,sBACArK,SACAwsL,cACAC,mBACAC,kBACA/a,wBACAgb,mBACAp5F,gBACA53D,uBACAixJ,oBACAC,kBACAzgD,4BAEA,MAAM,iBACJ0gD,IACEztL,EAAAA,EAAAA,OAEG4qL,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/tL,EAAQQ,IAC7DmwL,EAA4BC,IAAiCviL,EAAAA,EAAAA,KAAS,GAEvE1U,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MACN+2L,EAAgBC,EAAWC,IAAa72L,EAAAA,EAAAA,MAE/C8qC,EAAAA,GAAAA,IAAsB,EAAE0tB,MAElB1yD,IAAW0yD,IACbq+H,IACAH,EAA8BlzL,QAAQ+kK,OAEvC,CAACziK,EAAQyiK,IAEZ,MAAO5oJ,EAASm3K,EAAaC,IAAiB/2L,EAAAA,EAAAA,KAExCg3L,GAAiC/tL,EAAAA,EAAAA,IAAiBwc,IACtDmxK,IACIltL,GAAQ8sL,EAAiB,CAAE9sL,SAAQ+b,gBAczC,OAXAxlB,EAAAA,EAAAA,KAAU,KACH6F,EAKLoN,YAAW,KACT4jL,MA3DqB,KAsDrBC,MAOD,CAACjxL,EAAQgxL,EAAaC,KAGvBv1L,EAAAA,GAAAA,IAACwkB,GAAAA,EAAI,CACHlgB,OAAQA,EACRogB,WAAS,EACT7L,UAAU,QACV4L,UAAW+vK,EAAiB,MAAQ,SACpC72L,WAAWsC,EAAAA,GAAAA,GACT,iBAAkB,QAAS,wBAAyBy0L,GAAe,gBAErE5vL,QAASA,EACTyN,oBAAqBA,EACrBqgL,aAAej4K,EAAAA,QAAkC9b,EAAnBszL,EAC9B/nK,aAAezP,EAAAA,QAAkC9b,EAAnBuzL,EAC9B5jF,mBAAoB7zF,EAAAA,GAAaxa,SAAA,CAGhCu0L,IAAgBK,IACf7zL,EAAAA,GAAAA,GAACu0L,GAAAA,EAAgB,CACf5b,sBAAuBA,EACvB+a,gBAAiBA,EACjBjb,sBAAkB96K,EAClBg2L,iBAAkBA,EAClB/0I,WAAS,EACT3hC,QAASA,EACTs9E,cAAeA,EACf53D,qBAAsBA,EACtBixJ,kBAAmBA,EACnBzc,cAAY,EACZ/jC,sBAAuBA,EACvBohD,WAAYF,EACZ1wL,QAASA,EACTnH,WAAWsC,EAAAA,GAAAA,GAAek1L,GAAkB,8BAIhDn1L,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,uBACAk1L,GAAkB,+BAEpB/zL,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,CAEtCkiL,IAAgBnhL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,OAAOpH,QAASqkL,EAAaliL,SAAElC,EAAQ,sBACtEwkL,GAAeiH,IACdxoL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,WAAWpH,QAAS0rL,EAAevpL,SAC/ClC,EAAQyvD,EAAkB,cAAgB,qBAG9C+0H,GAAeiH,GAAkBuL,IAChC/zL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,cAAcpH,QAAS0kL,EAAiBviL,SACpDlC,EAAQ,oBAGZy2L,GAAeC,IACdzzL,EAAAA,GAAAA,GAAC4X,GAAAA,EAAQ,CAAC1T,KAAK,SAASpH,QAASy2L,EAAet0L,SAC7ChC,EAAK,2B,4BC9HlB,MAAMw3L,GAAsE,CAC1EC,EAAG,OACHC,OAAQ,OACRC,EAAG,SACHC,GAAI,SACJC,EAAG,YACHC,IAAK,gBACLC,KAAM,YACNC,KAAM,WAEFC,GAAartL,SAASqB,cAAc,OA0c1C,IAAe5M,EAAAA,EAAAA,KAxcqB64L,EAClC/xL,SACAgyL,iBACAC,gBACAC,mBACA1xL,cAEA,MAAM8oB,GAAezd,EAAAA,EAAAA,MACfsmL,GAAkBtmL,EAAAA,EAAAA,OAClB,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,IACpEoyL,EAAmBC,EAAiBC,IAAoBp4L,EAAAA,EAAAA,MACxDyrE,EAAS4sH,IAAclkL,EAAAA,EAAAA,IAAS,KAChCmkL,EAAeC,IAAoBpkL,EAAAA,EAAAA,KAAS,IAC5CqkL,EAAgBC,IAAqBtkL,EAAAA,EAAAA,OACrCukL,EAAqBC,IAA0BxkL,EAAAA,EAAAA,IAA+B,CAAC,IAEtFlU,EAAAA,EAAAA,KAAU,IAAO6F,GAASm7B,EAAAA,EAAAA,GAAsB36B,QAAWjG,GAAY,CAACyF,EAAQQ,KAChFsyL,EAAAA,GAAAA,GACE9yL,EACAspB,EACA9oB,GACA,IAGFrG,EAAAA,EAAAA,KAAU,KACJi4L,EACFD,EAAgBnmL,QAASurD,SAEzBg7H,EAAW,IACXE,GAAiB,MAElB,CAACL,KAEJj4L,EAAAA,EAAAA,KAAU,KACH0pB,IACHyuK,IACAO,EAAuB,CAAC,GACxBF,OAAkBp4L,MAEnB,CAAC+3L,EAAkBzuK,KAEtB1pB,EAAAA,EAAAA,KAAU,KACR,IAAK6F,IAAWiyL,EACd,OAGF,MAAMc,EAAwC,CAAC,EAC/C,IAAI,cAAEC,GAAkBf,EAAcgB,wBACtC,KAAOD,GAAiBA,EAAc3zL,KAAO6zL,EAAAA,KAAmB,CAC9D,MAAMC,EAAa9B,GAAwB2B,EAAcI,SACrDD,IACFJ,EAAgBI,IAAc,GAGhCH,EAAgBA,EAAcA,aAChC,CAEAH,EAAuBE,KACtB,CAAC/yL,EAAQiyL,EAAeI,IAE3B,MAAMgB,GAAmBlwL,EAAAA,EAAAA,IAAgB,KACvC,IAAK8uL,EACH,OAGF,MAAMqB,EAAYnmL,OAAOomL,eACrBD,IACFA,EAAUE,kBACVF,EAAUG,SAASxB,OAIjByB,GAAsBvwL,EAAAA,EAAAA,IAAgB,KAC1C,MAAMmwL,EAAYnmL,OAAOomL,eACrBD,GACFpB,EAAiBoB,EAAUK,WAAW,OAIpCC,GAAkBzwL,EAAAA,EAAAA,IAAiB0wL,IACvC,GAAK5B,EASL,OANAH,GAAWgC,gBAAgB7B,EAAc8B,iBACrCF,GACF/B,GAAW3pL,iBAAiB6rL,GAAAA,IAA6B/4L,SAASsiI,IAChEA,EAAG2lD,YAAY3lD,EAAG02D,aAAa,WAG5BnC,GAAW/O,aAGdmR,GAAqB/wL,EAAAA,EAAAA,IAAgB,KACzC,GAAK8uL,EAIL,OAAOA,EAAcgB,wBAAwBD,iBAG/C,SAASmB,IACP,MAAMhsJ,EAAQgqJ,EAAgBnmL,QAC9B,IAAKm8B,EACH,OAGF,MAAM,YAAEyD,EAAW,YAAEwoJ,EAAW,WAAErxG,GAAe56C,EACjD,GAAIisJ,GAAexoJ,EAEjB,YADA+mJ,OAAkBp4L,GAIpB,IAAIlB,EAAY,GACZ0pF,EAAaqxG,EAAcxoJ,IAC7BvyC,EAAY,cAEV0pF,EAAa,IACf1pF,GAAa,cAGfs5L,EAAkBt5L,EACpB,CAOA,SAASg7L,EAAyB7uK,GAChC,GAAIotK,EAAoBptK,GACtB,MAAO,SAGT,GAAY,cAARA,GAA+B,kBAARA,GACzB,GAAI+3B,OAAO0K,KAAK2qI,GAAqB/qF,MAClCysF,GAASA,IAAS9uK,GAAO9nB,QAAQk1L,EAAoB0B,MAEtD,MAAO,gBAEJ,GAAI1B,EAAoB2B,WAAa3B,EAAoB4B,cAC9D,MAAO,UAIX,CAEA,MAAMC,GAAoBtxL,EAAAA,EAAAA,IAAgB,KACxC,GAAIyvL,EAAoB8B,QAAS,CAC/B,MAAM/iK,EAAUuiK,IAChB,IACGjC,IACGtgK,GACDA,EAAQ8vH,QAAQkzC,aAAeC,EAAAA,GAAsBC,UACpDljK,EAAQwxJ,YAEZ,OASF,OANAxxJ,EAAQuxJ,YAAYvxJ,EAAQwxJ,kBAC5B0P,GAAwBE,IAAe,IAClCA,EACH2B,SAAS,KAIb,CAEA,MAAM9+K,EAAOg+K,IACbnvL,SAASqwL,YACP,cAAc,EAAO,2CAA2CF,EAAAA,GAAsBC,YAAYj/K,YAEpGpV,OAGIu0L,GAAiB5xL,EAAAA,EAAAA,IAAgB,KACrC0vL,GAAwBE,IAEtBtuL,SAASqwL,YAAY/B,EAAgB/yK,KAAO,eAAiB,QAC7Du9B,OAAO0K,KAAK8qI,GAAiB93L,SAASuqB,IACvB,WAARA,GAA4B,cAARA,IAAwB9nB,QAAQq1L,EAAgBvtK,KACvE/gB,SAASqwL,YAAYtvK,MAIzBkuK,IACO,IACFX,EACH/yK,MAAO+yK,EAAgB/yK,YAKvBg1K,GAAmB7xL,EAAAA,EAAAA,IAAgB,KACvCsB,SAASqwL,YAAY,UACrBpB,IACAb,GAAwBE,IAAe,IAClCA,EACHkC,QAASlC,EAAgBkC,cAIvBC,GAAsB/xL,EAAAA,EAAAA,IAAgB,KAC1CsB,SAASqwL,YAAY,aACrBpB,IACAb,GAAwBE,IAAe,IAClCA,EACHoC,WAAYpC,EAAgBoC,iBAI1BC,GAA0BjyL,EAAAA,EAAAA,IAAgB,KAC9C,GAAIyvL,EAAoB4B,cAAe,CACrC,MAAM7iK,EAAUuiK,IAChB,IACGjC,IACGtgK,GACmB,QAApBA,EAAQyhK,UACPzhK,EAAQwxJ,YAEZ,OASF,OANAxxJ,EAAQuxJ,YAAYvxJ,EAAQwxJ,kBAC5B0P,GAAwBE,IAAe,IAClCA,EACHyB,eAAe,KAInB,CAEA,MAAM5+K,EAAOg+K,IACbnvL,SAASqwL,YAAY,cAAc,EAAO,QAAQl/K,WAClDpV,OAGI60L,GAAsBlyL,EAAAA,EAAAA,IAAgB,KAC1C,GAAIyvL,EAAoB2B,UAAW,CACjC,MAAM5iK,EAAUuiK,IAChB,IACGjC,IACGtgK,GACmB,SAApBA,EAAQyhK,UACPzhK,EAAQwxJ,YAEZ,OASF,OANAxxJ,EAAQuxJ,YAAYvxJ,EAAQwxJ,kBAC5B0P,GAAwBE,IAAe,IAClCA,EACHwB,WAAW,KAIf,CAEA,MAAM3+K,EAAOg+K,GAAgB,GAC7BnvL,SAASqwL,YAAY,cAAc,EAAO,6CAA6Cl/K,YACvFpV,OAGI80L,GAAuBnyL,EAAAA,EAAAA,IAAgB,KAC3C,MAAMoyL,IAAoB/mI,EAAAA,GAAAA,IAAemX,IAAY,IAAIyS,MAAM,KAAKt8E,IAAI05L,WAAW9uK,KAAK,KAExF,GAAI8rK,EAAe,CACjB,MAAM7gK,EAAUuiK,IAChB,IAAKviK,GAA+B,MAApBA,EAAQyhK,QACtB,OAOF,OAJCzhK,EAA8Bzd,KAAOqhL,OAEtC/0L,GAGF,CAEA,MAAMoV,EAAOg+K,GAAgB,GAC7BP,IACA5uL,SAASqwL,YACP,cACA,EACA,WAAWS,yCAAwD3/K,SAErEpV,OAGI+kB,GAAgBpiB,EAAAA,EAAAA,IAAiB5B,IACrC,MAUMk+C,EAVqD,CACzDzxB,EAAGqkK,EACHlwI,EAAG4yI,EACHU,EAAGP,EACHnxI,EAAGixI,EACHU,EAAGL,EACH7wI,EAAG4wI,EACHO,EAAGlB,GCjWM,SAAyBlzL,GACtC,MAAMikB,EAAMjkB,EAAEikB,KAAOjkB,EAAEszD,KAEvB,OAAOrvC,EAAI4xG,WAAW,OAAS5xG,EAAIq3B,MAAM,GAAG+K,cAAgBpiC,CAC9D,CDgWoCowK,CAAgBr0L,KAG9CA,EAAE65K,SACG75K,EAAE8vB,SAAW9vB,EAAE85K,UAChB57H,IAKNl+C,EAAEkkB,iBACFlkB,EAAEwV,kBACF0oC,SAGFtlD,EAAAA,EAAAA,KAAU,KACJ6F,GACFyE,SAASmS,iBAAiB,UAAW2O,GAGhC,IAAM9gB,SAASoS,oBAAoB,UAAW0O,KACpD,CAACvlB,EAAQulB,IAEZ,MAAM1rB,GAAOD,EAAAA,EAAAA,KASb,IAAKiqB,EACH,OAGF,MAAMxqB,GAAYsC,EAAAA,GAAAA,GAChB,gBACAooB,EACAquK,GAAqB,sBAGjByD,GAA0Bl6L,EAAAA,GAAAA,GAC9B,iCACA+B,QAAQioE,EAAQlqE,SAAW,SAGvB8M,EAAQypL,EACV,SAASA,EAAexwL,aAAawwL,EAAerwL,8BAA8BqwL,EAAexwL,OACjG,GAEJ,OACE9F,EAAAA,GAAAA,IAAA,OACEqZ,IAAKuU,EACLjwB,UAAWA,EACXkP,MAAOA,EACPghD,UA/BJ,SAAgChoD,GAChB,UAAVA,EAAEikB,KAAmB4sK,IACvBkD,IACA/zL,EAAEkkB,iBAEN,EA4BIwkB,YAAa5jC,EAAAA,EAAUxK,SAAA,EAEvBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wBAAuBwC,SAAA,EACpCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,eACVra,UAAWg7L,EAAyB,WACpC36L,QAAS+6L,EAAkB54L,UAE3Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,2BACfuD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,YACVra,UAAWg7L,EAAyB,QACpC36L,QAASq7L,EAAel5L,UAExBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,cACVra,UAAWg7L,EAAyB,UACpC36L,QAASs7L,EAAiBn5L,UAE1Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,cAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,kBACVra,UAAWg7L,EAAyB,aACpC36L,QAASw7L,EAAoBr5L,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,qBACVra,UAAWg7L,EAAyB,iBACpC36L,QAAS07L,EAAwBv5L,UAEjCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,qBAEbtB,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAU,iBACVra,UAAWg7L,EAAyB,aACpC36L,QAAS27L,EAAoBx5L,UAE7Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,iBAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,2BACfuD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,cAAckR,UAAW7Z,EAAK,2BAA4BH,QAAS24L,EAAgBx2L,UAC/Fe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,eAIftB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,6BAA4BwC,UACzCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,wBAAuBwC,SAAA,EACpCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAAC4E,MAAM,cAAckR,UAAW7Z,EAAK,UAAWH,QAAS44L,EAAiBz2L,UAC/Ee,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,kBAEbtB,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,2BAEfuD,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GAAe,uCAAwC+2L,GAAgB72L,UAElFe,EAAAA,GAAAA,GAAA,SACEmY,IAAKo9K,EACL94L,UAAU,+BACV+D,KAAK,OACLqG,MAAOkiE,EACPnc,YAAY,eACZssI,aAAa,MACblgI,UAAU,MACV94D,IAAI,OACJkS,SAvTZ,SAA6BzN,GAC3BgxL,EAAWhxL,EAAEqN,OAAOnL,OACpB0wL,GACF,EAqTY5wI,SAAU4wI,OAIdz4L,EAAAA,GAAAA,IAAA,OAAKrC,UAAWw8L,EAAwBh6L,SAAA,EACtCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,2BACfuD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL4E,MAAM,cACNkR,UAAW7Z,EAAK,QAChBR,UAAU,gBACVK,QAAS47L,EAAqBz5L,UAE9Be,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,0BEhczB,IAAehF,EAAAA,EAAAA,KAhCyB68L,EACtCttG,QAAOlxB,QAAO79D,UAASygG,0BAEvB,MAAM71E,GAAcnhB,EAAAA,EAAAA,IAAiB5B,IAEnCA,EAAEkkB,iBAEF/rB,IAAU+uF,MAGNpvF,GAAYsC,EAAAA,GAAAA,GAChB,cACA47D,GAAS,SAGX,OACE36D,EAAAA,GAAAA,GAAA,OACEvD,UAAWA,EACX4wC,YAAa3lB,EACbvjB,MAAO0nF,EAAMA,MAAM5sF,UAEnBe,EAAAA,GAAAA,GAACwrF,GAAAA,EAAW,CACVvC,WAAY4C,EAAMppF,GAClBhC,KAhCkB,GAiClB8hG,qBAAmB,EACnBH,sBAAoB,EACpBrD,8BAA+BxB,SC0HvC,IAAejhG,EAAAA,EAAAA,KAvGoBsrL,EACjCxkL,SACAwlG,SACA5f,eACAplF,UACA09K,gBACAp3E,sBACAy3E,iBACAD,2BAEA,MAAMh1J,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GACnGy7L,GAAqC5qJ,EAAAA,GAAAA,GACzCo6D,EAAO/pG,OAAS,IAAImqF,KAAiB4f,QAAUjrG,EAxD5B,MAyDhB,IAEL08E,EAAAA,GAAAA,GAAoB3tD,GAEpB,MACEivE,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAckwE,WAtBzB,IAsB4D/sF,YAAazM,IAE/Fi2L,GAAoB9yL,EAAAA,EAAAA,IAAiBslF,IACzCy1F,EAAcz1F,EAAM+/F,QACpBjK,EAAe,CAAE91F,MAAOA,EAAMppF,QAG1B6uL,GAA0B/qL,EAAAA,EAAAA,IAAiBslF,IAC/Cqe,EAAoBre,GACpB61F,EAAqB,CAAEz4F,WAAY4C,EAAMppF,QAGrC0tH,GAAe5pH,EAAAA,EAAAA,IAAiBslF,IAChC,WAAYA,EACdwtG,EAAkBxtG,GAElBylG,EAAwBzlG,MAItBnkE,GAAcnhB,EAAAA,EAAAA,IAAgB,CAACqlL,EAAgBnpL,KACnD6+K,EAAcsK,GACdjK,EAAe,CAAE91F,MAAOppF,OAGpB62L,GAAyB/yL,EAAAA,EAAAA,IAAiBslF,IAC9Cqe,EAAoBre,GACpB61F,EAAqB,CAAEz4F,WAAY4C,EAAMppF,QAGrC82L,EAAgBzb,GAAsB,CAC1CthL,SAAU4G,EACV+5K,cAAc,EACdr2H,MAAOsyI,EACPpb,8BAA8B,EAC9B33I,SAAU8pF,EACVvsH,aAGFwkC,EAAAA,GAAAA,IAAsB,EAAEoxJ,WACI77L,IAAtB67L,IAA0D,IAAvBA,GArG3C,SAAwBl7L,EAAeouB,GACrC,MAAMrhB,EAAYqhB,EAAatd,QAC/B,IAAK/D,EACH,OAGF,MAAM,eAAEsyK,EAAc,YAAED,GAAgBH,GACtClyK,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKqyK,EAAY7+K,SAAW6+K,EAAYp/K,GACtC,OAEF,MAAMqtF,EAAQgyF,EAAe,GAC7B,IAAKA,EAAe5qJ,SAASz0B,IACvBA,IAAUqtF,IAAUuxF,GAAe7xK,EAAWqyK,EAAY/xF,IAAQ,GAAQ,CAC9E,MACMqgB,EAAuB,UADZ1tG,EAAQq/K,EAAeA,EAAe9+K,OAAS,GAAK,QAAU,OAxBxD,GAyBgBP,EAA6B,GAEpEwnF,EAAAA,GAAAA,GAAwBz6E,EAAW2gG,EACrC,CACF,CA+EIytF,CAAeF,EAAe7sK,KAC7B,CAAC6sK,IAEJ,MAAM98L,GAAYsC,EAAAA,GAAAA,GAChB,gDACAooB,GAGF,OACEnnB,EAAAA,GAAAA,GAAA,OACEmY,IAAKuU,EACLjwB,UAAWA,EAAUwC,SAEpBgoB,GAAgBmyK,EACfA,EAAWl6L,KAAI,CAAC2sF,EAAOvtF,IACrB,WAAYutF,GACV7rF,EAAAA,GAAAA,GAAC2rL,GAAW,CAEV9/F,MAAOA,EACPlxB,MAAO4+H,IAAkBj7L,EACzBxB,QAAS4qB,GAHJmkE,EAAMppF,KAMbzC,EAAAA,GAAAA,GAACm5L,GAAiB,CAEhBttG,MAAOA,EACPlxB,MAAO4+H,IAAkBj7L,EACzBxB,QAASw8L,EACT/7F,oBAAqBA,GAJhB1R,EAAMppF,MAQfwkB,GACFjnB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,SACNpvD,OCrGV,IAAerB,EAAAA,EAAAA,KAxCkBo9L,EAC/Bv1L,QACAuN,cACAyxB,YACAqb,WACAmc,QACAxzC,uBAAuB,GACvBrqB,cAEA,IAAIua,EAEJ,MAAMsiL,GAAmB1rL,EAAAA,EAAAA,GAASk1B,GAAYy2J,EAAAA,EAAAA,IAAmBz2J,QAAaxlC,GAW9E,OAVA6gD,EAAWA,GAAYm7I,GAGrBtiL,GACErX,EAAAA,GAAAA,GAAA,OAAK0J,IAAK80C,EAAU/hD,UAAW0qB,EAAsBwE,IAAI,GAAGkuK,SAAS,QAAQtwL,WAAW,IAEjFpF,IACTkT,GAAU+nF,EAAAA,GAAAA,IAAgBj7F,EAAO,KAIjCrF,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPs2D,MAAOA,EACPl+D,UAAU,iCACV4wC,YAAay0D,GAAAA,EACbhlG,QAASA,EAAQmC,SAAA,EAEjBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SACD,iBAAZoY,GAAuBtW,EAAAA,GAAAA,GAAWsW,GAAWA,KAEvDvY,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,CAC3BkF,IAAUnE,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,QAAOwC,SAAEkF,IAClCuN,IAAgB1R,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SAAEyS,aCtBvD,IAAepV,EAAAA,EAAAA,KAvBqBw9L,EAAGn/H,QAAOo/H,eAAcj9L,cAC1D,MAAM,MACJqH,EAAK,YAAEuN,GACLqoL,EAEE1+K,EAAM,QAAS0+K,EAAeA,EAAa1+K,SAAM1d,EACjDq8L,EAAe,iBAAkBD,EAAeA,EAAaC,kBAAer8L,EAE5E+pB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQi9L,MAGV,OACE/5L,EAAAA,GAAAA,GAAC05L,GAAU,CACT/+H,MAAOA,EACPx3B,UAAW62J,EACX71L,MAAOA,GAASkX,EAChB3J,YAAaA,EACb5U,QAAS4qB,OCSf,IAAeprB,EAAAA,EAAAA,KAxBiB29L,EAC9BF,eAAcvtI,kBAAiBmjI,cAAapyF,sBAAqBzgG,cAEjE,MAAM,IAAE6xL,GAAQoL,EAEVryK,GAAcnhB,EAAAA,EAAAA,IAAgB,CAAC2zL,EAAgBrxE,EAAoBk9C,KACvEjpK,EAAQi9L,EAAclxE,EAAUk9C,MAGlC,GAAK4oB,EAIL,OACE3uL,EAAAA,GAAAA,GAAC0uL,GAAS,CACRC,IAAKA,EACLpxF,oBAAqBA,EACrB9gG,UAAU,sBACVK,QAAS6yL,EAAcjoK,OAAc/pB,EACrC6uD,gBAAiBA,OC2CvB,IAAelwD,EAAAA,EAAAA,KAvDmB69L,EAChCx/H,QAAOy/H,eAAcL,eAAcj9L,cAEnC,IAAIgL,EACAq7B,EACA62J,EAEA,UAAWD,IACbjyL,EAAQiyL,EAAajyL,OAGnB,cAAeiyL,IACjB52J,EAAY42J,EAAa52J,WAEvB,iBAAkB42J,IACpBC,EAAeD,EAAaC,cAG9B,MAAMK,GAAmBpsL,EAAAA,EAAAA,IAAS2rL,EAAAA,EAAAA,IAAmBI,IAC/CrjE,GAAe1oH,EAAAA,EAAAA,GAASnG,IAASwyL,EAAAA,EAAAA,IAAkBxyL,EAAO,cAC1Dqf,GAAuBixB,EAAAA,GAAAA,GAA6Bu+E,GAAgB0jE,GAEpE3yK,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCzJ,EAAQi9L,MAGV,GAAIK,EACF,OACEt7L,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,kCAAkCK,QAAS4qB,EAAYzoB,SAAA,EACpEe,EAAAA,GAAAA,GAAA,OAAK0J,IAAM5B,GAAOq7B,WAAWp0B,SAAYsrL,EAAkB1uK,IAAI,GAAGpiB,WAAW,KAC7EvJ,EAAAA,GAAAA,GAAA,OACE0J,IAAKitH,EACLl6H,WAAWsC,EAAAA,GAAAA,GAAe,aAAcooB,GACxCwE,IAAI,GACJpiB,WAAW,OAMnB,MAAM,MAAEpF,EAAK,YAAEuN,GAAgBqoL,EAE/B,OACE/5L,EAAAA,GAAAA,GAAC05L,GAAU,CACT/+H,MAAOA,EACPx3B,UAAW62J,EACXx7I,SAAUm4E,GAAgBxzF,GAAWp0B,QACrCoY,qBAAsBA,EACtBhjB,MAAOA,EACPuN,YAAaA,EACb5U,QAAS4qB,OC3Bf,IAAeprB,EAAAA,EAAAA,KA9BqBi+L,EAClCR,eACAvtI,kBACA+wC,sBACAzgG,UACA6lC,2BAEA,MAAM,QAAEi8C,GAAYm7G,EAEpB,GAAKn7G,EAIL,OACE5+E,EAAAA,GAAAA,GAACu/F,GAAa,CACZ3gB,QAASA,EACTn+E,KAAM+5L,EAAAA,IACNj9F,oBAAqBA,EACrBp5F,MAAOy6E,EAAQiN,MACfpvF,UAAU,sBACVK,QAASA,EACTqK,SAAU4yL,EACVvtI,gBAAiBA,EACjBkzC,YAAU,EACVI,eAAa,EACbn9D,qBAAsBA,OCXtB07B,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAK,GA4MjD,IAAehiE,EAAAA,EAAAA,KAzLwBm+L,EACrCr3L,SACAwwD,QACA8mI,YACAC,mBACAC,WACAC,gBACAruI,kBACAmjI,cACAvmI,WACAxlD,UACAk3L,iBACAn4J,2BAEA,MAAM,SACJv8B,EAAQ,SACR20L,EAAQ,qBACRC,IACE30L,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,OACf,aAAEgY,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BjkB,OAAQzF,OAAWA,GAAW,GACnGs9L,GAAoB9sJ,EAAAA,GAAAA,GAAiBusJ,EAAWzzK,IAEpD00E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASxvE,EACTqjK,WA/C6B,IAgD7BlgL,YAAazM,IAGTyiD,GAAiBt/C,EAAAA,EAAAA,IAAgB,EAAGopB,gBACpCA,IAAcyvC,EAAAA,GAAkBC,WAClChB,GAAajV,MAIXmwI,EAAgBzb,GAAsB,CAC1CthL,SAAU4G,EACV46K,6BAA8Bid,EAC9Bhd,kBAAmBgd,EACnBn0I,MAAO6zI,EACPt0J,SAAUy0J,EACVl3L,aAGFrG,EAAAA,EAAAA,KAAU,KACRsgL,GAAsB,uBAAwB0b,EAAe7sK,KAC5D,CAAC6sK,IAEJ,MAAM2B,GAAe30L,EAAAA,EAAAA,IAAgB,KACnCH,EAAS,CAAE3D,GAAImxD,IACfmnI,EAAS,CAAEnnI,MAAOA,EAAQunI,MAAOP,EAAU3qI,gBAGvCmrI,GAAoB70L,EAAAA,EAAAA,IAAgB,KACxC,MAAMg3D,GAAQC,EAAAA,GAAAA,KAEdw9H,EAAqB,CACnBpnI,MAAOA,EACPv4C,IAAKw/K,EAAex/K,IACpB5X,WAAYo3L,EAAe7hL,KAC3BukD,QACA89H,qBAAqB,OAInBC,GAAuBpiK,EAAAA,EAAAA,GAC3ByhK,GAAkB97L,OACd87L,OACAh9L,EACJspB,GAEIs0K,EAA2BZ,GAAkB97L,OAAS87L,EAAmBW,EAE/E,IAAKr0K,IAAkBs0K,GAA0B18L,SAAU+7L,EACzD,OAGF,MAAMn+L,GAAYsC,EAAAA,GAAAA,GAChB,oCACA0a,EAAAA,GAAe,eAAiB,gBAChCwhL,GAAqB,UACrB9zK,GAqFF,OACEroB,EAAAA,GAAAA,IAAC+nD,GAAAA,EAAc,CACb1uC,IAAKuU,EACLjwB,UAAWA,EACXqqD,MAAOy0I,EACPpuI,aAAa,uBACboS,YAAU,EACVxY,WAAYlB,EACZ21I,cAAe,IAAIv8L,SAAA,CAElB27L,IA1FD56L,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAAC6e,QAAM,EAACzmB,UAAU,wBAAwBK,QAASo+L,EAAaj8L,UACvEe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAE27L,EAAU5hL,SA0FpC6hL,IAnFD76L,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAAC6e,QAAM,EAACzmB,UAAU,wBAAwBK,QAASs+L,EAAkBn8L,UAC5Ee,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAE47L,EAAe7hL,SAmFzClY,QAAQy6L,GAA0B18L,SA7E9B08L,EAA0Br8L,KAAI,CAACu8L,EAAiBn9L,KACrD,OAAQm9L,EAAgBj7L,MACtB,IAAK,MACH,OACER,EAAAA,GAAAA,GAACi6L,GAAS,CAERF,aAAc0B,EACdl+F,oBAAqBA,EACrBzgG,QAASg+L,EACTtuI,gBAAiBA,EACjBmjI,YAAaA,GALR8L,EAAgBh5L,IAS3B,IAAK,QACH,OACEzC,EAAAA,GAAAA,GAACm6L,GAAW,CAEVC,aAAca,EACdlB,aAAc0B,EACd3+L,QAASg+L,GAHJW,EAAgBh5L,IAO3B,IAAK,UACH,OACEzC,EAAAA,GAAAA,GAACu6L,GAAa,CAEZR,aAAc0B,EACdl+F,oBAAqBA,EACrBzgG,QAASg+L,EACTtuI,gBAAiBA,EACjB7pB,qBAAsBA,GALjB84J,EAAgBh5L,IAS3B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACEzC,EAAAA,GAAAA,GAACm6L,GAAW,CAEVx/H,MAAO4+H,IAAkBj7L,EACzBy7L,aAAc0B,EACd3+L,QAASg+L,GAHJW,EAAgBh5L,IAM3B,IAAK,UACL,IAAK,QACL,IAAK,QACH,OACEzC,EAAAA,GAAAA,GAAC85L,GAAa,CAEZn/H,MAAO4+H,IAAkBj7L,EACzBy7L,aAAc0B,EACd3+L,QAASg+L,GAHJW,EAAgBh5L,IAO3B,QACE,iBCnEV,IAAenG,EAAAA,EAAAA,KAnHkBo/L,EAC/Bt4L,SACA4D,SACA20L,mBACAC,gBACAj5J,uBACA/+B,cAEA,MAAM,kBAAEi4L,EAAiB,iBAAEp3J,IAAqBp+B,EAAAA,EAAAA,MAG1CuhC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAC9B0hB,GAAY3Z,EAAAA,EAAAA,MAAY4Z,MAAM3hB,KAE9BhsC,GAAOD,EAAAA,EAAAA,KACP0vB,GAAezd,EAAAA,EAAAA,OAEdgiL,EAAkBC,EAAkB4K,IAAmB3K,EAAAA,GAAAA,GAAe/tL,EAAQQ,OAASjG,IAE9FJ,EAAAA,EAAAA,KAAU,KACJ6F,GACF04L,MAED,CAAC14L,EAAQ04L,IAEZ,MAAM5c,GAAmB34K,EAAAA,EAAAA,IAAiB9D,IACxCmB,IACAi4L,EAAkB,CAAE70L,OAAQA,EAAS+0L,SAAUt5L,OAG3Cu5L,EAAsBle,GAAsB,CAChDthL,SAAU4G,EACV0jD,MAAO80I,EACPv1J,SAAU64I,EACVhB,mBAAmB,EACnBH,kCAAkC,EAClCn6K,YAaF,OAVArG,EAAAA,EAAAA,KAAU,KACRsgL,GAAsB,uBAAwBme,EAAqBtvK,KAClE,CAACsvK,KAEJz+L,EAAAA,EAAAA,KAAU,KACJq+L,IAAkBA,EAAc/8L,QAClC+E,MAED,CAACg4L,EAAeh4L,KAGjB9E,EAAAA,GAAAA,IAACwkB,GAAAA,EAAI,CACHlgB,OAAQA,EACRuU,UAAU,OACV4L,UAAU,SACV3f,QAASA,EACTnH,UAAU,aACV4U,oBAAqBzN,EACrB8tL,aAAej4K,EAAAA,QAAkC9b,EAAnBszL,EAC9B/nK,aAAezP,EAAAA,QAAkC9b,EAAnBuzL,EAC9B5jF,mBAAoB7zF,EAAAA,GACpB2zF,WAAS,EAAAnuG,SAAA,EAETe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAgByD,IAAI,OAAMjB,SAAEhC,EAAK,wBAC/C2qC,GAAa+iB,GAAaixI,GAAe18L,KAAI,EAAGuD,KAAI2hF,aAAa9lF,KAChE,MAAM+zC,EAAOzK,EAAUnlC,GACjBiR,EAAOi3C,EAAUloD,GACjBkE,EAAO0rC,GAAQ3+B,EAiBfuoL,GAAkBl9L,EAAAA,GAAAA,GAAe48L,IAAqBl5L,GAAM,YAElE,OACE3D,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAEP5H,UAAU,yDAEVK,QAtBgB4qB,MACb08D,GAAazhD,EAChBu8I,EAAiBz8K,GAEjBgiC,EAAiB,CACft8B,QAASlL,EAAK,+BACd6wI,WAAY7wI,EAAK,QACjB2K,OAAQ,CACNA,OAAQ,mBACRu2H,QAAS,CAAC,MAcdxjE,MAAOqhI,IAAwB19L,EAC/BglD,cAAe3gB,GAAwByhD,IAClCpkF,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAAa7E,UAAU,wBAAyBwC,SAAA,EAEhEe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,QACLkG,KAAMA,EACNlK,UAAWw/L,KAEbn9L,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,OAAMwC,SAAA,CAClB0H,IAAQ3G,EAAAA,GAAAA,GAACusD,GAAAA,EAAa,CAAC5lD,KAAMA,EAAMu1L,QAAM,KAC1Cl8L,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SACvBozC,EACGp1C,EAAK,4BACLA,EAAK,cAAeyW,GAAMyoL,aAAc,YAlB3C15L,YCGjB,IAAenG,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAU+yF,mBACF,CACL31F,KAAK64E,EAAAA,EAAAA,KAAiBj2E,EAAQ+yF,GAC9B3H,YAAY24E,EAAAA,EAAAA,KAAyB/jK,GACrCyvB,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MALnCD,EAzFgCmpL,EAClDn2F,eAAc1I,sBAAqBjtF,MAAKguF,aACxC3tC,cAAahuB,2BAEb,MAAM,aAAE0nD,EAAY,iBAAEwa,EAAgB,eAAEva,IAAmBjkF,EAAAA,EAAAA,MAErDm3F,GAAkBvuF,EAAAA,EAAAA,MAElBhS,GAAOD,EAAAA,EAAAA,KACPopK,EAAU91J,IAAQA,EAAI02F,YAAclmG,QAAQwP,EAAIy2F,eAChDs1F,EAAoBv7L,QAAQwP,GAAKovE,UAEjCuzG,GAAoBv1L,EAAAA,EAAAA,KAAQ,KAChC,IAAK4S,EACH,MAAO,GAGT,MAAMgsL,GAAqBhsL,EAAIovE,UAAUl/C,QAAO,EAAGkgE,eAAgBA,KAAc,IAC9EzgD,MAAM,EArBuB,GAsB1Bs8I,GAAmBjsL,EAAIksL,QAAU,IAAIt9L,KAAI,EAAGuD,QAASA,IACrDg6L,EAAgBnsL,EAAIovE,SAAWpvE,EAAIovE,SAASl/C,QAAO,EAAG/9B,SAAU85L,EAAgBxpK,SAAStwB,KAAO,GAEtG,MAAO,IAAI65L,KAAuBhsL,EAAIksL,QAAU,MAAQC,GAAex8I,MAAM,EAxBrD,KAyBvB,CAAC3vC,KAEJ/S,EAAAA,EAAAA,KAAU,MAEH8+L,GAAqBpJ,EAAkBp0L,OA7BpB,GA6BoDyR,GAC1E+5E,EAAa,CACXjB,eAAgB,CACd3O,UAAWnqE,EAAImqE,eAIpB,CAAC4hH,EAAmBpJ,EAAkBp0L,OAAQwrF,EAAc/5E,EAAK21F,IAEpE,MAAMD,GAAiBxjG,EAAAA,EAAAA,KAAY,KACjCqiG,EAAiB,CAAEoB,mBAClB,CAACpB,EAAkBoB,IAEhBy2F,GAAqBl6L,EAAAA,EAAAA,KAAao8E,IACtC0L,EAAe,CAAElB,eAAgBxK,EAAQwK,mBACxC,CAACkB,IAEJ,IAAKh6E,EACH,OAGF,MAAMqsL,EAAoB1J,EAAkBp0L,OAAS,EAErD,OACEC,EAAAA,GAAAA,IAAA,OAAkBrC,UAAU,cAAcyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC5EH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,qBAAoBwC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,QAAQyD,IAAI,OAAMjB,SAAEqR,EAAInM,SACtCnE,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,QAAQyD,IAAI,OAAMjB,SAAEhC,EAAK,WAAYqT,EAAI6lB,MAAO,WAE/Dn2B,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAW2pK,EAAU,gBAAazoK,EAClCiI,MAAM,UACNnF,KAAK,OACLqnG,MAAI,EACJ9hD,OAAK,EACLlpD,QAASkpG,EAAe/mG,SAEvBhC,EAAKmpK,EAAU,qBAAuB,0BAG3CtnK,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2CAA0CwC,SAAA,EACvDe,EAAAA,GAAAA,GAAA,UAAQmY,IAAKqlF,EAAiB/gG,UAAU,mBACtCkgM,IAAqB38L,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,IAC9B+wK,GAAqB1J,EAAkB/zL,KAAK0/E,IAC3C5+E,EAAAA,GAAAA,GAACu/F,GAAa,CACZ3gB,QAASA,EACTn+E,KAAMm8L,EAAAA,IACNr/F,oBAAqBA,EACrB15E,QAASy6E,GAAc3tC,EACvBxpD,SAAUy3E,EACV9hF,QAAS4/L,EACTl9F,eAAa,EACb78D,qBAAsBA,EACtB66D,gBAAiBA,WA9BfltF,EAAI7N,QCpDZ47D,IAAetkD,EAAAA,GAAAA,KAAUukD,GAAOA,KAAM,KAAO,GA0EnD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM+kB,GAAgB4kK,EAAAA,EAAAA,KAA2B3pL,IAC3C,MAAE2zB,EAAK,UAAEi2J,GAAc7kK,GAAiB,CAAC,GACzC,SAAE8kK,GAAa7pL,EAAOwsE,SAE5B,MAAO,CACL74C,QACA4hE,YAAas0F,EAAS1zF,OACtByzF,YACAnsI,YAAa7vD,SAAQwS,EAAAA,EAAAA,KAAeJ,GAAQ8pL,8BAV9B/pL,EAxE6BgqL,EAC/CzgM,WACAqqC,QACA4hE,cACAq0F,YACAnsI,cACA/sD,cAEA,MAAM,qBAAEs5L,IAAyB72L,EAAAA,EAAAA,MAE3BqmB,GAAezd,EAAAA,EAAAA,MAEfhS,GAAOD,EAAAA,EAAAA,MAGX2+F,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAckwE,WApBzB,MAqE5B,OA7CAr/F,EAAAA,EAAAA,KAAU,KACR8gE,IAAa,KACX6+H,WAIJ/uK,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAsCR5D,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAcjwB,UAAU,8BAA8ByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAnCtG,WACE,QAActB,IAAVkpC,EAIJ,OAAKA,GAAS4hE,EACLA,EAAYvpG,KAAKuD,IACtBzC,EAAAA,GAAAA,GAACo8L,GAAgB,CAEfn2F,aAAcxjG,EACd86F,oBAAqBA,EACrB5sC,YAAaA,GAHRluD,KAQPq6L,EACGA,EAAUj+L,OAIRi+L,EAAU59L,KAAKuD,IACpBzC,EAAAA,GAAAA,GAACo8L,GAAgB,CAEfn2F,aAAcxjG,EACd86F,oBAAqBA,EACrB5sC,YAAaA,GAHRluD,MALAzC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,cAAcyD,IAAI,OAAMjB,SAAC,oBAa1Ce,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GACjB,CAIKuoD,SCgEP,IAAeh5G,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM+kB,GAAgBklK,EAAAA,EAAAA,KAAuBjqL,IACvC,MAAE2zB,EAAK,QAAE8mF,GAAY11F,GAAiB,CAAC,GACvC,OAAEjxB,EAAM,SAAE8M,IAAaD,EAAAA,EAAAA,KAAyBX,IAAW,CAAC,EAC5DQ,EAAO1M,GAASurC,EAAAA,EAAAA,KAAWr/B,EAAQlM,QAAUrJ,EAC7CqwD,EAAehnD,GAASinD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,QAAUrJ,EAC7D0mH,EAAgB3wG,GAAO4wG,EAAAA,EAAAA,KAAoBpxG,EAAQQ,QAAQ/V,EAC3D6uD,EAAkB1rD,QAAQkG,KAAWmwB,EAAAA,EAAAA,KAAqBjkB,EAAQlM,GAClEu+J,EAAav+J,GAAU8M,GAAW0xJ,EAAAA,EAAAA,KAAiBtyJ,EAAQlM,EAAQ8M,QAAYnW,EAC/E8nK,EAAkB3kK,SAASykK,GAAYG,gBAAkBH,GAAYI,eACrEx6G,EAAQnkD,GAAU8M,GAAWwjH,EAAAA,EAAAA,KAAYpkH,EAAQlM,EAAQ8M,QAAYnW,EAI3E,MAAO,CACLkpC,QACA8mF,UACAj6G,OACA2wG,gBACA73D,kBACA4wI,cAToBt8L,QAAQ4S,IAAS5S,QAAQgT,KAC1Cs3C,EAAAA,EAAAA,IAAiB13C,EAAMy3C,EAAOs6G,EAAiBz3G,GASlD63G,uBAAwB/kK,QAAQkG,KAAW8+J,EAAAA,EAAAA,KAA6B5yJ,EAAQlM,GAChF4M,oBAAoBC,EAAAA,EAAAA,KAAyBX,MAvB/BD,EAjHyBoqL,EAC3C7gM,WACAqqC,QACA8mF,UACAj6G,OACAs6C,eACAq2D,gBACAwhD,yBACAr5G,kBACA4wI,gBACAxpL,qBACAhQ,cAEA,MAAM,eACJ05L,EAAc,YACd5sI,EAAW,kBACX6sI,IACEl3L,EAAAA,EAAAA,MAEEqmB,GAAezd,EAAAA,EAAAA,OAEdo3J,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAG9ClqE,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAASxvE,EAAcqjK,WA3BzB,MA6BtBJ,EAAcyN,IAAiB93B,EAAAA,EAAAA,IAA4B5xJ,EAAMs6C,EAAcq2D,GAAesrE,YAE9F6N,GAAiBh7L,EAAAA,EAAAA,KAAY,CAACmsL,EAAe9lE,EAAoBk9C,KACrE,GAAI4pB,EAAa,CACf,IAAK/7K,EACH,OAGEmyJ,EACFM,GAAiBK,IACfh2G,EAAY,CACVM,YAAap9C,EACb+6K,MACAjoB,cACA79C,gBAIJn4D,EAAY,CAAEM,YAAap9C,EAAoB+6K,MAAK9lE,YAExD,CAEIpvG,EAAAA,IACF8jL,EAAkB,CAAE12J,WAAOlpC,MAE5B,CAACgyL,EAAa/7K,EAAoByyJ,IAE/Bo3B,GAAuBj7L,EAAAA,EAAAA,KAAY,KACvC86L,MACC,CAACA,IAEErgM,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IA+BV,MAAM85L,EAAa58L,aAAkBnD,IAAVkpC,GAAuB8mF,GAAWA,EAAQ9uH,QAErE,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,YAAYyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC7De,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACb1uC,IAAKuU,EACLjwB,WAAWsC,EAAAA,GAAAA,GAAe,8BAA+B2+L,GAAc,QACvE52I,MAAO6mE,EACPxgE,aAAa,aACbqS,iBAzGkB,GA0GlBD,YAAU,EACVxY,WAAY02I,EAAqBx+L,SAvCvC,WACE,QAActB,IAAVkpC,EAIJ,OAAK8mF,EAMAA,EAAQ9uH,OAMN8uH,EAAQzuH,KAAKyvL,IAClB3uL,EAAAA,GAAAA,GAAC0uL,GAAS,CAERC,IAAKA,EACLpxF,oBAAqBA,EACrBzgG,QAAS6yL,EAAc6N,OAAiB7/L,EACxC6uD,gBAAiBA,GAJZmiI,EAAIlsL,OANTzC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,cAAcyD,IAAI,OAAMjB,SAAEhC,EAAK,kBAN5C+C,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GAmBd,CAeOuoD,KAEFgxD,S,gBC/JP,SAAuB,WAAvB,GAA8C,WAA9C,GAA6F,WAA7F,GAAsL,WAAtL,GAAyM,WAAzM,GAA2N,WAA3N,GAA6O,WAA7O,GAAuQ,WAAvQ,GAA6R,WAA7R,GAA+S,WCyC/S,IAAehqK,EAAAA,EAAAA,KAzBf,UAAkC,cAAEqhM,IAClC,MAAM5gM,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KACb,OACE4B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAYC,SAAA,CACzB0+L,EAAcptJ,eAAiB,IAC9BzxC,EAAAA,GAAAA,IAAA,QAAMrC,UAAWuC,GAAoBC,SAAA,EACnCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAAgB7E,UAAWuC,MACrC4+D,EAAAA,GAAAA,IAAqB3gE,EAAM0gM,EAAcptJ,mBAI7CotJ,EAAcrtJ,cAAgB,IAC7BxxC,EAAAA,GAAAA,IAAA,QAAMrC,UAAWuC,GAAoBC,SAAA,EACnCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UAAU7E,UAAWuC,MAC/B4+D,EAAAA,GAAAA,IAAqB3gE,EAAM0gM,EAAcrtJ,mBAI5CqtJ,EAAcrtJ,gBAAkBqtJ,EAAcptJ,gBAC3CxzC,EAAQ,8CAGnB,IC6BA,SAASg5H,GAAc94H,EAAiBkL,EAAqByG,EAAkBonH,GAC7E,OAAKpnH,GAKH9P,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,OACE0J,IAAKkF,EACL+c,IAAI,GACJpiB,WAAW,EACX9M,WAAWsC,EAAAA,GAAAA,GAAeC,GAAcg3H,GF/EgE,eEiFzGI,EAAAA,EAAAA,IAAgBjuH,KAAYnI,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,UACvC20H,EAAAA,EAAAA,GAAqBh5H,EAAMkL,GAAS,OAZhC8tH,EAAAA,EAAAA,GAAqBh5H,EAAMkL,EAetC,CAEA,UAAe7L,EAAAA,EAAAA,KA1D+BshM,EAAGD,gBAAex1L,cAC9D,MAAMlL,GAAOD,EAAAA,EAAAA,MACP,wBAAE6gM,IAA4Bx3L,EAAAA,EAAAA,MAE9BmwH,GAAiBE,EAAAA,EAAAA,IAA4BvuH,GAC7CwuH,GAAe1oH,EAAAA,EAAAA,IAAS2oH,EAAAA,EAAAA,IAAoBzuH,EAAS,UACrD6tH,EAAel1H,SAAQ+1H,EAAAA,EAAAA,IAAqB1uH,IAE5Cuf,GAAcllB,EAAAA,EAAAA,KAAY,KAC9Bq7L,EAAwB,CAAEvhL,UAAWnU,EAAQ1F,OAC5C,CAACo7L,EAAyB11L,EAAQ1F,KAErC,OACE3D,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACTC,GACA8B,QAAQ61H,GAAgBH,IAAmBx3H,IAE7ClC,QAAS4qB,EAAYzoB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,EAC3Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,SAC5B82H,GAAc94H,EAAMkL,EAASwuH,GAAgBH,EAAgBR,MAEhEh2H,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,SACzBhC,EAAK,0BAA2B0gM,EAActtJ,WAAY,WAI/DvxC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAYC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,UACzBg6F,EAAAA,GAAAA,IAAsC,IAAf9wF,EAAQ6tB,KAAa/4B,EAAKg7D,SAEpDj4D,EAAAA,GAAAA,GAAC89L,GAAwB,CAACH,cAAeA,aCIjD,SAAS5nE,GAAc94H,EAAiByW,EAAe9E,GACrD,OACE9P,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACG2P,GACC5O,EAAAA,GAAAA,GAAA,QAAMvD,UHtE4D,WGsE3BwC,UACrCe,EAAAA,GAAAA,GAAA,OACE0J,IAAKkF,EACL+c,IAAI,GACJpiB,WAAW,EACX9M,WAAWsC,EAAAA,GAAAA,GAAeC,GH3E8F,WAA6B,iBG+EzJgB,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLC,KAAM+M,EACNjT,KAAK,QACLhE,UAAWuC,GACX++L,gBAAc,EACdC,uBAAqB,IAIxB/gM,EAAK,WAGZ,CAEA,UAAeX,EAAAA,EAAAA,KAjEf,UAA+B,KAAEoX,EAAI,MAAEgvB,EAAK,cAAEi7J,IAC5C,MAAM1gM,GAAOD,EAAAA,EAAAA,MACP,sBAAEihM,IAA0B53L,EAAAA,EAAAA,MAC5Bi4C,EAAW5b,GAAS,YAAaA,EAEjC36B,EAAQu2C,EAAW5b,EAAMrrB,QAAQtP,WAAQpK,EACzC4gD,EAAYD,GAAWjb,EAAAA,EAAAA,IAAkBX,QAAS/kC,EAClDugM,GAAajwL,EAAAA,EAAAA,GAASswC,GACtBi4E,EAAiB0nE,GAAcn2L,GAAOo7B,WAAWp0B,QAEjD2Y,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClC03L,EAAsB,CAAEp4J,QAAS83J,EAAc93J,aAGjD,OACE/mC,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAaA,IACvClC,QAAS4qB,EAAYzoB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAaC,SAAA,EAC3Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAeC,SAC5B82H,GAAc94H,EAAMyW,EAAMwqL,GAAc1nE,MAE3Cx2H,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,SACzBhC,EAAK,0BAA2B0gM,EAActtJ,WAAY,WAI/DvxC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAYC,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAYC,SACzBq/C,GAAYx9C,QAAQ4hC,EAAM1M,QAASijE,EAAAA,GAAAA,IAAoC,IAAbv2D,EAAM1M,KAAa/4B,EAAKg7D,SAErFj4D,EAAAA,GAAAA,GAAC89L,GAAwB,CAACH,cAAeA,SAIjD,IChEA,GAAuB,WAAvB,GAA2K,WAA3K,GAAqS,WAArS,GAAwT,WAAxT,GAA2U,WAA3U,GAA+V,WCmC/V,IAAIQ,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,kCACnBC,wBAAyB,+BACzBC,uBAAwB,6BACxBC,6BAA8B,uCAE1BC,GAAiBt+I,OAAO0K,KAAKgzI,IAE7Ba,GAAsB,CAC1BZ,YAAa,yBACba,aAAc,0BACdP,eAAgB,4BAChBQ,cAAe,2BACfC,aAAc,0BACdZ,cAAe,4BAEXa,GAAe3+I,OAAO0K,KAAK6zI,IA+KjC,IAAe5iM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAMu4L,GAAaC,EAAAA,EAAAA,KAAiBtsL,EAAQlM,GACtC0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1By4L,GAAOxxI,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAS04L,eAC3CjpK,EAAyB,uBAAf/iB,GAAMlT,KAChBm/L,GAAe9nK,EAAAA,EAAAA,KAAmB3kB,EAAQlM,GAC1C44L,GAAcC,EAAAA,EAAAA,KAAkB3sL,EAAQlM,IAASiiC,KAEvD,MAAO,CACLs2J,aAAYE,OAAMhpK,UAAS/iB,OAAMisL,eAAcC,iBAVjC3sL,EAhK0B6sL,EAC5C94L,SACA0M,OACA6rL,aACAE,OACAhpK,UACAkpK,eACAC,kBAEA,MAAM3iM,GAAOD,EAAAA,EAAAA,KACP0vB,GAAezd,EAAAA,EAAAA,OACdgO,EAAS8iL,IAActuL,EAAAA,EAAAA,KAAS,GACjCuuL,GAAe/wL,EAAAA,EAAAA,IAAiB,KAEhC,eAAEgxL,EAAc,yBAAEC,IAA6B75L,EAAAA,EAAAA,MAC/C2J,GAAcC,EAAAA,EAAAA,MAEpB1S,EAAAA,EAAAA,KAAU,KACR0iM,EAAe,CAAEj5L,SAAQyvB,cACxB,CAACzvB,EAAQi5L,EAAgBxpK,IAE5B,MAAM0pK,GAASziM,EAAAA,EAAAA,KAAQ,IACd+4B,EAAU6oK,GAAeL,IAC/B,CAACxoK,IAEE2pK,GAAc1iM,EAAAA,EAAAA,KAAQ,IACnB+4B,EAAUyoK,GAAsBb,IACtC,CAAC5nK,IA4EJ,OAzEAl5B,EAAAA,EAAAA,KAAU,KACHgiM,GAILY,EAAO9hM,SAASiD,IACd,MAAM++L,EAAQd,EAAWj+L,GACQ,iBAAV++L,GAGrBH,EAAyB,CACvB5+L,OACA0F,SACAs5L,MAAOD,EAEPE,aAAuB,mBAATj/L,SAInB,CAAC6+L,EAAQn5L,EAAQu4L,EAAYW,KAEhC3iM,EAAAA,EAAAA,KAAU,KACR,iBAnGJ8e,iBAME,OALK8hL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CA6FYqC,GAEDvjL,EAKAsiL,GAAe7yK,EAAatd,UAIjC+wL,EAAO9hM,SAAQ,CAACiD,EAAMhD,KACpB,MAAM+hM,EAAQd,EAAWj+L,GAGzB,GAFiC,iBAAV++L,GAERL,EAAa5wL,QAAQ2jB,SAASzxB,GAC3C,OAGF,IAAK++L,EAGH,YAFAL,EAAa5wL,QAAQ5Q,KAAK8C,GAK5B,MAAM,UAAEm/L,GAAcJ,EAEtBjC,GAAYsC,OACVh0K,EAAatd,QAASnQ,SAASX,GAC/B,CACE6F,MAAOlH,EAAMmjM,EAAuC9+L,OACjDm/L,EAAY,CACbztK,OAASpuB,IAAc4X,EAAAA,GAAAA,IAAQ,4BAA6B,CAAE8jL,MAAOG,EAAW77L,IAAG66L,SACnFkB,aAAc1jM,EAAK,kBACjB,CAAC,KACFojM,IAIPL,EAAa5wL,QAAQ5Q,KAAK8C,GAE1BorB,EAAatd,QAASnQ,SAASX,GAAO6K,UAAU0Z,OAAO7jB,OAGzDgR,KAzCE+vL,GAAW,EA0Cd,EA9CD,KA+CC,CACDI,EAAQC,EAAanjL,EAASsiL,EAAYtiM,EAAM+J,EAAQk5L,EAA0BT,EAAMzvL,KAIxFlR,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAa,8BAA+Bie,GAAWje,IAAcC,SAAA,CACjGsgM,IACCv/L,EAAAA,GAAAA,GAAC4gM,GAAAA,EAAkB,CACjBrB,WAAYA,EACZ/+L,KAAMi2B,EAAU,QAAU,UAC1BtyB,MAAOlH,EAAK,wBAId+iM,EAAa5wL,QAAQvQ,SAAUmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAEzC/sD,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAaztB,SACpBkhM,EAAOjhM,KAAKmhM,IACXrgM,EAAAA,GAAAA,GAAA,OAAiBvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAcA,KAA/CqhM,OAIbv/L,QAASy+L,GAAqCsB,aAAahiM,UAC1DC,EAAAA,GAAAA,IAAA,OAAKrC,UD/MkI,WC+MvGwC,SAAA,EAC9Be,EAAAA,GAAAA,GAAA,MAAIvD,UDhNoN,WCgNpLwC,SAAEhC,EAAK,gCAEzCsiM,EAAoCsB,YAAY3hM,KAAKy+L,IACrD,GAAI,UAAWA,EAAe,CAC5B,MAAMx1L,EAAUw3L,EAAahC,EAAcz2E,OAC3C,IAAK/+G,KAAa,YAAaA,GAAU,OAEzC,OACEnI,EAAAA,GAAAA,GAAC49L,GAAuB,CAEtBz1L,QAASA,EACTw1L,cAAeA,GAFV,qBAAqBA,EAAcz2E,QAK9C,CAEA,GAAI,YAAay2E,GAAiBjqL,EAAM,CACtC,MAAMgvB,EAAQk9J,IAAcjC,EAAc93J,SAE1C,OACE7lC,EAAAA,GAAAA,GAAC8gM,GAAqB,CAEpBptL,KAAMA,EACNgvB,MAAOA,EACPi7J,cAAeA,GAHV,mBAAmBA,EAAc93J,UAM5C,eC3OZ,GAAuB,WAAvB,GAA0C,WAA1C,GAA6D,WC4C7D,IAAevpC,EAAAA,EAAAA,KA1BsCykM,EAAGxkL,WACtD,MAAMtf,GAAOD,EAAAA,EAAAA,MACP,mBAAEgkM,IAAuB36L,EAAAA,EAAAA,MAEzBmwI,GAAW94I,EAAAA,EAAAA,KAAQ,IAAO6e,EAAK7I,MAAO6gJ,EAAAA,EAAAA,IAAgBh4I,EAAK7I,WAAQ/V,GAAY,CAAC4e,EAAK7I,OACrFgU,GAAcllB,EAAAA,EAAAA,KAAY,KAC9Bw+L,EAAmB,CAAExqD,SAAUA,EAAWl6H,UAAWC,EAAKD,cACzD,CAACC,EAAKD,UAAW0kL,EAAoBxqD,IAExC,OACE13I,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAa,4BAA6BlC,QAAS4qB,EAAYzoB,SAAA,EAC5Fe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,SAASkG,KAAM4V,EAAK7I,QAEjC5U,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,SAC1Bsd,EAAKpY,SAGRnE,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,SAC1BhC,EAAK,0BAA2Bsf,EAAK2zB,MAAO,gBCTvD,IAAIiuJ,GACAC,GAWJ,MAAM6C,GAAe,CACnBC,WAAY,iCACZC,eAAgB,gCAEZC,GAASzgJ,OAAO0K,KAAK41I,IAsJ3B,IAAe3kM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAMy4L,GAAOxxI,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAS04L,eAC3CrsL,GAAWC,EAAAA,EAAAA,KAAeJ,GAIhC,MAAO,CAAEqsL,WAHUlsL,EAASksL,WAAW8B,eAGlB5B,OAAMnjL,UAFTjJ,EAASksL,WAAW+B,oBALtBruL,EAzIpB,UAAoB,OAClBjM,EAAM,SACNxK,EAAQ,WACR+iM,EAAU,KACVE,EAAI,UACJnjL,IAEA,MAAMrf,GAAOD,EAAAA,EAAAA,KACP0vB,GAAezd,EAAAA,EAAAA,OACdgO,EAAS8iL,IAActuL,EAAAA,EAAAA,KAAS,GACjCuuL,GAAe/wL,EAAAA,EAAAA,IAAiB,KAEhC,sBAAEsyL,EAAqB,0BAAEC,EAAyB,yBAAEtB,IAA6B75L,EAAAA,EAAAA,MACjF2J,GAAcC,EAAAA,EAAAA,MAEpB1S,EAAAA,EAAAA,KAAU,KACJ+e,GACFilL,EAAsB,CAAEv6L,SAAQsV,gBAEjC,CAACtV,EAAQu6L,EAAuBjlL,KAEnC/e,EAAAA,EAAAA,KAAU,KACHf,IAAY8f,IACf0jL,EAAa5wL,QAAU,GACvB2wL,GAAW,MAEZ,CAACvjM,EAAU8f,KAGd/e,EAAAA,EAAAA,KAAU,KACHgiM,GAIL6B,GAAO/iM,SAASiD,IACd,MAAM++L,EAAQd,EAAWj+L,GACQ,iBAAV++L,GAGrBH,EAAyB,CAAE5+L,OAAM0F,SAAQs5L,MAAOD,SAGnD,CAACr5L,EAAQu4L,EAAYW,KAExB3iM,EAAAA,EAAAA,KAAU,KACR,iBAvEJ8e,iBAME,OALK8hL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiEYqC,GAEDvjL,EAKAsiL,GAAe7yK,EAAatd,UAIjCgyL,GAAO/iM,SAAQ,CAACiD,EAAMhD,KACpB,MAAM+hM,EAAQd,EAAWj+L,GAGzB,GAFiC,iBAAV++L,GAERL,EAAa5wL,QAAQ2jB,SAASzxB,GAC3C,OAGF,IAAK++L,EAGH,YAFAL,EAAa5wL,QAAQ5Q,KAAK8C,GAK5B,MAAM,UAAEm/L,GAAcJ,EAEtBjC,GAAYsC,OACVh0K,EAAatd,QAASnQ,SAASX,GAC/B,CACE6F,MAAOlH,EAAMgkM,GAAwC3/L,OAClDm/L,EAAY,CACbztK,OAASpuB,IAAc4X,EAAAA,GAAAA,IAAQ,4BAA6B,CAAE8jL,MAAOG,EAAW77L,IAAG66L,SACnFkB,aAAc1jM,EAAK,kBACjB,CAAC,KACFojM,IAIPL,EAAa5wL,QAAQ5Q,KAAK8C,MAG5B0O,KAvCE+vL,GAAW,EAwCd,EA5CD,KA6CC,CACD9iL,EAASsiL,EAAYtiM,EAAM+J,EAAQsV,EAAW4jL,EAA0BT,EAAMzvL,IAGhF,MAAM61C,GAAiBt/C,EAAAA,EAAAA,IAAgB,EAAGopB,gBACpCA,IAAcyvC,EAAAA,GAAkBC,WAAa/iD,GAC/CklL,EAA0B,CAAEx6L,SAAQsV,iBAIxC,OAAKW,GAAYsiL,GAAejjL,GAK9Bxd,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAa,gBAAiBie,GAAWje,IAAcC,SAAA,EACpFe,EAAAA,GAAAA,GAAC4gM,GAAAA,EAAkB,CAACrB,WAAYA,EAAY/+L,KAAK,UAAU2D,MAAOlH,EAAK,wBAErE+iM,EAAa5wL,QAAQvQ,SAAUmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAEzC/sD,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAaztB,SACpBmiM,GAAOliM,KAAKmhM,IACXrgM,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,IAAeghM,EAAa5wL,QAAQ2jB,SAASstK,IAAUrhM,UAIzF8B,QAAQy+L,EAAWkC,kBAClB3iM,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAsBC,SAAA,EACpCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAA2BC,SAAEhC,EAAK,iCAEjD+C,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACbC,MAAOy4I,EAAWmC,mBAClBv0I,aAAa,4BACbpG,WAAYlB,EACZ2Z,iBAAkBmiI,EAAAA,IAClBpiI,YAAU,EAAAtgE,SAERsgM,EAAWmC,mBAAiDxiM,KAAKiU,IACjEnT,EAAAA,GAAAA,GAAC+gM,GAA8B,CAAsBxkL,KAAMpJ,GAAtBA,EAAKmJ,sBA3B7Ctc,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GAkCnB,KC/IA,IAAezwD,EAAAA,EAAAA,KA3Bf,UAAwC,KAAEigB,EAAI,UAAEouC,EAAS,UAAE/iB,IACzD,MAAM3qC,GAAOD,EAAAA,EAAAA,MACP,SAAEoJ,IAAaC,EAAAA,EAAAA,MACfgsC,EAAOzK,EAAUrrB,EAAK/V,QACtBkN,EAAOi3C,EAAUpuC,EAAK/V,QAEtBkhB,GAAcnhB,EAAAA,EAAAA,IAAgB,KAClCH,EAAS,CAAE3D,GAAI4vC,EAAK5vC,QAGtB,OACE3D,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAa,4BAA6BlC,QAAS4qB,EAAYzoB,SAAA,EAC5Fe,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAACjG,KAAK,SAASkG,KAAM0rC,GAAQ3+B,EAAMqqL,gBAAc,EAACC,uBAAqB,KAE9El/L,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,SAC1BozC,GAAOpG,EAAAA,EAAAA,IAAgBoG,IAAQid,EAAAA,EAAAA,IAAaryD,EAAMyW,MAGrD1T,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAaC,SAC1Bsd,EAAK8zB,WAAapzC,EAAK,0BAA2Bsf,EAAK8zB,WAAY,KAAOpzC,EAAK,kBAK1F,IClBA,IAAIkhM,GACAC,GAWJ,MAAM6C,GAAe,CACnBC,WAAY,+BACZC,eAAgB,gCAEZC,GAASzgJ,OAAO0K,KAAK41I,IAuK3B,IAAe3kM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAMy4L,GAAOxxI,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAS04L,eAC3CrsL,GAAWC,EAAAA,EAAAA,KAAeJ,GAC1BqsL,EAAalsL,EAASksL,WAAWqC,aACjC/7J,EAAUxyB,EAASksL,WAAW7gJ,gBAC5BzV,KAAMrB,GAAc10B,EAAOxT,OAC3BupC,KAAM0hB,GAAcz3C,EAAO03C,MAEnC,MAAO,CACL20I,aAAYE,OAAM55J,UAAS+B,YAAW+iB,eAVxB13C,EAxJpB,UAAyB,OACvBjM,EAAM,SACNxK,EAAQ,WACR+iM,EAAU,KACVE,EAAI,QACJ55J,EAAO,UACP8kB,EAAS,UACT/iB,IAEA,MAAM3qC,GAAOD,EAAAA,EAAAA,KACP0vB,GAAezd,EAAAA,EAAAA,OACdgO,EAAS8iL,IAActuL,EAAAA,EAAAA,KAAS,GACjCuuL,GAAe/wL,EAAAA,EAAAA,IAAiB,KAEhC,oBAAE4yL,EAAmB,wBAAEC,EAAuB,yBAAE5B,IAA6B75L,EAAAA,EAAAA,MAC7E2J,GAAcC,EAAAA,EAAAA,MAEpB1S,EAAAA,EAAAA,KAAU,KACJsoC,GACFg8J,EAAoB,CAAE76L,SAAQ6+B,cAE/B,CAAC7+B,EAAQ6+B,KAEZtoC,EAAAA,EAAAA,KAAU,KACHf,IAAYqpC,IACfm6J,EAAa5wL,QAAU,GACvB2wL,GAAW,MAEZ,CAACvjM,EAAUqpC,KAGdtoC,EAAAA,EAAAA,KAAU,KACHgiM,GAIL6B,GAAO/iM,SAASiD,IACd,MAAM++L,EAAQd,EAAWj+L,GACQ,iBAAV++L,GAGrBH,EAAyB,CAAE5+L,OAAM0F,SAAQs5L,MAAOD,SAGnD,CAACr5L,EAAQu4L,EAAYW,KAExB3iM,EAAAA,EAAAA,KAAU,KACR,iBA3EJ8e,iBAME,OALK8hL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAqEYqC,GAEDvjL,EAKAsiL,GAAe7yK,EAAatd,UAIjCgyL,GAAO/iM,SAAQ,CAACiD,EAAMhD,KACpB,MAAM+hM,EAAQd,EAAWj+L,GAGzB,GAFiC,iBAAV++L,GAERL,EAAa5wL,QAAQ2jB,SAASzxB,GAC3C,OAGF,IAAK++L,EAGH,YAFAL,EAAa5wL,QAAQ5Q,KAAK8C,GAK5B,MAAM,UAAEm/L,GAAcJ,EAEtBjC,GAAYsC,OACVh0K,EAAatd,QAASnQ,SAASX,GAC/B,CACE6F,MAAOlH,EAAMgkM,GAAwC3/L,OAClDm/L,EAAY,CACbztK,OAASpuB,IAAc4X,EAAAA,GAAAA,IAAQ,4BAA6B,CAAE8jL,MAAOG,EAAW77L,IAAG66L,SACnFkB,aAAc1jM,EAAK,kBACjB,CAAC,KACFojM,IAIPL,EAAa5wL,QAAQ5Q,KAAK8C,MAG5B0O,KAvCE+vL,GAAW,EAwCd,EA5CD,KA6CC,CACD9iL,EAASsiL,EAAYtiM,EAAM+J,EAAQ6+B,EAASq6J,EAA0BT,EAAMzvL,IAG9E,MAAM61C,GAAiBt/C,EAAAA,EAAAA,IAAgB,KAChCs/B,GAELi8J,EAAwB,CAAE96L,SAAQ6+B,eAGpC,OAAK5oB,GAAYsiL,GAAe15J,GAK9B/mC,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAa,gBAAiBie,GAAWje,IAAcC,SAAA,EACpFe,EAAAA,GAAAA,GAAC4gM,GAAAA,EAAkB,CAACrB,WAAYA,EAAY/+L,KAAK,QAAQ2D,MAAOlH,EAAK,wBAEnE+iM,EAAa5wL,QAAQvQ,SAAUmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KAEzC/sD,EAAAA,GAAAA,GAAA,OAAKmY,IAAKuU,EAAaztB,SACpBmiM,GAAOliM,KAAKmhM,IACXrgM,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,IAAeghM,EAAa5wL,QAAQ2jB,SAASstK,IAAUrhM,UAIzF8B,QAAQy+L,EAAWkC,kBAClB3iM,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAsBC,SAAA,EACpCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAA2BC,SAAEhC,EAAK,iCAEjD+C,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACbC,MAAOy4I,EAAWmC,mBAClBv0I,aAAa,4BACbpG,WAAYlB,EACZ2Z,iBAAkBmiI,EAAAA,IAClBpiI,YAAU,EAAAtgE,SAETsgM,EAAWmC,mBAAoBxiM,KAAKiU,GAC/B,cAAeA,GAEfnT,EAAAA,GAAAA,GAAC+gM,GAA8B,CAAmCxkL,KAAMpJ,GAAnC,WAAWA,EAAKmJ,cAKvDtc,EAAAA,GAAAA,GAAC+hM,GAA4B,CAE3BxlL,KAAMpJ,EACNw3C,UAAWA,EACX/iB,UAAWA,GAHN,SAASz0B,EAAK0yB,sBAnC1B7lC,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,GA+CnB,K,gBCxDA,UAAezwD,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAU8uL,aACT,MAAM,OAAEC,EAAM,QAAEC,IAAY5uL,EAAAA,EAAAA,KAAeJ,GAAQivL,YAEnD,MAAO,CACLF,OAAQA,IAASD,EAAOjkM,QACxB+hB,OAASoiL,IAAUF,EAAOjkM,SAAY,MANxBkV,EA9GiCmvL,EACnD1uL,OACAvL,UACA65L,SACAK,aACAC,cACAL,SACAniL,aAEA,MAAM,sBACJyiL,EAAqB,SACrBn8L,EAAQ,iBACRo8L,IACEn8L,EAAAA,EAAAA,MAEEo8L,GAAkBvpK,EAAAA,EAAAA,GAA8BmpK,EAAWK,cAC1DnrK,EAAWkpF,IAAgBhvG,EAAAA,EAAAA,KAAkB,GAC9CkxL,EAAkB7hM,QAAQmhM,IAC1B,OAAElkM,EAAM,KAAEib,GAASgpL,EACnB/kM,GAAOD,EAAAA,EAAAA,MAEbO,EAAAA,EAAAA,KAAU,KAEHolM,GAAmBF,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB7uL,OAAM4I,UAAWnU,EAAQ1F,GAAI1E,SAAQ+hB,SAAQ8S,MA5B/B,EA4BqDgwK,mBAAmB,MAIzF,CAACP,EAAWK,YAAaC,IAE5B,MAAME,GAAsBrgM,EAAAA,EAAAA,KAAY,KACtCi+G,GAAa,GACb8hF,EAAsB,CACpB7uL,OAAM4I,UAAWnU,EAAQ1F,GAAI1E,SAAQ+hB,SAAQ8S,MApC3B,OAsCnB,CAAClf,EAAM6uL,EAAuBp6L,EAAQ1F,GAAIqd,EAAQ/hB,KAErDR,EAAAA,EAAAA,KAAU,KACRkjH,GAAa,KACZ,CAACwhF,IAEJ,MAAMa,GAAoBtgM,EAAAA,EAAAA,KAAaC,IACrC2D,EAAS,CAAE3D,OACX+/L,MACC,CAACA,EAAkBp8L,IAetB,OACEtH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAmBwC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,CACzBgjM,EACGA,EAAO/iM,KAAKuD,IACZzC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,sBAEVK,QAASA,IAAMgmM,EAAkBrgM,GAAIxD,UAEpC+T,EAAAA,EAAAA,IAASvQ,IACRzC,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdyqE,WAAW,OACX5tF,OAAQj+B,EACRwE,eAAa,EACb88C,kBAAgB,KAGlB/jD,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CACZsqE,WAAW,OACXtnH,OAAQvE,EACRshD,kBAAgB,KAhBfthD,MAqBPzC,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IACXk1I,GAzCP,WACE,MAAMc,EAAkBV,EAAWK,YAAcT,EAAQpjM,OAEzD,OAAOwjM,EAAWK,YArDA,GAqD+BK,EAAkB,IACjE/iM,EAAAA,GAAAA,GAACgjM,GAAAA,EAAc,CACb7sK,MAAO4sK,EACP3oF,SAAS,QACT7iF,UAAWA,EACXz6B,QAAS+lM,GAGf,CA8BiBI,OAEbnkM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAcyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC/De,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,eAAeyD,IAAI,OAAMjB,UACtCwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAMA,EAAKA,KACXkzE,SAAUlzE,EAAKkzE,cAGnBptF,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,iBAAiByD,IAAKjD,EAAKkD,MAAQ,YAASxC,EAAUsB,SAAA,EASvD4H,EAREw7L,EAAWK,YAQEnwC,EARW+vC,EASxC/vC,EAAQ,GAAM1rJ,EAAQ0rJ,EAAS,KAAKz9H,UAAY,GATK,aAQ9D,IAAuBjuB,EAAe0rJ,MCvEtC,IAAej2J,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MACEivL,aAAa,OAAEn7L,EAAM,UAAEsV,KACrBhJ,EAAAA,EAAAA,KAAeJ,GAEnB,IAAKlM,IAAWsV,EACd,MAAO,CAAC,EAGV,MAAM5I,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1BmB,GAAUuvB,EAAAA,EAAAA,KAAkBxkB,EAAQlM,EAAQsV,GAGlD,MAAO,CACL5I,OACAvL,UACA+6L,KALW/6L,IAAWg7L,EAAAA,EAAAA,KAAsBjwL,EAAQ/K,MAZtC8K,EAjD2BmwL,EAC7C5mM,WACAkX,OACAvL,UACA+6L,OACAt/L,cAEA,MAAM3G,GAAOD,EAAAA,EAAAA,KAOb,IALAmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGLuE,IAAY+6L,IAASxvL,EACxB,OAAO1T,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAGjB,MAAM,QAAE09H,EAAO,QAAE98D,GAAYu1E,EAC7B,IAAKv1E,EAAQA,QACX,OAGF,MAAM01E,GAAkBC,EAAAA,GAAAA,IAAqB31E,EAAQA,QAAS,UAE9D,OACE7uH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAcyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC/De,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,gBAAgByD,IAAI,OAAMjB,UACrCwuC,EAAAA,GAAAA,IAAuB,CACtBz0B,KAAMyxK,EAAQ3B,SAAS9vK,KACvBkzE,SAAUu+F,EAAQ3B,SAAS58F,cAG/BlsF,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kCAAiCwC,SAC7CwrL,EAAQN,QAAQjrL,KAAK8iM,IACpBhiM,EAAAA,GAAAA,GAACoiM,GAAiB,CAEhB1uL,KAAMA,EACNvL,QAASA,EACT65L,OAAQA,EACRK,WAAYgB,EAAgBrB,EAAOjkM,QACnCukM,YAAa30E,EAAQ20E,aALhB,GAAGY,EAAKzgM,MAAMu/L,EAAOjkM,qB,gBClEtC,SAAuB,WAAvB,GAA4C,WAA5C,GAAiE,WAAjE,GAAuG,WAAvG,GAA2H,WAA3H,GAAoJ,WAApJ,GAAsK,WAAtK,GAAkN,WAAlN,GAAmQ,WC6B7PwlM,GAAY,EAAI1pL,EAAAA,EA6ItB,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,iBAAEswL,IAAqBlwL,EAAAA,EAAAA,KAAeJ,GAC5C,MAAO,CACLQ,KAAM8vL,GAAkBx8L,QAASurC,EAAAA,EAAAA,KAAWr/B,EAAQswL,EAAiBx8L,aAAUrJ,EAC/E6lM,mBACA7gK,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MANnCD,EAhI2BwwL,EAC7CjnM,WACAkX,OACA8vL,mBACA7gK,uBACA/+B,cAEA,MAAM,YAAE8/L,EAAW,iBAAEh/J,IAAqBr+B,EAAAA,EAAAA,OACnClC,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAAS,KAC5BkyL,EAAgBC,IAAqBnyL,EAAAA,EAAAA,IAAS,IAC9CoyL,EAAaC,IAAkBryL,EAAAA,EAAAA,SAA6B9T,GAC7DV,GAAOD,EAAAA,EAAAA,KAEPkiI,EAAYp+H,QAAQqD,GACpBozB,EAAYz2B,QAAQ0iM,GAAkBjsK,YAE5CpJ,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACHf,IACHokK,EAAS,IACTkjC,OAAenmM,MAEhB,CAACnB,IAEJ,MAAM2kK,GAAoB3+J,EAAAA,EAAAA,KAAamC,IACrCi8J,EAASj8J,EAAEqN,OAAOnL,SACjB,IAEGk9L,GAAkBvhM,EAAAA,EAAAA,KAAY,KAClCohM,GAAmB1kI,IAAS8gB,EAAAA,GAAAA,IAAcgkH,EAAAA,GAAAA,MAAiBnlM,OAAQqgE,EAAO,OACzE,IAEG+kI,GAAoBzhM,EAAAA,EAAAA,KAAY,KACpCkhM,EAAY,CACV18L,OAAQ0M,EAAMjR,GACd0B,QACA+/L,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,kBAED,CAACnwL,EAAMgwL,EAAaC,EAAgBE,EAAa1/L,IAE9CmtL,GAA0B9uL,EAAAA,EAAAA,KAAaqpF,IACtCA,EAAM4U,QAAW99D,GAAwBkpD,EAAMppF,KAAO0jG,EAAAA,IAKvDta,EAAMppF,KAAO0jG,EAAAA,IAKjB29F,EAAej4G,EAAMppF,IAJnBqhM,OAAenmM,GALf+mC,EAAiB,CAAEQ,eAAgB,qBAUpC,CAACvC,EAAsB+B,IAEpBy/J,GAAazmM,EAAAA,EAAAA,KAAQ,KAClB,CACL+E,GAAI,EACJ0B,QACA+/L,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,iBAED,CAACF,EAAgBE,EAAa1/L,IAEjC,GAAKuP,GAAMg4C,QAIX,OACE5sD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAYC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgB,iBAAiBC,SAAA,EAC9DH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgBA,IAAYC,SAAA,EACzDe,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAeC,SAAEhC,EAAK,uBACvC+C,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAK,WACLy+B,UAAWtX,OAAO07K,EAAWN,cAAgB,EAC7CnoE,eAAa,EACb/rG,UAAW,EACXlzB,UAAWuC,GAAmBC,UAE9Be,EAAAA,GAAAA,GAACitD,GAAAA,EAAS,CACR9B,MAAOg5I,EACP1nM,WAAWsC,EAAAA,GAAAA,GAAeC,GDhIqJ,YCiI/KlC,QAASinM,EACTtjM,KAAM8iM,GACNa,aAAW,OAGfpkM,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAO1C,EACPiO,SAAU+uJ,EACVv6J,MAAO3J,EAAK,yBACZ4I,SAAU0xB,EACVmU,2BAAyB,QAG7B1rC,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgBA,IAAeC,UAC5De,EAAAA,GAAAA,GAAC+pG,GAAiB,CAChBxO,SAAS,0BACThiF,UAAW/c,EACXkmG,YAAalmG,EACb0tG,oBAAqBonF,EACrB70L,UAAWuC,GACXgrG,oBAAoB,qBACpBC,uBAAqB,UAI3BjqG,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw2F,EACTr5H,SAAU0xB,EACVz6B,QAASmnM,EACTntL,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBCrIfiiM,GAAY,EAAI1pL,EAAAA,EA4JtB,IAAevd,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEmxL,IAAmB/wL,EAAAA,EAAAA,KAAeJ,GAK1C,MAAO,CACLQ,KALW2wL,GAAgBr9L,QAASurC,EAAAA,EAAAA,KAAWr/B,EAAQmxL,EAAer9L,aAAUrJ,EAMhFwtD,MALYk5I,GAAgBr9L,QAAUq9L,GAAgBr3I,SACpDsqE,EAAAA,EAAAA,KAAYpkH,EAAQmxL,EAAer9L,OAAQq9L,EAAer3I,cAAWrvD,EAKvE0mM,iBACA1hK,sBAAsB0B,EAAAA,EAAAA,KAA2BnxB,MAXnCD,EA7IyBqxL,EAC3C9nM,WACAkX,OACAy3C,QACAk5I,iBACA1hK,uBACA/+B,cAEA,MAAM,UAAE2gM,EAAS,iBAAE7/J,IAAqBr+B,EAAAA,EAAAA,OACjClC,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAAS,KAC5BoyL,EAAaC,IAAkBryL,EAAAA,EAAAA,SAA6B9T,GAC7DV,GAAOD,EAAAA,EAAAA,KAEPu6B,EAAYz2B,QAAQujM,GAAgB9sK,WACpCitK,EAAYr5I,GAAO1oD,KAAOgiM,EAAAA,KAEhCt2K,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACHf,IACHokK,EAAS,IACTkjC,OAAenmM,MAEhB,CAACnB,KAEJe,EAAAA,EAAAA,KAAU,MACJ4tD,GAAOhnD,OAASgnD,GAAO04I,eACzBjjC,EAASz1G,EAAMhnD,OACf2/L,EAAe34I,EAAM04I,gBAEtB,CAAC14I,IAEJ,MAAM+zE,GAAYxhI,EAAAA,EAAAA,KAAQ,IACjByG,IAAUgnD,GAAOhnD,OAAS0/L,IAAgB14I,GAAO04I,aACvD,CAACA,EAAa1/L,EAAOgnD,GAAO04I,YAAa14I,GAAOhnD,QAE7Cg9J,GAAoB3+J,EAAAA,EAAAA,KAAamC,IACrC,MAAM+/L,EAAW//L,EAAEqN,OAAOnL,MAC1B+5J,EAAS8jC,KACR,IAEGC,GAAkBniM,EAAAA,EAAAA,KAAY,KAClC+hM,EAAU,CACRv9L,OAAQ0M,EAAMjR,GACd0B,QACA6oD,QAAS7B,EAAO1oD,GAChBohM,kBAED,CAACnwL,EAAM6wL,EAAWV,EAAa1/L,EAAOgnD,IAEnCmmI,GAA0B9uL,EAAAA,EAAAA,KAAaqpF,IACtCA,EAAM4U,QAAW99D,GAAwBkpD,EAAMppF,KAAO0jG,EAAAA,IAKvDta,EAAMppF,KAAO0jG,EAAAA,IAKjB29F,EAAej4G,EAAMppF,IAJnBqhM,EA1EgB,KAqEhBp/J,EAAiB,CAAEQ,eAAgB,qBAUpC,CAACvC,EAAsB+B,IAEpBy/J,GAAazmM,EAAAA,EAAAA,KAAQ,KAClB,IACFytD,EACHhnD,QACA0/L,iBAED,CAACA,EAAa1/L,EAAOgnD,IAExB,GAAKz3C,GAAMg4C,QAIX,OACE5sD,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAYC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgB,iBAAiBC,SAAA,EAC5DksD,IAASnrD,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,IAClB5B,IACCrsD,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgBA,GAAYwlM,GFlIe,YEkIcvlM,SAAA,EACtFe,EAAAA,GAAAA,GAAA,QAAMvD,UAAWuC,GAAeC,SAAEhC,EAAKunM,EAAY,0BAA4B,uBAC/ExkM,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAK,WACLy+B,UAAWtX,OAAO07K,EAAWN,cAAgB,EAC7CnoE,eAAa,EACb/rG,UAAW,EACXlzB,UAAWuC,GAAmBC,UAE9Be,EAAAA,GAAAA,GAACitD,GAAAA,EAAS,CACR9B,MAAOg5I,EACP1nM,UAAWuC,GACXyB,KAAM8iM,GACNa,aAAW,OAGfpkM,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAO1C,EACPiO,SAAU+uJ,EACVv6J,MAAO3J,EAAK,yBACZ4I,SAAU0xB,EACVmU,2BAAyB,QAG3B84J,IACAxkM,EAAAA,GAAAA,GAAA,OAAKvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAgBA,IAAeC,UAC5De,EAAAA,GAAAA,GAAC+pG,GAAiB,CAChBxO,SAAS,wBACThiF,UAAW/c,EACXkmG,YAAalmG,EACb0tG,oBAAqBonF,EACrB70L,UAAWuC,GACXgrG,oBAAoB,qBACpBC,uBAAqB,aAOjCjqG,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw2F,EACTr5H,SAAU0xB,EACVz6B,QAAS6nM,EACT7tL,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBC7HfsjM,GAAqB,sBAmM3B,IAAetoM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUwtB,aACT,MAAM2R,GAAO4xE,EAAAA,EAAAA,KAAU/wG,EAAQwtB,GACzB8R,GAAeC,EAAAA,EAAAA,KAAmBv/B,EAAQwtB,IAC1C,SAAE5oB,IAAaxE,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WACtChsD,GAAexa,EAAAA,GAAAA,GAAmBnrH,EAAQ,eAEhD,MAAO,CACLwtB,SACA2R,OACAv6B,WACAqhI,WAAY3mG,GAAc4mG,IAC1BP,kBAZc5lI,EAjMyB6xL,EAC3CpkK,SACA2R,OACAv6B,WACAlU,UACAu1I,aACA38I,WACAq8I,mBAEA,MAAM,WACJksD,EAAU,mBACV/uC,EAAkB,0BAClBgvC,EAAyB,2BACzBC,IACE5+L,EAAAA,EAAAA,OAEG6+L,EAAgBC,EAAkBC,IAAwB9nM,EAAAA,EAAAA,IAAQ,IAClE+nM,EAAiBC,EAAmBC,IAAuBjoM,EAAAA,EAAAA,IAAQ,IACnE8yD,EAAOypF,IAAYpoI,EAAAA,EAAAA,MACpBxU,GAAOD,EAAAA,EAAAA,KAEPw5I,GAAW94I,EAAAA,EAAAA,KAAQ,IAAO20C,GAAOkiH,EAAAA,EAAAA,IAAgBliH,QAAQ10C,GAAY,CAAC00C,KAE5ElkB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAM4hM,EAAcnzJ,GAAOgd,EAAAA,EAAAA,IAAuBhd,GAAQ,IAEnDvqC,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnBnQ,EAAMmkM,IAAWh0L,EAAAA,EAAAA,IAAS+zL,GAAe,KACzCpsD,EAAKW,IAAUtoI,EAAAA,EAAAA,IAAS0nI,GAAc,IAEvCF,EAAoB5mG,IAAQ6mG,EAAAA,EAAAA,IAAkB7mG,GAC9C6nG,GAAuBjsI,EAAAA,EAAAA,GAASgrI,GAAmB,EAAO/qI,EAAAA,GAAeC,UAE/E5Q,EAAAA,EAAAA,KAAU,KACR6nM,IACAG,MACC,CAAC7kK,KAEJnjC,EAAAA,EAAAA,KAAU,KACRkoM,EAAQD,GAAe,IACvBzrD,EAAOZ,GAAc,MACpB,CAACqsD,EAAarsD,EAAY9mG,KAE7B90C,EAAAA,EAAAA,KAAU,KACRu8I,OAASn8I,KACR,CAACu8I,KAEJ38I,EAAAA,EAAAA,KAAU,KACJua,IAAa4tL,EAAAA,GAAmBlrD,WAClC4qD,IACAG,IACA1rD,OAASl8I,MAEV,CAACma,IAEJ,MAAM6tL,GAAmBp/L,EAAAA,EAAAA,IAAiB5B,IACxC8gM,EAAQ9gM,EAAEqN,OAAOnL,OACjBs+L,IAEI/0I,IAAUw0I,IACZ/qD,OAASl8I,MAIPg9I,GAAkBp0I,EAAAA,EAAAA,IAAiB5B,IACvCo1I,EAAOp1I,EAAEqN,OAAOnL,OAChBs+L,OAGI1qD,GAAoBl0I,EAAAA,EAAAA,IAAiBm0I,IACzCZ,EAASY,GACT4qD,OAGI1qD,GAAoBr0I,EAAAA,EAAAA,IAAgB,KACxC,MAAMq/L,EAActkM,EAAK2oE,OACnB8wE,EAAa3B,EAAInvE,OAElB27H,EAAY/mM,QAKjBkmM,EAAW,IACLG,GAAkB,CACpBl1I,IAAK3d,EACL/wC,KAAMskM,EACNl0L,YAAaqpI,KAIbjzI,GACFkuJ,EAAmB,CACjB7Z,KAAMr0I,KACFu9L,GAAmB,CAAEr1I,IAAK3d,MAfhCwnG,EAAS+qD,OAoBPiB,GAAwBt/L,EAAAA,EAAAA,IAAgB,KAC5C0+L,EAA2B,CAAE9J,MAAO,GAAG3kD,eAGnCsvD,GAA2Bv/L,EAAAA,EAAAA,IAAgB,KAC/C0+L,EAA2B,CAAE9J,MAAO,GAAG3kD,kBAGnCuvD,GAAuBx/L,EAAAA,EAAAA,IAAgB,KAC3C0+L,EAA2B,CAAE9J,MAAO3kD,OAGhCx8E,GAAW/qD,EAAAA,EAAAA,MACX+2L,GAAe/2L,EAAAA,EAAAA,KAAO,GAEtBg3L,GAAqB1/L,EAAAA,EAAAA,IAAiB41I,IAC1CmpD,IACAN,EAA0B,CAAEtkK,SAAQy7G,OAAM+pD,UAAWF,EAAa52L,aAGpE,IAAKijC,EACH,OAGF,MAAM9a,EAAYzf,IAAa4tL,EAAAA,GAAmBtrD,WAElD,OACEt7I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACbd,qBAAsBA,EACtB9nI,SAAUqoI,EACVt2I,MAAOlH,EAAK,uBACZ4I,SAAU0xB,KAEZv3B,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,YACHmE,MAAO3J,EAAK,uBACZmV,SAAUuzL,EACV9+L,MAAOvF,EACP8uD,MAAOA,IAAUw0I,GAAqBx0I,OAAQzyD,EAC9C+tC,2BAAyB,KAE3B1rC,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACPz1G,MAAOuyI,EACPhnI,SAAUuoI,EACV/zI,MAAO3J,EAAK,0BACZ4I,SAAU0xB,EACVsnD,UAAWg6D,EACXr8B,mBAAoBq8B,GAAgBA,EAAeO,EAAIv6I,QAAQ2nF,gBAAa7oF,QAGhFqC,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,iBAAgBwC,SAAA,EAC7Be,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,sBAAsBgf,QAAM,EAACpmB,QAAS+oM,EAAsB5mM,UACzEe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,qBAEd+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,cAAcgf,QAAM,EAACpmB,QAASgpM,EAAyB7mM,UACpEe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,wBAEd+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,OAAOgf,QAAM,EAACpmB,QAASipM,EAAqB9mM,UACzDe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,0BAEd+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iCAAgCwC,UAC5C8B,EAAAA,GAAAA,GAAW9D,EAAK,iBAAkB,CAAC,qBAK5C+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw8J,GAAkBG,EAC3BvoM,QAAS89I,EACT/0I,SAAU0xB,EACVzgB,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAACy2J,GAAAA,EAAY,CACXrkJ,SAAU6zL,EACVjsI,SAAUA,WClMZmsI,GAAsB,+BA2S5B,IAAe7pM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IAC1B,WAAE69L,IAAevxL,EAAAA,EAAAA,KAAeJ,IAChC,SAAE4E,GAAa+sL,GACf,QAAEpkE,GAAYokE,EAAWzyE,SAASprH,IAAW,CAAC,EAEpD,MAAO,CACL0M,OACAs6C,cAAcC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,GACzC8Q,WACAsuL,eAAejiF,EAAAA,EAAAA,IAAiBzwG,EAAM,cACtC2yL,WAAWliF,EAAAA,EAAAA,IAAiBzwG,EAAM,eAClC4yL,gBAAiB7lE,EACjB1+E,mBAAoB7uC,EAAO8uC,UAAUD,uBAGzC,CAAC7uC,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KAlBlBiM,EAxS6BszL,EAC/Cv/L,SACA0M,OACAs6C,eACAl2C,WACAsuL,gBACAC,YACAC,kBACA9pM,WACAulD,qBACAykJ,iBACA5iM,cAEA,MAAM,WACJ6iM,EAAU,gBACVC,EAAe,aACfC,EAAY,cACZC,EAAa,SACbxgM,EAAQ,wBACRygM,EAAuB,qBACvBC,IACEzgM,EAAAA,EAAAA,MAEE0gM,EAAerzL,GAAMvP,OAAS,GAC9B6iM,EAAeh5I,GAAcqoD,OAAS,GACtCsL,EAAgB7gH,QAAQktD,GAAc4zD,eAErCqlF,EAAoBC,EAAkBC,IAAqB7pM,EAAAA,EAAAA,MAC3Dq8I,EAAwBC,IAA6BnoI,EAAAA,EAAAA,KAAS,IAC9DtN,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAASs1L,IAC5B1wF,EAAOwqD,IAAYpvJ,EAAAA,EAAAA,IAASu1L,IAC5Bl/L,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnB2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,MACpB8sC,EAAY7qC,IAAQwlI,EAAAA,EAAAA,IAAkBxlI,GACtCwmI,GAAuBjsI,EAAAA,EAAAA,GAASswC,GAAW,EAAOrwC,EAAAA,GAAeC,SACjElR,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACH8oM,IACLQ,EAAwB,CAAE7/L,WAC1B6/L,EAAwB,CAAE7/L,SAAQogM,WAAW,IAC7CN,EAAqB,CAAE9/L,cACtB,CAACA,EAAQq/L,KAEZ9oM,EAAAA,EAAAA,KAAU,KACJua,IAAa4tL,EAAAA,GAAmBlrD,WAClCZ,GAA0B,GAC1BC,OAASl8I,MAEV,CAACma,IAEJ,MAAMuvL,GAAc3pM,EAAAA,EAAAA,KAAQ,IACnBijD,OAAO0K,KAAK2C,GAAcwjC,kBAAoB,CAAC,GAAG3yF,QACxD,CAACmvD,GAAcwjC,mBACZ81G,EAAoBt5I,GAAcu5I,eAAe1oM,QAAU,EAE3D2oM,GAAsBhlM,EAAAA,EAAAA,KAAY,KACtCgkM,EAAeiB,EAAAA,GAAkBC,mBAChC,CAAClB,IAEEmB,GAAwBnlM,EAAAA,EAAAA,KAAY,KACxCgkM,EAAeiB,EAAAA,GAAkBG,cAChC,CAACpB,IAEEqB,GAAuBrlM,EAAAA,EAAAA,KAAY,KACvCgkM,EAAeiB,EAAAA,GAAkBK,aAChC,CAACtB,IAEEuB,GAA4BvlM,EAAAA,EAAAA,KAAY,KAC5CgkM,EAAeiB,EAAAA,GAAkBO,sBAChC,CAACxB,IAEEyB,GAAqBzlM,EAAAA,EAAAA,KAAY,KACrCgkM,EAAeiB,EAAAA,GAAkBS,WAChC,CAAC1B,IAEE2B,IAAsB3lM,EAAAA,EAAAA,KAAY,KACtCgkM,EAAeiB,EAAAA,GAAkBW,gBAChC,CAAC5B,IAEE6B,IAAiB7lM,EAAAA,EAAAA,KAAa25I,IAClCrC,EAASqC,GACTvC,GAA0B,KACzB,IAEGunB,IAAoB3+J,EAAAA,EAAAA,KAAamC,IACrCi8J,EAASj8J,EAAEqN,OAAOnL,OAClB+yI,GAA0B,KACzB,IAEG0uD,IAAoB9lM,EAAAA,EAAAA,KAAamC,IACrCk8J,EAASl8J,EAAEqN,OAAOnL,OAClB+yI,GAA0B,KACzB,IAEG2uD,IAAsB/lM,EAAAA,EAAAA,KAAY,KACtC,MAAMgmM,EAAerkM,EAAM8lE,OACrBw+H,EAAepyF,EAAMpsC,OAEtBu+H,EAAa3pM,OAKlB4nM,EAAW,CACTz/L,SACA7C,MAAOqkM,EACPnyF,MAAOoyF,EACP3gM,UARA+xI,EAASssD,MAUV,CAAC9vF,EAAOrvG,EAAQc,EAAO3D,EAAOsiM,IAE3BiC,IAAyBlmM,EAAAA,EAAAA,KAAY,KACzCgkM,EAAeiB,EAAAA,GAAkBkB,sBAChC,CAACnC,IAEEoC,IAA0BpmM,EAAAA,EAAAA,KAAY,KAC1CgkM,EAAeiB,EAAAA,GAAkBoB,uBAChC,CAACrC,IAEEsC,IAAsBtmM,EAAAA,EAAAA,KAAY,KAClCkR,EAAK0wG,UACPwiF,EAAc,CAAE5/L,OAAQ0M,EAAKjR,KAE7BkkM,EAAa,CAAE3/L,OAAQ0M,EAAKjR,KAG9B0kM,IACAT,IACAtgM,EAAS,CAAE3D,QAAI9E,MACd,CAAC+V,EAAK0wG,UAAW1wG,EAAKjR,GAAI0kM,EAAmBT,EAAiBC,EAAcC,EAAexgM,IAExF2iM,IAA2BrrM,EAAAA,EAAAA,KAAQ,KACvC,IAAKswD,GAAcqqH,iBACjB,OAAOp7K,EAAK,gBAGd,GAA2C,QAAvC+wD,EAAaqqH,iBAAiB73K,KAChC,OAAOvD,EAAK,gBAGd,MAAM+rM,EAAgBh7I,EAAaqqH,iBAAiBS,QAAQj6K,OACtDoqM,EAAclnJ,GAAoBvhB,QAAQ6Q,IAAcA,EAAS+5D,aAAYvsG,QAAU,EAE7F,OAAOoqM,EAAc,GAAGD,OAAmBC,IAAgBD,EAAcxiH,aACxE,CAACzkC,EAAoBiM,GAAcqqH,iBAAkBp7K,IAClDisM,IAAkBxrM,EAAAA,EAAAA,KAAQ,KAAMozF,EAAAA,EAAAA,IAAap9E,IAAO,CAACA,IAE3D,GAAIA,EAAKk0J,cAAgBl0J,EAAKkmK,YAC5B,OAGF,MAAMriJ,GAAYzf,IAAa4tL,EAAAA,GAAmBtrD,WAElD,OACEt7I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACbd,qBAAsBA,EACtB9nI,SAAUi2L,GACVxiM,UAAWugM,KAEbtnM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,gBACHmE,MAAO3J,EAAK,oBACZmV,SAAU+uJ,GACVt6J,MAAO1C,EACPisD,MAAOA,IAAU+1I,GAAsB/1I,OAAQzyD,EAC/CkI,UAAWugM,KAEbpmM,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACP75G,GAAG,gBACHmE,MAAO3J,EAAK,0BACZmV,SAAUk2L,GACVzhM,MAAOwvG,EACPx3B,UAxLkB,IAyLlB29B,oBAzLkB,IAyL6BnG,EAAMx3G,QAAQ2nF,WAC7D3gF,UAAWugM,EACX3pF,mBAAiB,OAGpB/oG,EAAK0wG,YACJtlH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACH,KAAK,OAAOK,WAAS,EAACzH,QAAS0qM,EAAoBvoM,SAAA,EAC3De,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,kBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAoBhC,EAAlBisM,GAAuB,aAAqB,qBAG5EpqM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,UACLK,WAAS,EACTzH,QAAS6qM,EACT9hM,UAAWugM,EAAcnnM,SAAA,EAEzBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,iBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAkBhC,EAAhB0kH,EAAqB,mBAA2B,YAE7E0kF,IACCvnM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,OACLpH,QAASmrM,EACT1jM,WAAS,EACTsB,UAAWygM,EAAgBrnM,SAAA,EAE3Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,4BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SACvBqnM,GAAkBvmM,EAAAA,GAAAA,IAAcumM,EAAgBznM,QAAU5B,EAAK,gBAIrE6D,QAAQ4S,EAAKy1L,cAActqM,UAC1BC,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,kBACLpH,QAASqrM,GACT5jM,WAAS,EAAAtF,SAAA,EAETe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,wBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,UACvBc,EAAAA,GAAAA,IAAc2T,EAAKy1L,aAAatqM,cAIvCC,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,gBACLK,WAAS,EACTzH,QAAS+qM,EACThiM,UAAWugM,EAAcnnM,SAAA,EAEzBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,gBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC8pM,YAIPjqM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,QACLK,WAAS,EACTzH,QAASirM,EAA0B9oM,SAAA,EAEnCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,4BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEooM,QAE9BvoM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,QACLK,WAAS,EACTzH,QAAS4rM,GAAuBzpM,SAAA,EAEhCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAQyD,IAAI,OAAMjB,SAAEhC,EAAK,yBACzC+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,UAAEc,EAAAA,GAAAA,IAAc2T,EAAKyoL,oBAE5Dr9L,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,cACLK,WAAS,EACTzH,QAAS8rM,GAAwB3pM,SAAA,EAEjCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,0BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEqoM,WAGhCtnM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAAC1L,aAAW,EAAC1a,QAASoqM,EAAiBjoM,SAClEyU,EAAK0wG,UAAYnnH,EAAK,iBAAmBA,EAAK,wBAIrD+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASixG,EACT78I,QAASyrM,GACT1iM,SAAU0xB,GACVzgB,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,IACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6jM,EACRrjM,QAASujM,EACTnuL,KAAMtF,EAAK0wG,UAAYnnH,EAAK,sBAAwBA,EAAK,qBACzD8oC,aAAcryB,EAAK0wG,UAAYnnH,EAAK,iBAAmBA,EAAK,gBAC5D+oC,eAAgB8iK,GAChB7iK,sBAAoB,WC7J5B,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAChC,MAAO,CACL0M,OACAujB,cAAe/jB,EAAO+jB,cACtBV,UAAW7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,GACjC89E,kBAAkBvjC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAASwqF,oBAPxCv+E,EAtJwCm2L,EAC1D5sM,WACAkX,OACA6iB,YACAU,gBACAu6D,mBACAg1G,iBACA6C,qBACAzlM,cAEA,MAAM,iBAAE0lM,IAAqBjjM,EAAAA,EAAAA,MACvBpJ,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAM2lM,EAAuBzoM,QAAQ4S,GAAM81L,oBACrCC,EAAqB3oM,QAAQ4S,GAAMg2L,kBAEnCC,EAAkB7oM,QAAQ4S,GAAM0wG,WAAc1wG,IAAQywG,EAAAA,EAAAA,IAAiBzwG,EAAM,cAC7Ek2L,EAAsBrzK,IAAa4tF,EAAAA,EAAAA,IAAiBzwG,EAAO,gBAE3Dm2L,GAAensM,EAAAA,EAAAA,KAAQ,KAC3B,IAAK8zF,EACH,MAAO,GAGT,MAAOp8D,EAAO00K,IAAUjkE,EAAAA,GAAAA,IAAUllF,OAAOsK,OAAOumC,IAAoB00B,GAAWA,EAAO6jF,UAEtF,MAAO,IAAI30K,KAAU00K,KACpB,CAACt4G,IAEEw4G,GAAyBzjM,EAAAA,EAAAA,IAAiB2/G,IAC9CmjF,EAAmBnjF,EAAOxlF,OAAQwlF,EAAO+jF,mBAAqBhzK,GAC9DuvK,EAAeiB,EAAAA,GAAkByC,oBAG7BC,GAAyB5jM,EAAAA,EAAAA,IAAgB,KAC7C+iM,EAAiB,CACftiM,OAAQ0M,EAAMjR,GACdgnM,qBACAF,sBAAuBA,OAIrBa,GAAuB7jM,EAAAA,EAAAA,IAAgB,KAC3C+iM,EAAiB,CACftiM,OAAQ0M,EAAMjR,GACdgnM,oBAAqBA,EACrBF,4BAIEc,GAAsB9jM,EAAAA,EAAAA,IAAgB,KAC1CigM,EAAeiB,EAAAA,GAAkB6C,mBAG7BC,GAAkBhkM,EAAAA,EAAAA,IAAiB2/G,IACvC,GAAIA,EAAO6jF,QACT,OAAO9sM,EAAK,kBAId,MAAM2qC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAC9BuhK,EAAiBtkF,EAAO+jF,iBAAmBriK,EAAUs+E,EAAO+jF,uBAAoBtsM,EAEtF,OAAI6sM,EACKvtM,EAAK,uBAAuBgvC,EAAAA,EAAAA,IAAgBu+J,IAG9CvtM,EAAK,mBAGd,OACE+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAYwC,UACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1Ce,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,SACLK,WAAS,EACTsB,UAAQ,EAAA5G,SAAA,EAERe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,eAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEhC,EAAKs5B,EAAY,4BAA8B,8BAI/Ez3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC3De,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAI,OAAMjB,SACnChC,EAAKs5B,EACF,sCACA,uCAGLszK,EAAa3qM,KAAKgnH,IACjBlmH,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,sBAEVK,QAASA,IAAMktM,EAAuB9jF,GAAQjnH,UAE9Ce,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQwlF,EAAOxlF,OACfuiB,OAAQsnJ,EAAgBrkF,GACxBj/G,eAAa,KARVi/G,EAAOxlF,WAahB1gC,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASihK,EACT7sM,QAASutM,EACTvzL,UAAW7Z,EAAK,mCAAmCgC,UAEnDe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,yBAIdsoM,IACC9qM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,QAASi+J,EACT3iM,MAAO3J,EAAK,uBACZmV,SAAU+3L,MAGbZ,IACCzqM,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,QAASm+J,EACT7iM,MAAO3J,EAAK,kCACZmV,SAAUg4L,OAGdpqM,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAgCwC,SAC1ChC,EAAK,4CC8HxB,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IAC1B,oBAAEuwI,EAAmB,gBAAEC,EAAe,MAAEpnF,IAAUq6I,EAAAA,EAAAA,IAAiBv3L,EAAQlM,GAEjF,MAAO,CACL0M,OACA6iB,WAAWC,EAAAA,EAAAA,IAAc9iB,GACzBoE,UAAUxE,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WAAW/sL,SAC5Cs4C,QACAmnF,sBACAC,kBACAzjI,YAAaL,GAAMK,YACnB22L,gBAAgBrsE,EAAAA,GAAAA,GAAmBnrH,EAAQ,kBAC3Cy3L,mBAAmB18I,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAS4jM,eAG3D,CAAC13L,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KAAWyjM,EAAAA,EAAAA,IAAiBv3L,EAAQlM,KAlBtDiM,EAtPqC43L,EACvDn3L,OACAlX,WACA+5B,YACAze,WACAy/H,sBACAC,kBACApnF,QACAr8C,cACA22L,iBACAC,oBACA/mM,cAEA,MAAM,iBACJknM,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,sBACjBtsE,EAAqB,qBACrBusE,IACE5kM,EAAAA,EAAAA,MAEEmzI,GAAwB97I,EAAAA,EAAAA,KAAQ,IAAMgW,EAAKqiI,WAAWv2I,MAAK,EAAGs3I,gBAAiBA,KAAa,CAACpjI,EAAKqiI,YAClGsB,EAAkBmC,GAAuBhD,UAAY,GACrD5lG,GAAWlzC,EAAAA,EAAAA,KAAQ,KAAMozF,EAAAA,EAAAA,IAAap9E,IAAO,CAACA,KAE7CimI,EAAwBC,IAA6BnoI,EAAAA,EAAAA,KAAS,IAC9Dy5L,EAAaC,IAAkB15L,EAAAA,EAAAA,IAAsBm/B,EAAW,SAAW,YAC3EopG,EAAkBC,IAAuBxoI,EAAAA,EAAAA,OACzC25L,EAA2BC,EAAyBC,IAA4BhuM,EAAAA,EAAAA,MAChFiuM,EAA0BC,EAAwBC,IAA2BnuM,EAAAA,EAAAA,KAE9Eu6I,GAA8B3+G,EAAAA,EAAAA,GAAsBq+G,GAGpD5iI,EAAYglI,GAA0B74I,QACzB,WAAhBoqM,IACKlxD,GAAqB3C,GAAwC,KAArB2C,KAJXzC,GAAuBM,IAMtC,YAAhBqzD,GAA6Bt6J,IAGnCziB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACRq8I,GAA0B,KACzB,CAACvC,KAEJ95I,EAAAA,EAAAA,KAAU,KACJ2tM,IAAgBP,GAClBI,MAED,CAACG,EAAaP,EAAmBI,IAEpC,MAAMzyD,GAAuB91I,EAAAA,EAAAA,KAAaqE,IACxCozI,EAAoBpzI,GACpB+yI,GAA0B,GAEtBxpF,GACF66I,EAAqB,CACnBjkM,OAAQ0M,EAAKjR,OAGhB,CAACiR,EAAKjR,GAAI2tD,IAEPs7I,GAAqBlpM,EAAAA,EAAAA,KAAY,CAACqE,EAAelC,KAIrD,GAHgBg8C,OAAOsK,QAAOja,EAAAA,EAAAA,MAAY4Z,MAAM3hB,MAC7CzI,QAAO,EAAG4jF,YAAW2xB,eAAgB3xB,GAAa2xB,GAAW9qC,MAAM0gG,GAAMA,EAAEnvM,aAElEqC,QAAU6rM,GAA4B,WAAV7jM,EAAoB,CAC1D63H,EAAsB,CAAE9rG,MAAO,mBAC/B,MAAMg5K,EAAajnM,EAAEkjB,cAAcmI,QAAQ,gBAK3C,OAFC47K,EAAW1hM,cAAc,kBAAuCohC,SAAU,OAC1EsgK,EAAW1hM,cAAc,mBAAwCohC,SAAU,EAE9E,CACA6/J,EAAetkM,GACf+yI,GAA0B,KACzB,CAAC8wD,EAAgBhsE,IAEdmtE,GAA+BrpM,EAAAA,EAAAA,KAAaqE,IAChDmkM,EAAkB,CAChBhkM,OAAQ0M,EAAKjR,GACbsR,YAAuB,cAAVlN,MAEd,CAAC6M,EAAKjR,GAAIuoM,IAEPc,GAAatpM,EAAAA,EAAAA,KAAY,KACzBouC,GAA4B,YAAhBs6J,EACdM,IAEAV,EAAiB,CAAEt0D,SAA0B,WAAhB00D,GAA4BlxD,GAA0B,OAEpF,CAACppG,EAAU46J,EAAwBN,EAAaJ,EAAkB9wD,IAE/D+xD,GAAkCvpM,EAAAA,EAAAA,KAAY,KAClDsoM,EAAiB,CAAEt0D,SAAU,GAAIw1D,wBAAwB,IACzDP,MACC,CAACA,EAAyBX,IAEvBmB,GAA0BzpM,EAAAA,EAAAA,KAAY,KAC1C8oM,IACAP,MACC,CAACO,EAA0BP,IAExB9tM,GAAOD,EAAAA,EAAAA,KACPkvM,EAAc31K,EAAY,UAAY,OACtC41K,EAAc51K,EAAY,UAAY,QAEtC75B,EAAU,CACd,CAAEmK,MAAO,UAAWD,MAAO3J,EAAK,GAAGivM,YAAuB99G,SAAUnxF,EAAK,GAAGivM,iBAC5E,CAAErlM,MAAO,SAAUD,MAAO3J,EAAK,GAAGivM,WAAsB99G,SAAUnxF,EAAK,GAAGivM,iBAGtEE,EAAoB,CAAC,CACzBvlM,MAAO,UACPD,MAAO3J,EAAK,yCACX,CACD4J,MAAO,YACPD,MAAO3J,EAAK,2CAGRs6B,GAAYzf,IAAa4tL,EAAAA,GAAmBtrD,WAC5CE,GAA8C,WAAhB4wD,GAA4Bx3L,EAAKqiI,WAAariI,EAAKqiI,UAAUl3I,OAAS,EAiB1G,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC3De,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAAEhC,EAAK,GAAGkvM,YACzCnsM,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACTE,SAAU64L,EACV5pM,KAAK,eACL5E,QAASA,EACT0V,SAAUs5L,OAGG,YAAhBR,GACClrM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAAUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC1D0rM,GACC7rM,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACkyG,GAAAA,EAAS,CAACnmB,KAAM4+G,EAAmBluM,UAAU,iBAC9CuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAC7DhC,EAAK,GAAGivM,uBAGXlsM,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAAC1L,aAAW,EAAC1a,QAASuuM,EAAwBpsM,SACzEhC,EAAK,iBAER+C,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQgoM,EACRxnM,QAAS0nM,EACTtyL,KAAM/b,EAAK,eACX8oC,aAAc9oC,EAAK,gBACnB+oC,eAAgBimK,EAChBhmK,sBAAoB,QAIxBjmC,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,OAIZjuD,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,oBAAmBwC,SAAA,EAChCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iBAAgBwC,UAC7Be,EAAAA,GAAAA,GAACo3I,GAAa,CACZE,QAAM,EACND,gBAAiBA,EACjB9/G,UAAWA,GACXggH,oBAAqBA,EACrBC,gBAAiBA,EACjBplI,SAAUkmI,MAGbloF,IAAU6qF,EAAAA,KAhErB,WACE,MAAMC,EAAmB,GAAG3xE,EAAAA,MAAkB4xE,EAAAA,MAE9C,OACEn7I,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAI,OAAMjB,SAClChC,EAAK,mCACJo7D,QAAQ,SAAU,mBAClBmjB,MAAM,KACNt8E,KAAK0oD,GACU,kBAANA,GAAwB5nD,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CAACz8F,IAAK6/H,EAAkBliI,KAAM,IAAImiI,EAAAA,QAA0BvzF,KAI/G,CAmDgDwzF,IACtCp7I,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAI,OAAMjB,SACnChC,EAAK,GAAGkvM,wCAId7xD,KACCt6I,EAAAA,GAAAA,GAAC81I,GAAe,CACd9uI,OAAQ0M,EAAKjR,GACbszI,UAAWriI,EAAKqiI,UAChBC,eAAgBsC,KAGpBx5I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC3De,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAC5BhC,EAAKs5B,EAAY,4CAA8C,8CAElEv2B,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACTE,SAAU0B,EAAc,YAAc,UACtCzS,KAAK,kBACL5E,QAAS0vM,EACTh6L,SAAUy5L,KAEZ7rM,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAgCwC,SAEvChC,EADHs5B,EACQ,2CACA,mDAIfv2B,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAAS/zB,EACT9O,SAAU0xB,GACVzgB,UAAW7Z,EAAK,QAChBH,QAASgvM,EAAW7sM,SAEnBs4B,IACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQmoM,EACR3nM,QAAS6nM,EACTzyL,KAAM/b,EAAK,gDAAiDo6I,GAC5DrxG,eAAgB+lK,EAChB9lK,sBAAoB,WC9N5B,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,WACT,MAAM,cAAEujB,GAAkB/jB,EAE1B,MAAO,CACL+jB,gBACAo1K,aAAap+I,EAAAA,EAAAA,KAAmB/6C,EAAQQ,EAAKjR,KAAK8uF,WANpCt+E,EA9CoCq5L,EACtD54L,OACAujB,gBACAo1K,cACAjpM,SACAQ,cAEA,MAAM,gBACJ2oM,EAAe,iBACfznF,IACEz+G,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACNypD,EAAQoH,IAAap8C,EAAAA,EAAAA,IAAS,IAE/B+6L,GAAU9uM,EAAAA,EAAAA,KAAQ,KACtB,MAAM+uM,GAAsBJ,GAAe,IACxCxuM,QAAO,CAACqtD,EAAeg7D,KACjBA,EAAOK,SAAYL,EAAO6jF,SAAW7jF,EAAOxlF,SAAWzJ,GAC1Di0B,EAAI1sD,KAAK0nH,EAAOxlF,QAEXwqB,IACN,IAEL,OAAOvkB,EAAAA,GAAAA,IAAmB,CAAEC,IAAK6lK,EAAoB5lK,MAAO4f,EAAQjmD,KAAM,WACzE,CAAC6rM,EAAap1K,EAAewvB,IAE1BotG,GAAmBrxJ,EAAAA,EAAAA,KAAak+B,IACpCokF,EAAiB,CAAE99G,OAAQ0M,EAAKjR,GAAIi+B,WACpC98B,MACC,CAAC8P,EAAKjR,GAAIqiH,EAAkBlhH,IAE/B,OACE5D,EAAAA,GAAAA,GAACipD,GAAgB,CACf7lD,OAAQA,EACR8lD,cAAesjJ,EACfrjJ,kBAAmBlsD,EAAK,oBACxBwpD,OAAQA,EACR4C,eAAgBwE,EAChBzE,SAAUmjJ,EACVjjJ,mBAAoBuqG,EACpBjwJ,QAASA,QCyDf,IAAetH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IACxBiiC,KAAMrB,GAAc10B,EAAOxT,MAGnC,MAAO,CACLgU,OACAk0B,YACA8kK,iBALuBh5L,KAASywG,EAAAA,EAAAA,IAAiBzwG,EAAM,aAAeA,EAAK0wG,WAM3EuoF,gBAAgB1+I,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAASugM,eAAiBvgK,GAAAA,EACrEzQ,UAAW7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MAXnBT,EA3FsC25L,EACxDl5L,OACAk0B,YACA8kK,mBACAC,iBACAp2K,YACA3yB,UACApH,eAEA,MAAM,6BAAEyoH,IAAiC5+G,EAAAA,EAAAA,MAEnCpJ,GAAOD,EAAAA,EAAAA,MACN6vM,EAAuBC,EAAqBC,IAAwBzvM,EAAAA,EAAAA,MAE3E6wB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMopM,GAAexqM,EAAAA,EAAAA,KAAa0jH,IAChC,IAAKA,EAAO+mF,eACV,OAGF,MAAMC,EAAetlK,EAAUs+E,EAAO+mF,gBACtC,OAAKC,EAIEjwM,EAAK,iBAAiBgvC,EAAAA,EAAAA,IAAgBihK,SAJ7C,IAKC,CAACjwM,EAAM2qC,IAEJulK,GAAoB3qM,EAAAA,EAAAA,KAAa0jH,IACrC,GAAKxyG,EAIL,MAAO,CAAC,CACNvP,MAAOlH,EAAK,WACZiH,KAAM,SACNsT,aAAa,EACbqrC,QAASA,IAAMoiE,EAA6B,CAC1Cj+G,OAAQ0M,EAAKjR,GACbi+B,OAAQwlF,EAAOxlF,OACfqnF,aAAc,CAAC,QAGlB,CAAC9qH,EAAMyW,EAAMuxG,IAEhB,OACEjlH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAYwC,UACzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAUyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC3De,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SAAEhC,EAAKs5B,EAAY,oBAAsB,qBAEnEo2K,EAAeztM,KAAKgnH,IACnBlmH,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,sBACVymB,QAAM,EACNs/B,eAAgB2qJ,EAAkBjnF,GAAQjnH,UAE1Ce,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQwlF,EAAOxlF,OACfuiB,OAAQ+pJ,EAAa9mF,GACrBj/G,eAAa,KARVi/G,EAAOxlF,UAYfgsK,IACC1sM,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,SAAO,EACP5rC,QAASgwM,EACTh2L,UAAW7Z,EAAK,yCAAyCgC,UAEzDe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,sBAGdoS,GAAQg5L,IACP1sM,EAAAA,GAAAA,GAACssM,GAAoB,CACnB54L,KAAMA,EACNtQ,OAAQypM,EACRjpM,QAASmpM,eCiLvB,IAAezwM,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IAC1B,aAAE46G,IAAiB3zD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAW,CAAC,GAC1D,iBAAEomM,EAAkBnkK,KAAM6qH,GAAe5gJ,EAAO03C,MAGtD,MAAO,CACLl3C,OACAogJ,aACAs5C,mBACAC,WANiBzrF,GAAervE,EAAAA,EAAAA,KAAWr/B,EAAQ0uG,QAAgBjkH,EAOnE44B,UAAW7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MAZnBT,EA1PgCq6L,EAClD55L,OACA9P,UACApH,WACAwK,SACA8sJ,aACAu5C,aACAD,mBACA72K,YACAiwK,qBAEA,MAAM,wBACJ+G,EAAuB,oBACvBC,EAAmB,sBACnBC,EAAqB,kBACrBC,EAAiB,iBACjBC,IACEtnM,EAAAA,EAAAA,OAEGunM,EAAeC,IAAoBp8L,EAAAA,EAAAA,OACnCq8L,EAAgCC,EAA8BC,IAAiC1wM,EAAAA,EAAAA,MAC/F2wM,EAA8BC,EAA4BC,IAA+B7wM,EAAAA,EAAAA,MACzF8wM,EAAcC,IAAmB58L,EAAAA,EAAAA,IAAS3Q,QAAQusM,GAAYe,gBAC9DE,EAAeC,IAAoB98L,EAAAA,EAAAA,IAAS3Q,QAAQusM,GAAYiB,gBACjErxM,GAAOD,EAAAA,EAAAA,KACP4kH,EAAeyrF,GAAY5qM,IAEjC0rB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACRgwM,MACC,CAACA,KAEJhwM,EAAAA,EAAAA,KAAU,KACJf,IACF6xM,EAAgBhB,GAAYe,eAAgB,GAC5CG,EAAiBlB,GAAYiB,gBAAiB,MAE/C,CAACjB,EAAY7wM,IAEhB,MAAMgyM,GAA4BhsM,EAAAA,EAAAA,KAAY,KAC5CwrM,IACAP,EAAsB,CAAE95J,UAAWpd,EAAYvvB,EAAS46G,IACnDrrF,GACHiwK,EAAeiB,EAAAA,GAAkBgH,WAElC,CAACT,EAA+BP,EAAuBl3K,EAAWvvB,EAAQ46G,EAAc4kF,IAErFkI,GAA0BlsM,EAAAA,EAAAA,KAAY,KAC1C2rM,IACAX,EAAoB,CAAE75J,UAAW3sC,EAAQA,OAAQ4mM,MAChD,CAACO,EAA6BX,EAAqBxmM,EAAQ4mM,IAExDe,GAAwBnsM,EAAAA,EAAAA,KAAa8oC,IACzC+iK,EAAgB/iK,GAChBqiK,EAAiB,CAAE3mM,OAAQ46G,EAAel0C,UAAWpiC,IAChDA,GACHijK,GAAiB,KAElB,CAAC3sF,EAAc+rF,IAEZiB,GAAyBpsM,EAAAA,EAAAA,KAAa8oC,IAC1CijK,EAAiBjjK,GACjBoiK,EAAkB,CAAE1mM,OAAQ46G,EAAel0C,UAAWpiC,MACrD,CAACs2E,EAAc8rF,IA2FlB,MAAMmB,GAAsBtoM,EAAAA,EAAAA,IAAgB,KAC1CigM,EAAeiB,EAAAA,GAAkBqH,uBAkDnC,OACE9uM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAYwC,UACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAeksM,iBACvBtuM,KAAMuuM,EAAAA,IACNvyM,UAAU,iBAEX4wM,IA3FLvuM,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,sBACV0oC,UAAQ,EAAAlmC,UAERe,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CAACh9C,OAAQqmM,EAAY5qM,QAErCzC,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,SACLgf,QAAM,EACN1L,aAAW,EACX1a,QAASixM,EAA6B9uM,SAErChC,EAAKs5B,EAAY,wBAA0B,8BAE9Cv2B,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ0qM,EACRlqM,QAASoqM,EACTzqM,QArEJzE,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAcwC,SAAA,EAC3Be,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,OACLkG,KAAM0mM,KAERrtM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SACzBhC,EAAKs5B,EAAY,wBAA0B,gCAgE5CpL,WAAWpqB,EAAAA,GAAAA,GACT9D,EAAKs5B,EAAY,+BAAiC,6BAA8B82K,EAAYlpM,OAC5F,CAAC,KAAM,oBAET4hC,aAAc9oC,EAAKs5B,EAAY,wBAA0B,2BACzDyP,eAAgBwoK,EAChBvoK,sBAAoB,QAmElBonK,IAvDNvuM,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAI,OAAMjB,SAAEhC,EAAK,4BAE7C6B,EAAAA,GAAAA,IAAA,OAAKyoK,eAAa,EAAAtoK,SAAA,EAChBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEPH,KAAK,QACLgf,QAAM,EACNzmB,UAAU,cACVwyM,kBAAgB,EAChB75B,cAAe,EACft4K,QAAS+xM,EAAoB5vM,SAE5BhC,EAAK,0BARF,gBAULmwM,EACCA,EAAiBluM,KAAI,CAACuD,EAAI0kD,KACxBnnD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP+wK,cAAejuH,EAAI,EACnB1qD,UAAU,kCACVK,QAASA,KAnHrB+wM,EAoHgCprM,GAnHhCyrM,KAoHcjvM,UAEFe,EAAAA,GAAAA,GAACgkD,GAAAA,EAAa,CAACh9C,OAAQvE,KAPlBA,MAWTzC,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CAAqBoiD,cAAe,EAAGp8J,KAAK,8BAAvC,qBAGtBhZ,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,yBAAyByD,IAAI,OAAMjB,SAAEhC,EAAK,6BACvD+C,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6qM,EACRrqM,QAASuqM,EACT5qM,OAhHR,WACE,IAAKqqM,EAAe,OACpB,MAAMsB,EAAcp7C,EAAW85C,GAC/B,OAAKsB,GAGHpwM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAcwC,SAAA,EAC3Be,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLjG,KAAK,OACLkG,KAAMuoM,KAERlvM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,SACzBhC,EAAK,+CATZ,CAaF,CAgGgBkyM,GACRhkL,UA/FR,WACE,IAAKyiL,EAAe,OACpB,MAAMsB,EAAcp7C,EAAW85C,GAC/B,OAAKsB,GAEDp+G,EAAAA,EAAAA,IAAao+G,IACRnuM,EAAAA,GAAAA,GACL,yBAAyBmuM,EAAY/qM,sCAAsCuP,EAAMvP,WACjF,CAAC,KAAM,qBAIJpD,EAAAA,GAAAA,GAEL,yBAAyBmuM,EAAY/qM,sCAAsCuP,EAAMvP,kFACjF,CAAC,KAAM,yBAZT,CAcF,CA8EmBirM,GACXrpK,aAAc9oC,EAAK,uBACnB+oC,eAAgB0oK,UAkBjBrB,IACCvuM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAAEhC,EAAK,+BACtC+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,QAAS8iK,EACTn6I,QAAS06I,EACT/nM,MAAO3J,EAAK,iCAGfmxM,IACCpuM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,QAASgjK,EACTr6I,QAAS26I,EACThoM,MAAO3J,EAAK,mCAIlB+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAgCwC,SAC3BhC,EAAfmxM,EAAoB,iCAAyC,+CC3NtEiB,GAAoB,6BAGpBC,GAAoD,CACxD,eACA,aACA,YACA,aACA,cACA,cACA,eACA,aACA,aACA,kBACA,aACA,aACA,YAIIC,GAA0BD,GAAgBzwM,OAAS,EAEnD+tJ,IAAen9H,EAAAA,GAAAA,KAAU6uC,GAAOA,KAAM,KAAK,GAsZjD,IAAehiE,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1BgnD,GAAeC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAC1C,WAAE69L,EAAU,kBAAE2K,IAAsBl8L,EAAAA,EAAAA,KAAeJ,IACnD,SAAE4E,GAAa+sL,EACf4K,EAAmB3uM,QAAQktD,GAAc4zD,cACzC8tF,GAAelrF,EAAAA,EAAAA,IAAiB9wG,IAChC,QAAE+sH,GAAYokE,EAAWzyE,SAASprH,IAAW,CAAC,EAC9C2oM,GAAgBF,KAAqBtrF,EAAAA,EAAAA,IAAiBzwG,EAAM,eAAiBA,EAAK0wG,WAKxF,MAAO,CACL1wG,OACAs6C,eACAl2C,WACA43L,eACAD,mBACArJ,cAVoB1yL,EAAK0wG,YAAaD,EAAAA,EAAAA,IAAiBzwG,EAAM,cAW7DwwG,YAVkBxwG,EAAK0wG,YAAaD,EAAAA,EAAAA,IAAiBzwG,EAAM,YAW3D2yL,UAVgB3yL,EAAK0wG,YAAaD,EAAAA,EAAAA,IAAiBzwG,EAAM,eAWzD4yL,gBAAiB7lE,EACjBmvE,8BAA4D,aAA7BJ,GAAmB58K,MAClDmvB,mBAAoB7uC,EAAO8uC,UAAUD,mBACrC4tJ,mBAGJ,CAACz8L,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KA9BlBiM,EApZ2B48L,EAC7C7oM,SACA0M,OACAs6C,eACAl2C,WACA43L,eACAD,mBACArJ,gBACAliF,cACAmiF,YACAsJ,eACAnzM,WACA8pM,kBACAsJ,gCACA7tJ,qBACAykJ,iBACA5iM,cAEA,MAAM,uBACJksM,EAAsB,WACtBrJ,EAAU,WACVsJ,EAAU,aACVpJ,EAAY,cACZC,EAAa,gBACbF,EAAe,SACftgM,EAAQ,wBACRygM,EAAuB,qBACvBC,EAAoB,YACpBkJ,IACE3pM,EAAAA,EAAAA,OAEG4gM,EAAoBC,EAAkBC,IAAqB7pM,EAAAA,EAAAA,KAC5DypM,EAAerzL,EAAKvP,MACpB6iM,EAAeh5I,GAAcqoD,OAAS,IAErCsjC,EAAwBC,IAA6BnoI,EAAAA,EAAAA,KAAS,IAC9DtN,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAASs1L,IAC5B1wF,EAAOwqD,IAAYpvJ,EAAAA,EAAAA,IAASu1L,IAC5Bl/L,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnB2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,OACnBw+L,EAAgBC,IAAqBz+L,EAAAA,EAAAA,IAASiC,EAAKg4C,SACpDnN,IAAY26F,EAAAA,EAAAA,IAAkBxlI,GAC9BwmI,IAAuBjsI,EAAAA,EAAAA,GAASswC,IAAW,EAAOrwC,EAAAA,GAAeC,SACjEgiM,IAAgBzyM,EAAAA,EAAAA,KAAQ,KAAMozF,EAAAA,EAAAA,IAAap9E,IAAO,CAACA,IACnDzW,IAAOD,EAAAA,EAAAA,KACPozM,IAAgCnhM,EAAAA,EAAAA,OAEtCkf,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACJ8oM,IACFQ,EAAwB,CAAE7/L,WAC1B6/L,EAAwB,CAAE7/L,SAAQogM,WAAW,IAC7CN,EAAqB,CAAE9/L,cAExB,CAACA,EAAQq/L,KAGZ9oM,EAAAA,EAAAA,KAAU,KACR2yM,EAAkBpvM,QAAQ4S,EAAKg4C,YAC9B,CAACh4C,EAAKg4C,WAETnuD,EAAAA,EAAAA,KAAU,KACJua,IAAa4tL,EAAAA,GAAmBlrD,WAClCZ,GAA0B,GAC1BC,OAASl8I,MAEV,CAACma,IAEJ,MAAM0vL,IAAsBjhM,EAAAA,EAAAA,IAAgB,KAC1CigM,EAAeiB,EAAAA,GAAkBC,oBAG7BC,IAAwBphM,EAAAA,EAAAA,IAAgB,KAC5CigM,EAAeiB,EAAAA,GAAkBG,eAG7BC,IAAuBthM,EAAAA,EAAAA,IAAgB,KAC3CigM,EAAeiB,EAAAA,GAAkBK,cAG7BuI,IAAyB9pM,EAAAA,EAAAA,IAAgB,KAC7CigM,EAAeiB,EAAAA,GAAkB6I,qBAG7BvI,IAA4BxhM,EAAAA,EAAAA,IAAgB,KAChDigM,EAAeiB,EAAAA,GAAkBO,uBAG7BC,IAAqB1hM,EAAAA,EAAAA,IAAgB,KACzCigM,EAAeiB,EAAAA,GAAkBS,YAG7BC,IAAsB5hM,EAAAA,EAAAA,IAAgB,KAC1CigM,EAAeiB,EAAAA,GAAkBW,iBAG7BC,IAAiB9hM,EAAAA,EAAAA,IAAiB41I,IACtCrC,EAASqC,GACTvC,GAA0B,MAGtBunB,IAAoB56J,EAAAA,EAAAA,IAAiB5B,IACzCi8J,EAASj8J,EAAEqN,OAAOnL,OAClB+yI,GAA0B,MAGtB0uD,IAAoB/hM,EAAAA,EAAAA,IAAiB5B,IACzCk8J,EAASl8J,EAAEqN,OAAOnL,OAClB+yI,GAA0B,MAGtB22D,IAAoBhqM,EAAAA,EAAAA,IAAgB,KACxC,MAAMiiM,EAAerkM,EAAM8lE,OACrBw+H,EAAepyF,EAAMpsC,OAEtBu+H,EAAa3pM,OAKlB4nM,EAAW,CACTz/L,SACA7C,MAAOqkM,EACPnyF,MAAOoyF,EACP3gM,UARA+xI,EAASw1D,OAYPmB,IAAqBjqM,EAAAA,EAAAA,IAAgB,KACzCigM,EAAeiB,EAAAA,GAAkBgJ,iBAG7BC,IAAyBnqM,EAAAA,EAAAA,IAAgB,KAC7C,IAAKynD,EACH,OAGF,MAAM,mBAAE2iJ,GAAuB3iJ,EAE/B8hJ,EAAuB,CAAE9oM,OAAQ0M,EAAKjR,GAAIirE,WAAYijI,OAGlDC,IAAoBrqM,EAAAA,EAAAA,IAAgB,KACxC2pM,GAAmB9gM,IACjB,MAAMyhM,GAAqBzhM,EAM3B,OAJAw9I,IAAa,KACXojD,EAAY,CAAEhpM,SAAQ0mE,UAAWmjI,OAG5BA,SAIXtzM,EAAAA,EAAAA,KAAU,KACR,IAAKqyM,EACH,OAKF,MAAMkB,EAAWV,GAA8BhhM,SAASlF,cAAc,SACtE4mM,EAASxlK,SAAW0iB,GAAc2iJ,qBACjC,CAACf,EAA+B5hJ,GAAc2iJ,qBAEjD,MAAM5H,IAA2BrrM,EAAAA,EAAAA,KAAQ,KACvC,IAAKswD,GAAcqqH,iBACjB,OAAOp7K,GAAK,gBAGd,GAA2C,QAAvC+wD,EAAaqqH,iBAAiB73K,KAChC,OAAOvD,GAAK,gBAGd,MAAM+rM,EAAgBh7I,EAAaqqH,iBAAiBS,QAAQj6K,OACtDoqM,EAAclnJ,GAAoBvhB,QAAQ6Q,IAAcA,EAAS+5D,aAAYvsG,QAAU,EAE7F,OAAOoqM,EACH,GAAGD,OAAmBC,IACtBD,EAAcxiH,aACjB,CAACzkC,EAAoBiM,GAAcqqH,iBAAkBp7K,KAElD8zM,IAA0BrzM,EAAAA,EAAAA,KAAQ,KACtC,IAAKgW,EAAKyxG,oBACR,OAAO,EAGT,IAAInL,EAAas1F,GAAgB9uK,QAC9B5X,KACa,iBAARA,IAA2BqnL,GACvBv8L,EAAKyxG,oBAAqBv8F,MAEpC/pB,OAEF,MAAM,aAAEkkH,EAAY,SAAEhC,GAAartG,EAAKyxG,oBAOxC,OAJKpC,GAAiBhC,IACpB/G,GAAc,GAGTA,IACN,CAACtmG,EAAKyxG,oBAAqB8qF,IAExB5I,IAAc3pM,EAAAA,EAAAA,KAAQ,IACnBijD,OAAO0K,KAAK2C,GAAcwjC,kBAAoB,CAAC,GAAG3yF,QACxD,CAACmvD,GAAcwjC,mBAEZw/G,IAAoBzqM,EAAAA,EAAAA,IAAgB,KACpCmpM,EACFK,EAAW,CAAE/oM,OAAQ0M,EAAKjR,KAChBiR,EAAK0wG,UAGfwiF,EAAc,CAAE5/L,OAAQ0M,EAAKjR,KAF7BkkM,EAAa,CAAE3/L,OAAQ0M,EAAKjR,KAI9B0kM,IACAT,IACAtgM,EAAS,CAAE3D,QAAI9E,OAGjB,GAAI+V,EAAKk0J,cAAgBl0J,EAAKkmK,YAC5B,OAGF,MAAMriJ,GAAYzf,IAAa4tL,EAAAA,GAAmBtrD,WAElD,OACEt7I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACbi2D,WAAYhB,EACZ/1D,qBAAsBA,GACtB9nI,SAAUi2L,GACVxiM,UAAWugM,KAEbtnM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,cACHmE,MAAO3J,GAAK,aACZmV,SAAU+uJ,GACVt6J,MAAO1C,EACPisD,MAAOA,IAAUi/I,GAAoBj/I,OAAQzyD,EAC7CkI,UAAWugM,KAEbpmM,EAAAA,GAAAA,GAACs8G,GAAAA,EAAQ,CACP75G,GAAG,cACHmE,MAAO3J,GAAK,0BACZ4hF,UApRgB,IAqRhB29B,oBArRgB,IAqR6BnG,EAAMx3G,QAAQ2nF,WAC3Dp0E,SAAUk2L,GACVzhM,MAAOwvG,EACPxwG,UAAWugM,EACX3pF,mBAAiB,OAGpB/oG,EAAK0wG,YACJtlH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACH,KAAK,OAAOK,WAAS,EAACzH,QAAS0qM,GAAoBvoM,SAAA,EAC3De,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,gBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAkBhC,GAAhBkzM,GAAqB,aAAqB,oBAGzEV,IACC3wM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,UACLK,WAAS,EACTzH,QAAS6qM,GAAsB1oM,SAAA,EAE/Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,oBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEhC,GAAK,0BAGrC6B,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,cACLK,WAAS,EACTzH,QAASuzM,GACTxqM,UAAWq+G,EAAYjlH,SAAA,EAEvBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,yBAC9B6B,EAAAA,GAAAA,IAAA,QAAMrC,UAAU,WAAWyD,IAAI,OAAMjB,SAAA,CAClC8xM,GAAwB,IAExBxB,IAA2BU,EAAiB,EAAI,UAGrDnxM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,gBACLK,WAAS,EACTzH,QAAS+qM,GACThiM,UAAWugM,EAAcnnM,SAAA,EAEzBe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,gBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC8pM,SAGLjqM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,QACLK,WAAS,EACTzH,QAASirM,GAA0B9oM,SAAA,EAEnCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,4BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,UAAEc,EAAAA,GAAAA,IAAcsnM,SAE3ChB,IACCvnM,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,OACLpH,QAASmrM,GACT1jM,WAAS,EACTsB,UAAWygM,EAAgBrnM,SAAA,EAE3Be,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,4BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SACvBqnM,GAAkBvmM,EAAAA,GAAAA,IAAcumM,EAAgBznM,QAAU5B,GAAK,gBAIrE6D,QAAQ4S,EAAKy1L,cAActqM,UAC1BC,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,kBACLpH,QAASqrM,GACT5jM,WAAS,EAAAtF,SAAA,EAETe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,qBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,UACvBc,EAAAA,GAAAA,IAAc2T,EAAKy1L,aAAatqM,aAItC8wM,IACC7wM,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAACpmB,QAAS8zM,GAAkB3xM,SAAA,EACxDe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,GAAK,oBACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,sBACHmE,MAAO3J,GAAK,iBACZquC,QAAS2kK,EACT9qK,UAAQ,QAGZnlC,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iCAAgCwC,SAAEhC,GAAK,mCAI5D6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACH,KAAK,QAAQK,WAAS,EAACzH,QAAS0zM,GAAmBvxM,SAAA,EAC3De,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,GAAK,mBAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,UAAEc,EAAAA,GAAAA,IAAc2T,EAAKyoL,cAAgB,SAG/DgU,KAAkBV,GAAoB3uM,QAAQktD,KAC9ChuD,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAkB0b,IAAKi4L,GAA8BnxM,UAClEe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,SAAU0iB,EAAa2iJ,mBACvB/pM,MAAO3J,GAAK,eACZmV,SAAUs+L,GACVtiH,SACEpgC,EAAa2iJ,mBAAqB1zM,GAAK,0BAA4BA,GAAK,0BAE1E4I,UAAWq+G,UAKnBlkH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAAC1L,aAAW,EAAC1a,QAASoqM,EAAiBjoM,SAClEhC,GAAK,sBAIZ+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASixG,EACT78I,QAASyzM,GACT1qM,SAAU0xB,GACVzgB,UAAW7Z,GAAK,QAAQgC,SAEvBs4B,IACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6jM,EACRrjM,QAASujM,EACTh8K,WAAWpqB,EAAAA,GAAAA,GACT2uM,IAAiBh8L,EAAK0wG,UAClBnnH,GAAK,2BACLA,GAAK,oCAAqCyW,EAAKvP,OACnD,CAAC,KAAM,oBAET4hC,aAAc2pK,IAAiBh8L,EAAK0wG,UAAYnnH,GAAK,cAAgBA,GAAK,qBAC1E+oC,eAAgBgrK,GAChB/qK,sBAAoB,WC9D5B,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,SAAQkqM,8BACjB,MAAMx9L,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1B06G,GAAWzzD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IACpCiiC,KAAMrB,GAAc10B,EAAOxT,OAC7B,cAAEu3B,GAAkB/jB,EACpBqjB,GAAYC,EAAAA,EAAAA,IAAc9iB,GAC1By9L,IAAwBz9L,EAAK0wG,WAAa8sF,GAGhD,MAAO,CACLx9L,OACAk0B,YACA3Q,gBACAV,YACAm1B,QAPch4C,EAAKg4C,QAQnBylJ,sBACAC,cAAe19L,EAAK29L,YACpBC,YAAaxwM,QAAQ4gH,GACrBlwB,iBAAkBkwB,GAAUlwB,qBAGhC,CAACt+E,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KAvBlBiM,EArXsCs+L,EACxD/0M,WACAg1M,aACAC,iBACAL,gBACA19L,OACAk0B,YACA3Q,gBACAu6D,mBACA8/G,cACA/6K,YACAm1B,UACAylJ,sBACAvtM,UACA4iM,qBAEA,MAAM,gBAAEkL,IAAoBrrM,EAAAA,EAAAA,OAErBg6G,EAAaC,IAAkB7uG,EAAAA,EAAAA,IAA6B,CAAC,IAC7DytH,EAAWC,IAAgB1tH,EAAAA,EAAAA,IAAS3Q,QAAQ0wM,KAC5Cj6K,EAAWkpF,IAAgBhvG,EAAAA,EAAAA,KAAS,IACpCkgM,EAAiCC,EAA+BC,IAAkCv0M,EAAAA,EAAAA,MAClGw0M,EAAaC,IAAkBtgM,EAAAA,EAAAA,IAAS,IACzCxU,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMouM,GAAqBt0M,EAAAA,EAAAA,KAAQ,KACjC,MAAMu0M,EAAsBR,EAAiBjgH,IAAmBigH,QAAkB9zM,EAIlF,IAAI6zM,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAMn/J,GAAOrB,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAAKwoK,GAEpC,OAAOp/J,EAAO,CACZ3R,OAAQ2R,EAAK5vC,GACb4uM,YAAaD,EACbU,YAAa70M,EAAK,gBAClB8sM,SAAS,EACTE,sBAAkBtsM,QAChBA,CACN,CAEA,OAAOs0M,CAdP,IAeC,CAACzgH,EAAkB4/G,EAAeI,EAAYv0M,EAAMw0M,KAEvDl0M,EAAAA,EAAAA,KAAU,KACJ+zM,GAAeG,IAAmBO,GACpCxL,EAAeiB,EAAAA,GAAkBO,sBAElC,CAACt0L,EAAM49L,EAAa9K,EAAgBwL,EAAoBP,KAE3Dl0M,EAAAA,EAAAA,KAAU,KACR+iH,EAAe0xF,GAAoBX,aAAe,CAAC,GACnDU,GAAgBC,GAAoBF,aAAe,IAAI1nD,OAAO,EAhElC,KAiE5BjrB,EAAar+H,QAAQ0wM,IACrB/wF,GAAa,KACZ,CAAC2wF,EAAeI,EAAYQ,IAE/B,MAAMtxF,GAAyBl+G,EAAAA,EAAAA,KAAamC,IAC1C,MAAM,KAAErD,GAASqD,EAAEqN,OAMnBsuG,GAAgBy4E,IAAC,UACZA,EACH,CAACz3L,IANgCuF,EAMCkyL,EAAEz3L,IAL7BuF,QAAQlJ,IADjB,IAAmCkJ,KAQnCs4H,GAAa,KACZ,IAEG+yE,GAAwB1vM,EAAAA,EAAAA,KAAY,KACnCivM,IAILhxF,GAAa,GACbixF,EAAgB,CACd1qM,OAAQ0M,EAAKjR,GACbi+B,OAAQ+wK,EACRJ,YAAahxF,EACbyxF,mBAED,CAACL,EAAgBC,EAAiBh+L,EAAKjR,GAAI49G,EAAayxF,IAErDK,GAAqB3vM,EAAAA,EAAAA,KAAY,KAChCivM,IAILC,EAAgB,CACd1qM,OAAQ0M,EAAKjR,GACbi+B,OAAQ+wK,EACRJ,YAAa,CAAC,IAEhBQ,OACC,CAACn+L,EAAKjR,GAAIovM,EAAgCJ,EAAgBC,IAEvDvvF,GAAuB3/G,EAAAA,EAAAA,KAAaomB,MACpC47F,EAAAA,EAAAA,IAAiB9wG,KAIjBy9L,GAAwBz9L,EAAK29L,cAI7B39L,EAAK0wG,WAID1wG,EAAK29L,YAAYzoL,MACxB,CAAClV,EAAMy9L,IAEJiB,GAAe10M,EAAAA,EAAAA,KAAQ,KAC3B,GAAI8zM,IAAeQ,EACjB,OAGF,GAAIA,EAAmBjI,QACrB,OAAO9sM,EAAK,kBAGd,MAAMutM,EAAiBwH,EAAmB/H,iBACtCriK,EAAUoqK,EAAmB/H,uBAC7BtsM,EAEJ,OAAI6sM,EACKvtM,EAAK,uBAAuBgvC,EAAAA,EAAAA,IAAgBu+J,IAG9CvtM,EAAK,kBACX,CAACu0M,EAAYQ,EAAoBpqK,EAAW3qC,IAEzCo1M,GAA0B7vM,EAAAA,EAAAA,KAAamC,IAC3C,MAAM,MAAEkC,GAAUlC,EAAEqN,OACpB+/L,EAAelrM,GACfs4H,GAAa,KACZ,IAEH,GAAK6yE,EAIL,OACElzM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAAC8gC,UAAQ,EAAC1oC,UAAU,sBAAqBwC,UAChDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQsxK,EAAmBtxK,OAC3BuiB,OAAQmvJ,EACRnrM,eAAa,OAIjBjH,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAI,OAAMjB,SAAEhC,EAAK,yBAEtD+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,QAASxqC,QAAQu/G,EAAYkD,YAC7B38G,MAAO3J,EAAKs5B,EAAY,6BAA+B,4BACvDksF,UAAQ,EACR58G,SAAUs8G,EAAqB,cAC/B/vG,SAAUsuG,MAGbnqF,IACCv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,eACLgqC,QAASxqC,QAAQu/G,EAAYiyF,cAC7B1rM,MAAO3J,EAAK,yBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,gBAC/B/vG,SAAUsuG,MAIfnqF,IACCv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,eACLgqC,QAASxqC,QAAQu/G,EAAYkyF,cAC7B3rM,MAAO3J,EAAK,yBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,gBAC/B/vG,SAAUsuG,OAIhB1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,iBACLgqC,QAASxqC,QAAQu/G,EAAYuE,gBAC7Bh+G,MAAO3J,EAAKs5B,EAAY,0BAA4B,gCACpDksF,UAAQ,EACR58G,SAAUs8G,EAAqB,kBAC/B/vG,SAAUsuG,OAGd1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,QAASxqC,QAAQu/G,EAAYmyF,aAC7B5rM,MAAO3J,EAAK,wBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,eAC/B/vG,SAAUsuG,OAGd1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,QAASxqC,QAAQu/G,EAAYoyF,aAC7B7rM,MAAO3J,EAAK,wBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,eAC/B/vG,SAAUsuG,OAGd1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,gBACLgqC,QAASxqC,QAAQu/G,EAAYqyF,eAC7B9rM,MAAO3J,EAAK,0BACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,iBAC/B/vG,SAAUsuG,OAGZnqF,IACAv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,WACLgqC,QAASxqC,QAAQu/G,EAAYsyF,UAC7B/rM,MAAO3J,EAAK,qBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,YAC/B/vG,SAAUsuG,OAIhB1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,QAASxqC,QAAQu/G,EAAYgD,aAC7Bz8G,MAAO3J,EAAK,qBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,eAC/B/vG,SAAUsuG,OAGZnqF,IACAv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,cACLgqC,QAASxqC,QAAQu/G,EAAYiD,aAC7B18G,MAAO3J,EAAK,wBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,eAC/B/vG,SAAUsuG,OAIhB1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,YACLgqC,QAASxqC,QAAQu/G,EAAYuyF,WAC7BhsM,MAAO3J,EAAK,sBACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,aAC/B/vG,SAAUsuG,OAGd1gH,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,aACLgqC,QAASxqC,QAAQu/G,EAAYwyF,YAC7BjsM,MAAO3J,EAAK,2BACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,cAC/B/vG,SAAUsuG,MAGbh1D,IACC1rD,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,eACLgqC,QAASxqC,QAAQu/G,EAAYmD,cAC7B58G,MAAO3J,EAAK,0BACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,gBAC/B/vG,SAAUsuG,OAIdnqF,IACAv2B,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAK,YACLgqC,QAASxqC,QAAQu/G,EAAYyyF,WAC7BlsM,MAAO3J,EAAK,4BACZwlH,UAAQ,EACR58G,SAAUs8G,EAAqB,aAC/B/vG,SAAUsuG,MAKfywF,IACCnxM,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,oBAAoByD,IAAI,OAAMjB,SACxChC,EAAK,mCAIRs5B,IACAv2B,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,cACHmE,MAAO3J,EAAK,iBACZmV,SAAUigM,EACVxrM,MAAOirM,EACPjsM,SAAUsrM,EACVtyH,UAhVkB,KAoVrB5nD,IAAkBw6K,IAAmBN,IAAwBK,IAC5DxxM,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAAC1L,aAAW,EAAC1a,QAAS80M,EAA8B3yM,SAC/EhC,EAAK,gCAMd+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw2F,EACTpiI,QAASo1M,EACTp7L,UAAW7Z,EAAK,QAChB4I,SAAU0xB,EAAUt4B,SAEnBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAIbkwM,IACAxxM,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQuuM,EACR/tM,QAASiuM,EACT74L,KAAK,+CACL+sB,aAAc9oC,EAAK,yBACnB+oC,eAAgBmsK,EAChBlsK,sBAAoB,W,0BCnW9B,MAoNA,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IACxB2qF,aAAc+tE,GAAqBxsJ,EAAOxT,OAC5C,QAAE6xF,EAAO,iBAAEC,EAAgB,sBAAEuhH,IAA0B9kJ,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAAW,CAAC,EAC9FuvB,EAAY7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,IAChC80B,QAASyqH,GAAoB//I,EAAO81B,aAAe,CAAC,EACtDgqK,EAAwB9/L,EAAOk/B,WAAW4gK,sBAE1CtG,EAAmBh5L,IAASA,EAAK0wG,YAAaD,EAAAA,EAAAA,IAAiBzwG,EAAM,aAErEu/L,EAAsBvG,KAAqBloF,EAAAA,EAAAA,IAAiB9wG,SAA+B/V,IAAtB+V,EAAKyoL,mBACjDx+L,IAA1Bq1M,GAAuCt/L,EAAKyoL,cAAgB6W,EAE3DE,EAAgBx/L,KAAUywG,EAAAA,EAAAA,IAAiBzwG,EAAM,iBAChD6iB,KAAc+xI,EAAAA,EAAAA,IAAkB50J,EAAM,gBAC1CA,EAAK0wG,YAINv9E,MAAOP,EAAW,eAClBm4B,EAAc,cACd00I,EAAa,aACbhgD,IACE7/I,EAAAA,EAAAA,KAAeJ,GAAQggJ,WAE3B,MAAO,CACL6/C,sBAAuBjyM,QAAQ4S,GAAQq/L,GACvCxhH,UACA2hH,gBACA1hH,mBACAkuE,mBACAnpI,YACA08H,kBACA3sH,cACAu5H,YAAaphG,EACb00I,gBACAhgD,eACAu5C,mBACAz1K,cAAe/jB,EAAO+jB,cACtBg8K,yBAxCchgM,EApNkCmgM,EACpDpsM,SACAqsM,WACA9hH,UACA2hH,gBACA1hH,mBACAkuE,mBACAnpI,YACA/5B,WACA22M,gBACAlgD,kBACAE,eACA0M,cACAv5H,cACArP,gBACAy1K,mBACAqG,wBACAE,sBACArvM,UACA4iM,iBACA6C,yBAEA,MAAM,SACJjjM,EAAQ,mBAAEitJ,EAAkB,gBAAEqzC,EAAe,yBAC7C4M,EAAwB,6BAAEC,EAA4B,iBAAExnC,IACtD1lK,EAAAA,EAAAA,MACEpJ,GAAOD,EAAAA,EAAAA,KACPg9D,GAAW/qD,EAAAA,EAAAA,MACXyd,GAAezd,EAAAA,EAAAA,OAEdukM,EAAgBC,IAAqBhiM,EAAAA,EAAAA,MAEtCiiM,GAAWh2M,EAAAA,EAAAA,KAAQ,IAChB21M,GAAY7hH,EAAmB7wC,OAAO0K,KAAKmmC,GAAoB,IACrE,CAACA,EAAkB6hH,IAEhB3hH,GAAYh0F,EAAAA,EAAAA,KAAQ,KAExB,MAAMkqC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KACpC,IAAKsoD,IAAY3pD,EACf,MAAO,GAGT,MAAMY,GAAUqpD,EAAAA,EAAAA,IACdN,EAAQryF,KAAI,EAAGwhC,YAAaA,IAC5BkH,EACA83H,GAGF,OAAO2zC,EAAW7qK,EAAQhI,QAAQE,IAAYgzK,EAAS3gL,SAAS2N,KAAW8H,IAC1E,CAAC+oD,EAASmuE,EAAkB2zC,EAAUK,KAEzCC,EAAAA,GAAAA,GAAsBjiH,GAEtB,MAAMlrD,GAAe9oC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkqC,GAAYoJ,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAC9B2qK,EAAyB9yM,QAAQwlC,GACjCutK,EAAaD,EAEd3gD,GAAkBtsH,EAAAA,GAAAA,IAAmB,CAAEC,IAAKqsH,EAAiBpsH,MAAOP,EAAa9lC,KAAM,SAAY,GADpGkxF,EAGJ,OAAOvjC,EAAAA,GAAAA,IACLznB,EAAAA,GAAAA,IAAO,IACFmtK,KACCD,GAAyBzgD,GAAqB,MAC9CygD,GAAyBT,GAAsB,KAClD3yK,QAAQgzH,IACT,MAAMnhH,EAAOzK,EAAU4rH,GACvB,OAAKnhH,IAIG9b,GAAa8b,EAAK8tH,uBAAwBnuE,EAAAA,EAAAA,IAAU3/C,OACrDghK,IAAaK,EAAS3gL,SAASygI,QAExC,KAED,CAAC9hE,EAAWuhE,EAAiB3sH,EAAa6sH,EAAcggD,EAAe58K,EAAW88K,EAAUK,KAExF/pJ,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBlsD,EAAW6oC,EAAc1lC,QAAQwlC,IAE5Ew8J,GAAoBv8L,EAAAA,EAAAA,IAAiB9D,IACrC4wM,GACFhK,EAAoB5mM,GAAI,GACxB+jM,EAAgBiB,EAAAA,GAAkBqM,sBAElCpN,IACAtgM,EAAS,CAAE3D,WAITwrF,GAAqB1nF,EAAAA,EAAAA,IAAiB5B,IAC1C0uJ,EAAmB,CAAExsH,MAAOliC,EAAEqN,OAAOnL,WAGjC8hB,GAAgB8iC,EAAAA,GAAAA,GAA0B/+B,EAAclwB,GAAW8B,IACnEqrD,GAAeA,EAAY9qD,OAAS,GACtCikM,EAAkBn5I,GAAuB,IAAXrrD,EAAe,EAAIA,MAElD,oBAAoB,GAEjBy1M,GAAgCxtM,EAAAA,EAAAA,IAAgB,KACpDktM,OAAkB91M,MAGdq2M,GAAiCztM,EAAAA,EAAAA,IAAgB,KACrD+sM,EAAyB,CAAEtsM,SAAQ0mE,WAAYqlI,OAG3CkB,GAA4B1tM,EAAAA,EAAAA,IAAgB,KAChDwlK,IACAwnC,EAA6B,CAAEW,uBAAwBC,EAAAA,GAAuB/5D,gBA+BhF,OA5BAjsH,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KA2BR9E,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,CACxBo0M,IAbDrzM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,qBAAqByD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,UACtEe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAK6hD,EACLnzD,MAAOy/B,EACPl0B,SAAU67E,EACVrhC,YAAa3vD,EAAK,eAStB6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,CACzCg0M,IAAwB18K,IACvBz3B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACH,KAAK,QAAQgf,QAAM,EAACpmB,QAASk3M,EAA+B/0M,SAAA,EACpEe,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,yBACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CAACtlC,MAAO3J,EAAK,sBAAuBquC,QAASynK,QAExD/yM,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SACxBhC,EAAK81M,EAAwB,+BAAiC,uCAIrE/yM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,SACrB0qD,GAAa9qD,QACZmB,EAAAA,GAAAA,GAAC6mD,GAAAA,EAAc,CACbpqD,UAAU,4BACVqqD,MAAOtgB,EACPugB,WAAY6C,EACZ2iC,gBAAiBzrF,QAAQwlC,GACzBnuB,IAAKuU,EACLigC,UAAWhkC,EAAc1pB,SAExB0qD,EAAYzqD,KAAKuD,IAChBzC,SAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,kCAEVK,QAASA,IAAMgmM,EAAkBrgM,GACjC+/C,gBAtDgB4xJ,EAsDuB3xM,EArD9C2xM,IAAan9K,GAAkBy1K,EAA+B,CAAC,CACpEvoM,MAAOlH,EAAK,iCACZiH,KAAM,OACN2+C,QAASA,KACP4wJ,EAAkBW,WAJmCz2M,GAsD3C+lD,mBAAiB,EAAAzkD,UAEjBe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CAACnjB,OAAQj+B,EAAIwE,eAAa,EAACg2C,WAAS,KAP/Cx6C,GAlDrB,IAAgC2xM,OA6DnBv0C,IAAel2G,GAAgBA,EAAY9qD,QAO9CmB,EAAAA,GAAAA,GAAC+sD,GAAAA,EAAO,KANR/sD,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXoiD,cAAe,EAEfp8J,KAAMud,EAAY,uBAAyB,oBADvC,sBAQX28K,IACClzM,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,SAAO,EACP5rC,QAASm3M,EACTn9L,UAAW7Z,EAAK,yBAAyBgC,UAEzCe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,sBAGdorM,IACC1sM,EAAAA,GAAAA,GAACq0M,GAAAA,EAAiB,CAChBjxM,OAAQtC,QAAQ0yM,GAChB9yK,OAAQ8yK,EACR5vM,QAASmwM,WCqFnB,IAAez3M,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1B06G,GAAWzzD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IACtC,SAAE8Q,IAAaxE,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WAEtC7wJ,EAAoBtgC,GAAMsgC,kBAC1B+3F,EAA2C74H,EAAOk/B,WAAW45F,mCAEnE,MAAO,CACLt4H,OACAoE,WACAmf,cAAe/jB,EAAO+jB,cACtBqwK,kBAAmB5lF,GAAU6lF,eAAe1oM,QAAU,EACtD0yF,QAASmwB,GAAUnwB,QACnB+iH,yBAA0BxzM,QAAQ4gH,GAAU4yF,0BAA4BvoE,GACxEsB,qBAAsBvsI,QAAQkzC,GAAqB+3F,GACnDwoE,oBAAqBvgK,GAAqBm5F,EAAAA,OAjB5Bl6H,EA/PsCuhM,EACxDhO,iBACA6C,qBACA31L,OACAoE,WACAmf,gBACAqwK,oBACA/1G,UACA3tF,UACApH,WACA83M,2BACAjnE,uBACAknE,0BAEA,MAAM,8BAAEE,EAA6B,wBAAEC,IAA4BruM,EAAAA,EAAAA,OAE7D,YACJg6G,EAAW,sBAAEE,EAAqB,UAAEhpF,EAAS,uBAAEmpF,EAAsB,aAAED,GACrEN,GAAqBzsG,GAAMyxG,qBACzBpoH,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEbixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMglM,GAA0BpmM,EAAAA,EAAAA,KAAY,KAC1CgkM,EAAeiB,EAAAA,GAAkBkN,qBAChC,CAACnO,IAEEoO,GAA0BpyM,EAAAA,EAAAA,KAAY,KAC1CgkM,EAAeiB,EAAAA,GAAkBoN,8BAChC,CAACrO,IAEEsO,GAA6BtyM,EAAAA,EAAAA,KAAa0jH,IAC9CmjF,EAAmBnjF,EAAOxlF,OAAQwlF,EAAO+jF,mBAAqBhzK,GAC9DuvK,EAAeiB,EAAAA,GAAkBsN,wBAChC,CAAC99K,EAAeoyK,EAAoB7C,KAEhC1kF,EAAqBC,IAA0BtwG,EAAAA,EAAAA,KAAS,IAExDujM,EAA2BC,EAA6BC,IAAiC53M,EAAAA,EAAAA,MACzF63M,EAAwBC,IAA6B3jM,EAAAA,EAAAA,IAAS47H,IAC9DjB,EAAmBoB,IAAwB/7H,EAAAA,EAAAA,IAAiB8iM,IAEnEh3M,EAAAA,EAAAA,KAAU,KACJua,IAAa4tL,EAAAA,GAAmBlrD,UAClC06D,MAED,CAACp9L,IAEJ,MAAMo6L,GAAwB3rM,EAAAA,EAAAA,IAAgB,KACvCmN,IAIL+sG,GAAa,GACbg0F,EAA8B,CAAEztM,OAAQ0M,EAAKjR,GAAIslH,aAAc1H,QAG3Dg1F,GAAgC9uM,EAAAA,EAAAA,IAAgB,KAC/CmN,GACLghM,EAAwB,CACtB1tM,OAAQ0M,GAAMjR,GACduxC,kBAAmBmhK,EAAyB/oE,EAAoB,OAI9DkpE,GAA0B/uM,EAAAA,EAAAA,IAAgB,KAC1CyuM,GACFK,IAEE90F,GACF2xF,OAIEqD,GAAmB73M,EAAAA,EAAAA,KAAQ,IAC1B6zF,EAIEA,EAAQ/wD,QAAO,EAAGunF,kBAAmBjnH,QAAQinH,KAH3C,IAIR,CAACx2B,IAEEikH,GAAsBhzM,EAAAA,EAAAA,KAAa0jH,IACvC,MAAM,aAAE6B,GAAiB7B,EACzB,IAAK6B,IAAiBr0G,EACpB,OAGF,MAAM,oBAAEyxG,GAAwBzxG,EAEhC,OAAOitC,OAAO0K,KAAK08D,GAAclqH,QAAO,CAACK,EAAQkzB,KAC/C,MAAMxI,EAAMwI,EACZ,IACG22F,EAAan/F,IACVu8F,IAAsBv8F,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO1qB,EAGT,MAAMqnC,EA/IZ,SAAqC3c,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,YACH,MAAO,6BACT,IAAK,WACH,MAAO,6BACT,IAAK,kBACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,aACH,MAAO,+BACT,QACE,OAEN,CA0GsB6sL,CAA4B7sL,GAE5C,IAAK2c,EACH,OAAOrnC,EAGT,MAAMw3M,EAAmB34M,EAAQwoC,GAEjC,MAAO,GAAGrnC,IAAUA,EAAOW,OAA4B,KAAK62M,IAAxBA,MACnC,MACF,CAAChiM,EAAM3W,IAEJ44M,GAA+BpvM,EAAAA,EAAAA,IAAgB,KACnD6uM,GAA2BD,GAC3BF,OAGI5oE,GAAgC9lI,EAAAA,EAAAA,IAAiBM,IACrD2mI,EAAqB3mI,GACrBouM,OAGIW,EAAwBZ,GAA6Bz0F,EACrDs1F,EAAwB/9L,IAAa4tL,EAAAA,GAAmBtrD,YAAc7iH,EAE5E,OACEz4B,EAAAA,GAAAA,IAAA,OACErC,UAAU,mCACVkP,MAAO,qDAC6D1M,SAAA,EAEpEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gCAA+BwC,SAAA,EAC5Ce,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAkByD,IAAI,OAAMjB,SAAEhC,EAAK,+BACjD+C,EAAAA,GAAAA,GAAC6hH,GAAsB,CACrB76G,OAAQ0M,GAAMjR,GACdq/G,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb4B,kBAAkB,mBAClBxlH,WAAWsC,EAAAA,GAAAA,GACT,eACA+iH,GAAuB,sBAEzBE,kBAAkBjjH,EAAAA,GAAAA,GAAe,OAAQ+iH,GAAuB,gBAInEwyF,IACCx1M,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,UACA+iH,GAAuB,WACvB7iH,SAAA,EAEFH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CAACvH,QAAS64M,EAA6B12M,SAAA,EAC9Ce,EAAAA,GAAAA,GAAA,QAAAf,SAAOhC,EAAK,+BACZ+C,EAAAA,GAAAA,GAACksC,GAAAA,EAAQ,CACPzpC,GAAG,sBACHmE,MAAO3J,EAAK,4BACZquC,QAAS6pK,QAGbn1M,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,mCAAmCyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SACjFhC,EAAK,+BAKXk4M,IACCn1M,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACT,UACA+iH,GAAuB,WACvB7iH,UAEFe,EAAAA,GAAAA,GAACuuI,GAAgB,CACf/C,4BAA0B,EAC1BW,aAAW,EACXC,kBAAmBA,EACnBh6H,SAAUi6H,OAKhBrsI,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACT,UACA+iH,GAAuB,WACvB7iH,UAEFH,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACPH,KAAK,cACLK,WAAS,EACTm3G,QAAM,EACN5+G,QAAS8rM,EAAwB3pM,SAAA,EAEjCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEhC,EAAK,0BAC9B+C,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAUwC,SAAEqoM,UAIhCxoM,EAAAA,GAAAA,IAAA,OACErC,WAAWsC,EAAAA,GAAAA,GACT,UACA+iH,GAAuB,WACvB7iH,SAAA,EAEFe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAkByD,IAAI,OAAMjB,SAAEhC,EAAK,wBAEjD+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,WACLpH,QAAS83M,EAAwB31M,SAEhChC,EAAK,yBAGPs4M,EAAiBr2M,KAAKgnH,IACrBlmH,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP5H,UAAU,wCAEVK,QAASA,IAAMg4M,EAA2B5uF,GAAQjnH,UAElDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQwlF,EAAOxlF,OACfuiB,OAAQuyJ,EAAoBtvF,GAC5Bj/G,eAAa,KARVi/G,EAAOxlF,iBAepB1gC,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASktK,EACT94M,QAASw4M,EACTx+L,UAAW7Z,EAAK,QAChB4I,SAAUgwM,EAAsB52M,SAE/B42M,GACC71M,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBCnJrB,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,SAAQkqM,8BACjB,MAAMx9L,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAC1B06G,GAAWzzD,EAAAA,EAAAA,KAAmB/6C,EAAQlM,GAG5C,MAAO,CACL0M,OACAy9L,sBAJ4Bz9L,EAAK0wG,WAAa8sF,GAK9CI,YAAaxwM,QAAQ4gH,GACrBnwB,QAASmwB,GAAUnwB,YAGvB,CAACr+E,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KAdlBiM,EAvJ0C6iM,EAC5DpiM,OACAqiM,uBACAzE,cACA//G,UACAi1G,iBACA2K,sBACAvtM,UACApH,eAEA,MAAM,6BAAEyoH,IAAiC5+G,EAAAA,EAAAA,MAEnC2rM,GAAqBt0M,EAAAA,EAAAA,KAAQ,KACjC,GAAK6zF,EAIL,OAAOA,EAAQ/xF,MAAK,EAAGkhC,YAAaA,IAAWq1K,MAC9C,CAACxkH,EAASwkH,KAEP,YACJ11F,EAAW,sBAAEE,EAAqB,UAAEhpF,EAAS,uBAAEmpF,EAAsB,aAAED,GACrEN,GAAqB6xF,GAAoBjqF,cAAgBr0G,GAAMyxG,sBAC5D6wF,EAA6BC,EAA2BC,IAA8B54M,EAAAA,EAAAA,KACvFL,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MAEhBmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACJ+zM,GAAeyE,IAAyB/D,GAC1CxL,EAAeiB,EAAAA,GAAkB6I,oBAElC,CAAC58L,EAAM49L,EAAa9K,EAAgBwL,EAAoB+D,IAE3D,MAAM7D,GAAwB1vM,EAAAA,EAAAA,KAAY,KACnCkR,GAASqiM,IAIdt1F,GAAa,GACbwE,EAA6B,CAC3Bj+G,OAAQ0M,EAAKjR,GACbi+B,OAAQq1K,EACRhuF,aAAc1H,OAEf,CAAC3sG,EAAMqiM,EAAsBt1F,EAAcwE,EAA8B5E,IAEtE81F,GAAqB3zM,EAAAA,EAAAA,KAAY,KAChCkR,GAASqiM,GAId9wF,EAA6B,CAC3Bj+G,OAAQ0M,EAAKjR,GACbi+B,OAAQq1K,EACRhuF,aAAc,CACZquF,cAAc,OAGjB,CAAC1iM,EAAMqiM,EAAsB9wF,IAE1B9C,GAAuB3/G,EAAAA,EAAAA,KAAaomB,KACpCuoL,MAICz9L,IAASA,EAAKyxG,sBAIZzxG,EAAKyxG,oBAAoBv8F,IAC/B,CAAClV,EAAMy9L,KAEHrvF,EAAqBC,IAA0BtwG,EAAAA,EAAAA,KAAS,GAE/D,GAAKugM,EAIL,OACElzM,EAAAA,GAAAA,IAAA,OACErC,UAAU,mCACVkP,MAAO,sDACuF1M,SAAA,EAE9FH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gCAA+BwC,SAAA,EAC5Ce,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAAC8gC,UAAQ,EAAC1oC,UAAU,sBAAqBwC,UAChDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CAACnjB,OAAQsxK,EAAmBtxK,OAAQz5B,eAAa,OAGnEjH,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,uBAAuByD,IAAI,OAAMjB,SAAElC,EAAQ,4BACzDiD,EAAAA,GAAAA,GAAC6hH,GAAsB,CACrB76G,OAAQ0M,GAAMjR,GACdq/G,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb5jH,WAAWsC,EAAAA,GAAAA,GACT,eACA+iH,GAAuB,sBAEzBG,kBAAkB,mBAClBD,kBAAkBjjH,EAAAA,GAAAA,GAAe,OAAQ+iH,GAAuB,WAChEK,qBAAsBA,QAIxBgvF,IACAnxM,EAAAA,GAAAA,GAAA,OACEvD,WAAWsC,EAAAA,GAAAA,GACT,UACA+iH,GAAuB,WACvB7iH,UAEFe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,cAAcgf,QAAM,EAAC1L,aAAW,EAAC1a,QAASm5M,EAA0Bh3M,SAChFlC,EAAQ,iCAMjBiD,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAAS63E,EACTzjH,QAASo1M,EACTp7L,UAAW/Z,EAAQ,QACnB8I,SAAU0xB,EAAUt4B,SAEnBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAIftB,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ4yM,EACRpyM,QAASsyM,EACTl9L,KAAM/b,EAAK,iCACX8oC,aAAa,SACbC,eAAgBmwK,EAChBlwK,sBAAoB,WCrG5B,IAAe3pC,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IACxBiiC,KAAMrB,EAAW+pD,aAAc+tE,GAAqBxsJ,EAAOxT,MAC7D6xF,GAAUtjC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,IAASuqF,QAGpD,MAAO,CACLA,UACA3pD,YACA83H,mBACAnpI,UANgB7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MALxBT,EA7DgDojM,EAClEzuK,YACA83H,mBACAnuE,UACAh7D,YACAiwK,iBACA6C,qBACAzlM,UACApH,gBAEA2xB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAM8tF,GAAYh0F,EAAAA,EAAAA,KAAQ,KACxB,GAAK6zF,GAAY3pD,EAIjB,OAAOiqD,EAAAA,EAAAA,IACLN,EAAQ/wD,QAAQ0lF,IAAYA,EAAO6jF,UAAS7qM,KAAI,EAAGwhC,YAAaA,IAChEkH,EACA83H,KAED,CAACnuE,EAAS3pD,EAAW83H,IAElBo1C,GAA6BtyM,EAAAA,EAAAA,KAAa4xM,IAC9C/K,EAAmB+K,GACnB5N,EAAeiB,EAAAA,GAAkBsN,wBAChC,CAAC1L,EAAoB7C,IAExB,OACExmM,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAYwC,UACzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAewC,UAC5Be,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAAU8qK,eAAa,EAAAtoK,SACnCyyF,EACCA,EAAUxyF,KAAI,CAACuD,EAAI0kD,KACjBnnD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAEP+wK,cAAejuH,EACf1qD,UAAU,kCAEVK,QAASA,IAAMg4M,EAA2BryM,GAAIxD,UAE9Ce,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CAACnjB,OAAQj+B,EAAIwE,eAAa,KANrCxE,MAUTzC,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CACXoiD,cAAe,EAEfp8J,KAAMud,EAAY,uBAAyB,oBADvC,2BCzDZ+/K,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACNhiJ,IAAK,MACLiiJ,KAAM,QAEFC,GAA6BH,GAAoBC,KA+OvD,IAAel6M,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,cAAE2vM,IAAkBrjM,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WAAWzyE,SAASprH,IAAW,CAAC,EAEjF,MAAO,CACL2vM,mBALc1jM,EAlO4B2jM,EAC9C5vM,SACA2vM,gBACAn6M,WACAoH,UACA4iM,qBAEA,MAAM,uBAAEqQ,EAAsB,iBAAEC,IAAqBzwM,EAAAA,EAAAA,MAE/CpJ,GAAOD,EAAAA,EAAAA,MACN62F,EAAkBC,EAAcC,IAAiBz2F,EAAAA,EAAAA,MACjDm5G,EAAiBsgG,IAAsBtlM,EAAAA,EAAAA,KAAS,IAChDtN,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAAS,KAC5BkjF,EAAkBC,IAAuBnjF,EAAAA,EAAAA,IAAiB6d,KAAKC,MAAQmnL,KACvEM,EAAsBC,IAA2BxlM,EAAAA,EAAAA,IAAS,cAC1DylM,EAAkBC,IAAuB1lM,EAAAA,EAAAA,IAA6B,KACtE2lM,EAAqBC,IAA0B5lM,EAAAA,EAAAA,IAAS,MACxD6lM,EAAiBC,IAAsB9lM,EAAAA,EAAAA,KAAS,IAEvD0c,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVuL,EAAAA,EAAAA,IAAc,EAAEqoM,MACd,GAAIA,IAAqBb,EACzB,GAAKA,EAOE,CACL,MACExyM,MAAOszM,EAAY,WAAEC,EAAU,WAAEvsK,EAAYsrE,gBAAiBkhG,GAC5DhB,EAMJ,GALIc,GAAc72C,EAAS62C,GACvBC,IACFL,EAAuBf,GAAqBvjL,SAAS2kL,GAAcA,EAAWlxH,WAAa,UAC3F2wH,EAAoBO,IAElBvsK,EAAY,CACd,MAAMysK,GAAc9yK,EAAAA,GAAAA,MAAkB4xK,GACtCO,EAAwB,UACxBriH,EAAwD,IAApCl2F,KAAKZ,IAAIqtC,EAAYysK,GAC3C,CACID,GACFZ,GAAmB,EAEvB,MAvBEn2C,EAAS,IACTq2C,EAAwB,aACxBI,EAAuB,KACvBziH,EAAsC,KAAlB9vD,EAAAA,GAAAA,MAAyB4xK,IAC7CS,EAAoB,IACpBJ,GAAmB,KAmBpB,CAACJ,IAEJ,MAAMkB,GAAwBr1M,EAAAA,EAAAA,KAAamC,IACzCoyM,EAAmBpyM,EAAEqN,OAAOs5B,WAC3B,IAEG61H,GAAoB3+J,EAAAA,EAAAA,KAAamC,IACrCi8J,EAASj8J,EAAEqN,OAAOnL,SACjB,IAEGixM,GAA+Bt1M,EAAAA,EAAAA,KAAamC,IAChDwyM,EAAoB1uL,OAAOsvL,SAASpzM,EAAEqN,OAAOnL,MAAO,OACnD,IAEGyxF,GAAyB91F,EAAAA,EAAAA,KAAawzB,IAC1C4+D,EAAoB5+D,EAAK+gC,WACzBg9B,MACC,CAACA,IAEEikH,GAAkBx1M,EAAAA,EAAAA,KAAY,KAClC+0M,GAAmB,GACnB,MAAMG,EAAqC,WAAxBN,EAAmCF,EAAmBzuL,OAAO2uL,GAChF,IAAIjsK,EACJ,OAAQ6rK,GACN,IAAK,SACH7rK,GAAarG,EAAAA,GAAAA,OAAmB6vD,EAAmBrlE,KAAKC,OAAS,IACjE,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACH4b,GAAarG,EAAAA,GAAAA,MAAkByxK,GAAoBS,GAAwB,IAC3E,MACF,IAAK,YACH7rK,EAAa,EACb,MACF,QACEA,OAAaxtC,EAGbg5M,EACFE,EAAuB,CACrB9qH,KAAM4qH,EAAc5qH,KACpB/kF,SACA7C,QACAsyG,kBACAtrE,aACAusK,eAGFZ,EAAiB,CACf9vM,SACA7C,QACAsyG,kBACAtrE,aACAusK,eAGJlR,EAAeiB,EAAAA,GAAkBS,WAChC,CACDlhM,EAAQ2tF,EAAkBuiH,EAAkBL,EAAwBF,EACpEG,EAAkBrgG,EAAiBugG,EAAsBI,EAAqBjzM,EAAOqiM,IAGvF,OACE1nM,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,0BAAyBwC,SAAA,EACtCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1Ce,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO3J,EAAK,qBACZmxF,SAAUnxF,EAAK,gCACfquC,QAASmrE,EACTrkG,SAAUylM,OAGd/4M,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7V,UAAU,YACVmwD,YAAa3vD,EAAK,gBAClB4J,MAAO1C,EACPiO,SAAU+uJ,KAEZnhK,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,oBAAmBwC,SAAEhC,EAAK,sBAEzC6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,SAAEhC,EAAK,oBACvC+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,gBACL5E,QAAS,CACP,CACEmK,MAAO,OACPD,MAAO3J,EAAK,QAAS,IAEvB,CACE4J,MAAO,MACPD,MAAO3J,EAAK,OAAQ,IAEtB,CACE4J,MAAO,OACPD,MAAO3J,EAAK,QAAS,IAEvB,CACE4J,MAAO,YACPD,MAAO3J,EAAK,YAEd,CACE4J,MAAO,SACPD,MAAO3J,EAAK,oCAGhBmV,SAAU6kM,EACV5kM,SAAU2kM,IAEc,WAAzBA,IACCl4M,EAAAA,GAAAA,IAACkC,EAAAA,EAAM,CAACvE,UAAU,eAAeyE,QAAM,EAACpE,QAASg3F,EAAa70F,SAAA,EAC3Dg5M,EAAAA,GAAAA,IAAeh7M,EAAM03F,GACrB,KACAz8B,EAAAA,GAAAA,IAAWj7D,EAAM03F,OAGtB30F,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,oBAAmBwC,SAAEhC,EAAK,uBAEvCw5G,IACA33G,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,SAAEhC,EAAK,wBACvC+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,eACL5E,QAAS,IACJ45M,GAAqBp3M,KAAKg5M,IAAC,CAAQrxM,MAAOqxM,EAAE1xH,WAAY5/E,MAAOsxM,MAClE,CACErxM,MAAO,IACPD,MAAO3J,EAAK,YAEd,CACE4J,MAAO,SACPD,MAAO3J,EAAK,mCAGhBmV,SAAUilM,EACVhlM,SAAU+kM,IAEa,WAAxBA,IACCp3M,EAAAA,GAAAA,GAAA,SACEvD,UAAU,2BACV+D,KAAK,SACL7B,IAAI,IACJb,IAAI,QACJ+I,MAAOqwM,EACP9kM,SAAU0lM,KAGd93M,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,oBAAmBwC,SAAEhC,EAAK,uBAG3C+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,SAAO,EACP5rC,QAASk7M,EACTnyM,SAAUyxM,EACVxgM,UAA2B7Z,EAAhB05M,EAAqB,WAAmB,cAAc13M,UAEjEe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,gBAGftB,EAAAA,GAAAA,GAACk1D,GAAa,CACZ9xD,OAAQywF,EACRv+B,cAAY,EACZE,gBAAc,EACd5xD,QAASmwF,EACTp+B,SAAU2iC,EACVnjC,WAAYw/B,EACZl/B,kBAAmBx4D,EAAK,iBC9FhC,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,WAAEovG,IAAe9iG,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WAAWzyE,SAASprH,IAAW,CAAC,GACxE,OAAEosG,EAAM,UAAE+kG,EAAS,WAAEC,GAAehiG,GAAc,CAAC,EACnD1iG,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAGhC,MAAO,CACLosG,SACA+kG,YACAC,aACA7hL,UANgB7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MALxBT,EAvIgColM,EAClDrxM,SACAosG,SACA+kG,YACAC,aACA7hL,YACA/5B,WACAoH,cAEA,MAAM,wBACJ00M,EAAuB,yBACvBC,EAAwB,SACxBnyM,IACEC,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,MACP,MACJw7M,EAAQ,EAAC,WAAEd,EAAU,KAAE3rH,EAAI,QAAE0sH,GAC3BrlG,GAAU,CAAC,EACTjoE,EAAaioE,GAAQjoE,YAAsD,KAAvCioE,EAAOjoE,YAAarG,EAAAA,GAAAA,OAA0BxV,KAAKC,MACvFo1B,GAAcyuD,GAAQjoE,YAAc,IAAKrG,EAAAA,GAAAA,MAAmB,EAwElE,OAtEAvnC,EAAAA,EAAAA,KAAU,KACJwuF,IACFusH,EAAwB,CAAEtxM,SAAQ+kF,SAClCwsH,EAAyB,CAAEvxM,SAAQ+kF,YAEpC,CAAC/kF,EAAQ+kF,EAAMusH,EAAyBC,KAE3CpqL,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KA8DR5D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EACxCm0G,IACApzG,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SAAEhC,EAAK,aAEnCm2G,IACCt0G,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACkyG,GAAAA,EAAS,CAAC/tG,MAAOivG,EAAOjvG,MAAO4nF,KAAMqnB,EAAOrnB,KAAMtvF,UAAU,gBAC5DqE,QAAQqqC,KACPnrC,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SACxB0lD,EACG1nD,EAAK,eACLA,EAAK,gBAAiB,IAAGg7M,EAAAA,GAAAA,IAAeh7M,EAAMkuC,OAAe+sB,EAAAA,GAAAA,IAAWj7D,EAAMkuC,WAIvFstK,IACC35M,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,kBAAiBwC,SAAEhC,EAAK,qBACrC+C,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,6CAEVK,QAASA,IAAMsJ,EAAS,CAAE3D,GAAIg2M,IAAWx5M,UAEzCe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQ+3K,EACRx1J,QAAQ/sB,EAAAA,GAAAA,IAAoBj5B,EAAoB,IAAdm2G,EAAOp9E,MAAa,GACtD/uB,eAAa,SAvFPyxM,MACtB,GAAKP,GAAWt5M,SAAUu5M,GAAYv5M,OACtC,OAAKs5M,GAEHr5M,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,kBAAiBwC,SAAEk5M,EAAUt5M,OAAS5B,EAAK,eAAgBu7M,GAASv7M,EAAK,kBACtF6B,EAAAA,GAAAA,IAAA,KAAGrC,UAAU,eAAcwC,SAAA,EACvBk5M,EAAUt5M,SACV64M,EAAaz6M,EAAK,4BAA6By6M,EAAac,GAASv7M,EAAK,mBAE3Ek7M,EAAUj5M,KAAKy5M,IACd,MAAMC,GAAW1iL,EAAAA,GAAAA,IAAoBj5B,EAAsB,IAAhB07M,EAAS3iL,MAAa,GAC3DitB,EAAS01J,EAASE,eAAiB,GAAGD,OAAsB37M,EAAK,qBAAuB27M,EAC9F,OACE54M,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,6CAEVK,QAASA,IAAMsJ,EAAS,CAAE3D,GAAIk2M,EAASj4K,SAAUzhC,UAEjDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQi4K,EAASj4K,OACjBuiB,OAAQA,EACRh8C,eAAa,gBApBJjH,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,KA0FtB8sL,GA5DcI,MACvB,IAAI1lG,GAAQg0F,UAAZ,CACA,IAAKgR,GAAcD,EAAW,OAAOn4M,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,IAC7C,GAAKwsL,GAAYv5M,OACjB,OACEC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,kBAAiBwC,SAAchC,EAAZs5B,EAAiB,oBAA4B,qBAC7Ev2B,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SACxBm5M,EAAWl5M,KAAK65M,IACf/4M,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP5H,UAAU,6CAEVK,QAASA,IAAMsJ,EAAS,CAAE3D,GAAIs2M,EAAUr4K,SAAUzhC,UAElDe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQq4K,EAAUr4K,OAClBuiB,QAAQ/sB,EAAAA,GAAAA,IAAoBj5B,EAAuB,IAAjB87M,EAAU/iL,MAAa,GACzD/uB,eAAa,YAhBc,GA4D9B6xM,eCrHPE,GAAS,IAEf,SAASC,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeb,MAAOc,EAAU,EAAGtjL,KAAMujL,GAAWL,GACjEE,YAAaI,EAAehB,MAAOiB,EAAU,EAAGzjL,KAAM0jL,GAAWP,EACzE,OAAIE,GAAiBG,EAAsB/wL,OAAO4wL,GAAiB5wL,OAAO+wL,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,CAClB,CAEA,MAoUA,IAAej9M,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM,QAAEy5H,EAAO,eAAEk5E,IAAmBrmM,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WAAWzyE,SAASprH,IAAW,CAAC,EACrF0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAGhC,MAAO,CACLs/L,gBAAiB7lE,EACjBm5E,uBAAwBD,EACxBjmM,OACA6iB,UANgB7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MAJxBT,EApU6B4mM,EAC/C7yM,SACA0M,OACA4yL,kBACAsT,yBACAp9M,WACA+5B,YACA3yB,UACA4iM,qBAEA,MAAM,yBACJsT,EAAwB,iBACxBr1K,EAAgB,uBAChBoyK,EAAsB,yBACtBkD,EAAwB,iCACxBC,EAAgC,oBAChCC,IACE5zM,EAAAA,EAAAA,MAEEpJ,GAAOC,EAAAA,GAAAA,KACPH,GAAUC,EAAAA,EAAAA,MAETk9M,EAA6BC,EAA2BC,IAA8B98M,EAAAA,EAAAA,MACtF+8M,EAAoBC,EAAkBC,IAAqBj9M,EAAAA,EAAAA,MAC3Dk9M,EAAgBC,IAAqBhpM,EAAAA,EAAAA,OACrCw1L,EAAoBC,EAAkBC,IAAqB7pM,EAAAA,EAAAA,MAC3Do9M,EAAgBC,IAAqBlpM,EAAAA,EAAAA,OAE5C0c,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMg3M,GAAuBl9M,EAAAA,EAAAA,KAAQ,KACnC,GAAK4oM,EACL,OAAOA,EACJr7F,MAAK,EAAG9/D,gBACPA,GAAeA,GAAarG,EAAAA,GAAAA,MAAkB+1K,GAAAA,GAAsB,QAEvE,CAACvU,IACEt2L,GAAcC,EAAAA,EAAAA,MACpBooE,EAAAA,GAAAA,GAAYroE,EAAa4qM,EAAuB,SAAOj9M,GAEvD,MAAMm9M,GAAmBp9M,EAAAA,EAAAA,KAAQ,IAAMgW,IAAQ6gJ,EAAAA,EAAAA,IAAgB7gJ,IAAO,CAACA,IACjEqnM,EAAgBzU,GAAiB9mM,MAAK,EAAG45M,iBAAkBA,IAC3D4B,EAAoBF,EAAmB,GAAGvxI,EAAAA,MAAkBuxI,IAAqBC,GAAehvH,KAChGkvH,GAAkBv9M,EAAAA,EAAAA,KAAQ,KAC9B,MAAM+iI,EAAU/sH,GAAM+jC,YAAc6uJ,EAAkBA,GAAiB9lK,QAAO,EAAG44K,kBAAmBA,IACpG,OAAO34E,GAASp7E,KAAK4zJ,MACpB,CAACvlM,GAAM+jC,YAAa6uJ,IAOjB4U,GAAe14M,EAAAA,EAAAA,KAAa4wG,IAChC,MAAM,KACJrnB,EAAI,MAAE5nF,EAAK,gBAAEsyG,EAAe,WAAEtrE,EAAU,WAAEusK,GACxCtkG,EACJyjG,EAAuB,CACrB7vM,SACA+kF,OACA5nF,QACAsyG,kBACAtrE,aACAusK,aACAtQ,WAAW,MAEZ,CAACpgM,EAAQ6vM,IAENsE,GAAc34M,EAAAA,EAAAA,KAAa4wG,IAC/BqnG,EAAkBrnG,GAClBknG,MACC,CAACA,IAEE50E,GAAeljI,EAAAA,EAAAA,KAAY,KAC1Bg4M,IACLU,EAAaV,GACbC,OAAkB98M,GAClB48M,OACC,CAACA,EAAmBW,EAAcV,IAE/BY,GAAuB54M,EAAAA,EAAAA,KAAY,KACvCgkM,EAAeiB,EAAAA,GAAkB4T,cAChC,CAAC7U,IAEE8U,GAAsB94M,EAAAA,EAAAA,KAAY,KAClCu4M,GACFI,EAAYJ,KAEb,CAACI,EAAaJ,IAEXQ,GAAyB/4M,EAAAA,EAAAA,KAAY,KACzCw3M,EAAiC,CAAEhzM,WACnCozM,MACC,CAACpzM,EAAQozM,EAA4BJ,IAElCwB,GAAiBh5M,EAAAA,EAAAA,KAAa4wG,IAClC6mG,EAAoB,CAAEjzM,SAAQosG,WAC9BozF,EAAeiB,EAAAA,GAAkBgU,cAChC,CAACz0M,EAAQw/L,EAAgByT,IAEtByB,GAAel5M,EAAAA,EAAAA,KAAa4wG,IAChC2mG,EAAyB,CAAE/yM,SAAQ+kF,KAAMqnB,EAAOrnB,SAC/C,CAAC/kF,EAAQ+yM,IAEN4B,GAAcn5M,EAAAA,EAAAA,KAAa4wG,IAC/BunG,EAAkBvnG,GAClB8zF,MACC,CAACA,IAEE97E,GAAe5oH,EAAAA,EAAAA,KAAY,KAC1Bk4M,IACLgB,EAAahB,GACbC,OAAkBh9M,GAClBwpM,OACC,CAACA,EAAmBuU,EAAchB,IAE/BkB,IAAWp5M,EAAAA,EAAAA,KAAaupF,KAC5BylC,EAAAA,GAAAA,IAAoBzlC,GACpBtnD,EAAiB,CACft8B,QAASpL,EAAQ,kBAElB,CAACA,EAAS0nC,IAEPo3K,GAAoBzoG,IACxB,MAAM,MACJolG,EAAQ,EAAC,WAAEd,EAAU,WAAEvsK,EAAU,YAAEiuK,EAAW,UAAE0C,EAAS,UAAE1U,GACzDh0F,EACJ,IAAIp6F,EAAO,GASX,GAPEA,GADGouL,GAAasQ,GAAcc,EAAQd,EAC/B36M,EAAQ,UAAW26M,EAAac,GAC9BA,EACFz7M,EAAQ,eAAgBy7M,GAExBz7M,EAAQ,eAGbqqM,EAEF,OADApuL,GAAQ,IAAIggM,MAAUj8M,EAAQ,aACvBic,EAOT,GAJI8iM,IACF9iM,GAAQ,IAAIggM,MAAUj8M,EAAQ,eAAgB++M,WAG7Bn+M,IAAf+5M,GAA4Bc,IAAUd,EACxC1+L,GAAQ,IAAIggM,MAAUj8M,EAAQ,2BACzB,GAAIouC,EAAY,CACrB,MAAM0Q,EAAO1Q,GAAarG,EAAAA,GAAAA,MAC1B9rB,GAAQ,IAAIggM,MAEVhgM,GADE6iC,EAAO,EACD9+C,EAAQ,wBAAwBg/M,EAAAA,GAAAA,IAAgB9+M,EAAM4+C,IAEtD9+C,EAAQ,qBAEpB,MAAWq8M,IACTpgM,GAAQ,IAAIggM,MAAUj8M,EAAQ,gBAGhC,OAAOic,GAGHgjM,GAAsB5oG,IAC1B,MAAM,MACJolG,EAAQ,EAAC,WAAEd,EAAU,UAAEtQ,EAAS,WAAEj8J,GAChCioE,EACJ,OAAIg0F,EACK,wBAELsQ,GAAcc,EAAQd,EACjB,yBAELvsK,GAC4C,KAAhCA,GAAarG,EAAAA,GAAAA,QACf,EACH,uBAGJ,yBAGHm3K,GAAyB7oG,IAC7B,MAAMxqE,EAAmC,GA8BzC,OA7BAA,EAAQpqC,KAAK,CACX2F,MAAOpH,EAAQ,QACfmH,KAAM,OACN2+C,QAASA,IAAM+4J,GAASxoG,EAAOrnB,QAG5BqnB,EAAOgmG,aAAgBhmG,EAAOg0F,WACjCx+J,EAAQpqC,KAAK,CACX2F,MAAOpH,EAAQ,QACfmH,KAAM,OACN2+C,QAASA,IAjJKuwD,KAClB0mG,EAAyB,CAAE9yM,SAAQosG,WACnCozF,EAAeiB,EAAAA,GAAkB4T,aA+Ida,CAAW9oG,KAIzBA,EAAOg0F,UAQVx+J,EAAQpqC,KAAK,CACX2F,MAAOpH,EAAQ,cACfmH,KAAM,SACN2+C,QAASA,IAAM84J,EAAYvoG,GAC3B57F,aAAa,IAXfoxB,EAAQpqC,KAAK,CACX2F,MAAOpH,EAAQ,gBACfmH,KAAM,SACN2+C,QAASA,IAAMs4J,EAAY/nG,GAC3B57F,aAAa,IAUVoxB,GAGT,OACE9pC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA0BwC,SAAA,EACvCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAes5M,OACvB17M,KAAM27M,EAAAA,IACN3/M,UAAU,kBAEZuD,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SAAclC,EAAZw5B,EAAoB,yBAAoC,wBAEtFykL,IACCh7M,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBe,EAAAA,GAAAA,GAACkyG,GAAAA,EAAS,CACRz1G,UAAU,iBACVsvF,KAAMivH,EACN30E,WAAS,EACTC,SAAW5yH,GAAMqiI,eAAkCp4I,EAAtB29M,EAC7Bn3M,MAAyBpH,EAAlB2W,GAAMqiI,UAAoB,aAAwB,wCAI/Dj3I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAU8qK,eAAa,EAAAtoK,SAAA,EACpCe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,MAAM+qM,kBAAgB,EAAcxyM,UAAU,cAAcK,QAASs+M,EAAqBn8M,SACtGlC,EAAQ,kBAD+B,YAGvCk+M,IAAoBA,EAAgBp8M,UAAWmB,EAAAA,GAAAA,GAACgzH,GAAAA,EAAY,CAACh6G,KAAK,kBAAqB,WACzFiiM,GAAiB/7M,KAAKk0G,IACrBt0G,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UAAW,oBAAoBu/M,GAAmB5oG,OACjFuI,cAAc,OACdp3G,WAAS,EAETzH,QAASA,IAAM0+M,EAAepoG,GAC9B5wD,eAAgBy5J,GAAsB7oG,GAAQn0G,SAAA,EAG9Ce,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,qBAAoBwC,SAAEm0G,EAAOjvG,OAASivG,EAAOrnB,QAC7D/rF,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC48M,GAAiBzoG,OAJfA,EAAOrnB,SAQhB/rF,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,oBAAmBwC,SAAmBlC,EAAQ,wBAAtB,iBAEtC68M,GAA0B94M,QAAQ84M,EAAuB/6M,UACxDC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAU8qK,eAAa,EAAAtoK,SAAA,EACpCe,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SAAclC,EAAQ,iBAAjB,UAChCiD,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACPH,KAAK,SACLsT,aAAW,EAEX1a,QAASq9M,EAA0Bl7M,UAEnCe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAElC,EAAQ,4BAH7B,UAKL68M,GAAwB16M,KAAKk0G,IAC5Bt0G,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP+gC,aAAaplC,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,OAAO7E,UAAW,oBAAoBu/M,GAAmB5oG,OACjFuI,cAAc,OACdp3G,WAAS,EAETzH,QAASA,IAAM0+M,EAAepoG,GAC9B5wD,eAAgBy5J,GAAsB7oG,GAAQn0G,SAAA,EAG9Ce,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,QAAOwC,SAAEm0G,EAAOjvG,OAASivG,EAAOrnB,QAChD/rF,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,WAAWyD,IAAI,OAAMjB,SAClC48M,GAAiBzoG,OAJfA,EAAOrnB,eAWtB/rF,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ82M,EACRt2M,QAASw2M,EACTj2M,MAAOpH,EAAQ,yBACfic,KAAMjc,EAAQ,4BACdkpC,sBAAoB,EACpBF,aAAchpC,EAAQ,aACtBipC,eAAgBu1K,KAElBv7M,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQi3M,EACRz2M,QAAS22M,EACTp2M,MAAOpH,EAAQ,cACfic,KAAMjc,EAAQ,eACdkpC,sBAAoB,EACpBF,aAAchpC,EAAQ,gBACtBipC,eAAgB0/F,KAElB1lI,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6jM,EACRrjM,QAASujM,EACThjM,MAAOpH,EAAQ,cACfic,KAAMjc,EAAQ,kBACdkpC,sBAAoB,EACpBF,aAAchpC,EAAQ,UACtBipC,eAAgBolF,WC1RxB,IAAe9uH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUwtB,aAGF,CACL2R,MAHWC,EAAAA,EAAAA,KAAWp/B,EAAQwtB,MAFhBztB,EA3D2BopM,EAC7C37K,SACA15B,SACAqvG,QACArgF,OACAO,YACA8b,WAEA,MAAM,SAAEjsC,EAAQ,oBAAEk2M,IAAwBj2M,EAAAA,EAAAA,MAEpCtH,GAAiBw9M,EAAAA,GAAAA,GAAuB,eACxCt/M,GAAOD,EAAAA,EAAAA,KAEP4lD,GAAW3W,EAAAA,EAAAA,IAAgBoG,GAC3BmqK,EAAuC,KAA1BxmL,GAAO8O,EAAAA,GAAAA,OAA0BxV,KAAKC,MAEnDktL,GAAaC,EAAAA,GAAAA,IAAQ,IAAIptL,KAAKktL,KAChCtkJ,EAAAA,GAAAA,IAAWj7D,EAAMu/M,IAAaG,EAAAA,GAAAA,IAAgB1/M,EAAMu/M,GAAW,GAAM,GAAO,GAM1EI,GAAsBp6M,EAAAA,EAAAA,KAAY,KACtC85M,EAAoB,CAAEt1M,SAAQ05B,SAAQm8K,YAAY,MACjD,CAAC71M,EAAQs1M,EAAqB57K,IAE3Bo8K,GAAsBt6M,EAAAA,EAAAA,KAAY,KACtC85M,EAAoB,CAAEt1M,SAAQ05B,SAAQm8K,YAAY,MACjD,CAAC71M,EAAQs1M,EAAqB57K,IAEjC,OACE5hC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWsC,EAAe,KAAKE,SAAA,EAClCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWsC,EAAe,OAAOE,SAAA,EACpCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWsC,EAAe,QAASjC,QAftBigN,KACtB32M,EAAS,CAAE3D,GAAIi+B,KAcsDzhC,SAAA,EAC/De,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CAELjG,KAAK,SACLkG,KAAM0rC,GAFD3R,IAIP5hC,EAAAA,GAAAA,IAAA,OAAKrC,UAAWsC,EAAe,aAAaE,SAAA,EAC1Ce,EAAAA,GAAAA,GAAA,OAAKvD,UAAWsC,EAAe,aAAaE,SAAE2jD,KAC9C5iD,EAAAA,GAAAA,GAAA,OAAKvD,UAAWsC,EAAe,iBAAiBE,SAAEo3G,WAGtDr2G,EAAAA,GAAAA,GAAA,OAAKvD,UAAWsC,EAAe,QAAQE,SAAEw9M,QAE3C39M,EAAAA,GAAAA,IAAA,OAAKrC,UAAWsC,EAAe,WAAWE,SAAA,EACxCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAWsC,EAAe,UAAWjC,QAAS8/M,EAAoB39M,SAC3DhC,EAAZs5B,EAAiB,sBAA8B,wBAElDv2B,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAWsC,EAAe,UAAWmC,QAAM,EAACpE,QAASggN,EAAoB79M,SAC9EhC,EAAK,8BC0ChB,IAAeX,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAEhC,MAAO,CACL0M,OACA6iB,UAAW7iB,IAAQ8iB,EAAAA,EAAAA,IAAc9iB,MANnBT,EA7FkC+pM,EACpDtpM,OACA1M,SACAxK,WACA+5B,YACA3yB,cAEA,MAAM,wBAAEq5M,EAAuB,qBAAEnW,IAAyBzgM,EAAAA,EAAAA,OACnD62M,EAAuBC,EAAqBC,IAAwB9/M,EAAAA,EAAAA,MACpE+/M,EAAuBC,EAAqBC,IAAwBjgN,EAAAA,EAAAA,KAErEL,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,KAGVrG,EAAAA,EAAAA,KAAU,KACHmW,GAAMy1L,eAAiBn2L,EAAAA,EAAAA,IAAShM,IACnC8/L,EAAqB,CAAE9/L,aAExB,CAAC0M,EAAM1M,EAAQ8/L,IAElB,MAAM0W,GAA0Bh7M,EAAAA,EAAAA,KAAY,KAC1Cy6M,EAAwB,CAAEj2M,SAAQ61M,YAAY,IAC9CO,MACC,CAACH,EAAyBj2M,EAAQo2M,IAE/BK,GAA0Bj7M,EAAAA,EAAAA,KAAY,KAC1Cy6M,EAAwB,CAAEj2M,SAAQ61M,YAAY,IAC9CU,MACC,CAACN,EAAyBj2M,EAAQu2M,IAErC,OACEz+M,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gCAA+BwC,SAAA,EAC5CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtBxgG,OAAQC,GAAAA,EAAew5M,YACvB57M,KAAMi9M,EAAAA,IACNjhN,UAAU,iBAEXqE,QAAQ4S,GAAMy1L,cAActqM,UAC3BC,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,eAAcwC,SAAA,EAC3Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,qBAAqBK,QAASqgN,EAAoBl+M,SAAC,gBACrEe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,qBAAqBK,QAASwgN,EAAqBp8M,QAAM,EAAAjC,SAAC,uBAIlFH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAAU8qK,eAAa,EAAAtoK,SAAA,EACpCe,EAAAA,GAAAA,GAAA,KAAAf,SACIyU,GAAMy1L,aAAiCz1L,EAAKy1L,aAAatqM,OACvD5B,EAAK,eAAgByW,EAAKy1L,aAAatqM,QAAU5B,EAAK,oBADnCA,EAAK,YADvB,UAILyW,GAAMy1L,eACNnpM,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,GAAK,WAEiB,IAA/BlY,GAAMy1L,cAActqM,SACnBmB,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAcwC,SACZhC,EAAZs5B,EAAiB,iCAAyC,gCAD7B,SAIjC7iB,GAAMy1L,cAAcjqM,KAAI,EAAGwhC,SAAQ21E,QAAOrgF,WACzCh2B,EAAAA,GAAAA,GAACq8M,GAAW,CACV37K,OAAQA,EACR21E,MAAOA,EACPrgF,KAAMA,EACNO,UAAWA,EACXvvB,OAAQA,GACH05B,YAKb1gC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ85M,EACRt5M,QAASw5M,EACTj5M,MAAM,uBACN6U,KAAK,gDACLgtB,eAAgBw3K,KAElBx9M,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQi6M,EACRz5M,QAAS25M,EACTp5M,MAAM,uBACN6U,KAAK,gDACLgtB,eAAgBy3K,WCsJxB,IAAenhN,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MAAM0M,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,IAC1B,mBAAEoxK,EAAqBulC,EAAAA,KAAyBzqM,EAAOk/B,WAAa,CAAC,EAErE4b,GAAeC,EAAAA,EAAAA,KAAmB/6C,EAAQlM,GAC1CsxK,EAAiBtqH,GAAcsqH,gBAAkBF,EACjD7hJ,GAAYC,EAAAA,EAAAA,IAAc9iB,GAEhC,MAAO,CACL2kK,iBAAkBrqH,GAAcqqH,iBAChCt2H,mBAAoB7uC,EAAO8uC,UAAUD,mBACrCruC,OACA0kK,qBACAE,iBACA/hJ,gBAGJ,CAACrjB,GAAUlM,YACFlG,SAAQyxC,EAAAA,EAAAA,KAAWr/B,EAAQlM,KAnBlBiM,EAlO+B2qM,EACjD77J,qBACAs2H,mBACA3kK,OACAlX,WACAoH,UACAw0K,qBACAE,iBACA/hJ,gBAEA,MAAM,wBAAEsnL,IAA4Bx3M,EAAAA,EAAAA,MAE9BpJ,GAAOD,EAAAA,EAAAA,MACNkiI,EAAWC,IAAgB1tH,EAAAA,EAAAA,KAAS,IACpC8lB,EAAWkpF,IAAgBhvG,EAAAA,EAAAA,KAAS,IACpCqsM,EAAuBC,IAA4BtsM,EAAAA,EAAAA,IAAuC4mK,IAE1F2lC,EAAqBC,IAA0BxsM,EAAAA,EAAAA,IAAS6mK,IAE/DnqJ,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMs6M,GAAmBxgN,EAAAA,EAAAA,KAAQ,IAAM,CAAC,CACtCmJ,MAAO,MACPD,MAAO3J,EAAK,iBACX,CACD4J,MAAO,OACPD,MAAO3J,EAAK,kBACX,CACD4J,MAAO,OACPD,MAAO3J,EAAK,kBACV,CAACA,IAECkhN,GAAsB37M,EAAAA,EAAAA,KAAY,KACjCkR,IACL+sG,GAAa,GAEbo9F,EAAwB,CACtB72M,OAAQ0M,EAAKjR,GACb41K,iBAAkBylC,EAClBxlC,eAAgB0lC,OAEjB,CAACtqM,EAAMoqM,EAAuBD,EAAyBG,KAE1DzgN,EAAAA,EAAAA,KAAU,KACRkjH,GAAa,GACb0e,GAAa,GACb4+E,EAAyB1lC,GACzB4lC,EAAuB3lC,KACtB,CAACD,EAAkBC,IAEtB,MAAM8lC,GAA2B1gN,EAAAA,EAAAA,KAC/B,IAAMqkD,GAAoBvhB,QAAO,EAAG4qE,iBAAkBA,KACtD,CAACrpD,KAGHxkD,EAAAA,EAAAA,KAAU,KACR,QAA4BI,IAAxBqgN,GAAqCA,IAAwB1lC,EAAjE,CAKA,GAAoC,SAAhCwlC,GAAuBt9M,MAC8B,QAA3B63K,GAAkB73K,MAA6C,SAA3B63K,GAAkB73K,MAEd,IAAzCs9M,EAAsBhlC,QAAQj6K,OAEvD,YADAsgI,GAAa,GAKjB,GAAI2+E,GAAuBt9M,OAAS63K,GAAkB73K,KAAtD,CAKA,GAAoC,SAAhCs9M,GAAuBt9M,MAA8C,SAA3B63K,GAAkB73K,KAAiB,CAC/E,MAAM69M,EAAwBP,EAAsBhlC,QAC9CwlC,EAA0BjmC,GAAkBS,QAElD,GAAIulC,EAAsBx/M,SAAWy/M,EAAwBz/M,QACxDw/M,EAAsBt8H,UAAUkpB,MAChCszG,IAAmBD,EAAwB9+M,MACzCg/M,IAAoB/tK,EAAAA,EAAAA,IAAe8tK,EAAeC,OAIvD,YADAr/E,GAAa,EAGjB,CAEAA,GAAa,EAjBb,MAFEA,GAAa,EAZf,MAFEA,GAAa,KAkCd,CACD6+E,EACA1lC,EACAwlC,EACAzlC,IAGF,MAAMomC,GAA8Bj8M,EAAAA,EAAAA,KAAaqE,IACjC,QAAVA,GACFk3M,EAAyB,CAAEv9M,KAAM,QACjCy9M,EAAuB3lC,IACJ,SAAVzxK,GACTk3M,EAAyB,CACvBv9M,KAAM,OACNs4K,QAAoC,SAA3BT,GAAkB73K,KAAkB63K,EAAiBS,QAAU,KAE1EmlC,EAAuB3lC,KAEvBylC,OAAyBpgN,GACzBsgN,OAAuBtgN,MAExB,CAAC06K,EAAkBC,IAEhBomC,GAAuBl8M,EAAAA,EAAAA,KAAamC,IACxC,IAAK+O,IAAS0qM,EAA0B,OAExC,MAAM,KAAE98M,EAAI,QAAEgqC,GAAY3mC,EAAEkjB,cAC5B,GAAoC,SAAhCi2L,GAAuBt9M,KAAiB,CAC1C,MAAM6wC,EAAW,CAAE4oH,SAAU34J,GAE3By8M,EADEzyK,EACuB,CACvB9qC,KAAM,OACNs4K,QAAS,IAAIglC,EAAsBhlC,QAASznI,IAGrB,CACvB7wC,KAAM,OACNs4K,QAASglC,EAAsBhlC,QAAQt4I,QAAQm+K,KAAWluK,EAAAA,EAAAA,IAAekuK,EAAOttK,MAGtF,IACC,CAAC+sK,EAA0B1qM,EAAMoqM,IAE9Bc,GAA6Bp8M,EAAAA,EAAAA,KAAaqE,IAC9Co3M,EAAuBp3M,KACtB,IAEGg4M,GAA+Br8M,EAAAA,EAAAA,KAAaqE,GACzC5J,EAAK,0CAA2C4J,IACtD,CAAC5J,IAEE6hN,EAA2BvoL,IACK,QAAhCunL,GAAuBt9M,MAAkD,SAAhCs9M,GAAuBt9M,MAEtE,OACE1B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,8BAA6BwC,SAAA,CACzC6B,QAAQk9M,GAAuBc,KAC9BhgN,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAC5BhC,EAAK,6BAER+C,EAAAA,GAAAA,GAACmjB,GAAAA,EAAW,CACVxkB,IAAK,EACLb,IAAKs6K,EACLvxK,MAAOm3M,EACP5rM,SAAUwsM,EACV/pE,YAAagqE,EACbE,kBAAgB,KAElB/+M,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,iCAAgCwC,SAC1ChC,EAAK,wCAIZ6B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAC5BhC,EAAK,yBAER+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACTE,SAAUyrM,GAAuBt9M,MAAQ,OACzCc,KAAK,YACL5E,QAASwhN,EACT9rM,SAAUqsM,KAEZ3/M,EAAAA,GAAAA,IAAA,KAAGrC,UAAU,iCAAgCwC,SAAA,CACV,QAAhC6+M,GAAuBt9M,MAAkBvD,EAAK,0BACd,SAAhC6gN,GAAuBt9M,MAAmBvD,EAAK,4BAC9C6gN,GAAyB7gN,EAAK,8BAGH,SAAhC6gN,GAAuBt9M,OACtB1B,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,2BAA0BwC,SAAA,EACvCe,EAAAA,GAAAA,GAAA,MAAIvD,UAAU,kBAAiBwC,SAC5BhC,EAAK,4BAEPmhN,GAA0Bl/M,KAAI,EAAGmyC,WAAUltC,YAC1CnE,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1yD,KAAM+vC,EAAS4oH,SACf3uH,QAASwyK,GAAuBhlC,QAAQ7tE,MAAMtxB,IAAMlpC,EAAAA,EAAAA,IAAeY,EAAUsoC,KAC7E/yE,OACE9H,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,WAAUwC,SAAA,EACvBe,EAAAA,GAAAA,GAACujD,GAAAA,EAAmB,CAAClS,SAAUA,EAAU0Q,mBAAoBA,IAC5D59C,KAGL+uG,UAAQ,EACR9gG,SAAUssM,eAQtB1+M,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASw2F,EACTpiI,QAASqhN,EACTrnM,UAAW7Z,EAAK,QAChB4I,SAAU0xB,EAAUt4B,SAEnBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,mBClNfo3I,GAA2B,4BA+OjC,IAAep8I,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUwtB,aACT,MAAM2R,GAAOC,EAAAA,EAAAA,KAAWp/B,EAAQwtB,GAC1BhtB,GAAO6+B,EAAAA,EAAAA,KAAWr/B,EAAQwtB,GAC1B8R,GAAeC,EAAAA,EAAAA,KAAmBv/B,EAAQwtB,IAC1C,SAAE5oB,IAAaxE,EAAAA,EAAAA,KAAeJ,GAAQ2xL,WACtCljL,EAAUjO,IAAQmgH,EAAAA,GAAAA,IAAengH,GAAMogH,EAAAA,EAAAA,KAAqB5gH,IAAS6gH,EAAAA,EAAAA,KAAsB7gH,EAAQQ,EAAKjR,KACxGszB,EAAgByc,GAAczc,cAGpC,MAAO,CACLsc,OAAMv6B,WAAU6J,UAASoU,gBAAeipL,iBAHjBxsK,GAAcmgH,cAAgBngH,GAAc3c,iBARrD5iB,EA7O0BgsM,EAC5Cv+K,SACA2R,OACAv6B,WACA6J,UACA/d,UACApH,WACAu5B,gBACAipL,uBAEA,MAAM,cACJrlJ,EAAa,cACbtX,EAAa,gBACbqkJ,EAAe,0BACf1B,IACE3+L,EAAAA,EAAAA,OAEG4gM,EAAoBC,EAAkBC,IAAqB7pM,EAAAA,EAAAA,MAC3D4hN,EAAgCC,EAA8BC,IAAiC9hN,EAAAA,EAAAA,MAC/Fq8I,EAAwBC,IAA6BnoI,EAAAA,EAAAA,KAAS,IAC9D2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,MACpBxU,GAAOD,EAAAA,EAAAA,MAEbmxB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAMk1I,EAAmBzmG,GAAQA,EAAK4nB,WAAmB,GACnD8+E,EAAkB1mG,GAAQA,EAAK8nB,UAAkB,IAEhDF,EAAWC,IAAgBzoD,EAAAA,EAAAA,IAASqnI,IACpC3+E,EAAUC,IAAe3oD,EAAAA,EAAAA,IAASsnI,IAClCsmE,EAAwBC,IAA6B7tM,EAAAA,EAAAA,KAAUkQ,IAEtEpkB,EAAAA,EAAAA,KAAU,KACR+hN,GAA2B39L,KAC1B,CAACA,KAEJpkB,EAAAA,EAAAA,KAAU,KACRq8I,GAA0B,GAC1ButD,MACC,CAACA,EAAmBzmK,KAEvBnjC,EAAAA,EAAAA,KAAU,KACR28D,EAAa4+E,GACb1+E,EAAY2+E,KACX,CAACD,EAAkBC,EAAiB1mG,KAEvC90C,EAAAA,EAAAA,KAAU,KACJua,IAAa4tL,EAAAA,GAAmBlrD,WAClCZ,GAA0B,GAC1BC,OAASl8I,GACTwpM,OAED,CAACA,EAAmBrvL,IAEvB,MAAM8iD,GAAwBp4D,EAAAA,EAAAA,KAAamC,IACzCu1D,EAAav1D,EAAEqN,OAAOnL,OACtB+yI,GAA0B,GAEtBxpF,IAAUsoF,IACZmB,OAASl8I,KAEV,CAACyyD,IAEE2K,GAAuBv4D,EAAAA,EAAAA,KAAamC,IACxCy1D,EAAYz1D,EAAEqN,OAAOnL,OACrB+yI,GAA0B,KACzB,IAEG2lE,GAA2B/8M,EAAAA,EAAAA,KAAamC,IAC5C26M,EAA0B36M,EAAEqN,OAAOs5B,SACnCsuG,GAA0B,KACzB,IAEGgB,GAAoBp4I,EAAAA,EAAAA,KAAY,KACpC,MAAMq4I,EAAmB5gF,EAAUgQ,OAC7B6wE,EAAkB3gF,EAAS8P,OAE5B4wE,EAAiBh8I,OAKtB86D,EAAc,CACZj5B,SACA/e,SAAU09L,EACVplJ,UAAW4gF,EACX1gF,SAAU2gF,IARVjB,EAASnB,MAUV,CAACz+E,EAAWE,EAAUR,EAAej5B,EAAQ2+K,IAE1CG,GAAsBh9M,EAAAA,EAAAA,KAAY,KACtC6/C,EAAc,CAAE3hB,WAChBymK,IACAT,MACC,CAACS,EAAmBT,EAAiBrkJ,EAAe3hB,IAEjDs5B,GAAW/qD,EAAAA,EAAAA,MACX+2L,GAAe/2L,EAAAA,EAAAA,KAAO,GAEtBwwM,GAAqBj9M,EAAAA,EAAAA,KAAY,KACrCw3D,EAAS5qD,SAASonJ,QAClBwvC,EAAa52L,SAAU,IACtB,IAEGswM,GAAyBl9M,EAAAA,EAAAA,KAAY,KACzCw3D,EAAS5qD,SAASonJ,QAClBwvC,EAAa52L,SAAU,IACtB,IAEGuwM,GAA4Bn9M,EAAAA,EAAAA,KAAY,KAC5C48M,IACAxlE,GAA0B,GAC1BorD,EAA0B,CAAEtkK,aAC3B,CAAC0+K,EAA+Bpa,EAA2BtkK,IAExDulK,GAAqBzjM,EAAAA,EAAAA,KAAa25I,IACtCvC,GAA0B,GAC1BorD,EAA0B,CAAEtkK,SAAQy7G,OAAM+pD,UAAWF,EAAa52L,YACjE,CAAC41L,EAA2BtkK,IAE/B,IAAK2R,EACH,OAGF,MAAMutK,IAAuB5tH,EAAAA,EAAAA,IAAU3/C,IAASA,EAAK5vC,KAAO82J,EAAAA,IACtDhiI,EAAYzf,IAAa4tL,EAAAA,GAAmBtrD,WAElD,OACEt7I,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,aAAYwC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAAC6jD,GAAAA,EAAe,CACdnjB,OAAQ2R,EAAK5vC,GACb6rH,WAAW,QACXvqE,kBAAgB,EAChB87J,eAAa,EACbC,cAAY,KAEdhhN,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,gBAAewC,SAAA,EAC5Be,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,kBACHmE,MAAO3J,EAAK,iCACZmV,SAAUwoD,EACV/zD,MAAOozD,EACP7J,MAAOA,IAAUsoF,GAA2BtoF,OAAQzyD,KAEtDqC,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR7P,GAAG,iBACHmE,MAAO3J,EAAK,gCACZmV,SAAU2oD,EACVl0D,MAAOszD,QAGXn6D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,kBAAiBwC,UAC9Be,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACP1oB,QAAS+zK,EACTz4M,MAAO3J,EAAK,iBACZmxF,SAAUnxF,EAAKoiN,EACX,gCACA,kCACJjtM,SAAUmtM,SAIfK,IACC9gN,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,aAAagf,QAAM,EAACpmB,QAAS2iN,EAAmBxgN,UAC7De,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,qBAAoBwC,SAAEhC,EAAK,wBAAyBo1C,EAAK4nB,gBAE3Ej6D,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,aAAagf,QAAM,EAACpmB,QAAS4iN,EAAuBzgN,UACjEe,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,qBAAoBwC,SAAEhC,EAAK,0BAA2Bo1C,EAAK4nB,eAE5ElkC,IACC/1B,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CACP+gC,aACEplC,EAAAA,GAAAA,GAAC0G,GAAAA,EAAM,CACLoB,MAAOk3M,EACPe,iBAAe,EACfp5M,KAAM0rC,EACN5xC,KAAK,OACLhE,UAAU,mBAGdymB,QAAM,EACNpmB,QAASqiN,EAA6BlgN,SAErChC,EAAK,gCAGV+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,eAAeyD,IAAI,OAAMjB,SAAEhC,EAAK,2BAA4Bo1C,EAAK4nB,iBAGlFj6D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,UAASwC,UACtBe,EAAAA,GAAAA,GAACqE,GAAAA,EAAQ,CAACH,KAAK,SAASgf,QAAM,EAAC1L,aAAW,EAAC1a,QAASoqM,EAAiBjoM,SAClEhC,EAAK,yBAIZ+C,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAASixG,EACT78I,QAAS89I,EACT/0I,SAAU0xB,EACVzgB,UAAW7Z,EAAK,QAAQgC,SAEvBs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAGftB,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ6jM,EACRrjM,QAASujM,EACTnuL,KAAM/b,EAAK,2BACX8oC,aAAc9oC,EAAK,iBACnB+oC,eAAgBw5K,EAChBv5K,sBAAoB,KAEtBjmC,EAAAA,GAAAA,GAAC8lC,GAAAA,EAAa,CACZ1iC,OAAQ87M,EACRt7M,QAASw7M,EACTpmM,KAAM/b,EAAK,oCAAqCo1C,EAAK4nB,WACrDl0B,aAAc9oC,EAAK,SACnB+oC,eAAgB25K,EAChB15K,sBAAoB,KAEtBjmC,EAAAA,GAAAA,GAACy2J,GAAAA,EAAY,CACXrkJ,SAAU6zL,EACVjsI,SAAUA,WC9JlB,IAAe19D,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUlM,aACT,MACE8Q,SAAUuoJ,EACVjwG,MAAOkwG,IACLhtJ,EAAAA,EAAAA,KAAeJ,GAAQqtJ,cAAgB,CAAC,EAG5C,MAAO,CACL7sJ,MAHW6+B,EAAAA,EAAAA,KAAWr/B,EAAQlM,GAI9Bq5J,mBACAC,mBAXcrtJ,EA7FkC67L,EACpDp7L,OACA9P,UACApH,WACA6jK,mBACAC,oBAEA,MAAM,cAAEK,IAAkBt6J,EAAAA,EAAAA,MACpBpJ,GAAOC,EAAAA,GAAAA,MAEbixB,EAAAA,GAAAA,GAAe,CACb3xB,WACA4xB,OAAQxqB,IAGV,MAAOO,EAAOy8J,IAAYnvJ,EAAAA,EAAAA,IAASxU,EAAK,yBAA0B,CAAEqE,KAAMoS,GAAMvP,UACzE2D,EAAOgyI,IAAYroI,EAAAA,EAAAA,OACnB2+C,EAAOypF,IAAYpoI,EAAAA,EAAAA,MAEpB8lB,EAAY8oI,IAAqBW,EAAAA,GAAqB5mB,WAEtD+mB,GAAoB56J,EAAAA,EAAAA,IAAiB5B,IACzC,MAAM,MAAEkC,GAAUlC,EAAEkjB,cACdowE,EAAWpxF,EAAMm5M,YAEvBp/C,EAAS3oE,GAELA,IAAapxF,IACflC,EAAEkjB,cAAchhB,MAAQoxF,MAItBqpE,EAAiBhB,GAAiBrjK,EAAK,4BAC3CmzD,IAAUnzD,EAAK,2BAA6BmzD,IAAUnzD,EAAK,6BACvDmzD,OACAzyD,GAGAyjK,GAAoB76J,EAAAA,EAAAA,IAAgB,KACnCpC,EAAMtF,OAIN6U,GAELitJ,EAAc,CACZs/C,oBAAqBvsM,EAAKjR,GAC1B0B,QACA2D,QACA87G,cAAc,IATdi2B,EAAS58I,EAAK,8BAalB,OACE+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,aAAYwC,UACzBe,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,8BAA6BwC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,UAASwC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,uBAAsBwC,SAAA,EACnCe,EAAAA,GAAAA,GAACg7I,GAAAA,EAAc,CACb5oI,SAAU0nI,EACV31I,MAAOlH,EAAK,eAEd+C,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACRzL,MAAO1C,EACPiO,SAAU+uJ,EACVv6J,MAAO3J,EAAK,aACZmzD,MAAOA,IAAUnzD,EAAK,2BACjBmzD,IAAUnzD,EAAK,6BAA+BmzD,OAAQzyD,IAG5D2jK,IACCthK,EAAAA,GAAAA,GAAA,KAAGvD,UAAU,QAAOwC,SAAEqiK,QAI1BthK,EAAAA,GAAAA,GAACyoC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBvkC,EAAMtF,OACf/B,QAASskK,EACTv7J,SAAU0xB,EACVzgB,UAAW7Z,EAAK,yBAAyBgC,SAExCs4B,GACCv3B,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAEf5F,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,6BCkLzB,IAAehF,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IAGQ,CACLgtM,gBAHqBC,EAAAA,EAAAA,KAA4BjtM,MAFnCD,EA7P0BmtM,EAC5Cp5M,SACAy/H,gBACAsvE,uBACA7E,0BACA1K,iBACA6C,qBACAzlM,UACApH,WACA0jN,qBAEA,OAAQz5E,GACN,KAAKghE,EAAAA,GAAkBgH,QACrB,OAAQyR,GACN,IAAK,MACH,OACElgN,EAAAA,GAAAA,GAAC8kM,GAAS,CAERpkK,OAAQ15B,EACRpD,QAASA,EACTpH,SAAUA,GAHLwK,GAMX,IAAK,OACH,OACEhH,EAAAA,GAAAA,GAACi/M,GAAU,CAETv+K,OAAQ15B,EACRpD,QAASA,EACTpH,SAAUA,GAHLwK,GAMX,IAAK,QACH,OACEhH,EAAAA,GAAAA,GAAC6vM,GAAW,CAEV7oM,OAAQA,EACRw/L,eAAgBA,EAChB5iM,QAASA,EACTpH,SAAUA,GAAY,CACpBirM,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkB6I,iBAClB7I,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBkN,kBAClBlN,EAAAA,GAAkBoN,2BAClBpN,EAAAA,GAAkBsN,qBAClBtN,EAAAA,GAAkByC,gBAClBzC,EAAAA,GAAkBqM,mBAClBrM,EAAAA,GAAkB4Y,oBAClBttL,SAAS0zG,IAfNz/H,GAkBX,IAAK,UACH,OACEhH,EAAAA,GAAAA,GAACumM,GAAa,CAEZv/L,OAAQA,EACRw/L,eAAgBA,EAChB5iM,QAASA,EACTpH,SAAUA,GAAY,CACpBirM,EAAAA,GAAkBkB,mBAClBlB,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBoB,oBAClBpB,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkByC,gBAClBzC,EAAAA,GAAkBqM,mBAClBrM,EAAAA,GAAkB4Y,oBAClBttL,SAAS0zG,IAbNz/H,GAkBb,MAGF,KAAKygM,EAAAA,GAAkBC,gBACrB,OACE1nM,EAAAA,GAAAA,GAAC6qM,GAAqB,CACpB7jM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBG,WACrB,OACE5nM,EAAAA,GAAAA,GAACstM,GAAgB,CACftmM,OAAQA,EACRw/L,eAAgBA,EAChBhqM,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkB6I,iBACrB,OACEtwM,EAAAA,GAAAA,GAACw0M,GAAsB,CACrBxtM,OAAQA,EACRw/L,eAAgBA,EAChB6C,mBAAoBA,EACpB7sM,SAAUA,GAAY,CACpBirM,EAAAA,GAAkBkN,kBAClBlN,EAAAA,GAAkBoN,2BAClBpN,EAAAA,GAAkBsN,sBAClBhiL,SAAS0zG,GACX7iI,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBoB,oBACvB,KAAKpB,EAAAA,GAAkBkN,kBACrB,OACE30M,EAAAA,GAAAA,GAAC4sM,GAAsB,CACrB5lM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBoN,2BACrB,OACE70M,EAAAA,GAAAA,GAACq2M,GAAgC,CAC/BrvM,OAAQA,EACRqiM,mBAAoBA,EACpB7C,eAAgBA,EAChBhqM,SAAUA,GAAY,CACpBirM,EAAAA,GAAkBsN,sBAClBhiL,SAAS0zG,GACX7iI,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBsN,qBACrB,OACE/0M,EAAAA,GAAAA,GAAC81M,GAA0B,CACzB9uM,OAAQA,EACR+uM,qBAAsBA,EACtB7E,wBAAyBA,EACzB1K,eAAgBA,EAChBhqM,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBO,mBACrB,OACEhoM,EAAAA,GAAAA,GAACopM,GAAwB,CACvBpiM,OAAQA,EACRw/L,eAAgBA,EAChB6C,mBAAoBA,EACpB7sM,SAAUA,GAAY,CACpBirM,EAAAA,GAAkByC,gBAClBzC,EAAAA,GAAkBqM,mBAClBrM,EAAAA,GAAkB4Y,oBAClBttL,SAAS0zG,GACX7iI,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBqH,mBACrB,OACE9uM,EAAAA,GAAAA,GAAC8uM,GAAkB,CACjB9nM,OAAQA,EACRw/L,eAAgBA,EAChBhqM,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBqM,mBACvB,KAAKrM,EAAAA,GAAkByC,gBACrB,OACElqM,EAAAA,GAAAA,GAACuxM,GAAsB,CACrBvqM,OAAQA,EACRwqM,WAAY/qE,IAAkBghE,EAAAA,GAAkBqM,mBAChDrC,eAAgBsE,EAChB7E,wBAAyBA,EACzB1K,eAAgBA,EAChBhqM,SAAUA,EACVoH,QAASA,IAIf,KAAK6jM,EAAAA,GAAkBkB,mBACvB,KAAKlB,EAAAA,GAAkBgJ,aACrB,OACEzwM,EAAAA,GAAAA,GAACozM,GAAkB,CACjBpsM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,IAGf,KAAK6jM,EAAAA,GAAkBS,QACrB,OACEloM,EAAAA,GAAAA,GAAC65M,GAAa,CACZ7yM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,EACT4iM,eAAgBA,IAGtB,KAAKiB,EAAAA,GAAkB4T,WACrB,OACEr7M,EAAAA,GAAAA,GAAC42M,GAAY,CACX5vM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,EACT4iM,eAAgBA,IAGtB,KAAKiB,EAAAA,GAAkB6C,eACrB,OACEtqM,EAAAA,GAAAA,GAACozM,GAAkB,CACjBpsM,OAAQA,EACRqsM,UAAQ,EACR72M,SAAUA,EACVoH,QAASA,EACT4iM,eAAgBA,EAChB6C,mBAAoBA,IAI1B,KAAK5B,EAAAA,GAAkBK,UACrB,OACE9nM,EAAAA,GAAAA,GAAC49M,GAAe,CACd52M,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,IAGf,KAAK6jM,EAAAA,GAAkBgU,WACrB,OACEz7M,EAAAA,GAAAA,GAACq4M,GAAgB,CACfrxM,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,IAGf,KAAK6jM,EAAAA,GAAkBW,aACrB,OACEpoM,EAAAA,GAAAA,GAACg9M,GAAkB,CACjBh2M,OAAQA,EACRxK,SAAUA,EACVoH,QAASA,SCjSb08M,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,eAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,aAARA,CAAQ,MAOpB,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW5oJ,QAAQ,MAAO,IACnCioJ,GAAKjoE,KAAK4oE,GACLP,GAASG,KAEdJ,GAAIpoE,KAAK4oE,GACJP,GAASK,IAEdR,GAAYloE,KAAK4oE,IAAeT,GAAYnoE,KAAK4oE,GAC5CP,GAASI,WAEXJ,GAASE,OAClB,CCOA,MAAM5iF,GAA2B,CAC/BkjF,YAAa,GACbC,YAAa,GACbC,KAAM,GACNpkJ,MAAO,GACPqkJ,YAAa,GACbC,SAAU,GACV1+J,SAAU,GACVq7E,MAAO,GACP5jE,MAAO,GACPknJ,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,CAAC,EACbC,UAAW,EACXC,kBAAmB,IAGfC,GAAgDA,CAACllJ,EAAOp1D,KAC5D,OAAQA,EAAOpH,MACb,IAAK,iBACH,MAAO,IACFw8D,EACHkkJ,YAAat5M,EAAOu2H,QACpB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTb,iBAAavjN,IAGnB,IAAK,iBACH,MAAO,IACFq/D,EACHmkJ,YAAav5M,EAAOu2H,QACpB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTZ,iBAAaxjN,IAGnB,IAAK,aACH,MAAO,IACFq/D,EACHokJ,KAAMx5M,EAAOu2H,QACb4jF,WAAY,IACP/kJ,EAAM+kJ,WACTX,UAAMzjN,IAGZ,IAAK,cACH,MAAO,IACFq/D,EACHA,MAAOp1D,EAAOu2H,QACd4jF,WAAY,IACP/kJ,EAAM+kJ,WACT/kJ,WAAOr/D,IAGb,IAAK,gBACH,MAAO,IACFq/D,EACHqkJ,YAAaz5M,EAAOu2H,QAAQ7uC,KAC5BqyH,eAAgB/5M,EAAOu2H,QAAQ5uC,YAC/BwyH,WAAY,IACP/kJ,EAAM+kJ,WACTV,iBAAa1jN,IAGnB,IAAK,iBACH,MAAO,IACFq/D,EACHskJ,SAAU15M,EAAOu2H,QACjB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTT,cAAU3jN,IAGhB,IAAK,iBACH,MAAO,IACFq/D,EACHpa,SAAUh7C,EAAOu2H,QACjB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTn/J,cAAUjlD,IAGhB,IAAK,cACH,MAAO,IACFq/D,EACHihE,MAAOr2H,EAAOu2H,QACd4jF,WAAY,IACP/kJ,EAAM+kJ,WACT9jF,WAAOtgI,IAGb,IAAK,cACH,MAAO,IACFq/D,EACH3C,MAAOzyD,EAAOu2H,QACd4jF,WAAY,IACP/kJ,EAAM+kJ,WACT1nJ,WAAO18D,IAGb,IAAK,iBACH,MAAO,IAAKq/D,EAAOukJ,SAAU35M,EAAOu2H,SACtC,IAAK,mBACH,MAAO,IACFnhE,EACHikJ,WAAYr5M,EAAOu2H,QACnB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTd,gBAAYtjN,IAGlB,IAAK,mBACH,MAAO,IACFq/D,EACHwkJ,WAAY55M,EAAOu2H,QACnB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTP,gBAAY7jN,IAGlB,IAAK,mBACH,MAAO,IACFq/D,EACHykJ,OAAQ75M,EAAOu2H,QACf4jF,WAAY,IACP/kJ,EAAM+kJ,WACTN,YAAQ9jN,IAGd,IAAK,gBACH,MAAO,IACFq/D,EACH0kJ,IAAK95M,EAAOu2H,QACZ4jF,WAAY,IACP/kJ,EAAM+kJ,WACTL,SAAK/jN,IAGX,IAAK,uBACH,MAAO,IACFq/D,EACH2kJ,eAAgB/5M,EAAOu2H,QACvB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTJ,oBAAgBhkN,IAGtB,IAAK,mBACH,MAAO,IACFq/D,EACH4kJ,WAAYh6M,EAAOu2H,QACnB4jF,WAAY,IACP/kJ,EAAM+kJ,WACTH,gBAAYjkN,IAGlB,IAAK,iBACH,MAAO,IAAKq/D,EAAO6kJ,SAAUj6M,EAAOu2H,SACtC,IAAK,wBACH,MAAO,IAAKnhE,EAAO8kJ,gBAAiBl6M,EAAOu2H,SAC7C,IAAK,iBACH,OAAIv2H,EAAOu2H,QAAQ9uC,QACV,IACFryB,KACAp1D,EAAOu2H,QACVwjF,eAAgB/5M,EAAOu2H,QAAQ9uC,SAG5B,IAAKryB,KAAUp1D,EAAOu2H,SAC/B,IAAK,gBACH,MAAO,IACFnhE,EACH+kJ,WAAY,IACP/kJ,EAAM+kJ,cACNn6M,EAAOu2H,UAGhB,IAAK,eACH,MAAO,IACFnhE,EACHglJ,UAAWp6M,EAAOu2H,SAEtB,IAAK,0BACH,MAAO,IACFnhE,EACHilJ,kBAAmBr6M,EAAOu2H,SAE9B,IAAK,aACH,MAAO,IACFH,IAEP,QACE,OAAOhhE,I,gBC7Ob,UAAgB,KAAO,WAAW,YAAc,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,KAAO,WAAW,iBAAiB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,oBAAsB,WAAW,aAAa,WAAW,UAAY,WAAW,kBAAkB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,kBAAoB,WAAW,wBAAwB,WAAW,mBAAqB,WAAW,SAAW,WAAW,SAAW,WAAW,gBAAkB,WAAW,eAAiB,WAAW,eAAe,WAAW,YAAc,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,gCAAgC,WAAW,0BAA4B,WAAW,+BAA+B,WAAW,yBAA2B,WAAW,eAAe,WAAW,YAAc,WAAW,KAAO,YC2Pp6B,IAAe1gE,EAAAA,EAAAA,KAlMgB6lN,EAC7Bh+M,QACAuN,cACA5J,QACAs6M,UACAC,iBACAC,eACAC,aACAlnI,gBACAmjD,WACAgkF,cACAR,YACAS,cACAC,qBACAC,mBACAC,mBACA1lJ,cAEA,MAAM,eAAE2lJ,IAAmBx8M,EAAAA,EAAAA,MAErBtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KACP4lN,EAAgBhiN,QAAQ09H,IAExB,SACJukF,EAAQ,oBAAEC,EAAmB,aAAEC,GAC7Bb,GAAW,CAAC,GACV,cACJc,EAAa,gBACbC,EAAe,gBACfC,EAAe,KACf9hN,EAAI,MACJ+4D,EAAK,eACLgpJ,GACGf,GAAgB,CAAC,EAEhBgB,GAAWr1M,EAAAA,EAAAA,IAAS2rL,EAAAA,EAAAA,IAAmB9xL,IAEvCqQ,GAAMorM,EAAAA,GAAAA,GAAqCD,GAE3CE,GAAkBhhN,EAAAA,EAAAA,KAAaihN,IACnCjlF,EAAU,CAAEh+H,KAAM,eAAgB29H,QAAS8kF,EAAevkN,KAAKC,IAAI8kN,EAAMR,GAAgBQ,MACxF,CAACjlF,EAAUykF,IAERS,GAA2BlhN,EAAAA,EAAAA,KAAY,KAC3CqgN,EAAe,CAAEj3E,KAAM+2E,GAAkB9jN,OAAS8kN,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYE,gBACzF,CAAClB,GAAkB9jN,OAAQgkN,IAExBiB,GAA6BthN,EAAAA,EAAAA,KAAY,KAC7CqgN,EAAe,CAAEj3E,KAAM+3E,EAAAA,GAAYI,iBAClC,CAAClB,IAEEmB,GAA4BxhN,EAAAA,EAAAA,KAAY,KAC5CqgN,EAAe,CAAEj3E,KAAM+3E,EAAAA,GAAYM,aAClC,CAACpB,IAyDJ,OACE/jN,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO+hC,KAAK9hC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAO0S,YAAYzS,SAAA,CAChCqkN,IACCtjN,EAAAA,GAAAA,GAAA,OACEmY,IAAKA,EACL1b,UAAWuC,GAAOklN,gBAClBx6M,IAAK45M,EACL/5M,WAAW,EACX8F,MAAOvH,EAAOkJ,YAAY3B,MAC1BK,OAAQ5H,EAAOkJ,YAAYtB,OAC3Bic,IAAI,MAGN23L,GAAYx7M,IACZ9H,EAAAA,GAAAA,GAAC08C,GAAAA,EAAQ,CACPrtC,MAAOvH,EAAMkJ,YAAY3B,MACzBK,OAAQ5H,EAAMkJ,YAAYtB,OAC1BjT,UAAWuC,GAAOklN,gBAClBC,kBAAgB,KAGpBrlN,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOga,KAAK/Z,SAAA,EAC1Be,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAOolN,cAAcnlN,SAAEkF,IACrCuN,IACC1R,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOqlN,oBAAoBplN,UACxC8B,EAAAA,GAAAA,GAAW2Q,EAAa,CAAC,KAAM,QAAS,mBAKjD5S,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOslN,UAAUrlN,SAAA,CAC9BmjN,EAAQmC,OAAOrlN,KAAKiU,GACnBqxM,GAAkBvnN,EAAMkW,EAAKvM,MAAOuM,EAAKvS,OAAQwhN,EAAQvhN,YAE1DwhN,GAAkBA,EAAenjN,KAAKiU,GACrCqxM,GAAkBvnN,EAAMkW,EAAKvM,MAAOuM,EAAKvS,OAAQwhN,EAAQvhN,YAE1DmiN,GAAuBA,EAAoBnkN,OAAS,IA3FvDC,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOylN,cAAcxlN,SAAA,EACnCe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0lN,mBAAmBzlN,SACvCkF,KAEHnE,EAAAA,GAAAA,GAAA,OAAAf,UACG0B,EAAAA,GAAAA,GAAe1D,EAAM+kN,EAAYI,EAAQvhN,gBAG9Cb,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO2lN,SAAS1lN,SAC7B+jN,EAAqB9jN,KAAK0lN,IACzB5kN,EAAAA,GAAAA,GAAA,OAEEvD,WAAWsC,EAAAA,GAAAA,GAAeC,GAAO6lN,SAAUD,IAAQ5C,GAAahjN,GAAO8lN,iBACvEhoN,QAAS0hI,EAAW,IAAMglF,EAAgBoB,IAAQ5C,EAAY,EAAI4C,QAAOjnN,EAAUsB,UAElF0B,EAAAA,GAAAA,GAAe1D,EAAM2nN,EAAKxC,EAAQvhN,SAAU,CAAEkkN,qBAAqB,KAJ/DH,eAgFKjnN,IAAf4kN,GACCiC,GAAkBvnN,EAAMF,EAAQ,wBAAyBwlN,EAAYH,EAAQvhN,UAAU,OAG3F/B,EAAAA,GAAAA,IAAA,OAAKrC,UAAWuC,GAAOgmN,YAAY/lN,SAAA,EAC/B2jN,GAAoBqC,GAAmB,CACvC9gN,MAAO++M,GAAiBP,IAAmB,GAAGx+M,MAC9CyC,MAAO7J,EAAQ,yBACfmH,KAAM,OACNpH,QAASgmN,EAAgBY,OAA2B/lN,IAErDwlN,GAAmB8B,GAAmB,CACrC9gN,MAAOg/M,EACPv8M,MAAO7J,EAAQ,2BACf0+H,YAAY18H,EAAAA,GAAAA,GAAeC,GAAOkmN,SAAUlmN,GAAOmkN,EAAgBn4J,mBAEnEy3J,IAAiBK,GAAiBM,IAAqB6B,GAAmB,CAC1E9gN,MAAOi/M,EACPx8M,MAAO7J,EAAQ,0BACfmH,KAAM,WACNpH,QAASgmN,EAAgBgB,OAA6BnmN,IAEvD2D,GAAQ2jN,GAAmB,CAC1B9gN,MAAO7C,EACPsF,MAAO7J,EAAQ,uBACfmH,KAAM,SAEPm2D,GAAS4qJ,GAAmB,CAC3B9gN,MAAOk2D,EACPzzD,MAAO7J,EAAQ,8BACfmH,KAAM,WAENw+M,IAAwBI,GAAiBO,IAAoB4B,GAAmB,CAChF9gN,MAAOk/M,EACPz8M,MAAO7J,EAAQ,iCACfmH,KAAM,QACNpH,QAASgmN,EAAgBkB,OAA4BrmN,IAEtDolN,IA1FY1nM,EA0FU0nM,GAxFzB/iN,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAnBN,SAAuByU,EAAalb,GAClC,MACMglN,EADapoN,EAAQ,iCAAkCmgE,GAC1Bse,MAAM,KACzC,OACE18E,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,CACGkmN,EAAgB,IACjBnlN,EAAAA,GAAAA,GAAC83G,GAAAA,EAAQ,CACPz8F,IAAKA,EACLrC,KAAMmsM,EAAgB,GACtBhlN,MAAOA,IAERglN,EAAgBllK,MAAM,KAG7B,CAKamlK,CAAc/pM,EAAKte,EAAQoD,OAClCmB,KAAK,eACLgqC,QAASxqC,QAAQu6E,GACjB5+E,UAAWuC,GAAOqmN,YAClBx5K,SAAU,EACVooB,QAASuuJ,WARf,IAAmBnnM,KAkGrB,SAASmpM,GACPvnN,EAAckH,EAAe0C,EAAehG,EAAkB+uF,GAAO,GAErE,OACE9wF,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GAAeC,GAAOylN,cAAe70H,GAAQ5wF,GAAOsmN,mBAAmBrmN,SAAA,EACrFe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAO0lN,mBAAmBzlN,SACvCkF,KAEHnE,EAAAA,GAAAA,GAAA,OAAAf,UACG0B,EAAAA,GAAAA,GAAe1D,EAAM4J,EAAOhG,OAIrC,CAEA,SAASokN,IAAmB,MAC1B9gN,EAAK,MACLyC,EAAK,KACL1C,EAAI,WACJu3H,EAAU,QACV3+H,IAQA,MAAMsc,EAActY,QAAQqD,GAASyC,IAAUzC,GAE/C,OACErF,EAAAA,GAAAA,IAACuF,GAAAA,EAAQ,CACP5H,UAAWuC,GAAOqsC,KAClBqwE,QAAM,EACNn3G,UAAW6U,EACXlV,KAAMA,EACNihC,UAAWroC,EACXA,QAASA,EACTsoC,YAAaq2F,IAAcz7H,EAAAA,GAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,GAAAA,GAAe,OAAQ08H,KAAgBx8H,SAAA,EAEhFe,EAAAA,GAAAA,GAAA,OAAKvD,UAAWuC,GAAOumN,0BAA0BtmN,SAC9CkF,GAASyC,IAEXzC,GAASyC,IAAUzC,IAClBnE,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAOwmN,yBAAyBvmN,SAC3C2H,MAKX,CC3QA,MAmDA,IAAetK,EAAAA,EAAAA,KAnDsBmpN,EACnCpqM,MAAKqqM,aAAY9hN,UAAS+hN,0BAE1B,MAAM,iBAAEvjJ,IAAqB/7D,EAAAA,EAAAA,MAEvBpJ,GAAOD,EAAAA,EAAAA,KAEPwrE,GAAgBhmE,EAAAA,EAAAA,KAAawvB,IACjC,IACE,MAAMzV,EAAOqrD,KAAKa,MAAMz2C,EAAMzV,OACxB,UAAEurD,EAAS,UAAEC,GAAcxrD,EACjC,OAAQurD,GACN,IAAK,uBACH,IAAK49I,EAAY,CACf,MAAM38I,EAAUQ,EAAAA,IAAkBxB,EAAUyB,UAC5CpH,EAAiB,CAAE/mD,IAAK0tD,GAC1B,CACAnlE,IACA,MACF,IAAK,sBACC+hN,GACFA,EAAoB59I,GAEtB,MACF,QACEnkE,IAGN,CAAE,MAAO2I,GACP,IAED,CAAC3I,EAAS8hN,EAAYtjJ,EAAkBujJ,IAO3C,OALApoN,EAAAA,EAAAA,KAAU,KACRgT,OAAOyJ,iBAAiB,UAAWwuD,GAC5B,IAAMj4D,OAAO0J,oBAAoB,UAAWuuD,KAClD,CAACA,KAGFxoE,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,iBAAgBwC,UAC7Be,EAAAA,GAAAA,GAAA,UACE0J,IAAK2R,EACLlX,MAAOlH,EAAK,kCACZuzE,MAAM,UACND,QAAQ,gFACR9zE,UAAU,iCCblB,IAAeH,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,QAAE+tD,IAAY3tD,EAAAA,EAAAA,KAAeJ,GACnC,MAAO,CACLmmG,SAAUp4C,EAAQ7Q,OAAOw1J,WACzBntG,aAAcvlG,EAAOqlG,cAAcC,KACnCmqG,iBAAyC,YAAvB1hJ,EAAQ4kJ,MAAMrlN,KAAqBygE,EAAQ4kJ,KAAKlD,sBAAmBhlN,KALrEsV,EAxC+B6yM,EACjDtpN,WACA68G,WACAr8C,QACA2lJ,mBACAlqG,eACAstG,uBAEA,MAAM,kBAAEC,IAAsB3/M,EAAAA,EAAAA,MAExBtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEN47G,EAAoBC,IAAyBtnG,EAAAA,EAAAA,KAAS,GACvDw0M,GAAWvoN,EAAAA,EAAAA,KAAQ,IAChBilN,GAAkB9jN,QAAUm+D,EAAMilJ,kBACrCU,EAAiBnjN,MAAK,EAAGiD,QAASA,IAAOu6D,EAAMilJ,qBAAoB99M,WACnExG,GACH,CAACglN,EAAkB3lJ,EAAMilJ,oBAE5B,OACEnjN,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,cAAawC,SAAA,EAC1Be,EAAAA,GAAAA,GAAC0B,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBm3G,KAEzC94G,EAAAA,GAAAA,GAACm5G,GAAAA,EAAY,CACX/oD,MAAOipD,GAAYp8G,EAAKq8G,YAAYD,GACpCb,KAAMC,EACN/mG,YAAa3U,EAAQ,6BAA8BkpN,GACnDr5J,YAAa7vD,EAAQ,YACrBw8G,WAAYysG,EACZ5sG,kBAAkB,EAClBI,iBAAkBh9G,EAClBmF,kBAAmBm3G,EACnBW,2BAA4BV,EAC5BmtG,cAAeH,W,gBCvDR,SAASI,GACtBhuM,EAAmCiuM,EAHZ,MAKvB7oN,EAAAA,EAAAA,KAAU,KACJkc,EAAAA,IAIJjJ,YAAW,MACTs+B,EAAAA,EAAAA,KAAe,KACb32B,EAAI/I,SAASurD,aAEdyrJ,KACF,CAACjuM,EAAKiuM,GACX,C,gIC+CA,IAAe9pN,EAAAA,EAAAA,KAzCiB+pN,EAAGx/M,QAAOupD,QAAOh+C,eAC/C,MAAMnV,GAAOD,EAAAA,EAAAA,KACPspN,GAAgBr3M,EAAAA,EAAAA,MAEtBk3M,GAAuBG,GAEvB,MAAOC,EAAUC,IAAe/0M,EAAAA,EAAAA,IAAiBivM,GAASE,UAC1DrjN,EAAAA,EAAAA,KAAU,KACR,MAAMkpN,EAAczF,GAAen6M,GACnC2/M,EAAYC,KAEX,IAEH,MAAMl/H,GAAe/kF,EAAAA,EAAAA,KAAamC,IAChC,MAAMszF,EC9BH,SAA0B1sD,GAE/B,MAAMjV,GADNiV,EAAQA,EAAM8sB,QAAQ,SAAU,KACZihC,MAAM,WAC1B,OAAOhjE,EAAQA,EAAMxM,KAAK,KAAO,EACnC,CD0BqB48L,CAAiB/hN,EAAEqN,OAAOnL,OACrC4/M,EAAczF,GAAer8M,EAAEqN,OAAOnL,OAC5C2/M,EAAYC,GACZr0M,EAAS6lF,KACR,CAAC7lF,IAEEu0M,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAK7F,GAASI,WACZ,OAAO9gN,EAAAA,GAAAA,GAAA,OAAK0J,IAAKk9M,GAAoBr9M,WAAW,EAAOoiB,IAAI,KAC7D,KAAK+0L,GAASG,KACZ,OAAO7gN,EAAAA,GAAAA,GAAA,OAAK0J,IAAKm9M,GAAct9M,WAAW,EAAOoiB,IAAI,KACvD,KAAK+0L,GAASK,IACZ,OAAO/gN,EAAAA,GAAAA,GAAA,OAAK0J,IAAKo9M,GAAav9M,WAAW,EAAOoiB,IAAI,KACtD,QACE,OAEN,CAlCmBo7L,CAAYR,GAE7B,OACEznN,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,YAAWwC,SAAA,EACxBe,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAKmuM,EACL1/M,MAAO3J,EAAK,qBACZmV,SAAUm1E,EACV1gF,MAAOA,EACPmyD,UAAU,UACVv8D,UAAW8pN,EAAW,kBAAoB,GAC1Cn2J,MAAOA,EACPvkB,SAAU,EACVgzC,UAzCuB,GA0CvBnzC,2BAAyB,KAE3B1rC,EAAAA,GAAAA,GAAA,QAAMvD,UAAU,cAAawC,SAAE0nN,UEpBrC,IAAerqN,EAAAA,EAAAA,KA3BmB0qN,EAAGngN,QAAOupD,QAAOh+C,eACjD,MAAMnV,GAAOD,EAAAA,EAAAA,KAEPuqF,GAAe/kF,EAAAA,EAAAA,KAAamC,IAChC,MAAMszF,EAAWtzF,EAAEqN,OAAOnL,MAEtBA,EAAMogN,SAAS,MAAQpgN,EAAMhI,OAASo5F,EAASp5F,OACjDuT,EAAS6lF,GAET7lF,ED1BC,SAA0Bm5B,GAE/B,MAAMjV,GADNiV,EAAQA,EAAM8sB,QAAQ,SAAU,IAAIpY,MAAM,EAAG,IACzBq5C,MAAM,WAO1B,OANIhjE,IAAQ,IAAM7N,OAAO6N,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,IAAQ,IAA0B,IAApBA,EAAM,GAAGz3B,SAAiBy3B,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMxM,KAAK,KAAO,EACnC,CCgBeo9L,CAAiBviN,EAAEqN,OAAOnL,UAEpC,CAACuL,EAAUvL,IAEd,OACE7G,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO3J,EAAK,yBACZmV,SAAUm1E,EACV1gF,MAAOA,EACPupD,MAAOA,EACP4I,UAAU,UACVntB,SAAU,EACVgzC,UA7BmB,EA8BnBnzC,2BAAyB,OCsI/B,IAAepvC,EAAAA,EAAAA,KA/ImBunN,EAChC7mJ,QACAmqJ,qBACAC,qBACAC,cACAC,UACA/tJ,cACAilE,eAEA,MAAM+oF,GAAmBt4M,EAAAA,EAAAA,OAEzB1R,EAAAA,EAAAA,KAAU,KACJgqN,EAAiBn4M,SAChBm4M,EAAiBn4M,QAAQvI,QAAUm2D,EAAM2kJ,iBAC5C4F,EAAiBn4M,QAAQvI,MAAQm2D,EAAM2kJ,kBAExC,CAAC3kJ,EAAM2kJ,iBAEV,MAAM6F,GAAyBhlN,EAAAA,EAAAA,KAAaqE,IAC1C23H,EAAS,CAAEh+H,KAAM,mBAAoB29H,QAASt3H,MAC7C,CAAC23H,IAEEipF,GAAyBjlN,EAAAA,EAAAA,KAAamC,IAC1C65H,EAAS,CAAEh+H,KAAM,mBAAoB29H,QAASx5H,EAAEqN,OAAOnL,MAAM6gN,kBAC5D,CAAClpF,IAEEmpF,GAAqBnlN,EAAAA,EAAAA,KAAaqE,IACtC23H,EAAS,CAAEh+H,KAAM,mBAAoB29H,QAASt3H,MAC7C,CAAC23H,IAEEopF,GAAkBplN,EAAAA,EAAAA,KAAamC,IACnC,MAAMszF,EAAWtzF,EAAEqN,OAAOnL,MAAMwxD,QAAQ,UAAW,IACnDmmE,EAAS,CAAEh+H,KAAM,gBAAiB29H,QAASlmC,MAC1C,CAACumC,IAEEqpF,GAAsBrlN,EAAAA,EAAAA,KAAamC,IACvC65H,EAAS,CAAEh+H,KAAM,uBAAwB29H,QAASx5H,EAAEqN,OAAOnL,UAC1D,CAAC23H,IAEEspF,GAA8BtlN,EAAAA,EAAAA,KAAamC,IAC/C65H,EAAS,CAAEh+H,KAAM,mBAAoB29H,QAASx5H,EAAEqN,OAAOnL,UACtD,CAAC23H,IAEEupF,GAA8BvlN,EAAAA,EAAAA,KAAamC,IAC/C65H,EAAS,CAAEh+H,KAAM,wBAAyB29H,QAASx5H,EAAEqN,OAAOnL,UAC3D,CAAC23H,IAEEzhI,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEP,WAAE6kN,EAAa,CAAC,GAAM/kJ,EAE5B,OACEh9D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,uBACbiD,EAAAA,GAAAA,GAACqmN,GAAS,CACRj0M,SAAUo1M,EACV3gN,MAAOm2D,EAAMikJ,WACb7wJ,MAAO2xJ,EAAWd,YAAchkN,EAAKq8G,YAAYyoG,EAAWd,cAE7DmG,IACCpnN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,8CACfqV,SAAUq1M,EACV5gN,MAAOm2D,EAAMwkJ,WACbxoJ,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWP,YAAcvkN,EAAKq8G,YAAYyoG,EAAWP,eAGhE1iN,EAAAA,GAAAA,IAAA,WAASrC,UAAU,gBAAewC,SAAA,EAChCe,EAAAA,GAAAA,GAACgnN,GAAW,CACVngN,MAAOm2D,EAAMykJ,OACbrvM,SAAUu1M,EACVv3J,MAAO2xJ,EAAWN,QAAUxkN,EAAKq8G,YAAYyoG,EAAWN,WAE1DzhN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,yBACfqV,SAAUw1M,EACV/gN,MAAOm2D,EAAM0kJ,IACb1oJ,UAAU,UACV6lB,UAAW,EACXhzC,SAAU,EACVukB,MAAO2xJ,EAAWL,KAAOzkN,EAAKq8G,YAAYyoG,EAAWL,KACrDh2K,2BAAyB,OAG5B27K,GAAeC,GACdtnN,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,gCACXY,GACJmB,EAAAA,GAAAA,IAAA,WAASrC,UAAU,gBAAewC,SAAA,CAC/BooN,IACCrnN,EAAAA,GAAAA,GAACgoN,GAAAA,EAAM,CACLphN,MAAO7J,EAAQ,0BACfqV,SAAUy1M,EACVhhN,MAAOm2D,EAAM2kJ,eACbsG,SAAUnnN,SAAQ,GAClB2B,GAAG,kBACH2tD,MAAO2xJ,EAAWJ,gBAAkB1kN,EAAKq8G,YAAYyoG,EAAWJ,gBAChE91K,SAAU,EACV1zB,IAAKovM,EAAiBtoN,SAGpBs6D,EAAYr6D,KAAI,EAAGqwF,cAAajuF,WAC9BtB,EAAAA,GAAAA,GAAA,UACE6G,MAAO0oF,EACP9yF,UAAU,cACV4V,SAAUk9E,IAAgBvyB,EAAM2kJ,eAAe1iN,SAE9CswF,GAAejuF,QAMzBgmN,IACCtnN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,iCACfqV,SAAU01M,EACVjhN,MAAOm2D,EAAM4kJ,WACb5oJ,UAAU,OACVntB,SAAU,EACVgzC,UAAW,GACXzuB,MAAO2xJ,EAAWH,YAAc3kN,EAAKq8G,YAAYyoG,EAAWH,kBAIlE5hN,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBe,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO7J,EAAQ,qCACfuuC,UAAS67K,GAAqBnqJ,EAAM8kJ,gBACpCj2K,SAAU,EACVuiD,SAAUrxF,EAAQoqN,EAAqB,gCAAkC,qBACzE/0M,SAAU21M,EACVliN,UAAWshN,cC3GvB,IAAe7qN,EAAAA,EAAAA,KAtC+B4rN,EAC5ClrJ,QACA2lJ,mBACAnkF,WACA2pF,qBAEA,MAAMlrN,GAAOD,EAAAA,EAAAA,KAEPN,GAAUgB,EAAAA,EAAAA,KAAQ,IACfilN,GAAkB9jN,OACrB8jN,EAAiBzjN,KAAI,EAAGuD,KAAI0B,YAAY,CAAGyC,MAAOzC,EAAO0C,MAAOpE,MAChEukC,GAAAA,GACH,CAAC27K,IAEEvwM,GAAW5P,EAAAA,EAAAA,KAAaqE,IAC5B23H,EAAS,CAAEh+H,KAAM,0BAA2B29H,QAASt3H,MACpD,CAAC23H,IAEJ,OACEx+H,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,cAAawC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAAf,SAAKhC,EAAK,uBAEV+C,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,oBACL5E,QAASA,EACT2V,SAAU2qD,EAAMilJ,kBAChB7vM,SAAUA,KAGZpS,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACE,QAAM,EAACpE,QAASqrN,EAAelpN,SACpChC,EAAK,0CCehB,IAAeX,EAAAA,EAAAA,KAzCgB2nN,EAC7BjnJ,QACAorJ,kBACAvnN,WACA29H,eAEA,MAAMzhI,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAEbK,EAAAA,EAAAA,KAAU,KACH6qN,GAAoBA,EAAgBvpN,SAAUm+D,EAAMukJ,UAGzD/iF,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASiqF,EAAgB,GAAG3lN,OAC9D,CAAC2lN,EAAiBprJ,EAAMukJ,SAAU/iF,IAErC,MAAM6pF,GAAuB7lN,EAAAA,EAAAA,KAAaqE,IACxC23H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASt3H,MAC3C,CAAC23H,IAEE9hI,GAAUgB,EAAAA,EAAAA,KAAQ,IAAO0qN,EAAgBlpN,KAAI,EAAGuD,GAAIoE,EAAO1C,MAAOyC,EAAOhG,aAAa,CAC1FgG,QACAwnF,UAAUztF,EAAAA,GAAAA,GAAe1D,EAAM2D,EAAQC,GACvCgG,aACI,CAACuhN,EAAiBvnN,EAAU5D,IAElC,OACE+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,WAAUwC,UACvBH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,KAAAf,SAAIlC,EAAQ,4BACZiD,EAAAA,GAAAA,GAACmS,EAAAA,EAAU,CACT7Q,KAAK,mBACL5E,QAASA,EACT0V,SAAUi2M,EACVh2M,SAAU2qD,EAAMukJ,mBC4J1B,IAAejlN,EAAAA,EAAAA,KA1LoBynN,EACjC/mJ,QACAsrJ,YACAC,YACAC,WACA/F,cACAlpJ,cACAilE,eAEA,MAAMxkE,GAAW/qD,EAAAA,EAAAA,MACXw5M,GAAWx5M,EAAAA,EAAAA,MACXs4M,GAAmBt4M,EAAAA,EAAAA,OAEzB1R,EAAAA,EAAAA,KAAU,KACJgqN,EAAiBn4M,SAChBm4M,EAAiBn4M,QAAQvI,QAAUm2D,EAAMqkJ,cAC5CkG,EAAiBn4M,QAAQvI,MAAQm2D,EAAMqkJ,eAExC,CAACrkJ,EAAMqkJ,cAEV,MAAMtkN,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,KAEbipN,GAAuBnsJ,GAEvB,MAAM0uJ,GAAuBlmN,EAAAA,EAAAA,KAAamC,IACxC65H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASx5H,EAAEqN,OAAOnL,UACpD,CAAC23H,IAEEmqF,GAAuBnmN,EAAAA,EAAAA,KAAamC,IACxC65H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASx5H,EAAEqN,OAAOnL,UACpD,CAAC23H,IAEEoqF,GAAmBpmN,EAAAA,EAAAA,KAAamC,IACpC65H,EAAS,CAAEh+H,KAAM,aAAc29H,QAASx5H,EAAEqN,OAAOnL,UAChD,CAAC23H,IAEEqqF,GAAoBrmN,EAAAA,EAAAA,KAAamC,IACrC65H,EAAS,CAAEh+H,KAAM,cAAe29H,QAASx5H,EAAEqN,OAAOnL,UACjD,CAAC23H,IAEEqpF,GAAsBrlN,EAAAA,EAAAA,KAAamC,IACvC65H,EAAS,CAAEh+H,KAAM,gBAAiB29H,QAAS5kE,EAAY/5D,MAAM6vF,GAAYA,EAAQC,OAAS3qF,EAAEqN,OAAOnL,YAClG,CAAC0yD,EAAailE,IAEXsqF,GAAuBtmN,EAAAA,EAAAA,KAAamC,IACxC65H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASx5H,EAAEqN,OAAOnL,UACpD,CAAC23H,IAEEuqF,GAAuBvmN,EAAAA,EAAAA,KAAamC,IACxC65H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASx5H,EAAEqN,OAAOnL,UACpD,CAAC23H,IAEEwqF,GAAoBxmN,EAAAA,EAAAA,KAAamC,IACrC65H,EAAS,CAAEh+H,KAAM,cAAe29H,QAASx5H,EAAEqN,OAAOnL,UACjD,CAAC23H,IAEE3jE,GAAoBr4D,EAAAA,EAAAA,KAAamC,IACrC,IAAI,MAAEkC,GAAUlC,EAAEqN,OAClBnL,EAAQ,IAAIA,EAAMwxD,QAAQ,MAAO,MAC7BowJ,EAASr5M,UACXq5M,EAASr5M,QAAQvI,MAAQA,GAE3B23H,EAAS,CAAEh+H,KAAM,cAAe29H,QAASt3H,MACxC,CAAC23H,IAEEyqF,GAAuBzmN,EAAAA,EAAAA,KAAamC,IACxC65H,EAAS,CAAEh+H,KAAM,iBAAkB29H,QAASx5H,EAAEqN,OAAOnL,UACpD,CAAC23H,KAEE,WAAEujF,GAAe/kJ,EACvB,OACEh9D,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,eAAcwC,UAC3BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACGwjN,GACC3jN,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,6BACbiD,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR6F,IAAK6hD,EACLpzD,MAAO7J,EAAQ,sCACfqV,SAAUs2M,EACV7hN,MAAOm2D,EAAMkkJ,YACbloJ,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWb,aAAejkN,EAAKq8G,YAAYyoG,EAAWb,gBAE/DlhN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,sCACfqV,SAAUu2M,EACV9hN,MAAOm2D,EAAMmkJ,YACbnoJ,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWZ,aAAelkN,EAAKq8G,YAAYyoG,EAAWZ,gBAE/DnhN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,kCACfqV,SAAUw2M,EACV/hN,MAAOm2D,EAAMokJ,KACbpoJ,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWX,MAAQnkN,EAAKq8G,YAAYyoG,EAAWX,SAExDphN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,mCACfqV,SAAUy2M,EACVhiN,MAAOm2D,EAAMA,MACbhE,UAAU,OACV5I,MAAO2xJ,EAAW/kJ,OAAS//D,EAAKq8G,YAAYyoG,EAAW/kJ,UAEzDh9D,EAAAA,GAAAA,GAACgoN,GAAAA,EAAM,CACLphN,MAAO7J,EAAQ,0BACfqV,SAAUy1M,EACVhhN,MAAOm2D,EAAMqkJ,YACb4G,SAAUnnN,SAAQ,GAClB2B,GAAG,mBACH2tD,MAAO2xJ,EAAWV,aAAepkN,EAAKq8G,YAAYyoG,EAAWV,aAC7DlpM,IAAKovM,EACL17K,SAAU,EAAE5sC,SAEXs6D,EAAYr6D,KAAI,EAAGqwF,cAAajuF,OAAMguF,WACrCtvF,EAAAA,GAAAA,GAAA,UACE6G,MAAOyoF,EACP7yF,UAAU,cACV4V,SAAUi9E,IAAStyB,EAAMqkJ,YAAYpiN,SAEpCswF,GAAejuF,SAKtBtB,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,iCACfqV,SAAU02M,EACVjiN,MAAOm2D,EAAMskJ,SACbtoJ,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWT,UAAYrkN,EAAKq8G,YAAYyoG,EAAWT,oBAG5D3jN,EACH6qN,GAAYF,GAAaC,GACxBvoN,EAAAA,GAAAA,GAAA,MAAAf,SAAKlC,EAAQ,kCACXY,EACH6qN,IACCxoN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,uBACfqV,SAAU22M,EACVliN,MAAOm2D,EAAMpa,SACboW,UAAU,OACVntB,SAAU,EACVukB,MAAO2xJ,EAAWn/J,UAAY3lD,EAAKq8G,YAAYyoG,EAAWn/J,YAG7D0lK,IACCtoN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,mCACfqV,SAAU42M,EACVniN,MAAOm2D,EAAMihE,MACbjlE,UAAU,QACVntB,SAAU,EACVukB,MAAO2xJ,EAAW9jF,OAAShhI,EAAKq8G,YAAYyoG,EAAW9jF,SAG1DsqF,IACCvoN,EAAAA,GAAAA,GAACsS,EAAAA,EAAS,CACR1L,MAAO7J,EAAQ,8BACfqV,SAAUyoD,EACVh0D,MAAOm2D,EAAM3C,MACbrB,UAAU,MACVntB,SAAU,EACVukB,MAAO2xJ,EAAW1nJ,OAASp9D,EAAKq8G,YAAYyoG,EAAW1nJ,OACvDliD,IAAKswM,KAGTzoN,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPptD,MAAO7J,EAAQ,uBACfqxF,SAAUrxF,EAAQ,2BAClBuuC,QAASxqC,QAAQk8D,EAAM6kJ,UACvBh2K,SAAU,EACVz5B,SAAU62M,YCpKdC,GAAmB,SACnBC,GAAkB,cAElBC,GAAsB,IAAIj8H,IAAI,CAAC+7H,GAAkBC,KAwjBvD,IAAe7sN,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJ2yM,EAAI,KACJj6E,EAAI,gBACJw8E,EAAe,MACfh4J,EAAK,kBACLi5J,EAAiB,aACjBloJ,EAAY,UACZ4J,EAAS,kBACTu+I,EAAiB,uBACjBC,EAAsB,kBACtBC,EAAiB,gBACjBC,EAAe,IACfpuM,IACE/H,EAAAA,EAAAA,KAAeJ,GAAQ+tD,SAErB,QAAEmhJ,EAAO,aAAEsH,EAAY,eAAEC,GAAmB9D,GAAQ,CAAC,EACrDtsJ,EAAcrmD,EAAOqmD,YAAY25B,QAEvC,IAAI02H,EAAe/D,GAAM8D,gBACpBC,GAAgBvuM,IACnBuuM,EAAevuM,EAAIm/G,WA/kBG,oCA+kB+B2uF,QAAkBxrN,GAGzE,MAAM+V,EAAOytD,GAAgB,WAAYA,GAAe5uB,EAAAA,EAAAA,KAAWr/B,EAAQiuD,EAAan6D,aAAUrJ,EAC5FksN,EAAkB/oN,QAAQshN,KAAawH,IAAiBR,GAAoB37H,IAAIm8H,MAChF,mBAAExC,EAAkB,YAAEC,EAAW,QAAEC,GAAaoC,GAAgB,CAAC,EACjE15J,EAAM61J,GAAMjyJ,OAAQthB,EAAAA,EAAAA,KAAWp/B,EAAQ2yM,EAAKjyJ,YAASj2D,EACrDu/D,GAAUjxB,EAAAA,EAAAA,IAAgB+jB,GAEhC,MAAO,CACL47E,OACAl4H,OACA00M,kBACAuB,eAAgBC,EAChBC,kBACAhE,OACAzD,UACAgF,qBACAC,cACAC,UACAl3J,QACAi5J,kBAAmBA,GAAqBhuM,EACxCunM,iBAAkB9hN,SAAS6oN,GAAkBtuM,GAC7Ck+C,cACAwR,YACA23I,mBAAoB5hN,QAAQsnN,GAAiBvpN,QAC7CirN,iBAAkBP,GAAwBjpB,MAC1CypB,SAAUT,GAAmB7mN,GAC7BunN,mBAAoBR,GAAmBS,WACvCR,kBACAvsJ,aApDcjqD,EArhB4Bi3M,EAC9C9mN,SACAQ,UACAgoI,OACAw8E,kBACAvC,OACAgE,kBACAzH,UACAuH,iBACAvC,qBACAC,cACAC,UACA+B,oBACAj5J,QACAmJ,cACAmpJ,qBACA33I,YACA++I,mBACAC,WACApH,mBACAqH,qBACAP,kBACA7G,mBACA1lJ,cAEA,MAAM,iBACJitJ,EAAgB,sBAChBC,EAAqB,gBACrBC,EAAe,eACfxH,EAAc,oBACdyH,EAAmB,kBACnBtE,EAAiB,wBACjBuE,EAAuB,uBACvBC,IACEnkN,EAAAA,EAAAA,MAEEtJ,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MAENyzD,EAAatnB,EAAWC,IAAchsC,EAAAA,EAAAA,MACtCmtN,EAAcC,IbyHdtsD,EAAAA,GAAAA,GAAW8jD,GAASlkF,KaxHpBzmG,EAAWkpF,IAAgBhvG,EAAAA,EAAAA,KAAS,IACpC4pE,EAAeC,IAAoB7pE,EAAAA,EAAAA,KAAS,IAC5Ck5M,EAAeC,IAAoBn5M,EAAAA,EAAAA,IAAS,IAC7Co5M,IAAW3xL,EAAAA,EAAAA,GAAsB0yG,GAAM,GACvCk/E,IAAgB5xL,EAAAA,EAAAA,GAAsB6xC,GACtCggJ,GAAkBn/E,IAAS+3E,EAAAA,GAAY8B,eAEvCuF,IAAUxoN,EAAAA,EAAAA,KAAayoN,IAC3BpI,EAAe,CAAEj3E,KAAMq/E,MACtB,CAACpI,KAEJtlN,EAAAA,EAAAA,KAAU,KACJ6F,IACFwnN,EAAiB,IACjBT,IACA9gL,OAED,CAACjmC,EAAQ+mN,EAAkB9gL,KAG9B9rC,EAAAA,EAAAA,KAAU,MACH6F,GAAUutD,GACbrnB,MAED,CAACA,EAAYqnB,EAAavtD,KAE7B7F,EAAAA,EAAAA,KAAU,WACKI,IAATiuI,GAAsBx7E,IACxBqwD,GAAa,KAEd,CAACmrB,EAAMx7E,EAAO2a,KAGjBxtE,EAAAA,EAAAA,KAAU,KAENquI,IAAS+3E,EAAAA,GAAYxB,UAClBv2E,IAASi/E,IACT9/I,IAAc+/I,IACbL,EAAaxI,mBACbwI,EAAaxJ,YAEjB+J,GAAQrH,EAAAA,GAAYE,eAErB,CAAC4G,EAAaxJ,WAAYwJ,EAAaxI,kBAAmB6I,GAAeD,GAAU9/I,EAAWigJ,GAASp/E,KAE1GruI,EAAAA,EAAAA,KAAU,KACJ6yD,GAAO86J,OACTR,EAAgB,CACdlqN,KAAM,gBACN29H,QAAS,CACP,CAAC/tE,EAAM86J,OAAQ96J,EAAMw1J,gBAI1B,CAACx1J,EAAOs6J,KAEXntN,EAAAA,EAAAA,KAAU,KACR,GAAIsoN,GAAMsF,UAAW,CACnB,MACE7pN,KAAMshD,EAAQ,MAAEyX,EAAK,MAAE4jE,EAAK,gBAAEmlF,GAC5ByC,EAAKsF,WACH,YACJ9J,KAAgB+J,GACdhI,GAAmB,CAAC,EAClBiI,EAAkBhK,GAAe9nJ,EAAY/5D,MAAK,EAAG8vF,UAAWA,IAAS+xH,IAAc9xH,YAC7Fm7H,EAAgB,CACdlqN,KAAM,iBACN29H,QAAS,CACPv7E,WACAyX,MAAOA,GAA6B,MAApBA,EAAMixJ,OAAO,GACzB,IAAIjxJ,IACJA,EACJ4jE,WACIotF,GAAmB,CACrBh8H,QAASg8H,EACThK,iBACG+J,KAIX,IACC,CAACvF,EAAM6E,EAAiBnxJ,KAE3Bh8D,EAAAA,EAAAA,KAAU,KACJolN,GAAkB9jN,QACpB6rN,EAAgB,CACdlqN,KAAM,0BACN29H,QAASwkF,EAAiB,GAAGlgN,OAGhC,CAACioN,EAAiB/H,IAErB,MAAM4I,IAAwB/oN,EAAAA,EAAAA,KAAY,KACxCwjN,MACC,CAACA,IAEEzD,IAAa7kN,EAAAA,EAAAA,KAAQ,IACrBkuI,IAAS+3E,EAAAA,GAAYxB,SAChB,EA4cb,SACEoC,EAA4B,GAC5B6D,EACAoD,EACAxJ,GAEA,MAAMK,EAAiB+F,EACnBqD,GAAkBrD,EAAiBoD,GACnC,GACJ,IAAIj5D,EAAQyvD,EAKZ,OAHAzvD,EADoBgyD,EAAO72H,OAAO20H,GAAkB,IAChCxkN,QAAO,CAACqtD,EAAKwgK,IACxBxgK,EAAMwgK,EAAI9qN,QAChB2xJ,GACIA,CACT,CAxdWo5D,CAAcvJ,GAASmC,OAAQ6D,EAAiBqC,EAAalJ,SAAUkJ,EAAazI,YAC1F,CAACp2E,EAAMw2E,GAASmC,OAAQ6D,EAAiBqC,EAAalJ,SAAUkJ,EAAazI,YAE1EM,IAAe5kN,EAAAA,EAAAA,KAAQ,KAC3B,GAAIkuI,IAAS+3E,EAAAA,GAAYxB,SAGzB,OAmdJ,SAAyBnlJ,EAAkBorJ,EAA+CjF,GACxF,MAAMyI,Ed1pBD,SAA4B3K,GACjC,MAAMsF,EAAWvF,GAAeC,GAChC,OAAON,GAAM4F,IAAa,EAC5B,CcupBuBsF,CAAmB7uJ,EAAMikJ,YACxCiC,EAAgB0I,GAAgB5uJ,EAAMikJ,WAAa,GAAG2K,MAAiB5uJ,EAAMikJ,WAAWhhK,OAAO,UAAOtiD,EACtGylN,EAAkBpmJ,EAAMkkJ,YAC1B,GAAGlkJ,EAAMkkJ,gBAAgBlkJ,EAAMokJ,SAASpkJ,EAAMqkJ,mBAC9C1jN,GACE,MAAE08D,EAAOzX,SAAUthD,GAAS07D,EAC5BwuJ,EAAiBpD,EAAkB0D,GAAmB1D,EAAiBprJ,EAAMukJ,eAAY5jN,EACzF0lN,EAAiBmI,GAAgBrnN,MACvC,MAAO,CACL++M,gBACAC,kBACAC,kBACA9hN,OACA+4D,QACAgpJ,iBAEJ,CApeW0I,CAAgBtB,EAAcrC,EAAiBuB,GAAkB,MACvE,CAAC/9E,EAAM6+E,EAAcrC,EAAiBuB,IAEnCqC,IAAqBxpN,EAAAA,EAAAA,KAAY,KACrCwoN,GAAQrH,EAAAA,GAAYE,eACnB,CAACmH,KAEEiB,IAA0BzpN,EAAAA,EAAAA,KAAY,KAC1CwjN,MACC,CAACA,IAyBEkG,IAAW1pN,EAAAA,EAAAA,KAAY,KAC3B6nN,EAAgB,CACd8B,iBAAkB1B,EAAalJ,SAC/BO,gBAAiB2I,EAAa3I,gBAC9BG,kBAAmBwI,EAAaxI,kBAChCD,UAAWyI,EAAazI,cAEzB,CAACqI,EAAiBI,IAEf2B,IAA0B5pN,EAAAA,EAAAA,KAAaulE,IAC3C,MAAM,YAAEskJ,GAAgBtkJ,EACxByiJ,EAAuB6B,GACvBH,OACC,CAACA,KA4FEI,IAAkB9pN,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAEq/M,GAAa4I,EACf8B,EAyVV,SAAwB9B,GACtB,MAAM,YACJvJ,EAAW,YACXC,EAAW,KACXC,EAAI,MACJpkJ,EAAK,YACLqkJ,EAAW,SACXC,EACA1+J,SAAUthD,EAAI,MACd+4D,EAAK,MACL4jE,GACEwsF,EAWJ,MAAO,CACLnpN,OACA+4D,QACA4jE,QACAmlF,gBAbsB,CACtBlC,cACAC,cACAC,OACApkJ,QACAqkJ,cACAC,YASJ,CArXwBkL,CAAe/B,GACnCL,EAAsB,CAAEmC,cAAa1K,eACpC,CAACuI,EAAuBK,IAErBgC,IAAkBjqN,EAAAA,EAAAA,KAAY,KAClC,MAAM6pN,EA8XV,SAAwB5B,GACtB,MAAM,WACJxJ,EAAU,WAAEO,EAAU,OAAEC,EAAM,IAAEC,EAAG,eAAEC,EAAc,WAAEC,GACnD6I,GACGiC,EAAaC,GAAclL,EAAOjmI,MAAM,KAW/C,MAAO,CACLj/D,KAXW,CACX0kM,aACAO,aACAkL,cACAC,aACAjL,MACAryH,QAASsyH,EACTiL,IAAKhL,GAMT,CAhZwBiL,CAAepC,GACnCH,EAAoB,CAClB+B,kBAED,CAAC/B,EAAqBG,IAEnBr5G,IAAoB7qG,EAAAA,EAAAA,IAAgB,KACxC,OAAQqlI,GACN,KAAK+3E,EAAAA,GAAYI,aACftjG,GAAa,GACb6rG,KACA,MAEF,KAAK3I,EAAAA,GAAYM,SACf+G,GAAQrH,EAAAA,GAAYxB,UACpB,MAEF,KAAKwB,EAAAA,GAAYC,cACfoH,GAAQrH,EAAAA,GAAYmJ,iBACpB,MAEF,KAAKnJ,EAAAA,GAAYmJ,gBACf,GAAsB,KAAlBnC,EACF,OAGFlqG,GAAa,GACb8pG,EAAwB,CAAEvxG,SAAU2xG,IACpC,MAEF,KAAKhH,EAAAA,GAAYE,YACfpjG,GAAa,GACbgsG,KACA/B,EAAgB,CAAElqN,KAAM,0BAA2B29H,QAAS,KAC5D,MAEF,KAAKwlF,EAAAA,GAAYxB,SAAU,CACzB,GAAIS,EAGF,OAFAniG,GAAa,QACbuqG,GAAQrH,EAAAA,GAAY8B,gBAItB,GAAII,GAAMsF,YAAcpgJ,IAAc0/I,EAAalJ,SAGjD,OAFA9gG,GAAa,QACb6rG,KAIF,GACE7B,EAAaxI,qBACR+H,GAAsBA,GAAuB16L,KAAKC,MAAQ,IA5VvC,GA+VxB,YADAy7L,GAAQrH,EAAAA,GAAYmJ,iBAItB,IACGrC,EAAaxI,oBAEX0H,IAAmBT,KAAqBa,GACrCJ,IAAmBR,KAAoBW,GAI7C,YADAkB,GAAQrH,EAAAA,GAAYE,aAItB,MAAM,MAAExpJ,EAAK,MAAE4jE,EAAK,SAAEr7E,GAAa6nK,EAC7BsC,EAA2B3K,GAAS4K,mBAAqB/uF,GACzDmkF,GAAS6K,mBAAqB5yJ,GAC9B+nJ,GAAS8K,kBAAoBtqK,EAEnC,GAAKw/J,GAAS+K,6BAA+BpiJ,GAAcgiJ,EAEzD,YADA/B,GAAQrH,EAAAA,GAAYI,cAItB,GAAI3B,GAAS+K,6BAA+B1C,EAAalJ,UAAY6G,GAAiBvpN,OAEpF,YADAmsN,GAAQrH,EAAAA,GAAYM,UAItBxjG,GAAa,GACbyrG,KACA,KACF,OAIJ3uN,EAAAA,EAAAA,KAAU,IACDquI,IAAS+3E,EAAAA,GAAYmJ,iBACxB/xK,EAAAA,GAAAA,GAAyB,CAAE7oC,QAASk/F,UACpCzzG,GAEN,CAACyzG,GAAmBw6B,IAEpB,MAAMhzD,IAAmBp2E,EAAAA,EAAAA,KAAY,KACnCkoN,EAAgB,CACdlqN,KAAM,eAER86E,GAAiB,GACjB13E,MACC,CAACA,EAAS8mN,IAEP36I,IAAkBvtE,EAAAA,EAAAA,KAAY,KAClCwoN,GAAQp/E,IAAS+3E,EAAAA,GAAYmJ,gBAAkBnJ,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYxB,YACtF,CAAC6I,GAASp/E,IAEP3lI,IAAcvI,EAAAA,EAAAA,KAAQ,KAC1B,OAAQkuI,GACN,KAAK+3E,EAAAA,GAAYxB,SACf,OAAOplN,EAAQ,mBACjB,KAAK4mN,EAAAA,GAAYI,aACf,OAAOhnN,EAAQ,uBACjB,KAAK4mN,EAAAA,GAAYM,SACf,OAAOlnN,EAAQ,yBACjB,KAAK4mN,EAAAA,GAAYC,cACf,OAAO7mN,EAAQ,yBACjB,KAAK4mN,EAAAA,GAAYmJ,gBACf,OAAO/vN,EAAQ,gCACjB,KAAK4mN,EAAAA,GAAYE,YACf,OAAO9mN,EAAQ,mBACjB,KAAK4mN,EAAAA,GAAY8B,eACf,OAAO1oN,EAAQ,kCACjB,QACE,MAAO,MAEV,CAAC6uI,EAAM7uI,IAEJ0G,GAAamoI,IAAS+3E,EAAAA,GAAYxB,SACpCplN,EAAQ,qBAAqByqF,EAAAA,GAAAA,GAAuB+6H,GAAYH,EAASvhN,SAAU9D,EAAQk7D,OAC3Fh7D,EAAK,mBAwBT,GAAI4sN,EACF,OACE/qN,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAU,QACV2G,OAAQutD,EACR/sD,QAAS0lC,EACTj4B,oBAAqBunE,GAAiB35E,SAAA,EAEtCH,EAAAA,GAAAA,IAAA,KAAAG,SAAA,CAAG,yEAEA,KACDe,EAAAA,GAAAA,GAAA,SAAM,oDAGRA,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNpE,QAASwsC,EAAWrqC,SAEnBlC,EAAQ,aAOnB,MAAMqwN,GAhDN,WACE,GAAI71L,EACF,OAAO,EAGT,OAAQq0G,GACN,KAAK+3E,EAAAA,GAAYxB,SACf,OAAOrhN,QAAQshN,GAASW,YAAc1nI,EAExC,KAAKsoI,EAAAA,GAAYE,YACf,OAAO/iN,QACuB,KAA5B2pN,EAAaxJ,YACTmG,GAAkD,KAA5BqD,EAAajJ,YACf,KAArBiJ,EAAa/I,KACW,KAAxB+I,EAAahJ,QAGpB,QACE,OAAO,EAEb,CA4ByB4L,GAEzB,OACEvuN,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,WAAWsC,EAAAA,GAAAA,GAAe,eAAgBqjN,GAASkL,aAAe,aAClElqN,OAAQutD,EACR/sD,QAAS0lC,EACTj4B,oBAAqBunE,GAAiB35E,SAAA,EAEtCH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,SAASyD,IAAKnD,EAAQoD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC7De,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,eACVmJ,MAAM,cACNiR,OAAK,EACLpW,KAAK,UACL3D,QAAS8uI,IAAS+3E,EAAAA,GAAYxB,SAAW74K,EAAaymC,GACtDj5D,UAAU,QAAO7X,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAMsqI,IAAS+3E,EAAAA,GAAYxB,SAAW,QAAU,kBAExDniN,EAAAA,GAAAA,GAAA,MAAAf,SAAKgH,aAEGtI,IAATiuI,GACC5rI,EAAAA,GAAAA,GAAC8/B,GAAAA,GAAU,CACTx+B,KAAK,QACLy+B,UAAW6rG,EACXlQ,eAAa,EACb6xF,eAAgB5J,EAAAA,GAAY8B,eAAexmN,UAE3Ce,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,wBAAuBwC,SApT9C,SAA4BuuN,GAC1B,OAAQA,GACN,KAAK7J,EAAAA,GAAYxB,SACf,OACEniN,EAAAA,GAAAA,GAACmiN,GAAQ,CACPh+M,MAAO0hN,EAAM1hN,MACbuN,YAAam0M,EAAMn0M,YACnB5J,MAAO+9M,EAAM/9M,MACb02H,SAAUksF,EACVrI,eAAgBoI,EAAalJ,UAAY6G,EACrCqD,GAAkBrD,EAAiBqC,EAAalJ,eAChD5jN,EACJ4kN,WAAYA,GACZH,QAASA,EACTE,aAAcA,GACdM,iBAAkBA,EAClBF,mBAAoBA,EACpBV,UAAWyI,EAAazI,UACxBS,YAAa3hN,QAAQshN,GAAS+K,4BAC9BxK,iBAAkBA,EAClBtnI,cAAeA,EACfmnI,YAAalnI,EACbpe,QAASA,IAGf,KAAKymJ,EAAAA,GAAYC,cACf,OACE5jN,EAAAA,GAAAA,GAACkoN,GAAuB,CACtBlrJ,MAAOytJ,EACP9H,iBAAkBA,EAClBnkF,SAAUksF,EACVvC,eAAgB6D,KAGtB,KAAKrI,EAAAA,GAAYmJ,gBACf,OACE9sN,EAAAA,GAAAA,GAAC8lN,GAAe,CACd9oJ,MAAOytJ,EACP9H,iBAAkBA,EAClBoD,iBAAkB6E,EAClBpuN,SAAUgxN,IAAgB5hF,IAGhC,KAAK+3E,EAAAA,GAAYE,YACf,OACE7jN,EAAAA,GAAAA,GAAC6jN,GAAW,CACV7mJ,MAAOytJ,EACPjsF,SAAUksF,EACVvD,mBAAoBrmN,SAAS+kN,EAAM4H,mBAAqB5H,EAAMsB,oBAC9DC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACT/tJ,YAAaA,IAGnB,KAAKoqJ,EAAAA,GAAYI,aACf,OACE/jN,EAAAA,GAAAA,GAAC+jN,GAAY,CACX/mJ,MAAOytJ,EACPjsF,SAAUksF,EACVjI,YAAa3hN,QAAQshN,GAAS+K,4BAC9B7E,UAAWxnN,QAAQshN,GAAS4K,kBAAoB5K,GAASsL,uBACzDnF,UAAWznN,QAAQshN,GAAS6K,kBAAoB7K,GAASuL,uBACzDnF,SAAU1nN,QAAQshN,GAAS8K,iBAC3B3zJ,YAAaA,IAGnB,KAAKoqJ,EAAAA,GAAYM,SACf,OACEjkN,EAAAA,GAAAA,GAACikN,GAAQ,CACPjnJ,MAAOytJ,EACPjsF,SAAUksF,EACVtC,gBAAiBA,GAAmB,GACpCvnN,SAAUuhN,EAASvhN,WAGzB,KAAK8iN,EAAAA,GAAY8B,eACf,OACEzlN,EAAAA,GAAAA,GAACylN,GAAc,CACbpqM,IAAKguM,EACL3D,WAAY+D,EACZ9D,oBAAqByG,GACrBxoN,QAAS0lC,IAGf,QACE,OAEN,CA6NWskL,CAAmBhiF,QAIxB5rI,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gBAAewC,UAC5Be,EAAAA,GAAAA,GAAC4rB,GAAAA,EAAO,CAAChmB,MAAM,WAGlBmlN,KACC/qN,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,SAAQwC,UACrBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,cACV+D,KAAK,SACL1D,QAASs0G,GACTvrG,SAAUunN,GACV71L,UAAWA,EAAUt4B,SAEpBwE,OAIN2sD,IAAUA,EAAM86J,OAhXrB,WACE,GAAK96J,EAGL,OACEtxD,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,UAAU,QACV2G,OAAQtC,QAAQsvD,GAChBxsD,QAAS2nN,GAAsBtsN,SAAA,EAE/Be,EAAAA,GAAAA,GAAA,MAAAf,SAAKmxD,EAAMy9J,eAAiB5wN,EAAKq8G,YAAYlpD,EAAMy9J,gBAAkB5wN,EAAK,uBAC1E+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,sBAAqBwC,UAClCe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNpE,QAASmvN,GAAwBhtN,SAEhClC,EAAQ,YAKnB,CA2V8B+wN,UA8DhC,SAAShC,GAAmB1D,EAAmC2F,GAC7D,OAAO3F,EAAgB5oN,MAAK,EAAGiD,QAASA,IAAOsrN,GACjD,CAEA,SAAStC,GAAkBrD,EAAmCoD,GAC5D,MAAMztN,EAAS+tN,GAAmB1D,EAAiBoD,GACnD,OAAOztN,GAAQwmN,MACjB,CC3oBA,MAmEA,IAAejoN,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE86M,IAAY16M,EAAAA,EAAAA,KAAeJ,GAAQ+tD,QAE3C,MAAO,CACL+sJ,aALc/6M,EAnE4Bg7M,EAC9C7qN,SACAQ,UACAoqN,cAEA,MAAM/wN,GAAOC,EAAAA,GAAAA,MAENyzD,EAAatnB,EAAWC,IAAchsC,EAAAA,EAAAA,MAE7CC,EAAAA,EAAAA,KAAU,KACJ6F,GACFimC,MAED,CAACjmC,EAAQimC,IAEZ,MAAM6kL,GAAch4G,EAAAA,GAAAA,GAAY83G,GAC1BG,EAAmBH,GAAWE,EAE9B5L,GAAe5kN,EAAAA,EAAAA,KAAQ,KAC3B,GAAKywN,EACL,OAyDJ,SAAyBjL,EACvBxpL,EAKA2pL,GACA,IAAK3pL,EACH,MAAO,CAAEwpL,iBAEX,MAAM,gBAAEE,GAAoB1pL,EACtB00L,EAAchL,GAAiBlC,YACjC,GAAGkC,EAAgBlC,gBAAgBkC,EAAgBhC,SAASgC,EAAgB/B,mBAC5E1jN,GACE,MAAE08D,EAAK,KAAE/4D,GAASo4B,EACxB,MAAO,CACLwpL,gBACAE,gBAAiBgL,EACjB9sN,OACA+4D,QACAgpJ,iBAEJ,CA/EW0I,CAAgBoC,EAAiBE,iBAAkBF,EAAiBz0L,KAAMy0L,EAAiB9K,kBACjG,CAAC8K,IAEJ,OACEnuN,EAAAA,GAAAA,GAAC+D,EAAAA,EAAK,CACJtH,UAAU,oCACV2G,OAAQutD,EACR/sD,QAAS0lC,EACTj4B,oBAAqBzN,EAAQ3E,SAE5BkvN,IACCrvN,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKrC,UAAU,SAASyD,IAAKjD,EAAKkD,MAAQ,WAAQxC,EAAUsB,SAAA,EAC1De,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,eACVmJ,MAAM,cACNiR,OAAK,EACLpW,KAAK,UACL3D,QAASwsC,EACTxyB,UAAU,QAAO7X,UAEjBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,aAEbxC,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACG,IACAhC,EAAK,kBACL,WAGL+C,EAAAA,GAAAA,GAAA,OAAKvD,UAAU,gCAA+BwC,UAC5Ce,EAAAA,GAAAA,GAACmiN,GAAQ,CACPE,eAAgB8L,EAAiB9L,eACjCE,WAAY4L,EAAiBG,YAC7BtM,UAAWmM,EAAiBnM,UAC5BI,QAAS+L,EAAiB/L,QAC1BE,aAAcA,EACdn+M,MAAOgqN,EAAiBhqN,MACxBuN,YAAay8M,EAAiBz8M,YAC9B5J,MAAOqmN,EAAiBrmN,mBCrFtC,GAA4E,WAA5E,GAA+F,WCuM/F,IAAexL,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KAClB,CAACC,GAAUu3B,YAGF,CACL/2B,KAHW+2B,GAAOzjC,QAASurC,EAAAA,EAAAA,KAAWr/B,EAAQu3B,EAAMzjC,aAAUrJ,KAFhDsV,EAnKkCs7M,EACpD9jL,QACA/2B,WAEA,MAAM,mBAAE86M,EAAkB,wBAAEC,EAAuB,iBAAE/pL,IAAqBr+B,EAAAA,EAAAA,OACpE,aAAEqoN,GAAiBjkL,GAAS,CAAC,EAE7BxtC,GAAOD,EAAAA,EAAAA,MACNq0F,EAAmBs9H,IAAwBl9M,EAAAA,EAAAA,IAAmB,IAE/D+2B,GAAU9qC,EAAAA,EAAAA,KAAQ,IAAMgxN,GAAcxvN,KAAKmzC,GAASA,EAAK5vC,MAAOukC,GAAAA,GAAkB,CAAC0nL,KAClFE,EAAiBC,IAAiBnxN,EAAAA,EAAAA,KAAQ,KAC/C,IAAKgxN,GAAc7vN,OAAQ,MAAO,CAAC,GAAI,IACvC,MAAOiwN,EAAmBC,IAAclpF,EAAAA,GAAAA,IAAU6oF,GAAer8K,GAASA,EAAK28K,8BAC/E,MAAO,CAACF,EAAkB5vN,KAAKmzC,GAASA,EAAK5vC,KAAKssN,EAAW7vN,KAAKmzC,GAASA,EAAK5vC,QAC/E,CAACisN,IAEEO,GAA0BvxN,EAAAA,EAAAA,KAAQ,IAC/BgxN,GAAcluL,QAAQ6R,GAASA,EAAK68K,4BAA8B78K,EAAK28K,8BAC3E9vN,KAAKmzC,GAASA,EAAK5vC,MACrB,CAACisN,IAEES,GAAyBzxN,EAAAA,EAAAA,KAAQ,KACrC,GAAKgxN,EACL,OAAQA,EAAazjH,MAAM54D,GAASA,EAAK68K,6BAA+B78K,EAAK28K,gCAC5E,CAACN,IAEEU,GAAe1xN,EAAAA,EAAAA,KAAQ,KAC3B,MAAMgC,GAAQsxC,EAAAA,EAAAA,MAAYtxC,MAAMupC,KAChC,OAAOgmL,GAAyB/vN,KAAKuD,GAAO/C,EAAM+C,OACjD,CAACwsN,KAEJ1xN,EAAAA,EAAAA,KAAU,KACRoxN,EAAqBE,KACpB,CAACA,IAEJ,MAAM9wL,GAAcx3B,EAAAA,EAAAA,IAAgB,IAAMkoN,MAEpCY,GAAuB7sN,EAAAA,EAAAA,KAAY,KACvCgsN,EAAmB,CAAExnN,OAAQ0M,EAAMjR,GAAI+lC,QAAS6oD,IAChDo9H,MACC,CAACp9H,EAAmB39E,IAEjBi5H,GAAyBnqI,EAAAA,EAAAA,KAAY,KACzCkiC,MACC,IAEG4qL,GAAoB5xN,EAAAA,EAAAA,KAAQ,KAChC,GAAKgW,EACL,OAAO5S,QAAQ4S,GAAM0wG,WAAa1wG,GAAM29L,aAAahuF,eACpD,CAAC3vG,IAEE67M,GAAoB7xN,EAAAA,EAAAA,KAAQ,IACzB4xN,EACHryN,EAA8B,IAAzByxN,GAAc7vN,OAAe,0BAA4B,4BAC9D5B,EAAK,yBAA0ByxN,GAAc7vN,SAChD,CAACywN,EAAmBryN,EAAMyxN,GAAc7vN,SAErC2wN,GAAqB9xN,EAAAA,EAAAA,KAAQ,KACjC,IAAKuxN,GAAyBpwN,SAAWuwN,GAAcvwN,OAAQ,OAC/D,MAAM2rG,EAAS2kH,EAAyB,8BAAgC,uBACxE,IAAI5pL,EAAU,GAAGilE,OACbnjG,EAAS,EAAC4kC,EAAAA,EAAAA,IAAgBmjL,EAAa,KAgB3C,OAfuC,IAAnCH,EAAwBpwN,QAC1B0mC,EAAU,GAAGilE,OACbnjG,EAAS,EAAC4kC,EAAAA,EAAAA,IAAgBmjL,EAAa,KAAKnjL,EAAAA,EAAAA,IAAgBmjL,EAAa,MAC7B,IAAnCH,EAAwBpwN,QACjC0mC,EAAU,GAAGilE,SACbnjG,EAAS,EAAC4kC,EAAAA,EAAAA,IAAgBmjL,EAAa,KAAKnjL,EAAAA,EAAAA,IAAgBmjL,EAAa,KAAKnjL,EAAAA,EAAAA,IAAgBmjL,EAAa,MAClGH,EAAwBpwN,OAAS,IAC1C0mC,EAAU,GAAGilE,QACbnjG,EAAS,EACP4kC,EAAAA,EAAAA,IAAgBmjL,EAAa,KAC7BnjL,EAAAA,EAAAA,IAAgBmjL,EAAa,KAC5BH,EAAwBpwN,OAAS,GAAG2nF,aAIlCvpF,EAAKsoC,EAASl+B,OAAQ1J,EAAWyxN,EAAavwN,UACpD,CAACowN,EAAyBE,EAAwBlyN,EAAMmyN,IAErDK,EAAoB3uN,QAAQsuN,GAAcvwN,QAC1C6wN,EAAuB5uN,QAAQ+tN,GAAehwN,QAEpD,OACEC,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJX,OAAQtC,QAAQ0nC,GAAW90B,GAC3B5P,iBD3HoB,WC4HpBF,QAASm6B,EACTr4B,QAAM,EAAAzG,SAAA,EAENe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACL6V,OAAK,EACLjR,MAAM,cACNnF,KAAK,UACLhE,UDnI2C,WCoI3Cqa,UAAW7Z,EAAK,SAChBH,QAASihC,EAAY9+B,UAErBe,EAAAA,GAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAK,YAEZkuN,IACC1wN,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAACsxC,GAAAA,EAAU,CACT70C,UD5ImL,WC6InL80C,MAAO69K,EACP3uN,KAAK,WAEPT,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SACLhC,EAApBqyN,EAAyB,4BAAoC,qCAEhEtvN,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAmBC,UAC9B8B,EAAAA,GAAAA,GAAWyuN,EAAoB,CAAC,uBAEnCxvN,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLuE,qBAAmB,EACnB8/B,SAAO,EACP5kC,KAAK,UACL3D,QAAS6vI,EAAuB1tI,SAE/BhC,EAAK,sCAIXwyN,GAAqBC,IACpB1vN,EAAAA,GAAAA,GAACyE,GAAAA,EAAS,CAAChI,UDjKmG,WCiKvEwC,SACpChC,EAAK,4BAGTyyN,IACC5wN,EAAAA,GAAAA,IAAAgI,GAAAA,GAAA,CAAA7H,SAAA,EACEe,EAAAA,GAAAA,GAAA,MAAIvD,UAAWuC,GAAaC,SAAEhC,EAAK,yBACnC+C,EAAAA,GAAAA,GAAA,KAAGvD,UAAWuC,GAAmBC,SAC9BswN,KAEHvvN,EAAAA,GAAAA,GAAC8mC,GAAAA,EAAU,CACTrqC,UD5KkI,WC6KlIsqC,QAASyB,EACTrC,YAAakrD,EACbk1C,oBAAqBqoF,EACrBe,yBAA0B1yN,EAAK,4BAC/BsqC,oBAAqBonL,EACrBniI,YAAa8iI,EACb7nL,eAAa,EACbC,YAAU,EACVC,cAAc,aAEf2nL,IACCtvN,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UDzLyJ,WC0LzJgE,KAAK,UACL3D,QAASuyN,EACTxpN,UAAWwrF,EAAkBxyF,OAAOI,SAEnChC,EAAK,2C,gBC9LpB,MCwGA,IAAeX,EAAAA,EAAAA,KAhFWszN,EACxBnlL,YAEA,MAAM,uBACJolL,IACExpN,EAAAA,EAAAA,MAEEpJ,GAAOD,EAAAA,EAAAA,KACPmL,GAAUgmC,EAAAA,GAAAA,GAAiB1D,GAAOtiC,SAAS,IAE3C,aACJ8e,EAAY,qBACZE,IACEE,EAAAA,GAAAA,GAA4BvmB,QAAQ2pC,IAElCqlL,GAAkBvpN,EAAAA,EAAAA,IAAgB,SAIlCw3B,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClCspN,OAGF,IAAK5oM,IAAiB9e,EACpB,OAGF,MAAM4nN,GAAQC,EAAAA,EAAAA,IAAa7nN,GACrBo1D,GAAQuD,EAAAA,EAAAA,MAAY9vB,EAAAA,EAAAA,OACpBi/K,EAAwBhzN,EAAR8yN,EAAa,0BAAkC,oCAgCrE,OACEjxN,EAAAA,GAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,GAAAA,GDtFG,WCsFyBooB,GAAsBloB,SAAA,CA/BpE,WACE,IAAKkJ,GAASkP,QACZ,OAEF,MAAM,MAAE64M,EAAK,MAAEnoN,GAAUI,EAAQkP,QACjC,OAAI64M,GAEAlwN,EAAAA,GAAAA,GAACqzH,GAAAA,GAAK,CACJ52H,UD/D8G,WCgE9G8gE,MAAOA,EACPp1D,QAASA,EACTa,OAAQsqH,EAAAA,GAAY68F,aACpB9mM,UAAQ,EACRK,OAAQomM,EACRlmM,QAASmU,IAGJh2B,GAAOwF,SAEdvN,EAAAA,GAAAA,GAACowN,GAAAA,EAAU,CACT3zN,UD3EiI,WC4EjI0L,QAASA,EACTa,OAAO,eACPqnN,OAAQtyL,SANP,CAWT,CAIKuyL,IACDtwN,EAAAA,GAAAA,GAAA,OAAKvD,UDxFoJ,WCwF3HwC,UAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLmlD,OAAK,EACLrpD,QAASihC,EACT+pE,MAAI,EACJrnG,KAAK,UACLmF,MAAiB,SAAV23D,EAAmB,OAAS,YACnC9gE,UD/F2K,WC+FhJwC,SAE1BgxN,YCjBX,IAAe3zN,EAAAA,EAAAA,KA7DqCi0N,EAClDntN,aAEA,MAAMrG,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,GAAAA,MACP,mCAAEszN,EAAkC,iBAAE/zJ,IAAqBp2D,EAAAA,EAAAA,OAE1DoqN,EAAoBC,IAAyBj/M,EAAAA,EAAAA,KAAS,GAEvDib,GAAezd,EAAAA,EAAAA,MAEfrL,GAAUpB,EAAAA,EAAAA,KAAY,KAC1BguN,EAAmC,CAAEC,yBACpC,CAACA,IAEEzqL,GAAiBxjC,EAAAA,EAAAA,KAAY,KACjCi6D,EAAiB,CAAEk0J,wBAAwB,IAC3CH,EAAmC,CAAEC,yBACpC,CAACA,IAEEG,GAAwBpuN,EAAAA,EAAAA,KAAalE,KAC1B,IAAXA,GAAc0nC,MACjB,CAACA,IAEErd,GAAgB8iC,EAAAA,GAAAA,GAA0B/+B,EAActpB,EAAQwtN,EAAuB,WAE7F,OACE9xN,EAAAA,GAAAA,IAACiF,EAAAA,EAAK,CACJtH,WAAWsC,EAAAA,GAAAA,GAAe,WAC1BoF,MAAOlH,EAAK,iBACZmG,OAAQA,EACRQ,QAASA,EAAQ3E,SAAA,EAEjBe,EAAAA,GAAAA,GAAA,KAAAf,SAAIhC,EAAK,8BACT+C,EAAAA,GAAAA,GAACg0D,GAAAA,EAAQ,CACPv3D,UAAU,kBACVmK,MAAO3J,EAAK,iBACZquC,QAASmlL,EACTx8J,QAASy8J,KAEX5xN,EAAAA,GAAAA,IAAA,OACErC,UAAU,sBACV0b,IAAKuU,EACLigC,UAAWhkC,EAAc1pB,SAAA,EAEzBe,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UAAU,wBACVyE,QAAM,EACNpE,QAASkpC,EACTpgC,MAAM,SAAQ3G,SAEblC,EAAQ,cAEXiD,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CAACvE,UAAU,wBAAwByE,QAAM,EAACpE,QAAS8G,EAAQ3E,SAC/DlC,EAAQ,qBCuDnB,IAAeT,EAAAA,EAAAA,KAAK2W,EAAAA,EAAAA,KACjBC,IACC,MAAM29M,EAAkB39M,EAAOk/B,WAAWy+K,gBACpCC,EAAkB59M,EAAOk/B,WAAW0+K,gBACpCC,EAAkB79M,EAAO89M,mBAAoB1+K,EAAAA,EAAAA,KAAWp/B,EAAQA,EAAO89M,wBAAqBrzN,EAGlG,MAAO,CACLkzN,kBACAC,kBACAG,wBAL8BF,IAAmBx8D,EAAAA,EAAAA,IAAgBw8D,MALnD99M,EAlGOi+M,EACzBzmL,QACAomL,kBACAC,kBACAG,8BAEA,MAAM,wBACJE,EAAuB,QACvBr4L,IACEzyB,EAAAA,EAAAA,MACEpJ,GAAOC,EAAAA,GAAAA,KAEPkG,EAAStC,QAAQ2pC,GAEjB1M,GAAcx3B,EAAAA,EAAAA,IAAgB,KAClC4qN,OAGIC,GAAe7qN,EAAAA,EAAAA,IAAgB,KACnC4qN,IACIL,GACFh4L,EAAQ,CAAEzd,IAAKy1M,OAIbvtN,GAAS7F,EAAAA,EAAAA,KAAQ,KAEnBoB,EAAAA,GAAAA,IAAA,OAAKrC,UCzDc,WDyDWwC,SAAA,EAC5Be,EAAAA,GAAAA,GAACojG,GAAAA,EAAuB,CACtB3iG,KAAM,IACNmC,OAAQC,GAAAA,EAAewuN,WACvBruN,QAAM,KAERhD,EAAAA,GAAAA,GAAA,OAAKvD,UC/D+B,WD+DPwC,SAC1BhC,EAAK,iCAIX,CAACA,IAEEuG,GAAS9F,EAAAA,EAAAA,KAAQ,KACrB,GAAK0F,EACL,OACEtE,EAAAA,GAAAA,IAAA,OAAKrC,UCzEqD,WDyE5BwC,SAAA,EAC5Be,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLvE,UC3EgF,WD4EhFgE,KAAK,UACL3D,QAASs0N,EACTjwN,mBAAiB,EAAAlC,SAEhBhC,EAAK,mBAER+C,EAAAA,GAAAA,GAACgB,EAAAA,EAAM,CACLE,QAAM,EACNT,KAAK,UACL3D,QAASihC,EACT58B,mBAAiB,EAAAlC,SAEhBhC,EAAK,2BAIX,CAACA,EAAMmG,IAEV,IAAKytN,IAAoBI,EAAyB,OAElD,MAAMj7L,EAAO,IAAI1G,KAAuB,IAAlBuhM,GAEhBS,GACJtxN,EAAAA,GAAAA,GAACu5F,GAAAA,EAAI,CAACz8F,QAASs0N,EAAc53H,WAAS,EAAAv6F,UACnCqyH,EAAAA,GAAAA,GAAe2/F,KAId5tN,EAAe,CACnB,CAAC,YAAapG,EAAK,+BAAgCA,EAAK,mCACxD,CAAC,OAAQA,EAAK,8BAA+BA,EAAK,kCAClD,CAAC,cAAeA,EAAK,4BACnBA,EAAK,8BAA+B,CAClCq0N,UACAt7L,MAAMgiC,EAAAA,GAAAA,GAAmBhiC,EAAM/4B,EAAKg7D,OACnC,CACD/b,WAAW,MAIjB,OACEl8C,EAAAA,GAAAA,GAACmD,GAAAA,EAAe,CACdC,OAAQA,EACRG,OAAQA,EACRF,aAAcA,EACdG,OAAQA,EACRE,aAAW,EACXE,QAASm6B,O,8FE3Hf,SAAgB,KAAO,WAAW,IAAM,WAAW,MAAQ,WAAW,KAAO,Y,eC4B7E,MAiCA,GAAezhC,EAAAA,EAAAA,KAjCGuhE,EAChBl3D,KAAM4qN,EACNC,iBACAljG,aACAt1G,OACA2kD,YACAS,YACA3hE,YACAuhE,iBACAE,qBACAH,gBACAjhE,cAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACb,OACE4B,EAAAA,EAAAA,IAAA,OACErC,WAAWsC,EAAAA,EAAAA,GAAeC,EAAO+hC,KAAMjkC,GAAWkC,EAAOyyN,UAAWh1N,GACpEK,QAASA,EAAQmC,SAAA,EAEjBH,EAAAA,EAAAA,IAAA,OAAKrC,UAAWuC,EAAOwnB,IAAIvnB,SAAA,EACzBe,EAAAA,EAAAA,GAAC0G,EAAAA,EAAM,CAACjG,KAAM6tH,EAAY3nH,KAAM4qN,EAAYG,SAAUF,IACrD7zJ,IACC7+D,EAAAA,EAAAA,IAAA,OAAKrC,WAAWsC,EAAAA,EAAAA,GAAeC,EAAO2yN,MAAO3zJ,GAAiB99D,IAAKjD,EAAKkD,MAAQ,MAAQ,MAAMlB,SAAA,CAC3Fm/D,IAAap+D,EAAAA,EAAAA,GAACoB,EAAAA,EAAI,CAACE,KAAM88D,EAAW3hE,UAAWyhE,IAC/CP,QAIN3kD,IAAQhZ,EAAAA,EAAAA,GAAA,KAAGvD,WAAWsC,EAAAA,EAAAA,GAAeC,EAAOga,KAAM+kD,GAAe9+D,SAAE+Z,S","sources":["webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/util/events/getPointerPosition.ts","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +\n              {formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption))\n              && Boolean(perUserStarCount) && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","export default function getPointerPosition(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  if ('touches' in e) {\n    return {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n  }\n\n  return {\n    x: e.clientX,\n    y: e.clientY,\n  };\n}\n","import { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {Boolean(label) && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (textMessage.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({\n      message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n    }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    const peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(lang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={<FullNameTitle peer={peer} isSavedMessages={isSelf} />}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, lang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      if (user && !isDeletedUser(user)) return true;\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n\n      return chat && (!chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo));\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachBot, ApiBotAppSettings, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const activeWebAppName = activeWebApp?.appName;\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => { if (isActive) sendFullScreenChanged(value); },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = isTransforming ? 'pointer-events: none;' : '';\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSection, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {(fromUserStatusEmoji && !isGift) ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {getHeaderText()}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n      [lang('BoostingReason'), (\n        <span className={buildClassName(info.giveawayMessageId && styles.clickable)} onClick={handleOpenGiveaway}>\n          {info.isFromGiveaway && !info.toId ? lang('BoostingIncompleteGiveaway')\n            : lang(info.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingYouWereSelected')}\n        </span>\n      )],\n      [lang('BoostingDate'), formatDateTimeToString(info.date * 1000, lang.code, true)],\n    ] satisfies TableData;\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    showNotification({\n      message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n    });\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => peer?.id !== chat?.id && peer?.id !== linkedChatId) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => peer.id !== linkedChatId && peer.id !== currentUserId);\n  }, [peerList, currentUserId, linkedChatId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => peer.id !== currentUserId && peer.id !== linkedChatId);\n  }, [peerList, currentUserId, linkedChatId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam || !peerIdsToDeleteAll || !peerIdsToBan) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {\n              peerIdsToBan && canBanUsers ? (\n                <ListItem\n                  narrow\n                  buttonClassName={styles.button}\n                  onClick={toggleAdditionalOptions}\n                >\n                  {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                  <Icon\n                    name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                    className={buildClassName(styles.button, 'ml-2')}\n                  />\n                </ListItem>\n              ) : setIsAdditionalOptionsVisible(false)\n            }\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadContentSettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat, chatFullInfo) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n  disallowedGifts,\n  isAccountFrozen,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat));\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      chat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen, shouldSuggestCompression]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","_jsxs","buildClassName","styles","children","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","optionTop","formatInteger","_jsx","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","Boolean","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","id","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","getPointerPosition","e","x","touches","clientX","y","clientY","PickerModal","confirmButtonText","isConfirmDisabled","shouldAdaptToSearch","withFixedHeight","onConfirm","withPremiumGradient","modalProps","hasButton","isSlim","headerClassName","color","disabled","TableInfoModal","tableData","headerAvatarPeer","modalHeader","withBalanceBar","isLowStackPriority","openChat","getActions","handleOpenChat","useLastCallback","peerId","hasCloseButton","Avatar","peer","label","value","_Fragment","PeerChip","chatId","forceShowSelf","withEmojiStatus","clickArg","getViewableMedia","params","media","mediaIndex","isSingle","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","onCloseAnimationEnd","reportProfilePhoto","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","target","REPORT_OPTIONS","onEnter","RadioGroup","onChange","selected","InputText","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","stopPropagation","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","updateMousePosition","checkMousePositionAndToggleControls","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","inactive","leftElement","isShiny","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isSavedMessages","avatarElement","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","setSearch","priorityIds","isDeletedUser","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isForwarding","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","activeWebAppName","appName","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundColor","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","perMonthPrice","price","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","PremiumLogo","template","first","second","emoji","thumbCustomEmojiId","link","getHeaderText","statusText","entities","statusEntities","renderFooterText","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winnerCountOptions","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","subLabelClassName","formatDateTimeToString","boosts","RangeSliderWithMarks","rangeCount","marks","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","mockPeer","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","isFromGiveaway","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","getHasAdminRight","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","isAdmin","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","isNaN","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","readOnly","canChangeChargeForMessages","mainClassName","number","formatStarsAsText","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","openStarsBalanceModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","FAQ_URL","PRIVACY_URL","renderTextFilters","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","senderName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","form","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","avatarPeer","avatarWebPhoto","clickable","webPhoto","badge"],"sourceRoot":""}